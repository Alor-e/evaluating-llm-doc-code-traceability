{
  "dataset": "unity_catalog",
  "run_id": 2,
  "timestamp": "2025-02-12T14:01:54.107109",
  "results": [
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 48,
      "artifact_title": "TableCli.listTables",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation snippet describes a method `listTables` that lists tables under a specified catalog and schema which matches the behavior of the `TableCli.listTables` method in the code artifact. The parameters described such as `catalog_name`, `schema_name`, `max_results`, and `page_token` are handled in the TableCli.listTables method indicating the implementation of the documented functionality.",
      "predicted_trace_chain": "TablesApi.md -> TableCli.listTables",
      "predicted_trace_chain_explanation": "The `TablesApi.md` documentation outlines the functionality and parameters for listing tables, which is implemented by the `TableCli.listTables` method directly responsible for invoking this functionality in the CLI environment.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 53,
      "artifact_title": "TableRepository.listTables",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The code logic described in the `TableCli.listTables` method would eventually interact with the repository layer to fetch the table data, which is managed by `TableRepository.listTables`. The repository method processes the parameters as described in the documentation.",
      "predicted_trace_chain": "TablesApi.md -> TableCli.listTables -> TableRepository.listTables",
      "predicted_trace_chain_explanation": "The logic for listing tables described in `TablesApi.md` is implemented by `TableCli.listTables` and subsequently relies on the `TableRepository.listTables` method to perform the actual data fetching from the data store, thus forming a complete architectural trace.",
      "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 57,
      "artifact_title": "TableService.listTables",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "As part of the server-side processing of listing tables, `TableService.listTables` is likely to be invoked by the CLI to manage HTTP requests and responses, mapping request parameters to repository calls.",
      "predicted_trace_chain": "TablesApi.md -> TableCli.listTables -> TableService.listTables",
      "predicted_trace_chain_explanation": "The `TablesApi.md` functionality is initiated by `TableCli.listTables`, which through network interaction would typically call `TableService.listTables` to handle service-level concerns and interact with the persistence layer.",
      "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 41,
      "artifact_title": "SchemaService.deleteSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation for the 'deleteSchema' function specifies the deletion of a schema, matching the HTTP DELETE operation defined in the SchemaService.deleteSchema artifact. This operation directly correlates with the documentation's intent of deleting a schema by name, optionally via force.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
      "predicted_trace_chain_explanation": "The documentation describes the 'deleteSchema' functionality as deleting a schema, which aligns with the method SchemaService.deleteSchema responsible for processing HTTP DELETE requests to remove a schema by its full name.",
      "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 36,
      "artifact_title": "SchemaRepository.deleteSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The artifact SchemaRepository.deleteSchema performs the actual operation to delete a schema entry from the database. This aligns with the documentation's description of schema deletion functionality. It is likely called by the SchemaService.deleteSchema to fulfill the removal of the schema entity.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
      "predicted_trace_chain_explanation": "SchemaService.deleteSchema acts as an intermediary, handling the HTTP request and likely invoking SchemaRepository.deleteSchema to execute the data operation of removing the schema, as described in the documentation.",
      "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.deleteSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 2,
      "artifact_title": "CatalogCli.getCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method 'getCatalog' from CatalogCli is explicitly implementing the functionality described in the documentation by getting the specified catalog.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
      "predicted_trace_chain_explanation": "The documentation in 'CatalogsApi.md' references a method to get a catalog, which is implemented by 'CatalogCli.getCatalog'.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 8,
      "artifact_title": "CatalogRepository.getCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The 'CatalogRepository.getCatalog' method is likely used by 'CatalogCli.getCatalog', although not explicitly mentioned in the documentation snippet, it forms part of the underlying repository access to fetch catalog details.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog -> CatalogRepository.getCatalog",
      "predicted_trace_chain_explanation": "The 'CatalogCli.getCatalog' method needs to access repository methods to retrieve catalog details, linking to 'CatalogRepository.getCatalog'.",
      "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 13,
      "artifact_title": "CatalogService.getCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "provides",
      "relationship_explanation": "The 'CatalogService.getCatalog' exposes service-level access to the catalog retrieval capability, aligning with the documented API behavior.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog -> CatalogService.getCatalog",
      "predicted_trace_chain_explanation": "The chain represents the service layer providing the functionality down to CLI interaction, aligning with the API's documented objective.",
      "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogInfoDAO",
      "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 3,
      "artifact_title": "CatalogCli.listCatalogs",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method `CatalogCli.listCatalogs` is likely implementing the functionality described in the documentation snippet as it is responsible for listing catalogs, consistent with the documented behavior of returning a list with optional parameters `page_token` and `max_results`.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
      "predicted_trace_chain_explanation": "The documentation describes a functionality for listing catalogs, which matches the purpose of the `CatalogCli.listCatalogs` method, linking the two as a pathway from documented functionality to implementation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 9,
      "artifact_title": "CatalogRepository.listCatalogs",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The `CatalogRepository.listCatalogs` method is involved in the backend process of retrieving the list of catalogs, as mentioned in the usage of `ListCatalogsResponse`. This directly connects to what's outlined in the documentation, managing database interactions necessary to fulfill the listing request.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogRepository.listCatalogs",
      "predicted_trace_chain_explanation": "To implement the functionality of listing catalogs, `CatalogCli.listCatalogs` likely utilizes `CatalogRepository.listCatalogs`. This chain of operations in the systems links the documentation to code handling persistence, ensuring retrieval from the database.",
      "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 14,
      "artifact_title": "CatalogService.listCatalogs",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The `CatalogService.listCatalogs` manages the HTTP service request corresponding to the 'listCatalogs' function, which corresponds to the RESTful API documentation described.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
      "predicted_trace_chain_explanation": "The service layer method `CatalogService.listCatalogs` processes API requests, serving as the intermediary between client calls described in the documentation and the repository layer, facilitating the listing of catalogs.",
      "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 54,
      "artifact_title": "TableService.createTable",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes an API for creating a table, which aligns with the method `TableService.createTable`. This method in the implementation handles the creation of tables by invoking the repository's create method, fitting the described functionality.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
      "predicted_trace_chain_explanation": "The documentation in TablesApi.md details the API for table creation, which is implemented by `TableService.createTable`, a necessary step for translating the API call into server-side logic.",
      "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 50,
      "artifact_title": "TableRepository.createTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The method `TableRepository.createTable` implements the logic to interact with the data store for creating a table, directly supporting the operation described in the documentation.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
      "predicted_trace_chain_explanation": "The API outlined in TablesApi.md is handled by `TableService.createTable`, which passes the request to `TableRepository.createTable` to perform the actual data storage actions, a critical back-end operation in the chain.",
      "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableInfoDAO",
      "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
      "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.createTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 54,
      "artifact_title": "TableService.createTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method **createTable** in the TablesApi documentation corresponds explicitly to the method `createTable` in the `TableService` class, which creates a table as mentioned in the documentation with the POST /tables request.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
      "predicted_trace_chain_explanation": "The TablesApi documentation explicitly outlines a function to create tables. `TableService.createTable` implements this functionality by processing the HTTP POST request, thereby acting as the endpoint described.",
      "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 55,
      "artifact_title": "TableService.deleteTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly describes a **deleteTable** operation, which is implemented by the `deleteTable` method in `TableService` using DELETE /tables/{full_name} as detailed.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
      "predicted_trace_chain_explanation": "The delete operation in TablesApi is handled by `TableService.deleteTable`, directly executing the deletion logic corresponding to the described DELETE method for tables.",
      "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 56,
      "artifact_title": "TableService.getTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The function **getTable** from the TablesApi documentation is implemented by `getTable` in `TableService`, performing the GET /tables/{full_name} request to retrieve a table's information.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
      "predicted_trace_chain_explanation": "The API documentation specifies retrieving table details, which `TableService.getTable` fulfills as the corresponding service implementation.",
      "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 57,
      "artifact_title": "TableService.listTables",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The **listTables** function in the TablesApi documentation is explicitly matched by `listTables` in `TableService`, which implements the operation via GET /tables.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
      "predicted_trace_chain_explanation": "Listing tables as described in TablesApi is achieved by `TableService.listTables`, processing the GET request to fetch the list of tables.",
      "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableRepository.deleteTable",
      "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.listTables",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableRepository.getTable",
      "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableRepository.createTable",
      "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.getTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.deleteTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableRepository.listTables",
      "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.createTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 25,
      "artifact_title": "FunctionService.createFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method 'FunctionService.createFunction' directly handles the 'CreateFunctionRequest', creating a function and returning 'FunctionInfo'. This matches the documentation's description of 'createFunction' that takes a 'CreateFunctionRequest' and returns a 'FunctionInfo'.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
      "predicted_trace_chain_explanation": "The 'FunctionsApi.md' documentation describes an endpoint that creates a function using 'CreateFunctionRequest', which directly relates to 'FunctionService.createFunction' that implements this functionality, processing the 'CreateFunctionRequest' and returning a 'FunctionInfo' object.",
      "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 21,
      "artifact_title": "FunctionRepository.createFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "Although not directly mentioned in the documentation, 'FunctionRepository.createFunction' is used by 'FunctionService.createFunction' to persist the newly created function, as part of the workflow described, connecting the service layer with the data layer.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
      "predicted_trace_chain_explanation": "The route 'FunctionService.createFunction' leads to using 'FunctionRepository.createFunction' to actually create and persist the function in the repository, fulfilling the contract described for creating a function and returning the 'FunctionInfo'.",
      "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionInfoDAO",
      "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionCli.createFunction",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 21,
      "artifact_title": "FunctionRepository.createFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation for `createFunction` in the FunctionsApi refers to the creation of a function via an HTTP POST request. The method `FunctionRepository.createFunction` implements the logic necessary to create a function, aligning with the description.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionRepository.createFunction",
      "predicted_trace_chain_explanation": "The documentation directly mentions creating a function, which is implemented by `createFunction` in `FunctionRepository`.",
      "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 22,
      "artifact_title": "FunctionRepository.deleteFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The function documentation specifies a DELETE method to remove a function by name. The method `FunctionRepository.deleteFunction` implements this functionality, aligning with the documentation\u2019s description.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionRepository.deleteFunction",
      "predicted_trace_chain_explanation": "The documentation directly talks about deleting a function, which is performed by `deleteFunction` in `FunctionRepository`.",
      "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 23,
      "artifact_title": "FunctionRepository.getFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The 'getFunction' API documentation corresponds to retrieving function details via an HTTP GET request. The `FunctionRepository.getFunction` method implements getting a specific function's details.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionRepository.getFunction",
      "predicted_trace_chain_explanation": "Retrieving a function is documented and implemented by `getFunction` in `FunctionRepository`.",
      "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 24,
      "artifact_title": "FunctionRepository.listFunctions",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation mentions listing functions via an HTTP GET request. The method `FunctionRepository.listFunctions` is responsible for listing available functions.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionRepository.listFunctions",
      "predicted_trace_chain_explanation": "Listing functions is documented and executed by `listFunctions` in `FunctionRepository`.",
      "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionCli.deleteFunction",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionService.listFunctions",
      "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionCli.listFunctions",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionCli.getFunction",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionCli.createFunction",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionService.createFunction",
      "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionService.deleteFunction",
      "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionService.getFunction",
      "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 59,
      "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method `generateTemporaryVolumeCredentials` is explicitly mentioned in the documentation as part of the TemporaryVolumeCredentialsApi. The method's responsibility according to the documentation is to 'Generate temporary volume credentials', which matches the role of `TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials` in the code.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_trace_chain_explanation": "The documentation for the API describes an endpoint that generates temporary volume credentials, directly referencing the `generateTemporaryVolumeCredentials` method. This method in the `TemporaryVolumeCredentialsService` class implements this functionality, linking the documented API endpoint to its implementation in the code.",
      "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
      "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 38,
      "artifact_title": "SchemaRepository.listSchemas",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation snippet refers to a method `listSchemas` that returns `ListSchemasResponse` and mentions parameters matching the method signature provided in SchemaRepository.listSchemas.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaRepository.listSchemas",
      "predicted_trace_chain_explanation": "The `SchemasApi.md` documentation describes the `listSchemas` method which matches the functionality and signature of `SchemaRepository.listSchemas`, implementing the API's described behavior.",
      "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 43,
      "artifact_title": "SchemaService.listSchemas",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not directly mentioned, `SchemaService.listSchemas` is necessary to serve the endpoint described in the documentation, as it interfaces with the `SchemaRepository.listSchemas` to execute the actual listing process.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaRepository.listSchemas -> SchemaService.listSchemas",
      "predicted_trace_chain_explanation": "The documentation mentions an API operation which likely corresponds to an HTTP service method that uses `SchemaRepository.listSchemas`. Thus, `SchemaService.listSchemas` would be part of the processing path, using the repository implementation to perform the functionality.",
      "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.listSchemas",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 35,
      "artifact_title": "SchemaRepository.createSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes a method `createSchema` which corresponds directly to the method `SchemaRepository.createSchema` as it handles the creation logic of a new schema in the specified catalog.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaRepository.createSchema",
      "predicted_trace_chain_explanation": "The document SchemasApi.md describes the API operation `createSchema` which is implemented by the method `SchemaRepository.createSchema`. This is the backend implementation that performs the actual schema creation process in the repository layer.",
      "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 40,
      "artifact_title": "SchemaService.createSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "Although not directly mentioned in the documentation, `SchemaService.createSchema` implicitly relates as a service layer call that utilizes the repository method `SchemaRepository.createSchema` to execute the schema creation process exposed by the API.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
      "predicted_trace_chain_explanation": "The API call detailed in SchemasApi.md would likely invoke `SchemaService.createSchema`, which is responsible for calling the repository method to handle the business logic for schema creation, reflecting the API's operations in a service layer.",
      "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaInfoDAO",
      "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.createSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 24,
      "artifact_title": "FunctionRepository.listFunctions",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation snippet describes a method for listing functions, mentioning parameters like 'catalog_name', 'schema_name', 'max_results', and 'page_token'. The 'FunctionRepository.listFunctions' method explicitly implements this operation by accepting the same parameters and returning a 'ListFunctionsResponse'.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionRepository.listFunctions",
      "predicted_trace_chain_explanation": "The 'FunctionsApi.md' documentation file lists out the API endpoint 'listFunctions' with specific parameters. This description directly maps to the 'FunctionRepository.listFunctions' method, which implements the described functionality by interacting with the data layer to retrieve function information given the catalog and schema constraints.",
      "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 28,
      "artifact_title": "FunctionService.listFunctions",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The 'FunctionService.listFunctions' method implicitly relates to the documentation as it calls 'FunctionRepository.listFunctions' to execute the logic that the API documentation describes, organizing the response into a format suitable for HTTP responses.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionRepository.listFunctions -> FunctionService.listFunctions",
      "predicted_trace_chain_explanation": "Starting from 'FunctionsApi.md', the 'listFunctions' endpoint is implemented in 'FunctionRepository.listFunctions', and then utilized in 'FunctionService.listFunctions' to further process and expose the function data as an HTTP response, completing the trace from documentation through implementation to the service layer.",
      "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionCli.listFunctions",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 52,
      "artifact_title": "TableRepository.getTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method 'getTable' is explicitly mentioned in the documentation to retrieve a table for a specific catalog and schema. The 'TableRepository.getTable' method implements this functionality by processing the 'full_name' argument to retrieve the 'TableInfo' object.",
      "predicted_trace_chain": "TablesApi.md -> TableRepository.getTable",
      "predicted_trace_chain_explanation": "The 'TablesApi.md' documentation describes the endpoint to get a table using the method 'getTable'. This is directly implemented by the 'TableRepository.getTable' method which is responsible for handling the retrieval logic.",
      "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 56,
      "artifact_title": "TableService.getTable",
      "predicted_relationship": "explicit",
      "relationship_type": "uses",
      "relationship_explanation": "The 'getTable' function in the 'TablesApi.md' documentation is represented in the code by 'TableService.getTable', which uses 'TableRepository.getTable' to implement the API endpoint.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
      "predicted_trace_chain_explanation": "The documentation for the Tables API describes an endpoint for 'getTable', which corresponds to the implementation of the API logic in the 'TableService.getTable' method.",
      "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableInfoDAO",
      "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
      "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.getTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 55,
      "artifact_title": "TableService.deleteTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation for the 'deleteTable' operation explicitly describes deleting a table, which is directly implemented in the method 'TableService.deleteTable'. This method handles the deletion of a table identified by its full name.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
      "predicted_trace_chain_explanation": "The documentation for 'deleteTable' provides an overview of the function which is directly implemented in the 'TableService.deleteTable' method, following the REST API pattern for resource deletion.",
      "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 51,
      "artifact_title": "TableRepository.deleteTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The deletion process described in the documentation is likely supported by lower-layer operations, such as the 'TableRepository.deleteTable' method. Although not mentioned directly, this repository method uses a transaction to remove TableInfoDAO objects, aligning with the functionality required to delete a table from a catalog and schema.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "predicted_trace_chain_explanation": "The 'deleteTable' API is serviced by 'TableService.deleteTable', which executes the lower-level 'TableRepository.deleteTable' to perform the actual data removal operation.",
      "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.deleteTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 42,
      "artifact_title": "SchemaService.getSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes the \"getSchema\" function with a signature 'getSchema(full_name)', which matches the method '@Get(\"/{full_name}\") public HttpResponse getSchema' in the SchemaService.java implementation. This method implements the described functionality of retrieving a schema by its full name.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
      "predicted_trace_chain_explanation": "The documentation specifies API behavior, and the 'SchemaService.getSchema' method is the server-side implementation that directly fulfills the behavior described in the 'SchemasApi.md' documentation.",
      "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 37,
      "artifact_title": "SchemaRepository.getSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The 'SchemaService.getSchema' method relies on 'SCHEMA_REPOSITORY.getSchema' to retrieve the schema information from the database, which is internally used to fulfill the API's purpose.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
      "predicted_trace_chain_explanation": "The chain explains the flow from the API documentation to its implementation in the 'SchemaService.getSchema' and further to its usage of 'SchemaRepository.getSchema' for data retrieval. This step-by-step resolution traces how the API request eventually fetches the schema details from the repository layer.",
      "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaInfoDAO",
      "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.getSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 17,
      "artifact_title": "FunctionCli.deleteFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation snippet describes a method `deleteFunction(name)` that deletes a function based on its fully-qualified name. This matches the `FunctionCli.deleteFunction` method in the code, which handles the deletion of a function by accepting the function's fully-qualified name and invoking `functionsApi.deleteFunction(functionFullName)`. The explanation aligns with the snippet's definition and purpose.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
      "predicted_trace_chain_explanation": "FunctionsApi.md documentation specifies a delete operation for functions, which is directly implemented through FunctionCli.deleteFunction. This pathway provides the implementation details for the described functionality, linking the documented API operation to the CLI command handling deletion based on function's name.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 22,
      "artifact_title": "FunctionRepository.deleteFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "Although not explicitly detailed in the documentation snippet, `FunctionRepository.deleteFunction` underlies the actual persistence operation corresponding to deleting a function by its name. It is logically inferred as an implicit part of the operation stack that serves the API documented by confirming the action takes place at the repository level.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction -> FunctionRepository.deleteFunction",
      "predicted_trace_chain_explanation": "The FunctionsApi.md documentation interfaces with FunctionCli.deleteFunction for deleting a function. The underlying persistence logic facilitating this operation exists in FunctionRepository.deleteFunction. Each component in the trace chain builds upon the previous: the API layer requires CLI logic, which in turn depends on the repository layer to complete the action.",
      "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 26,
      "artifact_title": "FunctionService.deleteFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The `FunctionService.deleteFunction` is involved in handling HTTP requests to delete functions by their names. The documentation specifies a function deletion operation without detailing intermediaries. It implicitly involves routing these requests to the service logic, hence, linking to `FunctionService.deleteFunction`.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction -> FunctionService.deleteFunction",
      "predicted_trace_chain_explanation": "Within this chain, the API documentation conveys a deletion operation initiated in CLI logic, which is routed and processed at a higher abstraction level by FunctionService.deleteFunction. The chain illustrates transitioning from user-oriented API descriptions through command handling to broader service operation.",
      "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 44,
      "artifact_title": "SchemaService.updateSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes the 'updateSchema' method, which corresponds directly to the 'SchemaService.updateSchema' method defined in the codebase. It specifically updates a schema using a full name and an instance of 'UpdateSchema', which matches the method signature in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
      "predicted_trace_chain_explanation": "The method 'updateSchema' is prominently defined in both the documentation and the code artifact listed as 'SchemaService.updateSchema'. The documentation specifies the method signature and its behavior, providing the starting point in the document, and is completed in the 'SchemaService.updateSchema' implementation.",
      "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 39,
      "artifact_title": "SchemaRepository.updateSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not directly mentioned in the snippet, 'SchemaRepository.updateSchema' is likely used within the 'SchemaService.updateSchema' method to handle actual data updates, as service classes typically delegate such tasks to repository classes.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
      "predicted_trace_chain_explanation": "The implicit relationship is deduced from the common architecture pattern where a service calls into a repository to handle persistence logic. Starting with the documentation outlining the service method and culminating in the repository method that would be used to perform the actual update.",
      "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaInfoDAO",
      "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.updateSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 59,
      "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method `generateTemporaryVolumeCredentials` in `TemporaryVolumeCredentialsService` directly corresponds to the documentation's `generateTemporaryVolumeCredentials` API method, which generates temporary volume credentials. The method name, described parameters, and expected functionality match explicitly.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_trace_chain_explanation": "The documentation directly describes a function to generate temporary volume credentials, which is implemented by the `generateTemporaryVolumeCredentials` method in `TemporaryVolumeCredentialsService`. This connection is explicit and requires no intermediate steps since the method's purpose is clearly outlined in the documentation.",
      "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
      "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 58,
      "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation snippet refers explicitly to the `generateTemporaryTableCredentials` method for creating temporary table credentials, which matches the functionality described in the code artifact `TemporaryTableCredentialsService.generateTemporaryTableCredentials`.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_trace_chain_explanation": "The chain connects the API documentation directly to the implementation method in the service which handles the HTTP POST request to generate temporary credentials.",
      "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
      "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 0,
      "artifact_title": "CatalogCli.createCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The 'createCatalog' method in the documentation corresponds directly to 'CatalogCli.createCatalog', which implements the functionality of creating a catalog through a POST HTTP request as described.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
      "predicted_trace_chain_explanation": "The documentation outlines a POST method to create a catalog, which directly maps to the 'CatalogCli.createCatalog' method for implementation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 1,
      "artifact_title": "CatalogCli.deleteCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The 'deleteCatalog' method in the documentation matches 'CatalogCli.deleteCatalog', which implements the specified DELETE operation for removing a catalog.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
      "predicted_trace_chain_explanation": "The DELETE HTTP request in the documentation directly corresponds to the 'CatalogCli.deleteCatalog' implementation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 2,
      "artifact_title": "CatalogCli.getCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The 'getCatalog' method mentioned in the documentation is implemented by 'CatalogCli.getCatalog', handling the retrieval of catalog details through a GET request.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
      "predicted_trace_chain_explanation": "The GET /catalogs/{name} request documented aligns with 'CatalogCli.getCatalog', which executes this functionality.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 3,
      "artifact_title": "CatalogCli.listCatalogs",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The 'listCatalogs' function in the documentation corresponds with 'CatalogCli.listCatalogs', executing the catalog listing functionality using GET as described.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
      "predicted_trace_chain_explanation": "The GET /catalogs method outlined corresponds directly to the 'CatalogCli.listCatalogs' for implementation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 4,
      "artifact_title": "CatalogCli.updateCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The 'updateCatalog' method from the documentation is implemented by 'CatalogCli.updateCatalog', executing catalog updates via a PATCH HTTP request.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
      "predicted_trace_chain_explanation": "The PATCH /catalogs/{name} described in the documentation directly maps to 'CatalogCli.updateCatalog', responsible for performing updates.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogService.getCatalog",
      "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogService.deleteCatalog",
      "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.addCatalog",
      "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.deleteCatalog",
      "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.getCatalog",
      "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogService.listCatalogs",
      "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogService.updateCatalog",
      "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.listCatalogs",
      "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogService.createCatalog",
      "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.updateCatalog",
      "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 12,
      "artifact_title": "CatalogService.deleteCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes the `deleteCatalog` operation, specifying parameters and behavior that match the `CatalogService.deleteCatalog` method, which deletes a catalog given its name and includes a force option for deletion.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
      "predicted_trace_chain_explanation": "The method `deleteCatalog` in `CatalogService` directly implements the functionality described in the `CatalogsApi.md` documentation for the `deleteCatalog` operation.",
      "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 7,
      "artifact_title": "CatalogRepository.deleteCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While the documentation does not mention how the deletion is performed internally, `CatalogService.deleteCatalog` likely calls `CatalogRepository.deleteCatalog` to perform the actual database operation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
      "predicted_trace_chain_explanation": "The documentation describes a high-level API operation; `CatalogService.deleteCatalog` implements this by invoking `CatalogRepository.deleteCatalog`, which performs the underlying database deletion.",
      "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogCli.deleteCatalog",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 23,
      "artifact_title": "FunctionRepository.getFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The 'getFunction' operation in the documentation is about retrieving a function based on its fully-qualified name. The 'FunctionRepository.getFunction' method directly implements this by using the name to retrieve 'FunctionInfo' objects from the catalog and schema, providing the core functionality described.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionRepository.getFunction",
      "predicted_trace_chain_explanation": "The FunctionsApi documentation describes the requirement to retrieve a function by its full name, which is exactly what the 'FunctionRepository.getFunction' method implements by using the name to locate the function within the specified catalog and schema.",
      "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 27,
      "artifact_title": "FunctionService.getFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The 'FunctionService.getFunction' method is implicitly described by its role in translating the HTTP request into an action performed by 'FunctionRepository.getFunction'. The service layer facilitates the API call described in the FunctionsApi.md.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionRepository.getFunction -> FunctionService.getFunction",
      "predicted_trace_chain_explanation": "The FunctionsApi documentation defines retrieving a function, which 'FunctionRepository.getFunction' implements. 'FunctionService.getFunction' uses this repository method to process HTTP requests for this functionality, completing the trace from high-level API definition to service execution.",
      "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionInfoDAO",
      "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionCli.getFunction",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 60,
      "artifact_title": "VolumeCli.createVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method `createVolume` in `VolumeCli` directly corresponds to the `createVolume` operation described in the documentation for VolumesApi, matching the HTTP POST method used to create a volume.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
      "predicted_trace_chain_explanation": "The documentation `VolumesApi.md` describes the `createVolume` API method, which is implemented by the `VolumeCli.createVolume` method which directly handles HTTP POST requests for volume creation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 61,
      "artifact_title": "VolumeCli.deleteVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method `deleteVolume` in `VolumeCli` relates to the `deleteVolume` API endpoint that uses the DELETE HTTP method to remove a volume, as described in the documentation.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
      "predicted_trace_chain_explanation": "The `VolumesApi.md` documentation specifies the `deleteVolume` endpoint, implemented by `VolumeCli.deleteVolume`, which processes DELETE requests for volume removal.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 62,
      "artifact_title": "VolumeCli.getVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The `getVolume` method in `VolumeCli` explicitly aligns with the documented GET request for `getVolume` to retrieve a volume, reflecting its purpose in the API.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
      "predicted_trace_chain_explanation": "The document `VolumesApi.md` outlines the `getVolume` API method, with `VolumeCli.getVolume` implementing the GET request functionality to fetch volume details.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 63,
      "artifact_title": "VolumeCli.listVolumes",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The `listVolumes` method is explicitly related to the `listVolumes` API endpoint in the documentation, which uses a GET request to list all volumes.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
      "predicted_trace_chain_explanation": "The `listVolumes` action is detailed in `VolumesApi.md`, and is executed by `VolumeCli.listVolumes`, handling GET requests to enumerate volumes.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 64,
      "artifact_title": "VolumeCli.updateVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The `updateVolume` method in `VolumeCli` corresponds to the `updateVolume` operation in the document, which uses PATCH to update volume information.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
      "predicted_trace_chain_explanation": "The `VolumesApi.md` document outlines the `updateVolume` API, with `VolumeCli.updateVolume` implementing the necessary PATCH request to modify volume details.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeRepository.createVolume",
      "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeService.updateVolume",
      "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeService.createVolume",
      "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeService.deleteVolume",
      "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeRepository.deleteVolume",
      "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeRepository.updateVolume",
      "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeService.getVolume",
      "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeRepository.getVolume",
      "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeService.listVolumes",
      "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeRepository.listVolumes",
      "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 70,
      "artifact_title": "VolumeRepository.updateVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation snippet explicitly mentions updating a volume's name or comment. The method `VolumeRepository.updateVolume` implements this functionality in the backend.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.updateVolume",
      "predicted_trace_chain_explanation": "The document describes the updateVolume function, which is directly implemented by the `VolumeRepository.updateVolume` method, responsible for handling the update of volume information in the data layer.",
      "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 75,
      "artifact_title": "VolumeService.updateVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The `VolumeService.updateVolume` method is implicitly involved as it likely uses `VolumeRepository.updateVolume` to perform the update operation described in the documentation.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
      "predicted_trace_chain_explanation": "The `VolumeService.updateVolume` exposes the update functionality as a service endpoint and uses `VolumeRepository.updateVolume` for the actual data modification. The service layer acts as an intermediary to translate HTTP requests into repository actions.",
      "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeInfoDAO",
      "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.updateVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 68,
      "artifact_title": "VolumeRepository.getVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly defines a method 'getVolume' that retrieves a volume based on a fully qualified name, directly correlating with the implementation in 'VolumeRepository.getVolume' where a method with similar logic retrieves a volume object using a full name.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.getVolume",
      "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the retrieval of volume data through 'getVolume', which is implemented in the 'VolumeRepository.getVolume' method. The method in the repository provides the logic to fulfill the API's promises, processing the 'name' parameter to fetch the desired volume.",
      "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 73,
      "artifact_title": "VolumeService.getVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While the documentation describes the 'getVolume' operation at a high level, 'VolumeService.getVolume' is an intermediary that orchestrates the API call through to the repository. This service method invokes the repository method and manages the HTTP response, aligning with the API description.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.getVolume -> VolumeService.getVolume",
      "predicted_trace_chain_explanation": "The documentation from VolumesApi.md describes the functionality that ends in the 'VolumeRepository.getVolume' method's implementation. To execute this functionality via an API endpoint, 'VolumeService.getVolume' is engaged to handle the HTTP aspects and call the repository method, completing the API's operational pathway.",
      "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeInfoDAO",
      "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.getVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 29,
      "artifact_title": "SchemaCli.createSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions the 'createSchema' function as part of the SchemasApi documentation where it describes the HTTP POST request to create a schema.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
      "predicted_trace_chain_explanation": "The documentation in SchemasApi.md explicitly refers to the method 'createSchema' which is directly implemented in SchemaCli.createSchema, thus creating a straightforward pathway.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 30,
      "artifact_title": "SchemaCli.deleteSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly lists the 'deleteSchema' method under HTTP DELETE requests for removing a schema, which corresponds to the implementation in SchemaCli.deleteSchema.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
      "predicted_trace_chain_explanation": "Direct mention and implementation of 'deleteSchema' in SchemasApi.md corresponds to SchemaCli.deleteSchema.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 31,
      "artifact_title": "SchemaCli.getSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation mentions 'getSchema', associated with an HTTP GET request, which is implemented in SchemaCli.getSchema for fetching schema details.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
      "predicted_trace_chain_explanation": "Schematic pathway from the documented 'getSchema' functionality in SchemasApi.md to its implementation in SchemaCli.getSchema.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 32,
      "artifact_title": "SchemaCli.listSchemas",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "Described in the documentation as supporting a GET request to list schemas, the 'listSchemas' function is implemented in SchemaCli.listSchemas.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
      "predicted_trace_chain_explanation": "Clear linkage from SchemasApi.md's documentation of 'listSchemas' to its implementation in SchemaCli.listSchemas.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 33,
      "artifact_title": "SchemaCli.updateSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The 'updateSchema' method, documented as a PATCH request to modify schema attributes, is implemented in SchemaCli.updateSchema.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
      "predicted_trace_chain_explanation": "Direct trace from the documentation reference to 'updateSchema' in SchemasApi.md to its corresponding implementation in SchemaCli.updateSchema.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaRepository.listSchemas",
      "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaRepository.updateSchema",
      "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaRepository.deleteSchema",
      "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaRepository.getSchema",
      "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaService.createSchema",
      "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaService.listSchemas",
      "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaRepository.createSchema",
      "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaService.updateSchema",
      "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaService.getSchema",
      "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaService.deleteSchema",
      "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 11,
      "artifact_title": "CatalogService.createCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method `createCatalog` in the documentation explicitly corresponds to `CatalogService.createCatalog` which implements the creation of a catalog as described. The operation involves a POST request that aligns with the documented HTTP request headers accepting and producing `application/json`.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
      "predicted_trace_chain_explanation": "The documentation in `CatalogsApi.md` describes the `createCatalog` feature, indicating its implementation through a service method that processes HTTP requests matching the provided structure, culminating in the service's `createCatalog` method which processes and returns a `CatalogInfo` object.",
      "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 6,
      "artifact_title": "CatalogRepository.addCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The `CatalogService.createCatalog` method relies on `CatalogRepository.addCatalog` to interact with the database, thus implicitly linking the repository function to the described catalog creation feature.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
      "predicted_trace_chain_explanation": "The implementation detail in `CatalogService.createCatalog` points to `CatalogRepository.addCatalog` for fulfilling the persistence layer requirement, demonstrating a typical service pattern where service layers call upon repository layers to manage data operations.",
      "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 5,
      "artifact_title": "CatalogInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "data-model",
      "relationship_explanation": "The result of the catalog creation operation is a `CatalogInfo` object, which maps to the `CatalogInfoDAO` in the data layer, implying this DAO is used to map data to and from the database.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogInfoDAO",
      "predicted_trace_chain_explanation": "`CatalogInfoDAO` captures, through ORM, the data aspect of created catalogs, supporting the structure seen in the return type of the service method described in the documentation. It closes the trace path of service to data layer mappings.",
      "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogCli.createCatalog",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 69,
      "artifact_title": "VolumeRepository.listVolumes",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation for 'listVolumes' in 'VolumesApi.md' directly describes a method that retrieves a list of volumes by interacting with the data storage layer, which corresponds to the 'VolumeRepository.listVolumes' method, responsible for handling retrieval from the database.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.listVolumes",
      "predicted_trace_chain_explanation": "The documentation outlines the parameters and behavior expected for listing volumes, which 'VolumeRepository.listVolumes' implements by querying the database and returning a list that matches this description.",
      "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 74,
      "artifact_title": "VolumeService.listVolumes",
      "predicted_relationship": "explicit",
      "relationship_type": "uses",
      "relationship_explanation": "Given the 'listVolumes' endpoint description in 'VolumesApi.md', 'VolumeService.listVolumes' uses the repository layer to serve the API request by processing and responding to incoming HTTP requests according to the documented API.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
      "predicted_trace_chain_explanation": "The pathway starts from the API definition, which guides the behavior of the service as it interacts with the repository to fulfill the request for volume data.",
      "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 63,
      "artifact_title": "VolumeCli.listVolumes",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While 'VolumesApi.md' describes the behavior of listing volumes, 'VolumeCli.listVolumes' implicitly uses this functionality as part of a CLI that might invoke the API or service to conform with the described behavior.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
      "predicted_trace_chain_explanation": "Even though CLI specifics aren't documented, the method aligns with the doc's objective of listing volumes, presumably making API calls or utilizing service logic to achieve the required data retrieval.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 61,
      "artifact_title": "VolumeCli.deleteVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes a function 'deleteVolume' which is responsible for deleting a volume given its fully qualified name. The 'VolumeCli.deleteVolume' method in the CLI implements this functionality, matching the action described in the documentation.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
      "predicted_trace_chain_explanation": "The documentation in VolumesApi.md defines the 'deleteVolume' operation, which maps directly to the implementation in 'VolumeCli.deleteVolume', where the method executes the deletion operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 72,
      "artifact_title": "VolumeService.deleteVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "Although not directly mentioned, the 'VolumeService.deleteVolume' method handles incoming requests to delete a volume. It uses the volume name parameter specified in the documentation to call the necessary repository methods to manage the removal of the volume.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume -> VolumeService.deleteVolume",
      "predicted_trace_chain_explanation": "The chain starts with the documented API call in VolumesApi.md, which flows into the CLI implementation with 'VolumeCli.deleteVolume'. This CLI eventually interfaces with 'VolumeService.deleteVolume' for backend logic and processing of the deletion.",
      "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 67,
      "artifact_title": "VolumeRepository.deleteVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "Within the service layer, 'VolumeService.deleteVolume' invokes 'VolumeRepository.deleteVolume' to perform the physical deletion in the repository. This relationship is inferred as part of the logical application flow from API documentation to database interaction.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
      "predicted_trace_chain_explanation": "The API documentation in VolumesApi.md specifies deletion functionality, which is initiated by 'VolumeCli.deleteVolume', passed through 'VolumeService.deleteVolume', and ultimately handled in the database by 'VolumeRepository.deleteVolume'. This represents a complete trace from API definition to database operation.",
      "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 10,
      "artifact_title": "CatalogRepository.updateCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The document snippet describes a method 'updateCatalog' which updates a catalog matching the supplied name, returning a 'CatalogInfo'. The method 'CatalogRepository.updateCatalog' implements this functionality as it takes a catalog name and an UpdateCatalog object to update the catalog details, matching the details described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogRepository.updateCatalog",
      "predicted_trace_chain_explanation": "The 'updateCatalog' method in the documentation directly refers to the method 'CatalogRepository.updateCatalog' which is tasked with carrying out the update operation on a catalog using the provided name and UpdateCatalog object.",
      "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 4,
      "artifact_title": "CatalogCli.updateCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The CLI method 'CatalogCli.updateCatalog' uses the update operation by interacting with the 'CatalogsApi'. This is indirectly related to the documented functionality as it serves as a CLI interface to trigger the update operation described in the API documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
      "predicted_trace_chain_explanation": "While not directly mentioned in the document snippet, 'CatalogCli.updateCatalog' is part of the larger system using 'CatalogRepository.updateCatalog' to perform the update operation, therefore creating an implicit trace to the documentation that describes this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 15,
      "artifact_title": "CatalogService.updateCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The document mentions an HTTP operation for 'updateCatalog' which matches to the 'CatalogService.updateCatalog', handling the HTTP request to update a catalog. This matches the API descriptions and ties the documentation to this method.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
      "predicted_trace_chain_explanation": "The 'CatalogService.updateCatalog' method is responsible for processing HTTP requests that perform catalog updates, directly implementing the API operation detailed in the document.",
      "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogInfoDAO",
      "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 71,
      "artifact_title": "VolumeService.createVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation snippet describes a function `createVolume` that creates a new volume using a parameter of type `CreateVolumeRequestContent`. The `VolumeService.createVolume` method in available artifacts matches this functionality as it implements the creation of a volume, accepting a parameter of the same type.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
      "predicted_trace_chain_explanation": "The documentation `VolumesApi.md` specifies the functionality of creating a volume, which is implemented by the `VolumeService.createVolume` method. This forms a direct trace from documentation to code implementation.",
      "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 66,
      "artifact_title": "VolumeRepository.createVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "used by",
      "relationship_explanation": "The `VolumeRepository.createVolume` method is indirectly connected because it is the method actually responsible for interacting with the database to store the new volume created by the `VolumeService.createVolume` method.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
      "predicted_trace_chain_explanation": "After `VolumeService.createVolume` receives a `CreateVolumeRequestContent`, it involves `VolumeRepository.createVolume` to handle the storage and persistence of the volume data, thus completing the action described in the documentation.",
      "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeInfoDAO",
      "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.createVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 58,
      "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method 'TemporaryTableCredentialsService.generateTemporaryTableCredentials' is explicitly designed to implement the functionality described in the documentation snippet. This is evident from the method name which directly matches the function described: 'GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials' in the documentation.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_trace_chain_explanation": "The 'TemporaryTableCredentialsApi.md' documentation outlines the purpose and behavior of the 'generateTemporaryTableCredentials' method. 'TemporaryTableCredentialsService.generateTemporaryTableCredentials' is the exact implementation of this API endpoint, thereby providing the actual behavior described in the documentation.",
      "ground_truth_relationship": "The code implements the documented API endpoint by checking if a table exists at a storage location, then either generating AWS S3 temporary credentials or returning empty credentials for local filesystems, matching the documented GenerateTemporaryTableCredentialResponse return type.",
      "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    }
  ]
}