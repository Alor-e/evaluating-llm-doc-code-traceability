{
  "dataset": "unity_catalog",
  "run_id": 2,
  "timestamp": "2025-02-12T15:03:07.505404",
  "results": [
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 57,
      "artifact_title": "TableService.listTables",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes the 'listTables' operation, which is implemented by the TableService.listTables method. The method signature matches the documented parameters: catalog_name, schema_name, max_results, and page_token. It also returns a ListTablesResponse object as specified in the documentation.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
      "predicted_trace_chain_explanation": "The documentation in TablesApi.md directly describes the listTables operation, which is implemented by the TableService.listTables method.",
      "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 53,
      "artifact_title": "TableRepository.listTables",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the TableService.listTables method likely delegates the actual table listing operation to TableRepository.listTables. This repository method handles the database interaction to retrieve the list of tables based on the provided parameters.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
      "predicted_trace_chain_explanation": "The documentation describes the listTables operation, which is implemented in TableService.listTables. This service method likely uses TableRepository.listTables to perform the actual data retrieval.",
      "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 31,
      "artifact_title": "ListTablesResponse",
      "predicted_relationship": "explicit",
      "relationship_type": "returns",
      "relationship_explanation": "The documentation explicitly states that the listTables operation returns a ListTablesResponse object. This is the data structure that encapsulates the list of tables and potentially pagination information.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> ListTablesResponse",
      "predicted_trace_chain_explanation": "The documentation specifies ListTablesResponse as the return type. TableService.listTables implements this by returning an instance of ListTablesResponse.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 49,
      "artifact_title": "TableInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the TableInfoDAO is likely used internally by TableRepository.listTables to map database records to TableInfo objects, which are then included in the ListTablesResponse.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables -> TableInfoDAO",
      "predicted_trace_chain_explanation": "The listTables operation described in the documentation is implemented by TableService.listTables, which uses TableRepository.listTables. This repository method likely uses TableInfoDAO to map database records to TableInfo objects.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.listTables",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 0,
      "artifact_title": "CatalogCli.createCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the createCatalog functionality described in the documentation. The documentation states 'POST /catalogs | Create a catalog', which directly corresponds to the createCatalog method in the CatalogCli class.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogCli.createCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the CatalogService, which uses the CatalogRepository to persist the data, and finally the CatalogCli provides the command-line interface for this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 1,
      "artifact_title": "CatalogCli.deleteCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the deleteCatalog functionality described in the documentation. The documentation states 'DELETE /catalogs/{name} | Delete a catalog', which directly corresponds to the deleteCatalog method in the CatalogCli class.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog -> CatalogCli.deleteCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the CatalogService, which uses the CatalogRepository to delete the data, and finally the CatalogCli provides the command-line interface for this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 2,
      "artifact_title": "CatalogCli.getCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the getCatalog functionality described in the documentation. The documentation states 'GET /catalogs/{name} | Get a catalog', which directly corresponds to the getCatalog method in the CatalogCli class.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogCli.getCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the CatalogService, which uses the CatalogRepository to retrieve the data, and finally the CatalogCli provides the command-line interface for this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 3,
      "artifact_title": "CatalogCli.listCatalogs",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the listCatalogs functionality described in the documentation. The documentation states 'GET /catalogs | List catalogs', which directly corresponds to the listCatalogs method in the CatalogCli class.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogCli.listCatalogs",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the CatalogService, which uses the CatalogRepository to retrieve the list of catalogs, and finally the CatalogCli provides the command-line interface for this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 4,
      "artifact_title": "CatalogCli.updateCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the updateCatalog functionality described in the documentation. The documentation states 'PATCH /catalogs/{name} | Update a catalog', which directly corresponds to the updateCatalog method in the CatalogCli class.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogCli.updateCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the CatalogService, which uses the CatalogRepository to update the data, and finally the CatalogCli provides the command-line interface for this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 11,
      "artifact_title": "CatalogService.createCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the server-side logic for the createCatalog functionality described in the documentation. The documentation states 'POST /catalogs | Create a catalog', which directly corresponds to the createCatalog method in the CatalogService class.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the CatalogService in the server.",
      "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 12,
      "artifact_title": "CatalogService.deleteCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the server-side logic for the deleteCatalog functionality described in the documentation. The documentation states 'DELETE /catalogs/{name} | Delete a catalog', which directly corresponds to the deleteCatalog method in the CatalogService class.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the CatalogService in the server.",
      "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 13,
      "artifact_title": "CatalogService.getCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the server-side logic for the getCatalog functionality described in the documentation. The documentation states 'GET /catalogs/{name} | Get a catalog', which directly corresponds to the getCatalog method in the CatalogService class.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the CatalogService in the server.",
      "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 14,
      "artifact_title": "CatalogService.listCatalogs",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the server-side logic for the listCatalogs functionality described in the documentation. The documentation states 'GET /catalogs | List catalogs', which directly corresponds to the listCatalogs method in the CatalogService class.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the CatalogService in the server.",
      "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 15,
      "artifact_title": "CatalogService.updateCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the server-side logic for the updateCatalog functionality described in the documentation. The documentation states 'PATCH /catalogs/{name} | Update a catalog', which directly corresponds to the updateCatalog method in the CatalogService class.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the CatalogService in the server.",
      "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.deleteCatalog",
      "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.listCatalogs",
      "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.addCatalog",
      "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.updateCatalog",
      "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.getCatalog",
      "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 44,
      "artifact_title": "SchemaService.updateSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes the 'updateSchema' operation, which is implemented by the SchemaService.updateSchema method. The method signature matches the documented parameters: it takes a 'full_name' (String) and an 'UpdateSchema' object, and returns a SchemaInfo object.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
      "predicted_trace_chain_explanation": "The documentation in SchemasApi.md directly describes the updateSchema operation, which is implemented by the SchemaService.updateSchema method.",
      "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 39,
      "artifact_title": "SchemaRepository.updateSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the SchemaRepository.updateSchema method is likely used by SchemaService.updateSchema to perform the actual update operation on the schema data. This is inferred from the typical service-repository pattern in software architecture.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
      "predicted_trace_chain_explanation": "The documentation describes the updateSchema operation, which is implemented by SchemaService.updateSchema. This service method likely uses SchemaRepository.updateSchema to perform the actual data update.",
      "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 34,
      "artifact_title": "SchemaInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The SchemaInfoDAO is likely used in the process of updating the schema, as it represents the data access object for schema information. It's implicitly involved in the update process, though not directly mentioned in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema -> SchemaInfoDAO",
      "predicted_trace_chain_explanation": "The updateSchema operation described in the documentation is implemented by SchemaService, which uses SchemaRepository, which in turn likely uses SchemaInfoDAO for data access and manipulation.",
      "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.updateSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 54,
      "artifact_title": "TableService.createTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes the 'createTable' operation, which is implemented by the TableService.createTable method. The method signature matches the documented API, taking a CreateTable object as input and returning a TableInfo object.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
      "predicted_trace_chain_explanation": "The API documentation directly maps to the TableService implementation.",
      "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 50,
      "artifact_title": "TableRepository.createTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, TableRepository.createTable is likely used by TableService.createTable to perform the actual table creation operation in the database.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
      "predicted_trace_chain_explanation": "The API call is handled by TableService, which then uses TableRepository to perform the actual database operation.",
      "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 49,
      "artifact_title": "TableInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The TableInfoDAO is likely used internally to convert between the TableInfo model and the database representation, though not explicitly mentioned in the documentation.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable -> TableInfoDAO",
      "predicted_trace_chain_explanation": "The creation process likely involves converting the input to a DAO for database operations.",
      "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
      "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 45,
      "artifact_title": "TableCli.createTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not mentioned in the server-side API documentation, TableCli.createTable likely provides a command-line interface that ultimately calls this API.",
      "predicted_trace_chain": "TablesApi.md -> TableCli.createTable -> TableService.createTable",
      "predicted_trace_chain_explanation": "The CLI would provide a user interface that ultimately calls the server API.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 6,
      "artifact_title": "CatalogRepository.addCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes creating a new catalog instance, which is likely implemented by the CatalogRepository.addCatalog method. This method takes a CreateCatalog object and returns a CatalogInfo object, matching the parameters and return type described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is likely implemented by the CatalogService, which in turn uses the CatalogRepository to perform the actual catalog creation.",
      "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 11,
      "artifact_title": "CatalogService.createCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes the createCatalog operation, which is explicitly implemented by this method. It takes a CreateCatalog object as a parameter and returns a CatalogInfo object, matching the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
      "predicted_trace_chain_explanation": "The API documentation directly describes the functionality implemented by this service method.",
      "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 5,
      "artifact_title": "CatalogInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The documentation mentions returning a CatalogInfo object, which is likely represented by the CatalogInfoDAO in the persistence layer. This DAO would be used to create and retrieve catalog information from the database.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogInfoDAO",
      "predicted_trace_chain_explanation": "The API call would be handled by the service, which uses the repository to perform the operation, which in turn uses the DAO to interact with the database.",
      "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogCli.createCatalog",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 41,
      "artifact_title": "SchemaService.deleteSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the deleteSchema operation described in the documentation. It takes the same parameters 'full_name' and 'force' as mentioned in the API documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
      "predicted_trace_chain_explanation": "The documentation in SchemasApi.md directly describes the deleteSchema operation, which is implemented by the SchemaService.deleteSchema method.",
      "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 36,
      "artifact_title": "SchemaRepository.deleteSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, this method is likely called by SchemaService.deleteSchema to perform the actual deletion of the schema from the repository.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in SchemaService.deleteSchema, which in turn would use SchemaRepository.deleteSchema for the actual deletion logic.",
      "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 34,
      "artifact_title": "SchemaInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "This class represents the database entity for a schema. It's likely used in the deletion process, although not explicitly mentioned in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema -> SchemaInfoDAO",
      "predicted_trace_chain_explanation": "The deletion process described in the API would flow through the service and repository, ultimately interacting with the SchemaInfoDAO to remove the schema from the database.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.deleteSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 73,
      "artifact_title": "VolumeService.getVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes a 'getVolume' operation that takes a 'name' parameter and returns a 'VolumeInfo' object. This closely matches the signature and functionality of the VolumeService.getVolume method.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
      "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the getVolume operation, which is implemented by the VolumeService.getVolume method.",
      "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 68,
      "artifact_title": "VolumeRepository.getVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "used by",
      "relationship_explanation": "While not explicitly mentioned, the VolumeRepository.getVolume method is likely used by VolumeService.getVolume to retrieve the volume information from the data store.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
      "predicted_trace_chain_explanation": "The API documentation describes the getVolume operation, which is implemented in VolumeService.getVolume. This service method likely uses VolumeRepository.getVolume to fetch the actual data.",
      "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "data model",
      "relationship_explanation": "The VolumeInfoDAO class is likely used to represent the volume data in the repository layer, which is then converted to the VolumeInfo object mentioned in the documentation.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The API describes returning a VolumeInfo object. The service calls the repository, which likely uses VolumeInfoDAO to interact with the database before converting to VolumeInfo.",
      "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.getVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 58,
      "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This artifact directly implements the generateTemporaryTableCredentials functionality described in the documentation. The method signature matches the documented API call, taking a GenerateTemporaryTableCredential parameter and returning a GenerateTemporaryTableCredentialResponse.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TemporaryTableCredentialsService class in the server code.",
      "ground_truth_relationship": "The code implements the documented API endpoint by checking if a table exists at a storage location, then either generating AWS S3 temporary credentials or returning empty credentials for local filesystems, matching the documented GenerateTemporaryTableCredentialResponse return type.",
      "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 27,
      "artifact_title": "GenerateTemporaryTableCredential",
      "predicted_relationship": "explicit",
      "relationship_type": "uses",
      "relationship_explanation": "The documentation explicitly mentions GenerateTemporaryTableCredential as a parameter for the API call. This model is used to pass the necessary information to generate temporary table credentials.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> GenerateTemporaryTableCredential",
      "predicted_trace_chain_explanation": "The API documentation specifies the use of GenerateTemporaryTableCredential, which is then used as a parameter in the service implementation.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 28,
      "artifact_title": "GenerateTemporaryTableCredentialResponse",
      "predicted_relationship": "explicit",
      "relationship_type": "returns",
      "relationship_explanation": "The documentation explicitly states that the API call returns a GenerateTemporaryTableCredentialResponse. This model represents the structure of the response containing the generated temporary credentials.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> GenerateTemporaryTableCredentialResponse",
      "predicted_trace_chain_explanation": "The API documentation specifies the return type as GenerateTemporaryTableCredentialResponse, which is then used as the return type in the service implementation.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 52,
      "artifact_title": "TableRepository.getTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the implementation of generateTemporaryTableCredentials likely needs to retrieve table information to generate the credentials. This method would be used to fetch the necessary table details.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable",
      "predicted_trace_chain_explanation": "To generate temporary credentials for a table, the service needs to first retrieve the table information, which is done using the TableRepository.getTable method.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 72,
      "artifact_title": "VolumeService.deleteVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly describes a 'deleteVolume' operation that takes a 'name' parameter, which directly corresponds to the 'VolumeService.deleteVolume' method. The method signature matches the described operation, taking a 'fullName' parameter which is described in the documentation as 'The three-level (fully qualified) name of the volume'.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
      "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the deleteVolume operation, which is implemented by the VolumeService.deleteVolume method.",
      "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 67,
      "artifact_title": "VolumeRepository.deleteVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeService.deleteVolume method likely calls VolumeRepository.deleteVolume to perform the actual deletion of the volume from the data store. This is inferred from the typical service-repository pattern in software architecture.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
      "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is implemented in VolumeService.deleteVolume. This service method would typically call VolumeRepository.deleteVolume to perform the actual data operation.",
      "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The VolumeInfoDAO is likely used internally by the VolumeRepository.deleteVolume method to interact with the database and remove the volume entry. While not explicitly mentioned in the documentation, it's a crucial part of the deletion process.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The API documentation leads to the service method, which uses the repository method. The repository method would interact with the VolumeInfoDAO to perform the actual database operations for deleting the volume.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 61,
      "artifact_title": "VolumeCli.deleteVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the API documentation, the VolumeCli.deleteVolume method is likely the command-line interface implementation that would call the API described in this documentation. It's part of the client-side implementation that interacts with the server-side API.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume -> VolumeService.deleteVolume",
      "predicted_trace_chain_explanation": "The API documentation describes the operation that would be invoked by the CLI method VolumeCli.deleteVolume, which in turn would call the server-side VolumeService.deleteVolume method.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 58,
      "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the generateTemporaryTableCredentials functionality described in the API documentation. The documentation states 'Generate temporary table credentials.' which is exactly what this method does.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TemporaryTableCredentialsService class in the server code.",
      "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
      "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 52,
      "artifact_title": "TableRepository.getTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The generateTemporaryTableCredentials method likely needs to retrieve table information to generate credentials. This is done using the getTable method from TableRepository.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable",
      "predicted_trace_chain_explanation": "To generate temporary credentials for a table, the service first needs to retrieve the table information, which is done using the TableRepository's getTable method.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 22,
      "artifact_title": "FunctionRepository.getFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes a 'getFunction' operation that takes a 'name' parameter and returns a 'FunctionInfo' object. This matches the signature and return type of the FunctionRepository.getFunction method.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be implemented by a service layer (FunctionService), which in turn would use the repository layer (FunctionRepository) to fetch the data.",
      "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 27,
      "artifact_title": "FunctionService.getFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned, the FunctionService.getFunction method would likely be the service layer implementation of the documented API endpoint, acting as an intermediary between the API and the repository.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be implemented by the FunctionService, serving as an intermediary between the API controller and the data access layer (FunctionRepository).",
      "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 20,
      "artifact_title": "FunctionInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "used by",
      "relationship_explanation": "The documentation mentions returning a FunctionInfo object. FunctionInfoDAO would likely be used internally to represent the function data before converting to the FunctionInfo return type.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionInfoDAO",
      "predicted_trace_chain_explanation": "The API documentation describes returning FunctionInfo, which would be created from data stored in the database, represented by FunctionInfoDAO in the data access layer.",
      "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionCli.getFunction",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 1,
      "artifact_title": "CatalogCli.deleteCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the deleteCatalog operation described in the documentation. It takes the same parameters (name and force) and performs the deletion of a catalog.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
      "predicted_trace_chain_explanation": "The documentation directly describes the deleteCatalog operation, which is implemented by the CatalogCli.deleteCatalog method.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 7,
      "artifact_title": "CatalogRepository.deleteCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, this method is likely used by CatalogCli.deleteCatalog to perform the actual deletion of the catalog in the repository.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog -> CatalogRepository.deleteCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the deleteCatalog operation, which is implemented by CatalogCli.deleteCatalog, which in turn likely uses CatalogRepository.deleteCatalog for the actual deletion.",
      "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 12,
      "artifact_title": "CatalogService.deleteCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "This service method likely implements the HTTP endpoint for deleting a catalog, matching the documentation's description of the operation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the deleteCatalog operation, which is likely exposed as an HTTP endpoint by CatalogService.deleteCatalog, which then uses CatalogRepository.deleteCatalog for the actual deletion.",
      "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 71,
      "artifact_title": "VolumeService.createVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes a 'createVolume' operation that takes a CreateVolumeRequestContent parameter and returns a VolumeInfo object. This directly corresponds to the VolumeService.createVolume method, which implements this functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
      "predicted_trace_chain_explanation": "The API documentation directly describes the createVolume operation, which is implemented by the VolumeService.createVolume method.",
      "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 66,
      "artifact_title": "VolumeRepository.createVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeService.createVolume method likely uses the VolumeRepository.createVolume method to persist the volume data.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
      "predicted_trace_chain_explanation": "The API documentation describes the createVolume operation, which is implemented by VolumeService.createVolume. This service method likely uses VolumeRepository.createVolume to handle the actual data persistence.",
      "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The VolumeInfoDAO is likely used internally to map between the VolumeInfo object (mentioned in the return type) and the database representation of a volume.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The API describes creating a volume, which is implemented by the service, uses the repository for persistence, and the repository likely uses VolumeInfoDAO for object-relational mapping.",
      "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.createVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 43,
      "artifact_title": "SchemaService.listSchemas",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The SchemaService.listSchemas method directly implements the listSchemas operation described in the documentation. It takes the same parameters (catalog_name, max_results, page_token) and returns a ListSchemasResponse object as specified in the API documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
      "predicted_trace_chain_explanation": "The documentation in SchemasApi.md directly describes the listSchemas operation, which is implemented by the SchemaService.listSchemas method.",
      "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 38,
      "artifact_title": "SchemaRepository.listSchemas",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The SchemaService.listSchemas method likely calls SchemaRepository.listSchemas to retrieve the actual schema data. This is inferred from the typical service-repository pattern, where the service delegates data retrieval to the repository.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
      "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in SchemaService.listSchemas, which in turn uses SchemaRepository.listSchemas to fetch the data.",
      "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 34,
      "artifact_title": "SchemaInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The SchemaInfoDAO is likely used by SchemaRepository.listSchemas to map database records to SchemaInfo objects. This is inferred from the typical use of DAOs in data access layers.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas -> SchemaInfoDAO",
      "predicted_trace_chain_explanation": "The API operation is implemented by the service, which uses the repository to fetch data, which in turn uses the DAO for database interaction and object mapping.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 30,
      "artifact_title": "ListSchemasResponse",
      "predicted_relationship": "explicit",
      "relationship_type": "uses",
      "relationship_explanation": "The documentation explicitly mentions ListSchemasResponse as the return type of the listSchemas operation. This object is used to encapsulate the list of schemas and potentially pagination information.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> ListSchemasResponse",
      "predicted_trace_chain_explanation": "The API documentation specifies ListSchemasResponse as the return type, which is created and returned by SchemaService.listSchemas.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.listSchemas",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 54,
      "artifact_title": "TableService.createTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'createTable' API endpoint with a POST request to '/tables'. This directly corresponds to the TableService.createTable method, which is annotated with @Post(\"\") and implements the creation of a table.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TableService.createTable method.",
      "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 55,
      "artifact_title": "TableService.deleteTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'deleteTable' API endpoint with a DELETE request to '/tables/{full_name}'. This directly corresponds to the TableService.deleteTable method, which is annotated with @Delete(\"/{full_name}\") and implements the deletion of a table.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TableService.deleteTable method.",
      "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 56,
      "artifact_title": "TableService.getTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'getTable' API endpoint with a GET request to '/tables/{full_name}'. This directly corresponds to the TableService.getTable method, which is annotated with @Get(\"/{full_name}\") and implements the retrieval of a table.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TableService.getTable method.",
      "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 57,
      "artifact_title": "TableService.listTables",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'listTables' API endpoint with a GET request to '/tables'. This directly corresponds to the TableService.listTables method, which is annotated with @Get(\"\") and implements the listing of tables.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TableService.listTables method.",
      "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 50,
      "artifact_title": "TableRepository.createTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the TableService.createTable method likely uses TableRepository.createTable to perform the actual table creation in the database.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
      "predicted_trace_chain_explanation": "The API endpoint described in the documentation is implemented by TableService.createTable, which in turn would use TableRepository.createTable for the actual database operation.",
      "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 51,
      "artifact_title": "TableRepository.deleteTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the TableService.deleteTable method likely uses TableRepository.deleteTable to perform the actual table deletion in the database.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "predicted_trace_chain_explanation": "The API endpoint described in the documentation is implemented by TableService.deleteTable, which in turn would use TableRepository.deleteTable for the actual database operation.",
      "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 52,
      "artifact_title": "TableRepository.getTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the TableService.getTable method likely uses TableRepository.getTable to retrieve the actual table information from the database.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "predicted_trace_chain_explanation": "The API endpoint described in the documentation is implemented by TableService.getTable, which in turn would use TableRepository.getTable to fetch the table data.",
      "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 53,
      "artifact_title": "TableRepository.listTables",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the TableService.listTables method likely uses TableRepository.listTables to retrieve the list of tables from the database.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
      "predicted_trace_chain_explanation": "The API endpoint described in the documentation is implemented by TableService.listTables, which in turn would use TableRepository.listTables to fetch the list of tables.",
      "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.getTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.listTables",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.createTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.deleteTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 46,
      "artifact_title": "TableCli.deleteTable",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The TableCli.deleteTable method implements the deleteTable operation described in the documentation. While not explicitly mentioned, it matches the functionality of deleting a table using a full name parameter.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable -> TableCli.deleteTable",
      "predicted_trace_chain_explanation": "The API documentation describes the deleteTable operation, which is likely implemented in the TableService, then delegated to the TableRepository for data access, and finally executed through the TableCli for command-line interaction.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 55,
      "artifact_title": "TableService.deleteTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The TableService.deleteTable method directly implements the deleteTable operation described in the documentation. It matches the signature with a 'full_name' parameter and is annotated with @Delete, corresponding to the HTTP DELETE method mentioned in the doc.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
      "predicted_trace_chain_explanation": "The API documentation directly describes the operation implemented by TableService.deleteTable.",
      "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 51,
      "artifact_title": "TableRepository.deleteTable",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The TableRepository.deleteTable method likely implements the core logic for deleting a table from the database. While not explicitly mentioned, it's a crucial part of the delete table operation.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in TableService and then delegated to TableRepository for actual data manipulation.",
      "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 49,
      "artifact_title": "TableInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The TableInfoDAO is likely used in the process of deleting a table, as it represents the data access object for table information. While not explicitly mentioned, it's integral to the delete operation.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable -> TableInfoDAO",
      "predicted_trace_chain_explanation": "The delete operation described in the API doc is implemented through the service and repository, which would interact with the TableInfoDAO for database operations.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 3,
      "artifact_title": "CatalogCli.listCatalogs",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The CatalogCli.listCatalogs method likely implements the listCatalogs functionality described in the documentation. The method signature in the code matches the parameters mentioned in the documentation (max_results and page_token).",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogCli.listCatalogs",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is likely implemented by the CatalogService, which then uses the CatalogRepository for data access, and finally the CatalogCli provides a command-line interface for this functionality.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 9,
      "artifact_title": "CatalogRepository.listCatalogs",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The CatalogRepository.listCatalogs method likely implements the core logic for listing catalogs as described in the documentation. It handles the maxResults and pageToken parameters mentioned in the API documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is likely implemented in the CatalogService, which then delegates to the CatalogRepository for actual data retrieval and pagination handling.",
      "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 14,
      "artifact_title": "CatalogService.listCatalogs",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The CatalogService.listCatalogs method directly implements the listCatalogs API endpoint described in the documentation. It takes the maxResults and pageToken parameters as mentioned in the API spec.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
      "predicted_trace_chain_explanation": "The API documentation directly describes the endpoint that is implemented by the CatalogService.listCatalogs method.",
      "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 2,
      "artifact_title": "CatalogCli.getCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes a 'getCatalog' operation that takes a 'name' parameter and returns a CatalogInfo object. This directly corresponds to the CatalogCli.getCatalog method, which implements this functionality. The method signature in the code matches the documented API, taking a 'name' parameter and returning a JSON string representation of the catalog info.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
      "predicted_trace_chain_explanation": "The documentation in CatalogsApi.md directly describes the getCatalog operation, which is implemented by the CatalogCli.getCatalog method.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 13,
      "artifact_title": "CatalogService.getCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the CatalogService.getCatalog method is likely the server-side implementation of the getCatalog operation. It takes a 'name' parameter and returns an HttpResponse, which likely contains the CatalogInfo object mentioned in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog -> CatalogService.getCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented client-side by CatalogCli.getCatalog. This method likely calls the server-side implementation in CatalogService.getCatalog.",
      "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 8,
      "artifact_title": "CatalogRepository.getCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The CatalogRepository.getCatalog method is likely used to retrieve the catalog information from the database. While not explicitly mentioned in the documentation, it's an essential part of the implementation chain for the getCatalog operation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API, implemented by CatalogCli.getCatalog, which calls CatalogService.getCatalog. This service method likely uses CatalogRepository.getCatalog to fetch the actual data.",
      "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 5,
      "artifact_title": "CatalogInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "used by",
      "relationship_explanation": "The CatalogInfoDAO class is likely used to represent the catalog information in the database. While not explicitly mentioned in the documentation, it's crucial for storing and retrieving the CatalogInfo object that the API returns.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogInfoDAO",
      "predicted_trace_chain_explanation": "The documentation describes the API that returns CatalogInfo. This data likely originates from a CatalogInfoDAO object in the database, retrieved through the chain of CatalogCli, CatalogService, and CatalogRepository.",
      "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 17,
      "artifact_title": "FunctionCli.deleteFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes a 'deleteFunction' operation that deletes a function matching a supplied name. This directly corresponds to the 'FunctionCli.deleteFunction' method, which implements this functionality in the CLI.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
      "predicted_trace_chain_explanation": "The documentation in FunctionsApi.md directly describes the deleteFunction operation, which is implemented by FunctionCli.deleteFunction in the CLI code.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 22,
      "artifact_title": "FunctionRepository.deleteFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned, the FunctionRepository.deleteFunction method is likely called by the CLI to perform the actual deletion of the function in the database.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction -> FunctionRepository.deleteFunction",
      "predicted_trace_chain_explanation": "The documentation describes the deleteFunction operation, which is implemented in the CLI by FunctionCli.deleteFunction. This CLI method likely calls FunctionRepository.deleteFunction to perform the actual deletion in the database.",
      "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 26,
      "artifact_title": "FunctionService.deleteFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The FunctionService.deleteFunction method likely implements the server-side REST API endpoint for deleting a function, which corresponds to the documented deleteFunction operation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
      "predicted_trace_chain_explanation": "The documentation describes the deleteFunction API, which is implemented on the server by FunctionService.deleteFunction. This service method likely calls FunctionRepository.deleteFunction to perform the actual deletion.",
      "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 40,
      "artifact_title": "SchemaService.createSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes a 'createSchema' operation that creates a new schema in a specified catalog. This directly corresponds to the 'SchemaService.createSchema' method, which implements this functionality on the server side.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
      "predicted_trace_chain_explanation": "The API documentation directly maps to the server-side implementation method.",
      "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 35,
      "artifact_title": "SchemaRepository.createSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the 'SchemaRepository.createSchema' method is likely called by the SchemaService to perform the actual creation of the schema in the database.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
      "predicted_trace_chain_explanation": "The API call is handled by the SchemaService, which then uses the SchemaRepository to persist the schema data.",
      "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 34,
      "artifact_title": "SchemaInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The SchemaInfoDAO is likely used to map the created schema data to the database entity. The documentation mentions returning a SchemaInfo object, which is probably converted from SchemaInfoDAO.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema -> SchemaInfoDAO",
      "predicted_trace_chain_explanation": "The creation process involves mapping the schema data to a database entity using SchemaInfoDAO.",
      "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 23,
      "artifact_title": "CreateSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "uses",
      "relationship_explanation": "The documentation explicitly mentions 'CreateSchema' as a parameter for the createSchema operation. This likely corresponds to a CreateSchema model or DTO used to pass schema creation data.",
      "predicted_trace_chain": "SchemasApi.md -> CreateSchema -> SchemaService.createSchema",
      "predicted_trace_chain_explanation": "The CreateSchema object is passed from the API to the SchemaService for processing.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 43,
      "artifact_title": "SchemaInfo",
      "predicted_relationship": "explicit",
      "relationship_type": "returns",
      "relationship_explanation": "The documentation explicitly states that the operation returns a 'SchemaInfo' object. This corresponds to the SchemaInfo model that represents the created schema's information.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaInfo",
      "predicted_trace_chain_explanation": "The createSchema operation returns a SchemaInfo object representing the newly created schema.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.createSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 59,
      "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the 'generateTemporaryVolumeCredentials' API endpoint described in the documentation. The documentation explicitly mentions 'generateTemporaryVolumeCredentials' as a POST method for generating temporary volume credentials, which is exactly what this service method does.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the service method.",
      "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
      "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeInfoDAO is likely used internally to retrieve volume information when generating temporary credentials. This is inferred from the need to access volume data to generate appropriate credentials.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by the service method. The service method likely uses VolumeInfoDAO to access necessary volume data for credential generation.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 68,
      "artifact_title": "VolumeRepository.getVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "Although not explicitly mentioned, the getVolume method is likely used internally to retrieve volume information when generating temporary credentials. This is inferred from the need to access specific volume data based on the provided volume ID.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.getVolume",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by the service method. The service method likely uses VolumeRepository.getVolume to retrieve the necessary volume information for credential generation.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 4,
      "artifact_title": "CatalogCli.updateCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The CatalogCli.updateCatalog method directly implements the updateCatalog functionality described in the documentation. It takes the catalog name and UpdateCatalog object as parameters, matching the documented API. The method returns a CatalogInfo object, which aligns with the documented return type.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogCli.updateCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is likely implemented in CatalogService. CatalogService would use CatalogRepository for data operations, and CatalogCli provides the command-line interface for this functionality.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 10,
      "artifact_title": "CatalogRepository.updateCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the CatalogRepository.updateCatalog method is likely used to perform the actual update operation on the catalog data. It would handle the database interaction to update the catalog based on the provided UpdateCatalog object.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
      "predicted_trace_chain_explanation": "The API endpoint described in the documentation would be implemented in CatalogService, which would then use CatalogRepository to perform the actual data update operation.",
      "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 15,
      "artifact_title": "CatalogService.updateCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The CatalogService.updateCatalog method directly implements the API endpoint described in the documentation. It takes the catalog name and UpdateCatalog object as parameters, matching the documented API signature. The method returns a CatalogInfo object, aligning with the specified return type.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the CatalogService.updateCatalog method.",
      "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 5,
      "artifact_title": "CatalogInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The CatalogInfoDAO is likely used to represent the catalog data in the database. While not explicitly mentioned in the documentation, it would be involved in the update process, particularly when converting between the API model (CatalogInfo) and the database model.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogInfoDAO",
      "predicted_trace_chain_explanation": "The API endpoint uses CatalogService, which uses CatalogRepository for data operations. CatalogRepository would use CatalogInfoDAO to interact with the database representation of the catalog.",
      "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 59,
      "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the generateTemporaryVolumeCredentials functionality described in the documentation. The method signature matches the documented API, taking a GenerateTemporaryVolumeCredential parameter and returning a GenerateTemporaryVolumeCredentialResponse.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TemporaryVolumeCredentialsService class.",
      "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
      "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The VolumeInfoDAO is likely used internally to retrieve volume information based on the volumeId provided in the GenerateTemporaryVolumeCredential. This is necessary to access the storage location for generating credentials.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The service method needs to retrieve volume information to generate credentials, which is likely done using the VolumeInfoDAO.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 69,
      "artifact_title": "VolumeRepository.listVolumes",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The VolumeRepository is likely used to retrieve the VolumeInfo object based on the volumeId. The listVolumes method might be internally used to find the specific volume.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.listVolumes",
      "predicted_trace_chain_explanation": "The service method needs to find the specific volume, which might involve using the VolumeRepository's listVolumes method to search for the volume by ID.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 37,
      "artifact_title": "SchemaRepository.getSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The document describes a 'getSchema' operation that takes a 'full_name' parameter and returns a SchemaInfo object. This directly corresponds to the SchemaRepository.getSchema method, which implements this functionality.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the getSchema operation, which would be implemented in the SchemaService, which in turn would use the SchemaRepository to actually retrieve the schema data.",
      "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 42,
      "artifact_title": "SchemaService.getSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned, the SchemaService.getSchema method would be the service layer implementation of the getSchema operation described in the API documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the getSchema operation, which would be directly implemented by the SchemaService.getSchema method.",
      "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 34,
      "artifact_title": "SchemaInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "used",
      "relationship_explanation": "The documentation mentions returning a SchemaInfo object. SchemaInfoDAO would likely be used internally to represent this data in the database before converting to the SchemaInfo return type.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema -> SchemaInfoDAO",
      "predicted_trace_chain_explanation": "The API call would go through the service and repository layers, ultimately using SchemaInfoDAO to interact with the database before converting to the SchemaInfo return type.",
      "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.getSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 40,
      "artifact_title": "SchemaService.createSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'createSchema' as a POST method for creating a schema. This directly corresponds to the SchemaService.createSchema method, which implements this functionality.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the SchemaService.createSchema method.",
      "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 41,
      "artifact_title": "SchemaService.deleteSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'deleteSchema' as a DELETE method for deleting a schema. This directly corresponds to the SchemaService.deleteSchema method, which implements this functionality.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the SchemaService.deleteSchema method.",
      "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 42,
      "artifact_title": "SchemaService.getSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'getSchema' as a GET method for retrieving a schema. This directly corresponds to the SchemaService.getSchema method, which implements this functionality.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the SchemaService.getSchema method.",
      "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 43,
      "artifact_title": "SchemaService.listSchemas",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'listSchemas' as a GET method for listing schemas. This directly corresponds to the SchemaService.listSchemas method, which implements this functionality.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the SchemaService.listSchemas method.",
      "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 44,
      "artifact_title": "SchemaService.updateSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'updateSchema' as a PATCH method for updating a schema. This directly corresponds to the SchemaService.updateSchema method, which implements this functionality.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the SchemaService.updateSchema method.",
      "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 35,
      "artifact_title": "SchemaRepository.createSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the SchemaRepository.createSchema method is likely used by SchemaService.createSchema to perform the actual schema creation in the data layer.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by SchemaService.createSchema, which in turn uses SchemaRepository.createSchema for data persistence.",
      "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 36,
      "artifact_title": "SchemaRepository.deleteSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the SchemaRepository.deleteSchema method is likely used by SchemaService.deleteSchema to perform the actual schema deletion in the data layer.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by SchemaService.deleteSchema, which in turn uses SchemaRepository.deleteSchema for data manipulation.",
      "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 37,
      "artifact_title": "SchemaRepository.getSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the SchemaRepository.getSchema method is likely used by SchemaService.getSchema to retrieve the schema information from the data layer.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by SchemaService.getSchema, which in turn uses SchemaRepository.getSchema to fetch the data.",
      "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 38,
      "artifact_title": "SchemaRepository.listSchemas",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the SchemaRepository.listSchemas method is likely used by SchemaService.listSchemas to retrieve the list of schemas from the data layer.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by SchemaService.listSchemas, which in turn uses SchemaRepository.listSchemas to fetch the data.",
      "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 39,
      "artifact_title": "SchemaRepository.updateSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the SchemaRepository.updateSchema method is likely used by SchemaService.updateSchema to perform the actual schema update in the data layer.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by SchemaService.updateSchema, which in turn uses SchemaRepository.updateSchema for data manipulation.",
      "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.getSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.listSchemas",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.updateSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.deleteSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.createSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 16,
      "artifact_title": "FunctionCli.createFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'createFunction' API endpoint under the POST method. This method in FunctionCli likely implements the functionality to create a function as described in the API documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionCli.createFunction",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be implemented in the FunctionService, which likely uses the FunctionRepository to persist the data, and finally the FunctionCli provides the command-line interface to create a function.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 17,
      "artifact_title": "FunctionCli.deleteFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'deleteFunction' API endpoint under the DELETE method. This method in FunctionCli likely implements the functionality to delete a function as described in the API documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction -> FunctionCli.deleteFunction",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be implemented in the FunctionService, which likely uses the FunctionRepository to delete the data, and finally the FunctionCli provides the command-line interface to delete a function.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 18,
      "artifact_title": "FunctionCli.getFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'getFunction' API endpoint under the GET method. This method in FunctionCli likely implements the functionality to retrieve a function as described in the API documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionCli.getFunction",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be implemented in the FunctionService, which likely uses the FunctionRepository to retrieve the data, and finally the FunctionCli provides the command-line interface to get a function.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 19,
      "artifact_title": "FunctionCli.listFunctions",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'listFunctions' API endpoint under the GET method. This method in FunctionCli likely implements the functionality to list functions as described in the API documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions -> FunctionCli.listFunctions",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be implemented in the FunctionService, which likely uses the FunctionRepository to retrieve the list of functions, and finally the FunctionCli provides the command-line interface to list functions.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 25,
      "artifact_title": "FunctionService.createFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the documentation snippet, this service method likely implements the server-side logic for the 'createFunction' API endpoint described in the documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
      "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which would be directly implemented in the FunctionService on the server side.",
      "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 26,
      "artifact_title": "FunctionService.deleteFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the documentation snippet, this service method likely implements the server-side logic for the 'deleteFunction' API endpoint described in the documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
      "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction endpoint, which would be directly implemented in the FunctionService on the server side.",
      "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 27,
      "artifact_title": "FunctionService.getFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the documentation snippet, this service method likely implements the server-side logic for the 'getFunction' API endpoint described in the documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
      "predicted_trace_chain_explanation": "The API documentation describes the getFunction endpoint, which would be directly implemented in the FunctionService on the server side.",
      "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 28,
      "artifact_title": "FunctionService.listFunctions",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the documentation snippet, this service method likely implements the server-side logic for the 'listFunctions' API endpoint described in the documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
      "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which would be directly implemented in the FunctionService on the server side.",
      "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionRepository.getFunction",
      "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionRepository.deleteFunction",
      "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionRepository.createFunction",
      "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionRepository.listFunctions",
      "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 75,
      "artifact_title": "VolumeService.updateVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes the 'updateVolume' operation, which is implemented by the VolumeService.updateVolume method. The method signature matches the documented parameters: a String for the volume name and an UpdateVolumeRequestContent object. It also returns a VolumeInfo object as specified in the documentation.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
      "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the updateVolume operation, which is implemented by the VolumeService.updateVolume method.",
      "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 70,
      "artifact_title": "VolumeRepository.updateVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeService.updateVolume method likely delegates the actual update operation to the VolumeRepository.updateVolume method, which handles the persistence logic.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
      "predicted_trace_chain_explanation": "The documentation describes the updateVolume operation, which is implemented in VolumeService.updateVolume. This service method likely uses VolumeRepository.updateVolume to perform the actual database update.",
      "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The VolumeInfoDAO is likely used internally by the VolumeRepository to map between the domain model (VolumeInfo) and the database representation. The documentation mentions returning a VolumeInfo object, which would be converted from a VolumeInfoDAO instance.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The update operation described in the documentation is implemented through VolumeService and VolumeRepository, which likely use VolumeInfoDAO for database operations and mapping to the VolumeInfo return type.",
      "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.updateVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 21,
      "artifact_title": "FunctionService.createFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly describes the 'createFunction' operation, which is directly implemented by the FunctionService.createFunction method. The method signature matches the documented API, taking a CreateFunctionRequest parameter and returning a FunctionInfo object.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
      "predicted_trace_chain_explanation": "The documentation in FunctionsApi.md directly describes the createFunction operation, which is implemented by the FunctionService.createFunction method.",
      "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 22,
      "artifact_title": "FunctionRepository.createFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the FunctionRepository.createFunction method is likely used by the FunctionService to persist the new function in the database. This is inferred from the typical service-repository pattern in the codebase.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
      "predicted_trace_chain_explanation": "The FunctionService.createFunction method likely delegates the actual creation and persistence of the function to the FunctionRepository.createFunction method, following a common architectural pattern.",
      "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 20,
      "artifact_title": "FunctionInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The FunctionInfoDAO is likely used internally to persist and retrieve function information. While not explicitly mentioned in the documentation, it's a crucial part of the function creation process, mapping between the FunctionInfo model and the database representation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionInfoDAO",
      "predicted_trace_chain_explanation": "The FunctionInfoDAO is used by the FunctionRepository to map the FunctionInfo object to its database representation during the function creation process.",
      "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 16,
      "artifact_title": "FunctionCli.createFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not mentioned in the server-side API documentation, the FunctionCli.createFunction method is likely the client-side implementation that calls this API. It would be responsible for constructing the CreateFunctionRequest and handling the returned FunctionInfo.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction -> FunctionService.createFunction",
      "predicted_trace_chain_explanation": "The FunctionCli.createFunction method would be the client-side entry point for creating a function, which would then call the server-side FunctionService.createFunction method through the API.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 52,
      "artifact_title": "TableRepository.getTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes a 'getTable' operation that takes a 'full_name' parameter and returns a TableInfo object. This directly corresponds to the TableRepository.getTable method, which implements this functionality.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "predicted_trace_chain_explanation": "The API documentation describes the getTable operation, which is likely implemented in the TableService, which then delegates to TableRepository for the actual data retrieval.",
      "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 56,
      "artifact_title": "TableService.getTable",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned, the TableService.getTable method is likely the service-layer implementation of the documented API endpoint, acting as an intermediary between the API and the repository.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "predicted_trace_chain_explanation": "The API documentation describes the getTable operation, which is implemented in the TableService, which then calls the TableRepository for data access.",
      "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 49,
      "artifact_title": "TableInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "used by",
      "relationship_explanation": "The documentation mentions returning a TableInfo object. TableInfoDAO is likely used internally to represent the table data before converting it to the API response type.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable -> TableInfoDAO",
      "predicted_trace_chain_explanation": "The API documentation describes returning TableInfo, which likely involves TableRepository using TableInfoDAO for data access before converting to the API response type.",
      "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
      "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.getTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 69,
      "artifact_title": "VolumeRepository.listVolumes",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The VolumeRepository.listVolumes method directly implements the listVolumes functionality described in the documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and returns a ListVolumesResponseContent object as specified in the documentation.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is likely implemented by the VolumeService, which in turn calls the VolumeRepository to perform the actual database operations.",
      "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 74,
      "artifact_title": "VolumeService.listVolumes",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The VolumeService.listVolumes method directly implements the API endpoint described in the documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and likely calls the VolumeRepository to retrieve the data.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the VolumeService.listVolumes method.",
      "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "used by",
      "relationship_explanation": "The VolumeInfoDAO class is likely used internally by the VolumeRepository to represent volume data retrieved from the database. While not explicitly mentioned in the documentation, it's an essential part of the implementation for listing volumes.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The API call is handled by the VolumeService, which uses the VolumeRepository to fetch data, which in turn likely uses VolumeInfoDAO to represent the volume data.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.listVolumes",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 18,
      "artifact_title": "FunctionRepository.listFunctions",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the listFunctions API endpoint described in the documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and returns a ListFunctionsResponse object as specified in the API documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
      "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is implemented by the FunctionService.listFunctions method, which in turn calls FunctionRepository.listFunctions to retrieve the actual data.",
      "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 28,
      "artifact_title": "FunctionService.listFunctions",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the listFunctions API endpoint described in the documentation. It handles the HTTP GET request, processes the input parameters (catalogName, schemaName, maxResults, pageToken), and returns the ListFunctionsResponse as an HTTP response.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
      "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is directly implemented by the FunctionService.listFunctions method.",
      "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 19,
      "artifact_title": "FunctionCli.listFunctions",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, this CLI method likely uses the listFunctions API to provide a command-line interface for listing functions. It processes similar parameters (catalogName, schemaName, maxResults) and interacts with the FunctionsApi to retrieve the list of functions.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionCli.listFunctions",
      "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is implemented by FunctionService.listFunctions. The FunctionCli.listFunctions method likely uses this service to provide CLI functionality for listing functions.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 71,
      "artifact_title": "VolumeService.createVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'createVolume' as a POST method for creating a Volume. This directly corresponds to the VolumeService.createVolume method which implements this functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
      "predicted_trace_chain_explanation": "The documentation directly describes the createVolume API endpoint, which is implemented by the VolumeService.createVolume method.",
      "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 72,
      "artifact_title": "VolumeService.deleteVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'deleteVolume' as a DELETE method for deleting a Volume. This directly corresponds to the VolumeService.deleteVolume method which implements this functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
      "predicted_trace_chain_explanation": "The documentation directly describes the deleteVolume API endpoint, which is implemented by the VolumeService.deleteVolume method.",
      "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 73,
      "artifact_title": "VolumeService.getVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'getVolume' as a GET method for retrieving a Volume. This directly corresponds to the VolumeService.getVolume method which implements this functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
      "predicted_trace_chain_explanation": "The documentation directly describes the getVolume API endpoint, which is implemented by the VolumeService.getVolume method.",
      "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 74,
      "artifact_title": "VolumeService.listVolumes",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'listVolumes' as a GET method for listing Volumes. This directly corresponds to the VolumeService.listVolumes method which implements this functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
      "predicted_trace_chain_explanation": "The documentation directly describes the listVolumes API endpoint, which is implemented by the VolumeService.listVolumes method.",
      "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 75,
      "artifact_title": "VolumeService.updateVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'updateVolume' as a PATCH method for updating a Volume. This directly corresponds to the VolumeService.updateVolume method which implements this functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
      "predicted_trace_chain_explanation": "The documentation directly describes the updateVolume API endpoint, which is implemented by the VolumeService.updateVolume method.",
      "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.getVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeRepository.listVolumes",
      "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeRepository.deleteVolume",
      "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeRepository.getVolume",
      "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.listVolumes",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.deleteVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeRepository.createVolume",
      "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeRepository.updateVolume",
      "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.updateVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.createVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    }
  ]
}