{
  "dataset": "unity_catalog",
  "run_id": 1,
  "timestamp": "2025-02-12T10:33:35.058503",
  "results": [
    {
      "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 69,
      "artifact_title": "VolumeRepository.listVolumes",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The VolumeRepository.listVolumes method directly implements the listVolumes functionality described in the documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and returns a ListVolumesResponseContent object as specified in the API documentation.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
      "predicted_trace_chain_explanation": "The API documentation describes the listVolumes endpoint, which is implemented by the VolumeService.listVolumes method, which in turn calls the VolumeRepository.listVolumes method to perform the actual data retrieval.",
      "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 74,
      "artifact_title": "VolumeService.listVolumes",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The VolumeService.listVolumes method directly implements the HTTP GET endpoint for listing volumes as described in the documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and returns an HttpResponse containing the ListVolumesResponseContent.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
      "predicted_trace_chain_explanation": "The API documentation describes the listVolumes endpoint, which is directly implemented by the VolumeService.listVolumes method in the server code.",
      "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "used by",
      "relationship_explanation": "The VolumeInfoDAO class is likely used internally by the VolumeRepository.listVolumes method to represent and retrieve volume information from the database. While not explicitly mentioned in the documentation, it's an essential part of the implementation for listing volumes.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The API documentation leads to the VolumeService, which calls the VolumeRepository, which likely uses VolumeInfoDAO to interact with the database and retrieve volume information.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.listVolumes",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 22,
      "artifact_title": "FunctionRepository.getFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The FunctionRepository.getFunction method likely implements the core functionality described in the documentation. It takes a fully-qualified function name as input and returns a FunctionInfo object, which aligns with the documented behavior.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
      "predicted_trace_chain_explanation": "The API documentation describes the getFunction operation, which would be implemented by the FunctionService, which in turn would use the FunctionRepository to fetch the actual function data.",
      "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 27,
      "artifact_title": "FunctionService.getFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The FunctionService.getFunction method directly implements the API endpoint described in the documentation. It takes a 'name' parameter, which matches the documented 'name' parameter for the fully-qualified function name.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
      "predicted_trace_chain_explanation": "The API documentation directly describes the behavior that would be implemented by the FunctionService.getFunction method.",
      "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 20,
      "artifact_title": "FunctionInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "used",
      "relationship_explanation": "The FunctionInfoDAO is likely used internally to represent the function data in the database. The documentation mentions returning a FunctionInfo object, which would be created from the FunctionInfoDAO data.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionInfoDAO",
      "predicted_trace_chain_explanation": "The API call would be handled by the FunctionService, which uses the FunctionRepository to fetch the data, likely stored as a FunctionInfoDAO object in the database.",
      "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionCli.getFunction",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 35,
      "artifact_title": "SchemaRepository.createSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes a 'createSchema' operation that creates a new schema in a specified catalog. This directly corresponds to the 'createSchema' method in the SchemaRepository class. The method signature matches the documented parameters (CreateSchema) and return type (SchemaInfo).",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is likely implemented in the SchemaService, which then delegates to the SchemaRepository for actual schema creation.",
      "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 40,
      "artifact_title": "SchemaService.createSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned, the SchemaService.createSchema method is likely the service layer implementation of the documented API endpoint. It would handle the HTTP request, delegate to the repository, and return the HTTP response.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented in the SchemaService. The service then calls the repository method to perform the actual schema creation.",
      "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 34,
      "artifact_title": "SchemaInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The SchemaInfoDAO is likely used internally to persist and retrieve schema information. The documentation mentions returning a SchemaInfo object, which would be converted from a SchemaInfoDAO instance.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema -> SchemaInfoDAO",
      "predicted_trace_chain_explanation": "The API call flows through the service and repository, which ultimately uses the DAO to interact with the database and create the schema record.",
      "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.createSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 52,
      "artifact_title": "TableRepository.getTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes a 'getTable' operation that takes a 'full_name' parameter and returns a TableInfo object. This directly corresponds to the TableRepository.getTable method, which implements this functionality.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "predicted_trace_chain_explanation": "The API documentation describes the getTable operation, which is likely implemented in the TableService, which then delegates to TableRepository for the actual data retrieval.",
      "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 56,
      "artifact_title": "TableService.getTable",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned, the TableService.getTable method is likely the service-layer implementation of the getTable operation described in the documentation. It would handle the HTTP request and delegate to the repository layer.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in the TableService, acting as an intermediary between the API and the repository layer.",
      "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 49,
      "artifact_title": "TableInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "used by",
      "relationship_explanation": "The documentation mentions returning a TableInfo object. TableInfoDAO is likely used internally to represent the table data before converting to the TableInfo response object.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable -> TableInfoDAO",
      "predicted_trace_chain_explanation": "The API call would go through the service and repository layers, which would use TableInfoDAO to interact with the database before converting to the TableInfo response.",
      "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
      "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.getTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 57,
      "artifact_title": "TableService.listTables",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes the 'listTables' operation, which is implemented by the TableService.listTables method. The method signature matches the documented parameters: catalogName, schemaName, maxResults, and pageToken. It also returns a ListTablesResponse object as specified in the documentation.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
      "predicted_trace_chain_explanation": "The documentation in TablesApi.md directly describes the listTables operation, which is implemented by the TableService.listTables method.",
      "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 53,
      "artifact_title": "TableRepository.listTables",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the TableService.listTables method likely delegates the actual listing of tables to the TableRepository.listTables method. This repository method handles the database interaction to retrieve the list of tables based on the provided parameters.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
      "predicted_trace_chain_explanation": "The documentation describes the listTables operation, which is implemented by TableService.listTables. This service method likely uses TableRepository.listTables to perform the actual database query.",
      "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 32,
      "artifact_title": "ListTablesResponse",
      "predicted_relationship": "explicit",
      "relationship_type": "returns",
      "relationship_explanation": "The documentation explicitly states that the listTables operation returns a ListTablesResponse object. This is the data structure that encapsulates the list of tables and potentially a next page token for pagination.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> ListTablesResponse",
      "predicted_trace_chain_explanation": "The documentation specifies ListTablesResponse as the return type for the listTables operation. TableService.listTables implements this by returning an instance of ListTablesResponse.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.listTables",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 71,
      "artifact_title": "VolumeService.createVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes the 'createVolume' operation, which is implemented by the VolumeService.createVolume method. The method signature matches the documented operation, taking a CreateVolumeRequestContent parameter and returning a VolumeInfo object.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
      "predicted_trace_chain_explanation": "The API documentation directly maps to the VolumeService implementation.",
      "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 66,
      "artifact_title": "VolumeRepository.createVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeRepository.createVolume method is likely called by VolumeService.createVolume to perform the actual volume creation in the data store.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
      "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in VolumeService, which in turn uses VolumeRepository to perform the actual data manipulation.",
      "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The VolumeInfoDAO is likely used internally to represent the volume data in the database. It's implicitly related as it would be used to create the VolumeInfo object returned by the createVolume operation.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The API operation is implemented in VolumeService, which uses VolumeRepository, which in turn likely uses VolumeInfoDAO for database operations.",
      "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 60,
      "artifact_title": "VolumeCli.createVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not mentioned in the API documentation, VolumeCli.createVolume is likely a command-line interface that uses this API operation to create volumes, providing an alternative way to invoke the functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.createVolume -> VolumeService.createVolume",
      "predicted_trace_chain_explanation": "The API documentation describes the operation that can be invoked via CLI, which then calls the VolumeService implementation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 3,
      "artifact_title": "CatalogCli.listCatalogs",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The CatalogCli.listCatalogs method implements the functionality described in the documentation. It handles the 'max_results' parameter, which corresponds to the optional 'max_results' parameter mentioned in the API documentation. The method also returns a JSON string representation of the catalog list, which aligns with the ListCatalogsResponse return type mentioned in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogCli.listCatalogs",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint. This is likely implemented in the CatalogService, which would use the CatalogRepository to fetch the data. The CatalogCli provides a command-line interface to this functionality.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 9,
      "artifact_title": "CatalogRepository.listCatalogs",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The CatalogRepository.listCatalogs method likely implements the core functionality of listing catalogs. It handles both the 'maxResults' and 'pageToken' parameters, which correspond to the 'max_results' and 'page_token' parameters described in the API documentation. The method returns a ListCatalogsResponse object, which matches the return type specified in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is likely implemented in the CatalogService. The CatalogService would then use the CatalogRepository to fetch and process the catalog data.",
      "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 14,
      "artifact_title": "CatalogService.listCatalogs",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The CatalogService.listCatalogs method directly implements the API endpoint described in the documentation. It takes 'maxResults' and 'pageToken' as optional parameters, which exactly match the 'max_results' and 'page_token' parameters described in the API documentation. The method returns an HttpResponse containing the result of CATALOG_REPOSITORY.listCatalogs, which corresponds to the ListCatalogsResponse return type mentioned in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
      "predicted_trace_chain_explanation": "The API documentation directly describes the functionality implemented by the CatalogService.listCatalogs method.",
      "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 75,
      "artifact_title": "VolumeService.updateVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes the 'updateVolume' operation, which is implemented by the VolumeService.updateVolume method. The method signature matches the documented parameters: a String for the volume name and an UpdateVolumeRequestContent object. It also returns a VolumeInfo object as specified in the documentation.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
      "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the updateVolume operation, which is implemented by the VolumeService.updateVolume method.",
      "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 70,
      "artifact_title": "VolumeRepository.updateVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeRepository.updateVolume method is likely used by VolumeService.updateVolume to perform the actual update operation on the volume data. This method takes the same parameters (name and UpdateVolumeRequestContent) and returns a VolumeInfo object.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
      "predicted_trace_chain_explanation": "The documentation describes the updateVolume operation, which is implemented by VolumeService.updateVolume. This service method likely delegates the actual update operation to VolumeRepository.updateVolume.",
      "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The VolumeInfoDAO class is likely used internally to represent and manipulate the volume data. While not explicitly mentioned in the documentation, it's an essential part of the update process, handling the conversion between the API model (VolumeInfo) and the database representation.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The updateVolume operation described in the documentation is implemented through VolumeService and VolumeRepository, which likely use VolumeInfoDAO to interact with the database representation of volumes.",
      "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.updateVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 2,
      "artifact_title": "CatalogCli.getCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly describes a 'getCatalog' operation that takes a 'name' parameter and returns a CatalogInfo object. This directly corresponds to the CatalogCli.getCatalog method, which implements this functionality.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
      "predicted_trace_chain_explanation": "The documentation in CatalogsApi.md directly describes the getCatalog operation, which is implemented by CatalogCli.getCatalog",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 13,
      "artifact_title": "CatalogService.getCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned, the CatalogService.getCatalog method likely implements the server-side logic for the getCatalog operation described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog -> CatalogService.getCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the getCatalog operation, which is implemented client-side by CatalogCli.getCatalog, which in turn likely calls CatalogService.getCatalog for the server-side implementation.",
      "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 8,
      "artifact_title": "CatalogRepository.getCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The getCatalog operation likely uses the CatalogRepository.getCatalog method to retrieve the catalog information from the data store.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the getCatalog operation, implemented by CatalogCli.getCatalog and CatalogService.getCatalog, which likely use CatalogRepository.getCatalog to fetch the actual data.",
      "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 5,
      "artifact_title": "CatalogInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The CatalogInfo return type mentioned in the documentation is likely represented by the CatalogInfoDAO class in the data access layer.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogInfoDAO",
      "predicted_trace_chain_explanation": "The CatalogInfo returned by the getCatalog operation is likely represented by CatalogInfoDAO in the data layer, used by CatalogRepository.getCatalog to return data to the service and client layers.",
      "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 1,
      "artifact_title": "CatalogCli.deleteCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the 'deleteCatalog' operation described in the documentation. It takes the required 'name' parameter and the optional 'force' parameter, matching the documentation's description of the API endpoint.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
      "predicted_trace_chain_explanation": "The documentation directly describes the deleteCatalog operation, which is implemented by the CatalogCli.deleteCatalog method.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 7,
      "artifact_title": "CatalogRepository.deleteCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method likely implements the core logic for deleting a catalog, including the 'force' option mentioned in the documentation. It's implicitly related as it's likely called by the CLI or service layer to perform the actual deletion.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog -> CatalogRepository.deleteCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the operation, which is implemented in the CLI, which likely calls the repository method to perform the actual deletion.",
      "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 12,
      "artifact_title": "CatalogService.deleteCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "This service method likely implements the API endpoint for deleting a catalog. It matches the documentation by taking a 'name' parameter and an optional 'force' parameter, aligning with the described functionality.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the service method, which in turn likely calls the repository method to perform the deletion.",
      "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 39,
      "artifact_title": "SchemaRepository.updateSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The SchemaRepository.updateSchema method directly implements the updateSchema operation described in the documentation. The method signature matches the documented parameters, taking a 'fullName' string and an 'UpdateSchema' object. It also returns a SchemaInfo object as specified in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the updateSchema operation, which is implemented in the SchemaService, which then delegates to the SchemaRepository for the actual update logic.",
      "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 44,
      "artifact_title": "SchemaService.updateSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The SchemaService.updateSchema method directly implements the API endpoint described in the documentation. It takes the 'full_name' parameter and 'UpdateSchema' object as input, matching the documented API signature. It also returns an HttpResponse containing the updated SchemaInfo.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the updateSchema operation, which is directly implemented in the SchemaService class.",
      "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 34,
      "artifact_title": "SchemaInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the SchemaInfoDAO is likely used internally to represent and persist the updated schema information. The documentation mentions returning a SchemaInfo object, which is likely converted from a SchemaInfoDAO instance.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema -> SchemaInfoDAO",
      "predicted_trace_chain_explanation": "The API call is handled by the SchemaService, which uses the SchemaRepository to perform the update. The SchemaRepository likely uses SchemaInfoDAO to interact with the database and represent the schema data.",
      "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.updateSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 71,
      "artifact_title": "VolumeService.createVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'createVolume' POST endpoint under the VolumesApi. This directly corresponds to the 'createVolume' method in the VolumeService class, which implements this API endpoint.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
      "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the API endpoint, which is implemented by the VolumeService.createVolume method.",
      "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 72,
      "artifact_title": "VolumeService.deleteVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'deleteVolume' DELETE endpoint under the VolumesApi. This directly corresponds to the 'deleteVolume' method in the VolumeService class, which implements this API endpoint.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
      "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the API endpoint, which is implemented by the VolumeService.deleteVolume method.",
      "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 73,
      "artifact_title": "VolumeService.getVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'getVolume' GET endpoint under the VolumesApi. This directly corresponds to the 'getVolume' method in the VolumeService class, which implements this API endpoint.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
      "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the API endpoint, which is implemented by the VolumeService.getVolume method.",
      "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 74,
      "artifact_title": "VolumeService.listVolumes",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'listVolumes' GET endpoint under the VolumesApi. This directly corresponds to the 'listVolumes' method in the VolumeService class, which implements this API endpoint.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
      "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the API endpoint, which is implemented by the VolumeService.listVolumes method.",
      "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 75,
      "artifact_title": "VolumeService.updateVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions an 'updateVolume' PATCH endpoint under the VolumesApi. This directly corresponds to the 'updateVolume' method in the VolumeService class, which implements this API endpoint.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
      "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the API endpoint, which is implemented by the VolumeService.updateVolume method.",
      "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 66,
      "artifact_title": "VolumeRepository.createVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeRepository.createVolume method is likely used by the VolumeService.createVolume method to implement the create volume functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by VolumeService.createVolume, which in turn likely uses VolumeRepository.createVolume to perform the actual data operation.",
      "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 67,
      "artifact_title": "VolumeRepository.deleteVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeRepository.deleteVolume method is likely used by the VolumeService.deleteVolume method to implement the delete volume functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by VolumeService.deleteVolume, which in turn likely uses VolumeRepository.deleteVolume to perform the actual data operation.",
      "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 68,
      "artifact_title": "VolumeRepository.getVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeRepository.getVolume method is likely used by the VolumeService.getVolume method to implement the get volume functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by VolumeService.getVolume, which in turn likely uses VolumeRepository.getVolume to perform the actual data retrieval.",
      "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 69,
      "artifact_title": "VolumeRepository.listVolumes",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeRepository.listVolumes method is likely used by the VolumeService.listVolumes method to implement the list volumes functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by VolumeService.listVolumes, which in turn likely uses VolumeRepository.listVolumes to perform the actual data retrieval.",
      "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 70,
      "artifact_title": "VolumeRepository.updateVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeRepository.updateVolume method is likely used by the VolumeService.updateVolume method to implement the update volume functionality.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by VolumeService.updateVolume, which in turn likely uses VolumeRepository.updateVolume to perform the actual data update operation.",
      "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.getVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.deleteVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.listVolumes",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.createVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.updateVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 17,
      "artifact_title": "FunctionCli.deleteFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly describes a 'deleteFunction' operation that deletes a function matching a supplied name. This directly corresponds to the 'FunctionCli.deleteFunction' method in the code, which implements this functionality.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
      "predicted_trace_chain_explanation": "The documentation in FunctionsApi.md directly describes the deleteFunction operation, which is implemented by the FunctionCli.deleteFunction method.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 22,
      "artifact_title": "FunctionRepository.deleteFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the FunctionRepository.deleteFunction method is likely used by the FunctionCli.deleteFunction to perform the actual deletion of the function from the repository.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction -> FunctionRepository.deleteFunction",
      "predicted_trace_chain_explanation": "The documentation describes the deleteFunction operation, which is implemented by FunctionCli.deleteFunction. This method likely uses FunctionRepository.deleteFunction to perform the actual deletion in the database.",
      "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 26,
      "artifact_title": "FunctionService.deleteFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The FunctionService.deleteFunction method likely implements the server-side handling of the delete function request described in the documentation. It would be called when the API receives a delete function request.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint for deleting a function. FunctionService.deleteFunction would handle this request on the server, and it would use FunctionRepository.deleteFunction to perform the actual deletion.",
      "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 54,
      "artifact_title": "TableService.createTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'createTable' API endpoint with a POST request to '/tables'. This directly corresponds to the TableService.createTable method, which is annotated with @Post(\"\") and implements the creation of a table.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TableService.createTable method.",
      "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 55,
      "artifact_title": "TableService.deleteTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'deleteTable' API endpoint with a DELETE request to '/tables/{full_name}'. This directly corresponds to the TableService.deleteTable method, which is annotated with @Delete(\"/{full_name}\") and implements the deletion of a table.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TableService.deleteTable method.",
      "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 56,
      "artifact_title": "TableService.getTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'getTable' API endpoint with a GET request to '/tables/{full_name}'. This directly corresponds to the TableService.getTable method, which is annotated with @Get(\"/{full_name}\") and implements retrieving a table.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TableService.getTable method.",
      "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 57,
      "artifact_title": "TableService.listTables",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'listTables' API endpoint with a GET request to '/tables'. This directly corresponds to the TableService.listTables method, which is annotated with @Get(\"\") and implements listing tables.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TableService.listTables method.",
      "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 50,
      "artifact_title": "TableRepository.createTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the TableRepository.createTable method is likely used by the TableService.createTable method to perform the actual table creation in the database.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by TableService.createTable, which in turn likely uses TableRepository.createTable for the actual database operation.",
      "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 51,
      "artifact_title": "TableRepository.deleteTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the TableRepository.deleteTable method is likely used by the TableService.deleteTable method to perform the actual table deletion in the database.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by TableService.deleteTable, which in turn likely uses TableRepository.deleteTable for the actual database operation.",
      "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 52,
      "artifact_title": "TableRepository.getTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the TableRepository.getTable method is likely used by the TableService.getTable method to retrieve the actual table information from the database.",
      "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by TableService.getTable, which in turn likely uses TableRepository.getTable to fetch the table data from the database.",
      "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 53,
      "artifact_title": "TableRepository.listTables",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the TableRepository.listTables method is likely used by the TableService.listTables method to retrieve the list of tables from the database.",
      "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by TableService.listTables, which in turn likely uses TableRepository.listTables to fetch the list of tables from the database.",
      "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.getTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.deleteTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.listTables",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.createTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 46,
      "artifact_title": "TableCli.deleteTable",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The TableCli.deleteTable method implements the deleteTable operation described in the documentation. It takes a full name parameter and calls the deleteTable method on the TablesApi, which aligns with the documentation's description of deleting a table using its full name.",
      "predicted_trace_chain": "TablesApi.md -> TableCli.deleteTable -> TablesApi.deleteTable",
      "predicted_trace_chain_explanation": "The documentation describes the deleteTable operation, which is implemented in TableCli.deleteTable. This method then calls TablesApi.deleteTable to perform the actual deletion.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 55,
      "artifact_title": "TableService.deleteTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The TableService.deleteTable method directly implements the deleteTable operation described in the documentation. It takes a 'full_name' parameter as specified in the documentation and returns an HTTP response, which aligns with the API description.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "predicted_trace_chain_explanation": "The documentation describes the deleteTable operation, which is directly implemented in TableService.deleteTable. This service method likely calls TableRepository.deleteTable to perform the actual deletion in the database.",
      "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 51,
      "artifact_title": "TableRepository.deleteTable",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The TableRepository.deleteTable method is likely called by the TableService to perform the actual deletion of the table from the database. While not explicitly mentioned in the documentation, it's a crucial part of the deletion process.",
      "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "predicted_trace_chain_explanation": "The documentation describes the deleteTable operation, which is implemented in TableService.deleteTable. This service method then calls TableRepository.deleteTable to perform the actual deletion in the database.",
      "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 73,
      "artifact_title": "VolumeService.getVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes a 'getVolume' operation that takes a 'name' parameter and returns a 'VolumeInfo' object. This closely matches the signature and functionality of the VolumeService.getVolume method.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
      "predicted_trace_chain_explanation": "The API documentation directly maps to the service method implementation.",
      "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 68,
      "artifact_title": "VolumeRepository.getVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the VolumeService.getVolume method likely uses the VolumeRepository.getVolume method to retrieve the volume information from the data store.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
      "predicted_trace_chain_explanation": "The service layer typically delegates data retrieval to the repository layer, forming this chain.",
      "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The VolumeInfoDAO is likely used internally to represent the volume data in the database, which is then converted to the VolumeInfo object mentioned in the return type.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The repository layer typically uses DAOs to interact with the database, which are then converted to model objects for the service layer.",
      "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_title": "VolumeCli.getVolume",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 18,
      "artifact_title": "FunctionCli.listFunctions",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the client-side functionality for listing functions as described in the API documentation. It uses the same parameters (catalog_name, schema_name, max_results) and returns a list of functions, which aligns with the ListFunctionsResponse mentioned in the documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions -> FunctionCli.listFunctions",
      "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint. This is implemented server-side by FunctionService, which uses FunctionRepository for data access. FunctionCli implements the client-side CLI command that interacts with this API endpoint.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 28,
      "artifact_title": "FunctionService.listFunctions",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the listFunctions API endpoint described in the documentation. It takes the same parameters (catalog_name, schema_name, max_results, page_token) and returns a ListFunctionsResponse, exactly matching the API specification.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
      "predicted_trace_chain_explanation": "The API documentation directly describes the behavior implemented by this service method.",
      "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 24,
      "artifact_title": "FunctionRepository.listFunctions",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "This repository method likely implements the data access logic for listing functions. It takes similar parameters (catalogName, schemaName, maxResults, pageToken) and is responsible for retrieving the function data that will be returned in the ListFunctionsResponse.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
      "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by FunctionService. FunctionService likely uses FunctionRepository to access the underlying data for functions.",
      "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 21,
      "artifact_title": "FunctionInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "used by",
      "relationship_explanation": "While not explicitly mentioned, this DAO (Data Access Object) is likely used by FunctionRepository.listFunctions to represent function data retrieved from the database. It would correspond to the function information returned in the ListFunctionsResponse.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions -> FunctionInfoDAO",
      "predicted_trace_chain_explanation": "The API documentation describes function data that is ultimately represented by FunctionInfoDAO objects when retrieved from the database by FunctionRepository and processed through FunctionService.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 6,
      "artifact_title": "CatalogRepository.addCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The CatalogRepository.addCatalog method likely implements the core functionality of creating a new catalog. While not explicitly mentioned in the documentation, it's the logical backend implementation for the createCatalog operation described in the API documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
      "predicted_trace_chain_explanation": "The API documentation describes the createCatalog operation, which would be implemented by the CatalogService, which in turn would use the CatalogRepository to perform the actual database operation.",
      "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 11,
      "artifact_title": "CatalogService.createCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The CatalogService.createCatalog method is likely the direct implementation of the createCatalog API operation described in the documentation. It would handle the HTTP request, process the CreateCatalog input, and return the CatalogInfo response.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
      "predicted_trace_chain_explanation": "The API documentation directly describes the functionality that would be implemented by the CatalogService.createCatalog method.",
      "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 5,
      "artifact_title": "CatalogInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The CatalogInfoDAO is likely used to map between the database representation and the CatalogInfo object mentioned in the API documentation as the return type.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogInfoDAO",
      "predicted_trace_chain_explanation": "The API operation would be implemented by the service, which uses the repository, which in turn uses the DAO for database operations.",
      "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogCli.createCatalog",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 16,
      "artifact_title": "FunctionCli.createFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The FunctionCli.createFunction method likely implements the client-side functionality for creating a function as described in the API documentation. While not explicitly mentioned, it's the client-side counterpart to the server operation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionCli.createFunction",
      "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented on the server by FunctionService, utilizing FunctionRepository, and finally accessed by clients through FunctionCli.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 21,
      "artifact_title": "FunctionRepository.createFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method likely implements the core logic for creating a function in the repository. It's implicitly related as it would handle the persistence of the new function based on the CreateFunctionRequest.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
      "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in the FunctionService and delegates to FunctionRepository for actual creation and persistence.",
      "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 25,
      "artifact_title": "FunctionService.createFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the createFunction operation described in the API documentation. It takes a CreateFunctionRequest as input and returns a FunctionInfo object, matching the API specification.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
      "predicted_trace_chain_explanation": "The API documentation directly describes the operation implemented by FunctionService.createFunction.",
      "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 20,
      "artifact_title": "FunctionInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, FunctionInfoDAO is likely used to persist and retrieve function information, corresponding to the FunctionInfo return type mentioned in the API.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionInfoDAO",
      "predicted_trace_chain_explanation": "The API specifies returning FunctionInfo, which is likely implemented using FunctionInfoDAO for persistence through the service and repository layers.",
      "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 59,
      "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the generateTemporaryVolumeCredentials functionality described in the documentation. The method signature matches the documented API, taking a GenerateTemporaryVolumeCredential parameter and returning a GenerateTemporaryVolumeCredentialResponse.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TemporaryVolumeCredentialsService class.",
      "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
      "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 66,
      "artifact_title": "VolumeRepository.createVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The generateTemporaryVolumeCredentials method likely uses the VolumeRepository to retrieve volume information based on the volumeId. This is necessary to generate the appropriate credentials for the specified volume.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.createVolume",
      "predicted_trace_chain_explanation": "The API endpoint is implemented by the service, which needs to interact with the VolumeRepository to access volume data for credential generation.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The VolumeInfoDAO is likely used indirectly when retrieving volume information from the database. It represents the data structure for volume information that is needed to generate temporary credentials.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.createVolume -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The service uses the repository to access volume data, which is represented by the VolumeInfoDAO in the database layer.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 37,
      "artifact_title": "SchemaRepository.getSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The SchemaRepository.getSchema method directly implements the getSchema operation described in the documentation. It takes a 'fullName' parameter, which corresponds to the 'full_name' parameter in the API documentation. The method returns a SchemaInfo object, matching the return type specified in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
      "predicted_trace_chain_explanation": "The documentation in SchemasApi.md describes the API endpoint. This is likely implemented in the SchemaService, which would then delegate to the SchemaRepository for actual data retrieval.",
      "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 42,
      "artifact_title": "SchemaService.getSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The SchemaService.getSchema method directly implements the API endpoint described in the documentation. It takes a 'fullName' parameter, matching the 'full_name' parameter in the API documentation. This service method would typically call the repository method to retrieve the schema information.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
      "predicted_trace_chain_explanation": "The API documentation directly describes the endpoint that would be implemented by the SchemaService.getSchema method.",
      "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 34,
      "artifact_title": "SchemaInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the SchemaInfoDAO is likely used internally to represent the schema data in the database. The getSchema operation would retrieve data using this DAO to construct the SchemaInfo object returned to the client.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema -> SchemaInfoDAO",
      "predicted_trace_chain_explanation": "The API call is handled by the service, which uses the repository to fetch data. The repository likely uses the SchemaInfoDAO to interact with the database and retrieve the schema information.",
      "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.getSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 54,
      "artifact_title": "TableService.createTable",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation describes a 'createTable' operation that takes a CreateTable object and returns a TableInfo object. This directly corresponds to the TableService.createTable method, which implements this functionality.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
      "predicted_trace_chain_explanation": "The API documentation directly describes the functionality implemented by TableService.createTable",
      "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 50,
      "artifact_title": "TableRepository.createTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the TableService.createTable method likely uses TableRepository.createTable to perform the actual table creation in the database.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
      "predicted_trace_chain_explanation": "The API operation is implemented by TableService, which would use TableRepository to interact with the database",
      "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
      "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_id": 49,
      "artifact_title": "TableInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The documentation mentions returning a TableInfo object. TableInfoDAO is likely used internally to convert between database and API representations of table information.",
      "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable -> TableInfoDAO",
      "predicted_trace_chain_explanation": "The creation process would involve converting the API request to a database entity and back, likely using TableInfoDAO",
      "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
      "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/TablesApi.md",
      "artifact_title": "TableCli.createTable",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
      "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 43,
      "artifact_title": "SchemaService.listSchemas",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes the 'listSchemas' operation, which is implemented by the SchemaService.listSchemas method. The method signature matches the documented parameters: catalog_name, max_results, and page_token. It also returns a ListSchemasResponse as specified in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
      "predicted_trace_chain_explanation": "The documentation in SchemasApi.md directly describes the listSchemas operation, which is implemented by the SchemaService.listSchemas method.",
      "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 38,
      "artifact_title": "SchemaRepository.listSchemas",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the SchemaService.listSchemas method likely delegates the actual schema listing operation to SchemaRepository.listSchemas. This repository method would handle the database interaction to retrieve the list of schemas based on the provided parameters.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
      "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in SchemaService.listSchemas, which in turn likely uses SchemaRepository.listSchemas to perform the actual data retrieval.",
      "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 34,
      "artifact_title": "SchemaInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The SchemaInfoDAO is likely used internally by the SchemaRepository.listSchemas method to map database records to SchemaInfo objects. This is inferred from the typical data access pattern, though not explicitly mentioned in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas -> SchemaInfoDAO",
      "predicted_trace_chain_explanation": "The API operation is implemented by the service, which uses the repository for data access, which in turn likely uses the DAO for object-relational mapping.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.listSchemas",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 58,
      "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the generateTemporaryTableCredentials functionality described in the documentation. The method signature matches the documented API call, taking a GenerateTemporaryTableCredential parameter and returning a GenerateTemporaryTableCredentialResponse.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the generateTemporaryTableCredentials method in the TemporaryTableCredentialsService class.",
      "ground_truth_relationship": "The code implements the documented API endpoint by checking if a table exists at a storage location, then either generating AWS S3 temporary credentials or returning empty credentials for local filesystems, matching the documented GenerateTemporaryTableCredentialResponse return type.",
      "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 52,
      "artifact_title": "TableRepository.getTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The generateTemporaryTableCredentials method likely uses the TableRepository.getTable method to retrieve table information based on the tableId. This is inferred from the need to access table storage location for generating credentials.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable",
      "predicted_trace_chain_explanation": "The API documentation describes generating credentials for a table. The service implementation would need to retrieve table information, which is done through the TableRepository.getTable method.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 49,
      "artifact_title": "TableInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The TableInfoDAO is likely used indirectly when retrieving table information. It represents the data structure for table metadata, including the storage location needed for generating credentials.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable -> TableInfoDAO",
      "predicted_trace_chain_explanation": "The API calls for table credential generation, which requires table information. This information is retrieved using the TableRepository, which in turn uses the TableInfoDAO to represent the table data.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 4,
      "artifact_title": "CatalogCli.updateCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The method CatalogCli.updateCatalog directly implements the updateCatalog operation described in the documentation. It takes the catalog name and UpdateCatalog object as parameters, matching the documented API. The method also returns a CatalogInfo object, which aligns with the documented return type.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogCli.updateCatalog",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is likely implemented in CatalogService. CatalogService would use CatalogRepository for data access, and CatalogCli provides the command-line interface for this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 10,
      "artifact_title": "CatalogRepository.updateCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned, CatalogRepository.updateCatalog is likely responsible for the actual database operations to update the catalog. It would handle the logic described in the documentation, such as updating the catalog name, comment, and properties.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
      "predicted_trace_chain_explanation": "The API documentation describes the operation, which would be implemented in CatalogService. CatalogService would then use CatalogRepository to perform the actual database update operations.",
      "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 15,
      "artifact_title": "CatalogService.updateCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "CatalogService.updateCatalog is likely the service-layer implementation of the updateCatalog operation described in the documentation. It would handle the HTTP request, validate input, and coordinate with the repository layer.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
      "predicted_trace_chain_explanation": "The API documentation directly describes the operation that would be implemented in CatalogService.",
      "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 5,
      "artifact_title": "CatalogInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "CatalogInfoDAO is likely used to represent the catalog data in the database. The updateCatalog operation would involve updating a CatalogInfoDAO object with the new information provided in the UpdateCatalog request.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogInfoDAO",
      "predicted_trace_chain_explanation": "The API operation would be implemented in CatalogService, which uses CatalogRepository for data access. CatalogRepository would then work with CatalogInfoDAO objects to update the database.",
      "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 61,
      "artifact_title": "VolumeCli.deleteVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the deleteVolume functionality described in the documentation. It takes a 'volumeFullName' parameter, which corresponds to the 'name' parameter in the API documentation. The method calls the volumesApi.deleteVolume() method, which aligns with the documented API endpoint.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
      "predicted_trace_chain_explanation": "The documentation describes the deleteVolume API endpoint, which is directly implemented by the VolumeCli.deleteVolume method.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 72,
      "artifact_title": "VolumeService.deleteVolume",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the deleteVolume API endpoint described in the documentation. It takes a 'fullName' parameter, which corresponds to the 'name' parameter in the API documentation. The method returns an HttpResponse with OK status, which aligns with the documented behavior.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
      "predicted_trace_chain_explanation": "The documentation describes the deleteVolume API endpoint, which is directly implemented by the VolumeService.deleteVolume method in the server-side code.",
      "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 67,
      "artifact_title": "VolumeRepository.deleteVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method implements the core logic for deleting a volume as described in the API documentation. It takes a 'name' parameter, which corresponds to the 'name' parameter in the API documentation. The method handles the actual deletion of the volume from the repository.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
      "predicted_trace_chain_explanation": "The documentation describes the deleteVolume API endpoint, which is implemented by VolumeService.deleteVolume, which in turn calls VolumeRepository.deleteVolume to perform the actual deletion.",
      "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
      "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/VolumesApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "This class represents the data access object for volume information. While not explicitly mentioned in the documentation, it is likely used by the VolumeRepository.deleteVolume method to interact with the database when deleting a volume.",
      "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The deleteVolume operation, as described in the documentation, is implemented through a chain of calls that ultimately interacts with the VolumeInfoDAO to remove the volume from the database.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 58,
      "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the 'generateTemporaryTableCredentials' API endpoint described in the documentation. The documentation specifies a POST request to '/temporary-table-credentials' for generating temporary table credentials, which is exactly what this method does.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the TemporaryTableCredentialsService class in the server code.",
      "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
      "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 50,
      "artifact_title": "TableRepository.createTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the TableRepository is likely used to retrieve table information when generating temporary credentials. The createTable method suggests the existence of a table storage location, which is needed for generating credentials.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.createTable",
      "predicted_trace_chain_explanation": "The API endpoint requires table information to generate credentials. The TemporaryTableCredentialsService would use the TableRepository to access this information, which is initially set when creating a table.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
      "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
      "artifact_id": 52,
      "artifact_title": "TableRepository.getTable",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "This method is likely used by the TemporaryTableCredentialsService to retrieve the table information necessary for generating temporary credentials. The documentation implies that table-specific credentials are generated, which would require fetching table details.",
      "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable",
      "predicted_trace_chain_explanation": "To generate temporary credentials for a specific table, the service needs to retrieve the table's details, which is done through the TableRepository's getTable method.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 59,
      "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "This method directly implements the API endpoint described in the documentation. The documentation explicitly mentions 'generateTemporaryVolumeCredentials' as a POST method for generating temporary volume credentials, which is exactly what this service method does.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the service method.",
      "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
      "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 65,
      "artifact_title": "VolumeInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the VolumeInfoDAO is likely used to retrieve volume information when generating temporary credentials. The API operates on volumes, so this DAO would be necessary to access volume data.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeInfoDAO",
      "predicted_trace_chain_explanation": "The API endpoint is implemented by the service method, which would need to access volume information, likely using the VolumeInfoDAO.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
      "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
      "artifact_id": 68,
      "artifact_title": "VolumeRepository.getVolume",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "This method is likely used internally by the generateTemporaryVolumeCredentials service to retrieve the volume information needed for generating credentials. The API operates on a specific volume, so this method would be necessary to get the volume details.",
      "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.getVolume",
      "predicted_trace_chain_explanation": "The API endpoint is implemented by the service method, which would need to retrieve the specific volume information, likely using the VolumeRepository.getVolume method.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 16,
      "artifact_title": "FunctionCli.createFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'createFunction' API endpoint with a POST request to '/functions'. This directly corresponds to the 'FunctionCli.createFunction' method, which implements the client-side logic for creating a function.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionCli.createFunction",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the FunctionService, which likely uses the FunctionRepository for data persistence, and is ultimately called by the FunctionCli for command-line interactions.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 17,
      "artifact_title": "FunctionCli.deleteFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'deleteFunction' API endpoint with a DELETE request to '/functions/{name}'. This directly corresponds to the 'FunctionCli.deleteFunction' method, which implements the client-side logic for deleting a function.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction -> FunctionCli.deleteFunction",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the FunctionService, which likely uses the FunctionRepository for data deletion, and is ultimately called by the FunctionCli for command-line interactions.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 18,
      "artifact_title": "FunctionCli.getFunction",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'getFunction' API endpoint with a GET request to '/functions/{name}'. This directly corresponds to the 'FunctionCli.getFunction' method, which implements the client-side logic for retrieving a function.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionCli.getFunction",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the FunctionService, which likely uses the FunctionRepository for data retrieval, and is ultimately called by the FunctionCli for command-line interactions.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 19,
      "artifact_title": "FunctionCli.listFunctions",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions a 'listFunctions' API endpoint with a GET request to '/functions'. This directly corresponds to the 'FunctionCli.listFunctions' method, which implements the client-side logic for listing functions.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions -> FunctionCli.listFunctions",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the FunctionService, which likely uses the FunctionRepository for data retrieval, and is ultimately called by the FunctionCli for command-line interactions.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 25,
      "artifact_title": "FunctionService.createFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the 'FunctionService.createFunction' method is implicitly related as it likely implements the server-side logic for the 'createFunction' API endpoint described in the documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the FunctionService, which likely uses the FunctionRepository for data persistence.",
      "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 26,
      "artifact_title": "FunctionService.deleteFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the 'FunctionService.deleteFunction' method is implicitly related as it likely implements the server-side logic for the 'deleteFunction' API endpoint described in the documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the FunctionService, which likely uses the FunctionRepository for data deletion.",
      "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 27,
      "artifact_title": "FunctionService.getFunction",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the 'FunctionService.getFunction' method is implicitly related as it likely implements the server-side logic for the 'getFunction' API endpoint described in the documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the FunctionService, which likely uses the FunctionRepository for data retrieval.",
      "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_id": 28,
      "artifact_title": "FunctionService.listFunctions",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the 'FunctionService.listFunctions' method is implicitly related as it likely implements the server-side logic for the 'listFunctions' API endpoint described in the documentation.",
      "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
      "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented by the FunctionService, which likely uses the FunctionRepository for data retrieval.",
      "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionRepository.deleteFunction",
      "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionRepository.listFunctions",
      "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionRepository.createFunction",
      "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
      "document_location": "api/Apis/FunctionsApi.md",
      "artifact_title": "FunctionRepository.getFunction",
      "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
      "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 40,
      "artifact_title": "SchemaService.createSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'createSchema' under the HTTP POST method, which directly corresponds to the SchemaService.createSchema method. This method implements the API endpoint for creating a schema as described in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
      "predicted_trace_chain_explanation": "The documentation directly describes the createSchema API endpoint, which is implemented by the SchemaService.createSchema method.",
      "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 41,
      "artifact_title": "SchemaService.deleteSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'deleteSchema' under the HTTP DELETE method, which directly corresponds to the SchemaService.deleteSchema method. This method implements the API endpoint for deleting a schema as described in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
      "predicted_trace_chain_explanation": "The documentation directly describes the deleteSchema API endpoint, which is implemented by the SchemaService.deleteSchema method.",
      "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 42,
      "artifact_title": "SchemaService.getSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'getSchema' under the HTTP GET method, which directly corresponds to the SchemaService.getSchema method. This method implements the API endpoint for retrieving a schema as described in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
      "predicted_trace_chain_explanation": "The documentation directly describes the getSchema API endpoint, which is implemented by the SchemaService.getSchema method.",
      "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 43,
      "artifact_title": "SchemaService.listSchemas",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'listSchemas' under the HTTP GET method, which directly corresponds to the SchemaService.listSchemas method. This method implements the API endpoint for listing schemas as described in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
      "predicted_trace_chain_explanation": "The documentation directly describes the listSchemas API endpoint, which is implemented by the SchemaService.listSchemas method.",
      "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 44,
      "artifact_title": "SchemaService.updateSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation explicitly mentions 'updateSchema' under the HTTP PATCH method, which directly corresponds to the SchemaService.updateSchema method. This method implements the API endpoint for updating a schema as described in the documentation.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
      "predicted_trace_chain_explanation": "The documentation directly describes the updateSchema API endpoint, which is implemented by the SchemaService.updateSchema method.",
      "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 35,
      "artifact_title": "SchemaRepository.createSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the SchemaRepository.createSchema method is likely used by the SchemaService.createSchema to perform the actual creation of the schema in the database.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the createSchema endpoint, which is implemented by SchemaService.createSchema. This service method likely uses SchemaRepository.createSchema to perform the actual database operation.",
      "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 36,
      "artifact_title": "SchemaRepository.deleteSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the SchemaRepository.deleteSchema method is likely used by the SchemaService.deleteSchema to perform the actual deletion of the schema from the database.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the deleteSchema endpoint, which is implemented by SchemaService.deleteSchema. This service method likely uses SchemaRepository.deleteSchema to perform the actual database operation.",
      "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 37,
      "artifact_title": "SchemaRepository.getSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the SchemaRepository.getSchema method is likely used by the SchemaService.getSchema to retrieve the schema information from the database.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the getSchema endpoint, which is implemented by SchemaService.getSchema. This service method likely uses SchemaRepository.getSchema to perform the actual database query.",
      "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 38,
      "artifact_title": "SchemaRepository.listSchemas",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the SchemaRepository.listSchemas method is likely used by the SchemaService.listSchemas to retrieve the list of schemas from the database.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
      "predicted_trace_chain_explanation": "The API documentation describes the listSchemas endpoint, which is implemented by SchemaService.listSchemas. This service method likely uses SchemaRepository.listSchemas to perform the actual database query.",
      "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 39,
      "artifact_title": "SchemaRepository.updateSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned in the documentation, the SchemaRepository.updateSchema method is likely used by the SchemaService.updateSchema to perform the actual update of the schema in the database.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
      "predicted_trace_chain_explanation": "The API documentation describes the updateSchema endpoint, which is implemented by SchemaService.updateSchema. This service method likely uses SchemaRepository.updateSchema to perform the actual database operation.",
      "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.createSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.listSchemas",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.updateSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.deleteSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.getSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 0,
      "artifact_title": "CatalogCli.createCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The document explicitly mentions 'createCatalog' as a POST method for creating a catalog. This method implements the API functionality described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogCli.createCatalog",
      "predicted_trace_chain_explanation": "The API documentation describes the createCatalog endpoint, which is implemented by the CatalogService, which uses the CatalogRepository to add the catalog, and finally the CatalogCli provides the command-line interface for this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 1,
      "artifact_title": "CatalogCli.deleteCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The document explicitly mentions 'deleteCatalog' as a DELETE method for deleting a catalog. This method implements the API functionality described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog -> CatalogCli.deleteCatalog",
      "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog endpoint, which is implemented by the CatalogService, which uses the CatalogRepository to delete the catalog, and finally the CatalogCli provides the command-line interface for this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 2,
      "artifact_title": "CatalogCli.getCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The document explicitly mentions 'getCatalog' as a GET method for retrieving a catalog. This method implements the API functionality described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogCli.getCatalog",
      "predicted_trace_chain_explanation": "The API documentation describes the getCatalog endpoint, which is implemented by the CatalogService, which uses the CatalogRepository to retrieve the catalog, and finally the CatalogCli provides the command-line interface for this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 3,
      "artifact_title": "CatalogCli.listCatalogs",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The document explicitly mentions 'listCatalogs' as a GET method for listing catalogs. This method implements the API functionality described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogCli.listCatalogs",
      "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which is implemented by the CatalogService, which uses the CatalogRepository to list the catalogs, and finally the CatalogCli provides the command-line interface for this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 4,
      "artifact_title": "CatalogCli.updateCatalog",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The document explicitly mentions 'updateCatalog' as a PATCH method for updating a catalog. This method implements the API functionality described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogCli.updateCatalog",
      "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog endpoint, which is implemented by the CatalogService, which uses the CatalogRepository to update the catalog, and finally the CatalogCli provides the command-line interface for this operation.",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 11,
      "artifact_title": "CatalogService.createCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the document, this service method likely implements the createCatalog API functionality described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
      "predicted_trace_chain_explanation": "The API documentation describes the createCatalog endpoint, which is implemented by the CatalogService, which in turn uses the CatalogRepository to add the catalog to the system.",
      "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 12,
      "artifact_title": "CatalogService.deleteCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the document, this service method likely implements the deleteCatalog API functionality described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
      "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog endpoint, which is implemented by the CatalogService, which in turn uses the CatalogRepository to delete the catalog from the system.",
      "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 13,
      "artifact_title": "CatalogService.getCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the document, this service method likely implements the getCatalog API functionality described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
      "predicted_trace_chain_explanation": "The API documentation describes the getCatalog endpoint, which is implemented by the CatalogService, which in turn uses the CatalogRepository to retrieve the catalog from the system.",
      "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 14,
      "artifact_title": "CatalogService.listCatalogs",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the document, this service method likely implements the listCatalogs API functionality described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
      "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which is implemented by the CatalogService, which in turn uses the CatalogRepository to list the catalogs in the system.",
      "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_id": 15,
      "artifact_title": "CatalogService.updateCatalog",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "While not explicitly mentioned in the document, this service method likely implements the updateCatalog API functionality described in the documentation.",
      "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
      "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog endpoint, which is implemented by the CatalogService, which in turn uses the CatalogRepository to update the catalog in the system.",
      "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.listCatalogs",
      "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.addCatalog",
      "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.getCatalog",
      "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.deleteCatalog",
      "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
      "document_location": "api/Apis/CatalogsApi.md",
      "artifact_title": "CatalogRepository.updateCatalog",
      "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
      "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 41,
      "artifact_title": "SchemaService.deleteSchema",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The documentation directly describes the 'deleteSchema' operation, which is implemented by the SchemaService.deleteSchema method. The method signature matches the documented parameters 'full_name' and 'force'.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
      "predicted_trace_chain_explanation": "The documentation in SchemasApi.md directly describes the deleteSchema operation, which is implemented by the SchemaService.deleteSchema method.",
      "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 36,
      "artifact_title": "SchemaRepository.deleteSchema",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "While not explicitly mentioned, the SchemaRepository.deleteSchema method is likely used by SchemaService to perform the actual deletion of the schema from the database.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
      "predicted_trace_chain_explanation": "The documentation describes the deleteSchema operation, which is implemented in SchemaService.deleteSchema. This service method would typically use SchemaRepository.deleteSchema to perform the actual database operation.",
      "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_id": 34,
      "artifact_title": "SchemaInfoDAO",
      "predicted_relationship": "implicit",
      "relationship_type": "uses",
      "relationship_explanation": "The SchemaInfoDAO is likely used in the process of deleting a schema, as it represents the database entity for schemas.",
      "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema -> SchemaInfoDAO",
      "predicted_trace_chain_explanation": "The deletion process described in the documentation is implemented through the service and repository layers, ultimately interacting with the SchemaInfoDAO to remove the schema from the database.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
      "document_location": "api/Apis/SchemasApi.md",
      "artifact_title": "SchemaCli.deleteSchema",
      "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
      "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    }
  ]
}