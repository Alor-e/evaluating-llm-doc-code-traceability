{
  "runs": [
    {
      "dataset": "unity_catalog",
      "run_id": 1,
      "timestamp": "2025-02-12T08:08:37.124953",
      "results": [
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet from 'api/Apis/CatalogsApi.md' defines the 'listCatalogs' operation with parameters (page_token, max_results) and a return type ListCatalogsResponse. The method 'CatalogService.listCatalogs' directly implements this API endpoint by being annotated with @Get and by receiving the optional parameters and returning an HttpResponse encapsulating the JSON-formatted catalog list. This shows a one-to-one correspondence between the documented operation and the service layer implementation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The trace starts with the documentation located in 'api/Apis/CatalogsApi.md' which describes the listing of catalogs, and it maps directly to the 'CatalogService.listCatalogs' artifact. This chain is necessary because the documented API is exposed by the REST endpoint provided by the service method.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.listCatalogs",
          "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly corresponds to the documented listFunctions API endpoint. The documentation specifies a function 'listFunctions' that returns a ListFunctionsResponse and accepts parameters such as catalog_name, schema_name, max_results, and page_token. FunctionService.listFunctions is the REST endpoint implementation that directly handles GET requests for listing functions.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The documentation snippet is extracted from FunctionsApi.md and explicitly defines the listFunctions operation. The service layer method FunctionService.listFunctions implements this endpoint.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "FunctionService.listFunctions internally calls FUNCTION_REPOSITORY.listFunctions to fetch and prepare the ListFunctionsResponse. This repository method provides the underlying data and is thus an integral part of the chain that delivers the documented functionality.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "Starting from the functions API documented in FunctionsApi.md, the request is routed through FunctionService.listFunctions, which in turn invokes FunctionRepository.listFunctions to construct and return the ListFunctionsResponse as detailed in the documentation.",
          "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.listFunctions",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet clearly describes a 'getVolume' API method that returns a VolumeInfo. The 'VolumeService.getVolume' method is annotated with @Get, accepts a fully qualified volume name as a parameter, and returns a HttpResponse with the VolumeInfo in JSON format. This explicitly corresponds to the documented functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The API documentation from 'VolumesApi.md' directly maps to the service layer, where the 'VolumeService.getVolume' method serves as the REST endpoint implementation for the documented getVolume operation.",
          "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although not directly mentioned in the documentation snippet, the 'VolumeRepository.getVolume' method is invoked by the 'VolumeService.getVolume' method to fetch the VolumeInfo from the database. Its role is essential in providing the underlying data retrieval needed for the API call.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The chain starts with the API documentation which describes the getVolume operation. The service method, 'VolumeService.getVolume', directly implements the API endpoint and then calls 'VolumeRepository.getVolume' to obtain the VolumeInfo, forming the complete traceability pathway.",
          "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes the 'deleteFunction(name)' operation, detailing that it deletes a function by its fully-qualified name. The 'FunctionService.deleteFunction' method is annotated with @Delete and accepts a 'name' parameter, which directly implements this functionality as defined in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The chain starts from the API documentation file (FunctionsApi.md) where the deleteFunction operation is described, and leads directly to the FunctionService.deleteFunction method which serves as the REST endpoint for this operation.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although not directly exposed in the API documentation, the deletion logic is implemented in the persistence layer. The FunctionService.deleteFunction method delegates the actual deletion operation to the FunctionRepository.deleteFunction method, making it an essential part of the overall deleteFunction functionality.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation in FunctionsApi.md motivates the deleteFunction operation which is implemented in FunctionService.deleteFunction. This service method then calls FunctionRepository.deleteFunction to perform the underlying database deletion, thus forming a chain from the API specification through the service layer to the repository layer.",
          "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.deleteFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements endpoint",
          "relationship_explanation": "The FunctionsApi documentation explicitly mentions the createFunction endpoint (POST /functions). Artifact 'FunctionService.createFunction' directly implements this endpoint by handling the HTTP POST request and invoking the creation logic via FUNCTION_REPOSITORY.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The documentation file 'FunctionsApi.md' describes the 'createFunction' HTTP endpoint, and its implementation is provided by the 'FunctionService.createFunction' method, forming a direct traceability pathway.",
          "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements endpoint",
          "relationship_explanation": "The documentation lists deleteFunction (DELETE /functions/{name}) as an endpoint. Artifact 'FunctionService.deleteFunction' maps directly to this functionality by handling the HTTP DELETE request and deleting the specified function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The chain starts at the 'FunctionsApi.md' documentation which defines the deleteFunction endpoint and continues to its implementation in 'FunctionService.deleteFunction'.",
          "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements endpoint",
          "relationship_explanation": "According to the documentation, the getFunction endpoint (GET /functions/{name}) is provided. 'FunctionService.getFunction' directly implements this endpoint, processing the GET request and retrieving the desired function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The documentation clearly defines the getFunction endpoint, which is realized through the 'FunctionService.getFunction' method, forming a straightforward trace.",
          "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implements endpoint",
          "relationship_explanation": "The documentation defines the listFunctions endpoint (GET /functions) for listing available functions. 'FunctionService.listFunctions' implements this functionality by handling the HTTP GET request and fetching a list of functions via the repository.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "Starting from the documentation 'FunctionsApi.md', the listFunctions endpoint is directly implemented by the 'FunctionService.listFunctions' method, thereby completing the traceability chain.",
          "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.listFunctions",
          "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.getFunction",
          "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.deleteFunction",
          "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.createFunction",
          "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.deleteFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.createFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.listFunctions",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes the listVolumes endpoint with parameters catalog_name, schema_name, max_results, and page_token. This directly matches the REST endpoint method 'VolumeService.listVolumes' which is annotated with @Get and accepts these parameters (with an additional optional include_browse) and returns a JSON response containing the volumes. This is an explicit implementation of the documented API.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation provided in 'VolumesApi.md' specifies the listVolumes operation. The trace directly links this documentation to the 'VolumeService.listVolumes' method that publicly exposes the endpoint, making it the primary implementation artifact.",
          "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Though not directly exposed as a REST endpoint, the 'VolumeRepository.listVolumes' method performs the core business logic of retrieving volumes from the datastore, based on the catalog and schema. It is implicitly used by the 'VolumeService.listVolumes' method to fulfill the API call described in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The complete traceability path starts from the 'VolumesApi.md' documentation, which is implemented by the 'VolumeService.listVolumes' endpoint. This endpoint in turn calls the 'VolumeRepository.listVolumes' method to retrieve volume data, forming an implicit dependency in the overall functionality.",
          "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet defines a REST endpoint 'deleteTable(full_name)' for deleting a table. TableService.deleteTable is annotated with @Delete(\"/{full_name}\") and accepts a 'full_name' parameter, directly matching the documented signature and HTTP behavior. This method is part of the public API that implements the documented functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "Starting from the documentation in TablesApi.md, the deleteTable operation is explicitly implemented by TableService.deleteTable, forming a direct traceability pathway.",
          "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates/uses",
          "relationship_explanation": "Although not directly mentioned in the documentation snippet, TableService.deleteTable internally delegates the deletion operation to TableRepository.deleteTable to perform the actual removal of the table from the database. This makes TableRepository.deleteTable an implicit, yet necessary, component of the overall deleteTable functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The deleteTable request as defined in TablesApi.md is handled by TableService.deleteTable, which then calls TableRepository.deleteTable to execute the persistence layer deletion, establishing an implicit trace that connects the public API to its internal implementation.",
          "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements HTTP DELETE endpoint",
          "relationship_explanation": "The documentation snippet specifies a deleteVolume operation that accepts a fully qualified volume name. This directly corresponds to the HTTP DELETE endpoint implemented by the VolumeService.deleteVolume method (artifact 72), which is annotated with @Delete and takes the 'full_name' parameter.",
          "predicted_trace_chain": "api/Apis/VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation (from api/Apis/VolumesApi.md) describes the deleteVolume operation, which is explicitly implemented by the VolumeService.deleteVolume endpoint.",
          "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "used by service to perform deletion",
          "relationship_explanation": "While not explicitly mentioned in the documentation text, the actual deletion logic lies in the VolumeRepository.deleteVolume method (artifact 67). This method is invoked by VolumeService.deleteVolume to carry out the deletion of the volume from persistence, forming an implicit part of the operation.",
          "predicted_trace_chain": "api/Apis/VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "Starting from the API documentation, the deleteVolume operation is first handled by VolumeService.deleteVolume, which in turn calls VolumeRepository.deleteVolume to execute the deletion, thus completing the traceability chain.",
          "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet details the 'deleteSchema' operation with parameters 'full_name' and 'force'. The SchemaService.deleteSchema method is annotated with @Delete and accepts these parameters, directly mapping to the documented REST API endpoint for deleting a schema. This explicit match in parameter names and intended functionality confirms the direct implementation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The deleteSchema operation is described in the SchemasApi.md documentation. The service layer implements this endpoint via SchemaService.deleteSchema, forming a direct link from the API specification to the service implementation.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "Although not directly mentioned in the documentation snippet, SchemaRepository.deleteSchema is invoked by SchemaService.deleteSchema to carry out the actual deletion of the schema from persistence. This method is crucial in completing the deletion operation described in the API, providing backend support for the HTTP endpoint.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation in SchemasApi.md specifies the deleteSchema operation. This operation is implemented at the service level in SchemaService.deleteSchema, which in turn calls SchemaRepository.deleteSchema to perform the removal in the database. This chain outlines the full pathway from the documentation to the underlying persistence layer.",
          "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This artifact directly implements the GET endpoint for retrieving a function as described in the documentation. The documentation\u2019s signature 'FunctionInfo getFunction(name)' corresponds to this method which is annotated with @Get and accepts a parameter 'name'.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The documentation located in FunctionsApi.md maps directly to the REST endpoint declared in FunctionService.getFunction, which is the public interface for the 'getFunction' operation.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 23,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "FunctionService.getFunction delegates the task of retrieving the function details to this repository method. It returns a FunctionInfo object based on the fully-qualified function name, thereby fulfilling part of the documented functionality.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "This chain shows that the documented API first routes the request to the service method, which then calls FunctionRepository.getFunction to fetch the required data, completing the functionality described in the documentation.",
          "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionInfoDAO",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the core functionality of listing schemas. Its signature \u201clistSchemas(String catalogName, Optional<Integer> maxResults, Optional<String> pageToken)\u201d and its return of a ListSchemasResponse exactly match the documented API specification.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation from SchemasApi.md specifies the listSchemas operation, and the SchemaRepository.listSchemas method is the backend implementation that interacts with the database to fetch and compile the list of schemas.",
          "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes",
          "relationship_explanation": "This method is annotated with @Get and serves as the HTTP endpoint that exposes the listSchemas functionality. It delegates to the SchemaRepository.listSchemas method and wraps the result in an HttpResponse, directly fulfilling the documentation requirements for the API.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "Starting from the documentation in SchemasApi.md, the HTTP interface for the listSchemas operation is provided by the SchemaService.listSchemas method, which exposes the API to external clients.",
          "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 32,
          "artifact_title": "SchemaCli.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although this method is part of the CLI client, it calls the schemasApi.listSchemas operation to retrieve schemas. It sets default values (e.g. maxResults and a null page token) and converts the API response into a string, indirectly reflecting the documented API functionality.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "predicted_trace_chain_explanation": "The documented listSchemas operation in SchemasApi.md is indirectly utilized by the CLI implementation in SchemaCli.listSchemas, which acts as a client-side wrapper invoking the API and presenting the results.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly states the 'createVolume' operation (HTTP POST /volumes). This endpoint is directly implemented by the VolumeService.createVolume method, which handles creation of a volume by delegating to the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The document (VolumesApi.md) specifies the creation endpoint, and the chain directly links to the method VolumeService.createVolume, which implements the documented functionality.",
          "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly mentions the 'deleteVolume' operation (HTTP DELETE /volumes/{name}). VolumeService.deleteVolume is the corresponding method that implements this API endpoint by calling the underlying volume repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The documented DELETE endpoint in VolumesApi.md is directly mapped to VolumeService.deleteVolume, establishing a clear trace from the documentation to the service layer.",
          "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The 'getVolume' operation, as described in the documentation (HTTP GET /volumes/{name}), is directly implemented by the VolumeService.getVolume method, which retrieves volume details from the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The API documentation clearly lists the getVolume endpoint, and this connects directly to VolumeService.getVolume, which implements the functionality.",
          "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation describes the 'listVolumes' operation (HTTP GET /volumes) for listing volumes. VolumeService.listVolumes implements this endpoint by interfacing with the repository to fetch a list of volumes.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The chain starts at the VolumesApi.md document and directly leads to the VolumeService.listVolumes method, which implements the listing functionality as documented.",
          "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The 'updateVolume' operation (HTTP PATCH /volumes/{name}) is explicitly mentioned in the documentation. This endpoint is implemented by the VolumeService.updateVolume method, which processes changes to a volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The documentation provides a direct reference to the updateVolume operation; this is traced through VolumeService.updateVolume, completing the pathway from documented functionality to service implementation.",
          "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.listVolumes",
          "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.getVolume",
          "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.createVolume",
          "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.deleteVolume",
          "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.updateVolume",
          "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies the updateSchema method signature as 'SchemaInfo updateSchema(full_name, UpdateSchema)'. This exactly matches the method in SchemaRepository.updateSchema which takes a full name and an UpdateSchema object and returns a SchemaInfo. This method implements the core business logic for updating a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "Starting from the documentation located in 'api/Apis/SchemasApi.md', the updateSchema functionality is directly implemented by SchemaRepository.updateSchema. This direct match of the method signature and return type confirms the trace.",
          "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes",
          "relationship_explanation": "SchemaService.updateSchema is annotated with @Patch and acts as the HTTP endpoint for the updateSchema operation. It processes incoming HTTP requests with JSON payloads and delegates the schema update to SchemaRepository.updateSchema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The documentation in 'SchemasApi.md' outlines the REST API for updateSchema. SchemaService.updateSchema is the service layer that exposes this endpoint and, through its delegation to the repository layer, fulfills the documented functionality.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "This method directly implements the deleteCatalog API operation as documented. It exposes an HTTP DELETE endpoint that accepts 'name' and 'force' as parameters and returns an HTTP response, which directly corresponds to the documented behavior of deleting a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The documentation in 'api/Apis/CatalogsApi.md' specifies the deleteCatalog operation, which is directly mapped to this service method.",
          "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements lower-level deletion logic",
          "relationship_explanation": "This repository method contains the core deletion logic that removes a catalog from persistent storage. It is invoked by CatalogService.deleteCatalog, thereby fulfilling the documented operation by ensuring the actual deletion, including validations and cascading deletion of dependent schemas when required.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The deleteCatalog API operation is first implemented by the service layer (CatalogService.deleteCatalog), which in turn calls this repository method to perform the actual deletion.",
          "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 1,
          "artifact_title": "CatalogCli.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "uses API deletion functionality",
          "relationship_explanation": "This CLI method demonstrates the usage of the deleteCatalog operation by obtaining catalog parameters from a JSON object and invoking catalogsApi.deleteCatalog. Although it is not directly the API implementation, it indirectly employs the API functionality to delete a catalog, thereby offering a command\u2010line interface to the documented operation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "predicted_trace_chain_explanation": "While the documentation originates from the API specification, this CLI artifact shows how the deleteCatalog operation is consumed in a different context (command-line interface), effectively utilizing the same underlying API functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies a method signature 'TableInfo createTable(CreateTable)' which exactly matches the signature of the method 'TableRepository.createTable'. This method takes a CreateTable object as a parameter and returns a TableInfo, directly implementing the documented functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The trace chain begins with the documentation in TablesApi.md and directly maps to the repository method, which is the core implementation of table creation.",
          "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates",
          "relationship_explanation": "Although this method returns an HttpResponse (wrapping the TableInfo), 'TableService.createTable' is the REST endpoint that receives the CreateTable input and delegates the actual creation to TableRepository.createTable. Its role in exposing the API makes it implicitly linked to the documented functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The documentation from TablesApi.md is tied to the HTTP API endpoint in TableService.createTable, which in turn calls TableRepository.createTable to perform the operation. This chain highlights the delegation path from the REST service layer to the implementation layer.",
          "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableInfoDAO",
          "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies the signature 'FunctionInfo createFunction(CreateFunctionRequest)' which is directly implemented by this method. It accepts a CreateFunctionRequest, processes it, and returns a FunctionInfo, exactly matching the documented API contract.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "Starting from the FunctionsApi.md documentation, the documented function creation operation is fulfilled by FunctionRepository.createFunction, establishing a direct trace from API description to business logic implementation.",
          "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This method is an HTTP endpoint (annotated with @Post) that handles incoming API requests for function creation. It delegates the creation logic to FunctionRepository.createFunction, thereby indirectly realizing the documented createFunction operation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The API documentation in FunctionsApi.md maps to the service endpoint FunctionService.createFunction, which wraps the repository call. This chain shows how the HTTP layer uses the underlying function creation logic, ensuring the documented functionality is provided.",
          "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.createFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionInfoDAO",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies a getTable operation that returns a TableInfo object using a full_name parameter. The 'TableService.getTable' method (artifact id 56) is directly annotated with @Get(\"/{full_name}\") and maps the HTTP GET request to retrieve table information. Thus, it explicitly implements the documented API endpoint, conforming to the expected behavior and HTTP headers described.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The chain starts with the API documentation file (TablesApi.md) and directly points to the HTTP endpoint method 'TableService.getTable', which clearly aligns with the documented getTable functionality.",
          "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "The 'TableService.getTable' method delegates the core business logic of retrieving the table information to 'TableRepository.getTable' (artifact id 52). This repository method returns a TableInfo object matching the documented signature, forming an implicit part of the implementation chain of the getTable functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The chain illustrates that the API documentation is implemented first through the HTTP endpoint in 'TableService.getTable', which in turn uses 'TableRepository.getTable' to fetch and return the required TableInfo, thereby completing the operation as documented.",
          "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableInfoDAO",
          "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly lists the createSchema endpoint (HTTP POST /schemas) and this method directly implements that functionality by creating a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The documentation file 'SchemasApi.md' defines the createSchema endpoint, which is implemented by the SchemaService.createSchema method.",
          "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly describes the deleteSchema endpoint (HTTP DELETE /schemas/{full_name}). This method is responsible for deleting a schema as described.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The documentation in 'SchemasApi.md' maps the DELETE /schemas/{full_name} operation to the functionality implemented in SchemaService.deleteSchema.",
          "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly lists the getSchema endpoint (HTTP GET /schemas/{full_name}) for retrieving a schema. This method provides that functionality.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The 'SchemasApi.md' documentation associates the getSchema operation with retrieving schema details, which is directly implemented by SchemaService.getSchema.",
          "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly details the listSchemas endpoint (HTTP GET /schemas) used to list all schemas. This method implements that endpoint.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "As documented in 'SchemasApi.md', the listing of schemas is handled by SchemaService.listSchemas, forming a direct traceability chain.",
          "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly defines the updateSchema endpoint (HTTP PATCH /schemas/{full_name}) for updating a schema. This method realizes that functionality.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The documentation in 'SchemasApi.md' clearly maps the update operation to this method, making the trace direct and explicit.",
          "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.createSchema",
          "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.getSchema",
          "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.listSchemas",
          "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.updateSchema",
          "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.deleteSchema",
          "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly names the endpoint method 'generateTemporaryVolumeCredentials' under the TemporaryVolumeCredentialsApi. This directly maps to the implementation provided by the method 'generateTemporaryVolumeCredentials' in the 'TemporaryVolumeCredentialsService' class, which is responsible for handling POST requests at '/temporary-volume-credentials' and generating temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The chain begins with the documentation file 'TemporaryVolumeCredentialsApi.md' where the endpoint is documented. It then directly traces to the corresponding method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials', which implements the documented functionality.",
          "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet shows the signature 'VolumeInfo createVolume(CreateVolumeRequestContent)' as the core functionality for creating a volume. This exactly matches the method signature in VolumeRepository.createVolume, which directly implements the volume creation logic.",
          "predicted_trace_chain": "Apis/VolumesApi.md -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "Starting from the API documentation for volumes (Apis/VolumesApi.md), the createVolume operation is implemented in the repository layer, making this a direct trace from spec to implementation.",
          "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "calls",
          "relationship_explanation": "Although not directly referenced by the function signature shown in the documentation, VolumeService.createVolume serves as the HTTP endpoint (annotated with @Post) that receives the REST call with JSON headers. It internally calls VolumeRepository.createVolume to execute the actual creation, thereby indirectly connecting the API documentation to the implementation.",
          "predicted_trace_chain": "Apis/VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The API documentation specifies HTTP headers and content types which indicate a REST interface. VolumeService.createVolume, acting as the REST wrapper, is the entry point that delegates to the repository method, forming an implicit trace chain.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes the API for generating temporary volume credentials by specifying a method signature with a parameter of type GenerateTemporaryVolumeCredential and a return type of GenerateTemporaryVolumeCredentialResponse. The service method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials' (artifact_id 59) explicitly implements this functionality by accepting the same parameter type and returning an HTTP response containing a GenerateTemporaryVolumeCredentialResponse. This direct match of signature and functionality demonstrates an explicit trace from the documentation to the code.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The trace chain starts at the documentation file 'TemporaryVolumeCredentialsApi.md' (as indicated by the provided location) and directly maps to the service method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials'. This chain shows that the documented API is implemented by the service class, fulfilling the specified functionality.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies the method signature 'VolumeInfo updateVolume(name, UpdateVolumeRequestContent)' and describes the update of a volume's name or comment. VolumeRepository.updateVolume (artifact 70) directly implements this behavior by processing a fully qualified volume name and an UpdateVolumeRequestContent, performing the update in the persistence layer, and returning a VolumeInfo as documented.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The updateVolume functionality documented in 'VolumesApi.md' is directly implemented by the VolumeRepository.updateVolume method, making the trace chain start from the documentation file and end with this repository method.",
          "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "wraps",
          "relationship_explanation": "VolumeService.updateVolume (artifact 75) is a REST endpoint that exposes the updateVolume operation. Although its signature returns an HttpResponse (a JSON response wrapping the VolumeInfo), it internally calls VolumeRepository.updateVolume to perform the actual update. This makes it an implicit part of the update operation as described in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "Starting from the API documentation in 'VolumesApi.md', the updateVolume functionality is exposed over HTTP via the VolumeService.updateVolume endpoint, which indirectly leverages the repository method to fulfill the documented behavior.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies a 'getSchema' function with a parameter 'full_name' that returns a SchemaInfo object. The method 'SchemaService.getSchema' explicitly implements this functionality as it provides a REST endpoint for retrieving a schema using the full name.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The API documentation (SchemasApi.md) describes the getSchema operation and directly maps to the SchemaService.getSchema method, which is the endpoint handling this functionality.",
          "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "While not explicitly mentioned in the documentation snippet, SchemaService.getSchema internally depends on SchemaRepository.getSchema to retrieve the schema information from the datastore. This underlying repository method forms an implicit part of the overall functionality chain.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "Starting from the API contract in SchemasApi.md, the request is handled by SchemaService.getSchema which then delegates to SchemaRepository.getSchema to fetch the actual schema data, establishing the implicit chain of dependencies.",
          "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly references the 'createTable' endpoint (POST /tables). This endpoint is implemented by the TableService.createTable method which processes table creation requests.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The chain starts with the TablesApi markdown document and directly maps to the TableService.createTable method, explicitly matching the createTable functionality.",
          "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly mentions the 'deleteTable' endpoint (DELETE /tables/{full_name}). This functionality is provided by the TableService.deleteTable method which handles table deletion.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The chain begins at the TablesApi documentation and directly maps to the TableService.deleteTable method, fulfilling the deletion API as documented.",
          "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies the 'getTable' endpoint (GET /tables/{full_name}) for retrieving a table. This endpoint is implemented by the TableService.getTable method.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The chain starts with the TablesApi doc and directly indicates that the retrieval functionality is handled by the TableService.getTable method, as explicitly stated in the documentation.",
          "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "For listing tables, the documentation describes the 'listTables' endpoint (GET /tables). The TableService.listTables method provides this functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The trace chain clearly shows that the listTables endpoint from the TablesApi documentation is directly implemented by the TableService.listTables method.",
          "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.deleteTable",
          "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.listTables",
          "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.getTable",
          "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.createTable",
          "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes/implements",
          "relationship_explanation": "The documentation snippet describes the createCatalog operation with the signature 'CatalogInfo createCatalog(CreateCatalog)'. This exactly matches the implementation in CatalogService.createCatalog, which is marked with the @Post annotation and returns a CatalogInfo by calling the repository function. The documented HTTP endpoint behavior is directly provided by this method.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The documentation file (CatalogsApi.md) specifies the createCatalog endpoint; the chain begins with this doc and directly traces to CatalogService.createCatalog, where the endpoint is implemented.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "uses/calls",
          "relationship_explanation": "Although the documentation text does not explicitly mention internal repository operations, the implementation in CatalogService.createCatalog calls CATALOG_REPOSITORY.addCatalog(createCatalog) to perform the actual creation of a catalog. This repository method is responsible for persisting the catalog and returning the CatalogInfo, making it an implicit but necessary part of the createCatalog functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "Starting from the documentation in CatalogsApi.md, the chain follows to the API endpoint in CatalogService.createCatalog, which in turn calls CatalogRepository.addCatalog to implement the catalog creation logic.",
          "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "exposes endpoint",
          "relationship_explanation": "The documentation describes an HTTP API operation 'createSchema' that accepts a CreateSchema payload and returns a SchemaInfo. Although the method name isn't explicitly mentioned in the text snippet, this REST endpoint in SchemaService.createSchema is responsible for handling the HTTP POST request (with JSON content-type and accept headers) to create a schema. It maps to the documented functionality by delegating the creation request to the underlying repository layer.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "Starting from the documentation file (SchemasApi.md), the 'createSchema' operation is implemented by SchemaService.createSchema. This endpoint is directly reached through the API call described in the documentation, making it a necessary intermediate step in the traceability pathway.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implements business logic",
          "relationship_explanation": "SchemaRepository.createSchema is called by SchemaService.createSchema to perform the actual database insertion and business logic required to create a new schema. Its method signature 'SchemaInfo createSchema(CreateSchema)' perfectly matches the documented operation, thereby providing the core functionality for creating a schema in the specified catalog.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The trace begins at the documentation (SchemasApi.md), then moves to the REST endpoint in SchemaService.createSchema, which in turn delegates the creation process to SchemaRepository.createSchema. Each step is necessary to complete the pathway from the API documentation to the underlying business logic.",
          "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes an operation named 'getCatalog' that accepts a catalog name and returns a CatalogInfo. The CatalogService.getCatalog method is the exact REST endpoint implementation that retrieves a catalog by its name, directly fulfilling this documented functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "The chain starts with the API documentation located in 'CatalogsApi.md' and directly maps to the CatalogService.getCatalog artifact. This direct linkage confirms that the documented 'getCatalog' operation is implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation describes an updateCatalog operation that accepts a catalog name and an UpdateCatalog object and returns a CatalogInfo in a RESTful API context. Although the text does not mention the exact class name, this behavior is implemented in the server endpoint CatalogService.updateCatalog. It accepts HTTP requests with the specified headers and delegates the update process to lower layers.",
          "predicted_trace_chain": "api/Apis/CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation located in api/Apis/CatalogsApi.md defines the updateCatalog function. CatalogService.updateCatalog is the REST endpoint method that maps these HTTP calls to the business logic, thus forming the first link in the trace chain from documentation to implementation.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "CatalogRepository.updateCatalog performs the actual persistence update for the catalog. It is invoked by CatalogService.updateCatalog after the service layer processes the HTTP request. This method accepts the same parameters (catalog name and UpdateCatalog object) and returns an updated CatalogInfo, matching the documented signature.",
          "predicted_trace_chain": "api/Apis/CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "After the updateCatalog API call is received by CatalogService.updateCatalog, the service layer delegates the database update to CatalogRepository.updateCatalog. This chain illustrates how the documented functionality is realized through multiple layers of the application.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet in 'TablesApi.md' clearly specifies a GET endpoint to list tables with parameters catalog_name, schema_name, max_results, and page_token. The 'TableService.listTables' method directly provides this API endpoint functionality by mapping the HTTP GET request (with its query parameters) to the appropriate JSON response containing the list of tables. This direct naming and signature match makes the connection explicit.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The chain begins with the documentation file 'TablesApi.md' which defines the listTables operation and directly maps to the 'TableService.listTables' artifact as the implementation of that operation.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although not mentioned directly in the documentation snippet, the 'TableService.listTables' endpoint delegates the actual retrieval of table data to the 'TableRepository.listTables' method. This repository method executes the database query and builds the ListTablesResponse, thereby constituting an implicit dependency in the overall listTables functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The chain shows that after the documented endpoint described in 'TablesApi.md' triggers the 'TableService.listTables' method, that service method calls 'TableRepository.listTables' to query the database. Each intermediate step is necessary: the service layer translates HTTP requests, and the repository layer handles the persistence query, culminating in the complete implementation of the documented functionality.",
          "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies a POST /catalogs endpoint to create a catalog. This operation is explicitly referenced as 'createCatalog' in the documentation, and the method CatalogService.createCatalog directly implements this functionality by accepting catalog creation requests.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The trace starts at the documentation file (CatalogsApi.md) where the createCatalog endpoint is defined and leads directly to the implementation of that endpoint in CatalogService.createCatalog.",
          "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation details a DELETE /catalogs/{name} endpoint to delete a catalog. The method CatalogService.deleteCatalog is explicitly responsible for processing such delete requests, matching the documented functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "This chain begins with the CatalogsApi.md documentation that defines the deletion operation and leads directly to its implementation using the CatalogService.deleteCatalog method.",
          "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The GET /catalogs/{name} endpoint in the documentation is designed to retrieve a specific catalog. CatalogService.getCatalog explicitly implements this endpoint, handling the retrieval of catalog data.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "Starting from the CatalogsApi.md documentation, the getCatalog operation is directly implemented by CatalogService.getCatalog, ensuring a clear endpoint-to-implementation linkage.",
          "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation defines a GET /catalogs endpoint intended to list available catalogs. The method CatalogService.listCatalogs explicitly implements this functionality by returning a list of catalogs.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The trace chain shows that the listing operation in the documentation (CatalogsApi.md) is directly handled by CatalogService.listCatalogs, linking the documented endpoint to its code implementation.",
          "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "According to the documentation, the PATCH /catalogs/{name} endpoint is used to update a catalog. CatalogService.updateCatalog explicitly implements this API call by processing update requests for catalogs.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "Here, the documentation from CatalogsApi.md defines the updateCatalog endpoint, and the trace directly leads to the CatalogService.updateCatalog method which implements these updates, forming a clear, direct chain.",
          "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.listCatalogs",
          "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.deleteCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.deleteCatalog",
          "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.addCatalog",
          "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.updateCatalog",
          "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        }
      ]
    },
    {
      "dataset": "unity_catalog",
      "run_id": 2,
      "timestamp": "2025-02-12T14:40:40.207949",
      "results": [
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly references the 'generateTemporaryVolumeCredentials' endpoint, which is directly implemented by the 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials' method. The method handles POST requests to the '/temporary-volume-credentials' endpoint to generate temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "Starting from the documentation file 'TemporaryVolumeCredentialsApi.md', the endpoint description specifies the 'generateTemporaryVolumeCredentials' functionality. This directly maps to the service method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials', forming a clear traceability pathway from the API documentation to the code implementation.",
          "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation snippet provides the signature 'FunctionInfo getFunction(name)' and HTTP metadata which directly corresponds to the GET endpoint implemented in FunctionService.getFunction. This method is invoked as the REST API to retrieve a function\u2019s information based on its fully-qualified name.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "Starting from the documentation located in FunctionsApi.md the trace goes directly to FunctionService.getFunction, which is the endpoint that processes the 'getFunction' request.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 23,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "used by API endpoint",
          "relationship_explanation": "Although not directly mentioned in the documentation snippet, FunctionRepository.getFunction is invoked by FunctionService.getFunction to retrieve the underlying function details from the persistence layer. This hidden dependency supports the API functionality that the documentation describes.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The trace begins at the documentation and follows the chain: the API endpoint in FunctionService.getFunction (directly documented) uses the repository method FunctionRepository.getFunction to obtain the FunctionInfo. This intermediate step is essential for data retrieval and thus forms the full traceability pathway.",
          "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionInfoDAO",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies a method 'getVolume(name)' that returns a VolumeInfo. This exactly matches the functionality provided by the VolumeRepository.getVolume method, which takes a fully qualified name, splits it, and returns a VolumeInfo. This is a direct implementation of the documented behavior.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The chain starts from the documentation file 'VolumesApi.md' (extracted from the location 'api/Apis/VolumesApi.md') which defines the getVolume behavior, and directly maps to the VolumeRepository.getVolume artifact that implements it.",
          "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although the documentation snippet does not explicitly mention the service layer, the HTTP GET operation described is exposed via the VolumeService.getVolume method. This method wraps the repository call and formats the HTTP response, thereby indirectly supporting the documented getVolume operation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "Starting from the 'VolumesApi.md' documentation, the VolumeService.getVolume method is the REST endpoint that is invoked to retrieve a volume. It internally calls VolumeRepository.getVolume, but the chain is represented here by the service layer which exposes the API.",
          "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet details a createCatalog operation that accepts a CreateCatalog object and returns a CatalogInfo. This matches exactly the signature of CatalogService.createCatalog, a REST endpoint that directly implements this functionality by deserializing the request and returning the JSON response.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The documentation located in CatalogsApi.md explicitly specifies the createCatalog operation. CatalogService.createCatalog directly implements this operation, making it the primary artifact in the traceability chain.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although the documentation does not directly mention repository methods, CatalogService.createCatalog internally calls CatalogRepository.addCatalog to perform the actual creation and persistence of the catalog entity. This makes it an important underlying piece in the implementation chain.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "Starting from the documentation in CatalogsApi.md, the API call is handled by CatalogService.createCatalog, which in turn delegates to CatalogRepository.addCatalog for the persistence logic. This pathway shows the implicit dependency of the service method on the repository method.",
          "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements REST endpoint",
          "relationship_explanation": "The documentation snippet describes a 'deleteTable' operation that requires a 'full_name' parameter and details the HTTP headers expected for a REST DELETE request. The 'TableService.deleteTable' method explicitly implements this functionality as it is annotated with @Delete(\"/{full_name}\") and calls the repository method to delete the table, returning an HTTP OK response. This directly matches the documented behavior.",
          "predicted_trace_chain": "api/Apis/TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The trace starts with the documentation source file (api/Apis/TablesApi.md) that describes the deleteTable operation and directly maps to the 'TableService.deleteTable' artifact, which is the REST API endpoint implementation for table deletion.",
          "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.deleteTable",
          "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes API endpoint",
          "relationship_explanation": "The documentation snippet explicitly describes an updateVolume operation with a signature 'VolumeInfo updateVolume(name, UpdateVolumeRequestContent)'. This exactly matches the API endpoint implemented as VolumeService.updateVolume, which is annotated with @Patch and accepts a 'full_name' parameter and an UpdateVolumeRequestContent object to update the volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "Starting from the documentation in VolumesApi.md, the updateVolume functionality is directly implemented by VolumeService.updateVolume. This endpoint is the public interface that clients call for updating a volume.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates business logic",
          "relationship_explanation": "Although not directly exposed in the documentation, VolumeService.updateVolume delegates the core update operation to VolumeRepository.updateVolume. This repository method implements the business logic to update the volume details such as name or comment, which fulfills the documented operation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The updateVolume API described in the documentation is first handled by VolumeService.updateVolume and then the actual update processing is performed by VolumeRepository.updateVolume. This chain shows how the public endpoint translates into the underlying business logic.",
          "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation clearly specifies the createSchema functionality with a signature 'SchemaInfo createSchema(CreateSchema)'. The SchemaService.createSchema method, annotated with @Post, directly implements this HTTP API endpoint. It accepts a CreateSchema object and returns an HttpResponse with a JSON representation of SchemaInfo, thus explicitly matching the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The chain starts from the documentation file 'SchemasApi.md' (as provided in the location) and directly leads to the SchemaService.createSchema method, which is the API endpoint implementing the documented createSchema functionality.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates",
          "relationship_explanation": "Although not directly mentioned in the documentation snippet, SchemaRepository.createSchema provides the underlying business logic for creating a new schema. It accepts the same CreateSchema object and returns a SchemaInfo, and is invoked by SchemaService.createSchema. This makes it an integral, though implicit, part of the overall createSchema mechanism described in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The trace chain originates from the documentation and flows to the API endpoint (SchemaService.createSchema) and further delegates to the repository layer (SchemaRepository.createSchema) where the core schema creation is implemented. Each step is necessary to understand how the documented API call is fulfilled in the code.",
          "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies the 'listVolumes' operation with a signature 'ListVolumesResponseContent listVolumes(catalog_name, schema_name, max_results, page_token)'. The method VolumeRepository.listVolumes directly implements this functionality by querying for volumes from the database and returning a ListVolumesResponseContent, thereby matching the documented signature and behavior.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation file 'VolumesApi.md' documents the listVolumes operation. This operation is implemented directly by the VolumeRepository.listVolumes method, establishing a direct trace from documentation to implementation.",
          "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although the documentation explicitly specifies a method signature matching VolumeRepository.listVolumes, the actual API endpoint exposed to clients is handled by VolumeService.listVolumes. This method serves as the REST interface, wrapping the core repository call to list volumes. It thus plays an implicit role in fulfilling the documented API behavior.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The externally visible API documented in 'VolumesApi.md' is implemented by VolumeService.listVolumes, which in turn delegates to VolumeRepository.listVolumes. This chain demonstrates how the documented operation is routed through the service layer to the repository layer, linking the documentation to the full implementation pathway.",
          "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly defines the updateSchema operation with parameters full_name and UpdateSchema and expects a SchemaInfo in return. The SchemaService.updateSchema method is annotated with @Patch, accepts these parameters, and returns a JSON response derived from SchemaInfo, which exactly matches the documented operation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The trace begins at the SchemasApi.md documentation where the updateSchema operation is described and directly links to the SchemaService.updateSchema method that implements this API endpoint.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "While not directly mentioned in the API documentation, SchemaRepository.updateSchema is invoked by SchemaService.updateSchema to perform the actual update of the schema. It accepts identical parameters (full_name and UpdateSchema) and returns a SchemaInfo object, thereby fulfilling the underlying business logic for the operation described in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The chain starts from the documentation in SchemasApi.md, proceeds to the explicit REST endpoint in SchemaService.updateSchema, and then continues to SchemaRepository.updateSchema which is used internally by the service to complete the update, establishing the necessary dependency pathway.",
          "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet in 'FunctionsApi.md' describes a 'createFunction' API that accepts a CreateFunctionRequest and returns a FunctionInfo. The method 'FunctionService.createFunction' is annotated with @Post(\"\"), directly exposing the HTTP endpoint that receives the CreateFunctionRequest and returns the function information as JSON. This exactly implements the documented API behavior.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The trace starts with the document 'FunctionsApi.md' (the source of the documentation snippet) and directly leads to the 'FunctionService.createFunction' method, which is the explicit implementation of the API as described.",
          "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates",
          "relationship_explanation": "While not directly exposed in the API documentation, 'FunctionRepository.createFunction' is called by the service layer to carry out the actual creation of a function. Its signature (taking a CreateFunctionRequest and returning a FunctionInfo) closely matches the documented behavior, making it an implicit part of the overall functionality chain that supports the API endpoint.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "The chain begins at the API documentation ('FunctionsApi.md'), follows through the explicit endpoint 'FunctionService.createFunction', which in turn delegates the creation process to 'FunctionRepository.createFunction'. This pathway shows how the documented behavior is fulfilled by a series of connected artifacts.",
          "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.createFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionInfoDAO",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly describes a getCatalog operation that accepts a catalog name and returns a CatalogInfo object. The method in CatalogService.getCatalog is a direct implementation of this functionality, mapping an HTTP GET request with a 'name' parameter to retrieve the catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "The documentation located in 'api/Apis/CatalogsApi.md' specifies the getCatalog endpoint, and this is directly implemented by the CatalogService.getCatalog method. This creates a clear traceability pathway from the API documentation to the service layer element that serves as the endpoint.",
          "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies a deleteVolume(name) operation that deletes a volume and returns an HTTP response. This is directly implemented in the VolumeService.deleteVolume method, which is annotated with @Delete and accepts a fully-qualified volume name parameter. Its signature and behavior correspond to the documented API.",
          "predicted_trace_chain": "Apis/VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation in 'Apis/VolumesApi.md' describes the deleteVolume operation, and this endpoint is implemented as VolumeService.deleteVolume, making it the primary artifact in the trace chain.",
          "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "VolumeService.deleteVolume internally calls VolumeRepository.deleteVolume to perform the actual deletion of the volume from the persistence layer. Although not directly exposed in the API documentation, it is a critical part of the deletion operation chain.",
          "predicted_trace_chain": "Apis/VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The deleteVolume operation as documented is executed through the service layer (VolumeService.deleteVolume), which in turn delegates the deletion logic to VolumeRepository.deleteVolume, forming a clear chain from the API documentation to the underlying persistence implementation.",
          "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes RESTful endpoint",
          "relationship_explanation": "This method directly implements the 'getTable(full_name)' API as described in the documentation. It accepts a 'full_name' parameter and returns a JSON representation of a TableInfo, matching the documented signature and behavior.",
          "predicted_trace_chain": "Apis/TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The documentation from the TablesApi file clearly outlines the API for fetching a table. TableService.getTable is the endpoint method that processes the HTTP GET request with the 'full_name' parameter and returns the appropriate JSON response.",
          "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "data access support",
          "relationship_explanation": "This method is invoked by TableService.getTable to perform the underlying business logic of fetching a table from the datastore. It processes the 'full_name' by splitting it into catalog, schema, and table parts, and retrieves the corresponding TableInfo, which aligns with the behavior specified in the documentation.",
          "predicted_trace_chain": "Apis/TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The TableService.getTable method, which is explicitly described in the documentation, delegates to TableRepository.getTable for data retrieval. This chain is necessary to complete the full functionality of the 'getTable' API operation.",
          "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableInfoDAO",
          "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet, found in 'CatalogsApi.md', describes an HTTP GET endpoint to list catalogs with optional 'max_results' and 'page_token' parameters and a return type of ListCatalogsResponse. The method 'CatalogService.listCatalogs' explicitly implements this functionality by exposing a GET endpoint, accepting those parameters, and returning the JSON output of the underlying repository call.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "This trace chain starts at the API documentation (CatalogsApi.md) and directly maps to the service endpoint in 'CatalogService.listCatalogs', which is the public interface implementing the described API.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 9,
          "artifact_title": "CatalogRepository.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "The 'CatalogService.listCatalogs' method internally delegates the retrieval of catalog data to 'CatalogRepository.listCatalogs'. This repository method, while not directly exposed in the API documentation, forms an essential internal dependency that supports the functionality described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The chain shows how the API documentation leads to the service layer, which then relies on the repository method to perform the actual data retrieval, thereby completing the traceability pathway.",
          "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation clearly lists a 'createVolume' endpoint (POST /volumes). This is directly implemented by the VolumeService.createVolume method, which is configured to handle POST requests for volume creation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The chain begins from the documentation file 'VolumesApi.md' where the createVolume endpoint is specified and directly maps to the VolumeService.createVolume method.",
          "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation shows a 'deleteVolume' endpoint (DELETE /volumes/{name}). The VolumeService.deleteVolume method explicitly delivers this functionality by processing DELETE requests for volume deletion.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "Starting from 'VolumesApi.md', the documentation's deleteVolume endpoint is directly mapped to the VolumeService.deleteVolume method.",
          "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The GET /volumes/{name} endpoint described in the documentation is explicitly implemented by the VolumeService.getVolume method, which retrieves the details of a volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The documented getVolume endpoint in 'VolumesApi.md' directly traces to the VolumeService.getVolume method.",
          "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "According to the documentation, there is a 'listVolumes' endpoint (GET /volumes) intended to list all volumes. This functionality is provided by the VolumeService.listVolumes method.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The chain indicates that the 'listVolumes' endpoint in 'VolumesApi.md' is directly implemented by the VolumeService.listVolumes method.",
          "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The PATCH /volumes/{name} endpoint for updating a volume is documented in the VolumesApi. This endpoint is directly mapped to the VolumeService.updateVolume method which handles updates to volume information.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The trace chain clearly connects the updateVolume endpoint from 'VolumesApi.md' to the VolumeService.updateVolume method.",
          "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.getVolume",
          "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.deleteVolume",
          "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.updateVolume",
          "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.createVolume",
          "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.listVolumes",
          "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation excerpt explicitly references the 'generateTemporaryTableCredentials' operation via the link label, which directly corresponds to the HTTP POST endpoint described. This directly maps to the service method 'TemporaryTableCredentialsService.generateTemporaryTableCredentials' that implements the logic to generate temporary table credentials based on the table's storage location.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The trace begins at the documentation file 'TemporaryTableCredentialsApi.md', which defines the API endpoint. It then directly maps to the 'TemporaryTableCredentialsService.generateTemporaryTableCredentials' method, establishing the clear pathway for how the documented functionality is implemented.",
          "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly describes the 'deleteSchema' endpoint with parameters 'full_name' and 'force' that deletes a schema. The SchemaService.deleteSchema method (artifact_id: 41) directly maps to this description by exposing an HTTP DELETE endpoint with the same parameters, thus implementing the documented functionality.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The trace begins from the documentation in 'SchemasApi.md' where the deleteSchema operation is defined. It then maps directly to the SchemaService.deleteSchema method which serves as the REST API endpoint handling the delete operation for schemas.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.deleteSchema",
          "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation describes an operation deleteCatalog(name, force) that deletes a catalog. This exactly matches the HTTP endpoint provided by CatalogService.deleteCatalog, which accepts the 'name' parameter along with an optional 'force' parameter and then calls the repository method to perform the deletion. This is evident from its annotation (@Delete(\"/{name}\")) and parameter usage.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The trace starts with the documentation file 'CatalogsApi.md' (from which the deleteCatalog description is extracted) and maps directly to CatalogService.deleteCatalog, which exposes this functionality over HTTP.",
          "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "calls",
          "relationship_explanation": "Although the documentation does not directly refer to lower level data access logic, CatalogService.deleteCatalog internally delegates the deletion operation to CatalogRepository.deleteCatalog. This repository method encapsulates the database operations required to remove the catalog, thereby forming part of the complete deletion pathway.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The chain begins in the documentation (CatalogsApi.md) and flows through the HTTP endpoint in CatalogService.deleteCatalog, which in turn calls CatalogRepository.deleteCatalog to execute the underlying deletion logic, thus completing the end-to-end functionality described in the documentation.",
          "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.deleteCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation defines the operation updateCatalog(name, UpdateCatalog) that returns a CatalogInfo via an HTTP API and requires specific HTTP headers. CatalogService.updateCatalog directly implements this endpoint using the @Patch annotation, accepting the 'name' parameter and an UpdateCatalog object, thereby matching the documented functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation (from CatalogsApi.md) explicitly describes the updateCatalog operation, which is implemented by the CatalogService.updateCatalog method as the HTTP endpoint. This establishes a direct trace from the document to the service layer entry point.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "used by",
          "relationship_explanation": "CatalogRepository.updateCatalog encapsulates the business logic for updating a catalog. It takes the same parameters (name and UpdateCatalog) and returns a CatalogInfo, exactly as defined in the documentation. This method is invoked by CatalogService.updateCatalog, thereby directly supporting the documented updateCatalog functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The updateCatalog method described in the API documentation is realized through a service-repository pattern: the HTTP endpoint in CatalogService.updateCatalog calls CatalogRepository.updateCatalog to perform the actual update. This chain clearly traces the documentation to the underlying implementation.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 48,
          "artifact_title": "TableCli.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "uses",
          "relationship_explanation": "The documentation snippet for 'listTables' describes a function that takes catalog_name, schema_name, max_results and page_token as parameters and returns a ListTablesResponse. The method TableCli.listTables explicitly extracts these parameters from a JSON object and calls tablesApi.listTables with similar arguments, directly matching the documented functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.listTables",
          "predicted_trace_chain_explanation": "Starting from the documentation file 'TablesApi.md', which defines the 'listTables' endpoint, the chain directly leads to the CLI implementation in TableCli.listTables that demonstrates how the parameters are parsed and the API call is performed.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "TableRepository.listTables provides the core implementation for retrieving tables from the underlying datastore. It creates a ListTablesResponse by querying entities based on catalog and schema along with pagination parameters, which is in line with the API contract described in the documentation snippet.",
          "predicted_trace_chain": "TablesApi.md -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The documentation in 'TablesApi.md' describing the listTables function is ultimately backed by the business logic in TableRepository.listTables, establishing a traceability link from the API documentation to this repository method.",
          "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "exposes",
          "relationship_explanation": "TableService.listTables acts as the REST endpoint for the listTables operation. It maps incoming HTTP GET requests (which include headers and parameters as described in the documentation) to the underlying TableRepository.listTables call, packaging the result as JSON. This endpoint effectively exposes the functionality documented in the snippet.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "Beginning with the 'TablesApi.md' documentation that defines the listTables API, the trace proceeds to the service layer implementation in TableService.listTables which is responsible for accepting HTTP requests and returning the ListTablesResponse as described.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation table explicitly lists the 'createCatalog' endpoint (POST /catalogs) to create a catalog. This directly maps to the 'CatalogService.createCatalog' method which implements this REST API endpoint by handling POST requests to create a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The documentation from 'CatalogsApi.md' explicitly references createCatalog, and the chain directly links the document to the implementation in CatalogService.createCatalog.",
          "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly details the 'deleteCatalog' endpoint (DELETE /catalogs/{name}) for deleting a catalog. The 'CatalogService.deleteCatalog' method is the direct implementation of this API operation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The document 'CatalogsApi.md' specifies the deleteCatalog functionality, which is implemented in the CatalogService.deleteCatalog method.",
          "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation clearly describes the 'getCatalog' endpoint (GET /catalogs/{name}) to retrieve a catalog. The 'CatalogService.getCatalog' method implements this behavior by serving GET requests to fetch catalog details.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "Starting from the 'CatalogsApi.md' documentation, the chain leads directly to the CatalogService.getCatalog method which returns the catalog information.",
          "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "According to the documentation, the 'listCatalogs' endpoint (GET /catalogs) lists all catalogs. The 'CatalogService.listCatalogs' method provides this functionality by implementing the corresponding GET endpoint.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The documentation 'CatalogsApi.md' specifies the listCatalogs operation, and its implementation is directly found in CatalogService.listCatalogs, forming a clear trace.",
          "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation details the 'updateCatalog' endpoint (PATCH /catalogs/{name}) used to update an existing catalog. This is explicitly implemented by the 'CatalogService.updateCatalog' method, which processes PATCH requests for updating catalog details.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The trace chain begins at 'CatalogsApi.md' where updateCatalog is documented, and it directly maps to the CatalogService.updateCatalog method that provides the update functionality.",
          "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.updateCatalog",
          "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.listCatalogs",
          "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.deleteCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.deleteCatalog",
          "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.addCatalog",
          "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly describes the functionality 'generateTemporaryVolumeCredentials', including the parameter 'GenerateTemporaryVolumeCredential' and return type 'GenerateTemporaryVolumeCredentialResponse'. This directly maps to the method TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials, which implements the API endpoint with the same signature and behavior as described.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The documentation is extracted from the file 'TemporaryVolumeCredentialsApi.md'. The functionality described is implemented by the method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials', forming a direct trace from the documentation to the code artifact.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation snippet for deleteFunction, which details the deletion of a function by its fully-qualified name, directly corresponds to the REST API endpoint implemented in FunctionService.deleteFunction. This method is annotated with @Delete and accepts a 'name' parameter, matching the described interface in the documentation.",
          "predicted_trace_chain": "Apis/FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation from 'Apis/FunctionsApi.md' directly maps to the FunctionService.deleteFunction method, as it serves as the entry point for deleting functions via HTTP DELETE requests.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "While not explicitly mentioned in the documentation snippet, FunctionService.deleteFunction delegates the actual deletion logic to FunctionRepository.deleteFunction. This repository method handles the persistence and removal of the function based on its fully-qualified name, forming an essential part of the deletion operation chain.",
          "predicted_trace_chain": "Apis/FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "Starting from the API documentation in 'Apis/FunctionsApi.md', the deletion request is processed by the service layer (FunctionService.deleteFunction) which, in turn, calls FunctionRepository.deleteFunction to perform the actual deletion from persistence, forming a clear traceability pathway.",
          "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.deleteFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly refers to the 'createTable' endpoint (POST /tables) for creating a table. The method 'TableService.createTable' is annotated with @Post and implements this endpoint, making it a direct implementation of the operation described in the TablesApi documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The chain starts with the documentation file (TablesApi.md) which describes the createTable operation, and directly maps to the TableService.createTable method that implements the REST endpoint as specified.",
          "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies a DELETE HTTP request on /tables/{full_name} for deleting a table. The 'TableService.deleteTable' method is annotated with @Delete and provides the public endpoint for table deletion, matching the documented functionality exactly.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The documentation's reference to the deleteTable endpoint is directly implemented by the TableService.deleteTable method, forming a clear chain from documentation to implementation.",
          "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The TablesApi documentation contains a GET request for /tables/{full_name} to retrieve a table. The 'TableService.getTable' method, annotated with @Get, implements this functionality by retrieving and returning table information, hence directly matching the documented operation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "Starting from the documentation, the 'getTable' endpoint is clearly associated with the TableService.getTable method, thereby forming a direct traceability chain.",
          "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation lists a GET endpoint for /tables that is used to list tables. The 'TableService.listTables' method (annotated with @Get) directly implements the table listing functionality, making it an explicit match to the documented endpoint.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The documentation describes a listTables operation as part of the TablesApi, and this is directly implemented by the TableService.listTables method, thereby completing the traceability chain.",
          "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.deleteTable",
          "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.createTable",
          "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.listTables",
          "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.getTable",
          "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly defines a method signature 'VolumeInfo createVolume(CreateVolumeRequestContent)' which directly matches the signature of the method 'VolumeRepository.createVolume'. This method accepts a CreateVolumeRequestContent parameter and returns a VolumeInfo as described in the document, thereby implementing the documented 'Create a Volume' functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The documentation is located in VolumesApi.md and details the createVolume operation. This establishes a direct traceability pathway from the documentation to the code artifact that implements the volume creation functionality.",
          "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeService.createVolume",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation snippet defines the 'getSchema' operation with a parameter 'full_name' and a return type SchemaInfo. The 'SchemaService.getSchema' method directly implements this HTTP GET endpoint by receiving the full name as a parameter and returning the JSON representation of the schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The API documentation located in 'SchemasApi.md' maps directly to the 'SchemaService.getSchema' method, which is the entry point for handling the getSchema operation.",
          "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "delegation/invocation",
          "relationship_explanation": "The 'SchemaService.getSchema' method delegates the retrieval of the schema to 'SchemaRepository.getSchema'. This repository method encapsulates the business logic of querying the persistence layer, converting the database object to a SchemaInfo model, and attaching any required properties.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "After the API endpoint in 'SchemaService.getSchema' is invoked, the call flows to 'SchemaRepository.getSchema' which performs the database query and model conversion, forming an implicit part of the retrieval process.",
          "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data conversion",
          "relationship_explanation": "Within the schema retrieval process, 'SchemaRepository.getSchema' uses 'SchemaInfoDAO' to convert the database entity into a SchemaInfo object. This conversion is essential for returning the correct API model as defined in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The getSchema operation's traceability chain extends from the API documentation to the service layer, then to the repository layer, and finally to 'SchemaInfoDAO' which performs the conversion from persistence format to the API model.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation snippet describes a 'listFunctions' endpoint that accepts parameters (catalog_name, schema_name, max_results, page_token) and returns a ListFunctionsResponse. The FunctionService.listFunctions method is annotated with @Get and its parameters exactly match those described, directly implementing the REST API as documented.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation from FunctionsApi.md directly maps to FunctionService.listFunctions, making it the primary artifact that implements the listFunctions functionality.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "used_by",
          "relationship_explanation": "Although not directly described in the documentation snippet, FunctionRepository.listFunctions is invoked by FunctionService.listFunctions to retrieve the list of functions from the database. This repository method returns the ListFunctionsResponse expected by the API, forming a backend dependency in the functional chain.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "After the HTTP request is handled by FunctionService.listFunctions, the call is delegated to FunctionRepository.listFunctions. This chain forms the complete pathway from the API documentation to the underlying data retrieval.",
          "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.listFunctions",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet's 'createFunction' endpoint (HTTP POST /functions) is directly referenced. This is explicitly implemented by the FunctionService.createFunction method, which is annotated with @Post(\"\") and calls FUNCTION_REPOSITORY.createFunction.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The documentation (FunctionsApi.md) defines the createFunction endpoint. FunctionService.createFunction is the precise artifact that implements this API endpoint, making for a direct traceability chain.",
          "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes the 'deleteFunction' API (HTTP DELETE /functions/{name}). This is explicitly implemented in the FunctionService.deleteFunction method, as indicated by its @Delete annotation and its usage inline with deletion logic.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "Starting from the documentation's reference in FunctionsApi.md, the deleteFunction endpoint is directly mapped to the FunctionService.deleteFunction method, ensuring clear traceability.",
          "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet indicates the 'getFunction' API (HTTP GET /functions/{name}). FunctionService.getFunction, marked with @Get, directly implements this endpoint, mapping the documented behavior to the code.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The documented API in FunctionsApi.md directly points to retrieving a function, which is implemented in FunctionService.getFunction. This forms a direct and unambiguous traceability pathway.",
          "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies a 'listFunctions' endpoint (HTTP GET /functions) for listing functions. This is explicitly provided by the FunctionService.listFunctions method that is annotated with @Get and returns a list of functions.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "FunctionsApi.md documents the listFunctions endpoint, which is directly implemented by the FunctionService.listFunctions method, establishing a clear and simple traceability chain from documentation to implementation.",
          "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.listFunctions",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.deleteFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.createFunction",
          "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.deleteFunction",
          "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.createFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.getFunction",
          "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.listFunctions",
          "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation defines the method signature 'TableInfo createTable(CreateTable)' which directly matches the implementation in TableRepository.createTable. This method receives a CreateTable object as a parameter, validates and processes it, and returns a TableInfo instance \u2013 exactly as described in the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "Starting from the API documentation in 'Apis/TablesApi.md', the expected behavior for creating a table is explicitly realized by TableRepository.createTable, making it the direct implementation of the documented contract.",
          "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates to",
          "relationship_explanation": "Although the documentation focuses on the core functionality of creating a table, TableService.createTable is the REST API endpoint that receives the HTTP request, wraps the call to the repository layer, and returns the result. It indirectly supports the documented createTable operation by passing the CreateTable object to TableRepository.createTable.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The pathway begins with the API documentation in 'Apis/TablesApi.md', continues with TableService.createTable which acts as the endpoint handler, and then delegates the operation to TableRepository.createTable, thereby fulfilling the documented functionality.",
          "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableInfoDAO",
          "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies the createSchema endpoint (HTTP POST /schemas) and this is directly implemented by the SchemaService.createSchema method, which calls SCHEMA_REPOSITORY.createSchema to create the schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "Starting from the SchemasApi.md document, the 'createSchema' endpoint is explicitly mapped to the SchemaService.createSchema artifact which implements the functionality described.",
          "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The 'deleteSchema' endpoint (HTTP DELETE /schemas/{full_name}) in the documentation is explicitly implemented by the SchemaService.deleteSchema method which is responsible for deleting a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The documentation for schema deletion directly maps to the SchemaService.deleteSchema artifact, forming a clear trace chain from the documented API to its implementation.",
          "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation describes the getSchema endpoint (HTTP GET /schemas/{full_name}). This functionality is implemented by the SchemaService.getSchema method, which retrieves schema details.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "From the SchemasApi.md file, the getSchema endpoint directly corresponds to the SchemaService.getSchema artifact, providing a straightforward trace chain.",
          "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "According to the documentation, listing schemas (HTTP GET /schemas) is a provided functionality. This is explicitly implemented by the SchemaService.listSchemas method that lists available schemas.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The trace chain begins at SchemasApi.md and leads directly to SchemaService.listSchemas, as it implements the listing functionality detailed in the documentation.",
          "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The updateSchema endpoint (HTTP PATCH /schemas/{full_name}) described in the documentation is implemented by the SchemaService.updateSchema method, handling updates to existing schemas.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The documentation for updating schemas directly maps to the SchemaService.updateSchema artifact, forming the trace chain from SchemasApi.md to its implementation.",
          "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.getSchema",
          "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.listSchemas",
          "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.updateSchema",
          "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.createSchema",
          "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.deleteSchema",
          "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes",
          "relationship_explanation": "The documentation snippet details the listSchemas endpoint with parameters (catalog_name, max_results, page_token) and the return type ListSchemasResponse. The SchemaService.listSchemas method is annotated with @Get and directly maps these parameters from the HTTP request to a call to the repository layer, thereby exposing the documented functionality.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation in SchemasApi.md specifies the listSchemas operation. SchemaService.listSchemas, as the controller endpoint, is the first layer of implementation directly corresponding to the documented API.",
          "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method accepts the catalogName, maxResults, and pageToken parameters and returns a ListSchemasResponse, matching the function signature and behavior documented. It encapsulates the business logic for retrieving the list of schemas from the data store.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "SchemaService.listSchemas delegates the actual data retrieval to SchemaRepository.listSchemas, forming a clear trace from the API documentation to the underlying repository implementation that fulfills the listSchemas operation.",
          "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        }
      ]
    },
    {
      "dataset": "unity_catalog",
      "run_id": 3,
      "timestamp": "2025-02-12T14:43:37.878394",
      "results": [
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes an API operation 'updateCatalog' with parameters (name, UpdateCatalog) and a return type CatalogInfo. The 'CatalogService.updateCatalog' method is annotated with @Patch and explicitly declares the same signature\u2014taking a catalog name and an UpdateCatalog object\u2014and it returns the updated CatalogInfo (wrapped inside an HttpResponse). This direct correspondence makes it an explicit implementation of the documented functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation in 'api/Apis/CatalogsApi.md' maps directly to the REST endpoint 'CatalogService.updateCatalog', which is the starting point for the updateCatalog operation as exposed by the server.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "uses",
          "relationship_explanation": "The 'CatalogService.updateCatalog' method delegates the core update logic to 'CatalogRepository.updateCatalog'. This repository method encapsulates the business logic required to update the catalog entity, processing the UpdateCatalog object and returning a CatalogInfo. Its functionality forms the backbone of the updateCatalog operation described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The documented API operation is implemented at the service level, which in turn relies on the repository layer for updating the catalog in the persistence store, forming a clear traceability chain from the API documentation to the underlying business logic.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes the 'listCatalogs' operation with parameters 'page_token' and 'max_results' and a JSON response, which is directly implemented by the CatalogService.listCatalogs method. This method is annotated with the HTTP GET endpoint and directly maps the documented API parameters to its input, making it an explicit implementation of the documented functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The trace starts from the documentation file (CatalogsApi.md) and goes directly to the CatalogService.listCatalogs method, since it directly implements the listCatalogs endpoint as described in the documentation.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 9,
          "artifact_title": "CatalogRepository.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "delegated use",
          "relationship_explanation": "CatalogService.listCatalogs delegates the catalog retrieval to CatalogRepository.listCatalogs. Although this repository method is not directly mentioned in the documentation snippet, it forms a necessary part of the execution chain that fulfills the listCatalogs functionality, thereby making its role implicit in the overall design.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The documentation describes the API behavior, which is implemented in CatalogService.listCatalogs. This service method internally calls CatalogRepository.listCatalogs to fetch the required data, establishing an implicit dependency in the chain.",
          "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies an operation 'VolumeInfo updateVolume(name, UpdateVolumeRequestContent)' for updating a volume's name or comment. The method 'VolumeRepository.updateVolume' directly implements this functionality with the exact signature and return type, thus explicitly fulfilling the documented API behavior.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "Starting from the API documentation provided in 'VolumesApi.md', the updateVolume operation is realized by the 'VolumeRepository.updateVolume' method. This chain shows the direct mapping of the documented update function to the underlying repository implementation.",
          "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeService.updateVolume",
          "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies a method with the signature 'VolumeInfo createVolume(CreateVolumeRequestContent)' which is exactly implemented by VolumeRepository.createVolume. This method takes a CreateVolumeRequestContent as input, creates a new volume, and returns a VolumeInfo, directly matching the documented functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "Starting from the API documentation in 'VolumesApi.md', the documented operation is directly realized by the VolumeRepository.createVolume method. This forms the primary pathway for the volume creation functionality.",
          "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "wraps",
          "relationship_explanation": "Although the documented signature focuses on returning a VolumeInfo, the HTTP endpoint exposed by VolumeService.createVolume encapsulates this functionality by receiving a CreateVolumeRequestContent and then delegating to the repository layer. Its use of HTTP annotations and headers aligns with the documented details about request headers and REST API behavior.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The documentation from 'VolumesApi.md' covers not only the method signature but also the expected HTTP headers. VolumeService.createVolume, annotated with @Post and providing the required HTTP contract, implicitly routes the request to the underlying business logic, forming a complete operational chain.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes the getFunction API endpoint that takes a fully-qualified function name and returns the function information. 'FunctionService.getFunction' explicitly implements this endpoint by handling a GET request with the required parameter and returning the function details as a JSON response.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The API document from 'FunctionsApi.md' describes the getFunction behavior, which is implemented by the 'FunctionService.getFunction' method. This method directly maps to the documented functionality, thus forming the first link in the traceability chain.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 23,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates",
          "relationship_explanation": "Within 'FunctionService.getFunction', the actual retrieval of the FunctionInfo is delegated to 'FunctionRepository.getFunction'. Although not directly cited in the documentation snippet, it is an essential dependency in executing the documented behavior.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "After the API endpoint in 'FunctionService.getFunction' processes the request as documented, it calls 'FunctionRepository.getFunction' to fetch the function's data from persistence. This chain demonstrates the underlying dependency that supports the functionality described in the documentation.",
          "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionInfoDAO",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet directly describes the 'getSchema' API operation. SchemaService.getSchema implements the HTTP GET endpoint for retrieving a SchemaInfo based on its full name, matching the signature 'SchemaInfo getSchema(full_name)'.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The API documentation (SchemasApi.md) defines the getSchema contract, which is explicitly implemented by the SchemaService.getSchema method.",
          "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "SchemaService.getSchema delegates the task of retrieving the schema data to SchemaRepository.getSchema, which handles the database interactions and converts the stored schema into a SchemaInfo object. This repository method is not directly mentioned in the documentation snippet, but is a necessary intermediate component in the overall functionality.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "Starting from the API documentation, the call flows from SchemaService.getSchema to SchemaRepository.getSchema to perform the actual data retrieval, forming the complete traceability pathway.",
          "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 31,
          "artifact_title": "SchemaCli.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "consumes",
          "relationship_explanation": "SchemaCli.getSchema is a client-side method that invokes the getSchema API endpoint. By extracting the full name from a JSON object and calling schemasApi.getSchema, this method demonstrates how the documented functionality is consumed by a CLI client.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "predicted_trace_chain_explanation": "Even though the CLI wrapper is not directly detailed in the documentation, its usage of the getSchema endpoint establishes an indirect but essential linkage, showing how API consumers may interact with the getSchema functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies the API signature 'TableInfo createTable(CreateTable)' which exactly matches the method signature defined in TableRepository.createTable. This method takes a CreateTable object as input and returns a TableInfo, thus directly implementing the API functionality described in the documentation.",
          "predicted_trace_chain": "api/Apis/TablesApi.md -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The trace chain starts with the document 'api/Apis/TablesApi.md' (from which the documentation snippet was extracted) and directly maps to the 'TableRepository.createTable' method since the documented signature and behavior are implemented in this method.",
          "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableService.createTable",
          "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableInfoDAO",
          "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The deleteSchema operation as documented is directly implemented by the SchemaService.deleteSchema method. This method is annotated with @Delete and takes a 'full_name' string and an Optional<Boolean> force parameter, exactly matching the parameters described in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation (SchemasApi.md) specifies the deleteSchema endpoint. Its direct implementation is provided by SchemaService.deleteSchema, which is why the trace chain starts at the documentation and ends at this artifact.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "While not directly referenced in the documentation text, SchemaRepository.deleteSchema is implicitly involved because SchemaService.deleteSchema delegates the actual schema deletion logic to this repository method. It handles the persistence logic for removing a schema from the database.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "Starting from the documentation in SchemasApi.md, the delete operation is exposed via SchemaService.deleteSchema which in turn calls SchemaRepository.deleteSchema to perform the deletion. This intermediate step is necessary to fully capture the underlying operation chain.",
          "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation clearly references the generateTemporaryVolumeCredentials operation via its hyperlink in the table. This corresponds directly to the method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials' (artifact id 59) that handles the POST request to '/temporary-volume-credentials', thereby generating temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The trace chain begins with the documentation file 'TemporaryVolumeCredentialsApi.md' and directly leads to the service method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials'. This method is the implementation of the API endpoint described, making the link explicit and straightforward.",
          "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation for the 'createCatalog' API operation explicitly references a POST /catalogs endpoint. The 'CatalogService.createCatalog' artifact is a direct implementation of this endpoint as evidenced by its @Post annotation and the call to 'CATALOG_REPOSITORY.addCatalog(createCatalog)'.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "Starting from the 'CatalogsApi.md' document which describes the createCatalog operation, the trace directly leads to 'CatalogService.createCatalog', which implements the API endpoint.",
          "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies a DELETE /catalogs/{name} endpoint for deleting a catalog. 'CatalogService.deleteCatalog' directly implements this operation, as seen by its @Delete annotation and its handling of the deletion logic.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The delete catalog operation in the documentation is directly mapped to the 'CatalogService.deleteCatalog' endpoint, establishing a clear trace from the document to the code artifact.",
          "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The GET /catalogs/{name} endpoint described in the documentation is implemented by 'CatalogService.getCatalog'. This is clear from its @Get annotation and its function of retrieving a catalog via the repository.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "The documented getCatalog API operation is directly implemented by 'CatalogService.getCatalog', forming a straightforward trace from the documentation to the server endpoint.",
          "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation details a GET /catalogs endpoint that lists all catalogs. 'CatalogService.listCatalogs' is the corresponding artifact that implements this operation, as suggested by its @Get annotation and its invocation of the repository's list logic.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The chain begins with the 'CatalogsApi.md' documentation which outlines the listCatalogs operation and directly links to 'CatalogService.listCatalogs' that implements this API endpoint.",
          "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation defines a PATCH /catalogs/{name} endpoint for updating a catalog. 'CatalogService.updateCatalog' implements this functionality, as highlighted by its @Patch annotation and the call that triggers catalog update via the repository.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The updateCatalog operation described in the documentation is directly implemented by 'CatalogService.updateCatalog', creating a clear trace from the document to the artifact.",
          "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.updateCatalog",
          "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.listCatalogs",
          "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.deleteCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.deleteCatalog",
          "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.addCatalog",
          "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is explicitly responsible for handling the HTTP DELETE request to remove a catalog. Its method name, its parameters ('name' and 'force'), and its annotations (@Delete and @Param) directly correspond to the documentation snippet that describes a deleteCatalog operation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The documentation located in 'api/Apis/CatalogsApi.md' describes the deleteCatalog functionality. This chain shows that the API documentation directly maps to the service layer implementation in CatalogService.deleteCatalog.",
          "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "Although not directly mentioned in the documentation snippet, CatalogRepository.deleteCatalog is indirectly involved since it is invoked by CatalogService.deleteCatalog to perform the underlying deletion operation on the persistent storage. This makes it an integral part of the deleteCatalog chain.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The deleteCatalog API request as documented flows from the API documentation (CatalogsApi.md) to the service implementation in CatalogService.deleteCatalog, which in turn calls CatalogRepository.deleteCatalog to execute the deletion, forming the complete traceability chain.",
          "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.deleteCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method exactly implements the documented functionality. Its signature 'public FunctionInfo createFunction(CreateFunctionRequest createFunctionRequest)' matches the documentation's 'FunctionInfo createFunction(CreateFunctionRequest)' declaration, converting a CreateFunctionRequest into a FunctionInfo.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "The documentation in FunctionsApi.md describes the createFunction API. The repository method is the core implementation that performs the business logic for function creation, forming a direct trace from the documented API to the code.",
          "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes",
          "relationship_explanation": "This method is annotated with @Post and exposes an HTTP endpoint for creating functions. It wraps the repository call and makes the createFunction functionality available as a web API, closely matching the documented operation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "Starting from the API documentation (FunctionsApi.md), the service method is the next layer that translates a client HTTP request into a call to the repository method, linking the documentation to the public API endpoint.",
          "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This CLI method provides a client-side utility to invoke the createFunction API. Although not part of the server\u2019s core implementation, it demonstrates how users might programmatically call the createFunction functionality.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "predicted_trace_chain_explanation": "The API documentation (FunctionsApi.md) specifies the createFunction operation. The CLI artifact implicitly makes use of this API by formatting the input JSON and calling the underlying function creation endpoint, thus forming an indirect trace.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionInfoDAO",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly specifies a deleteVolume operation (deleteVolume(name)) that deletes a volume given its fully qualified three-level name. The VolumeService.deleteVolume method directly maps to this API operation by exposing a HTTP DELETE endpoint (annotated with @Delete) that takes the 'full_name' parameter, which corresponds to the documented 'name' parameter.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation (VolumesApi.md) defines the deleteVolume operation, and VolumeService.deleteVolume is the endpoint implementation that realizes this specification by handling HTTP requests and delegating the delete action.",
          "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "calls",
          "relationship_explanation": "Although not directly mentioned in the documentation snippet, the VolumeRepository.deleteVolume method provides the core business logic for deleting the volume. It processes the fully qualified volume name by splitting it into catalog, schema, and volume parts and then executes the deletion. This method is invoked by VolumeService.deleteVolume, making it an essential implicit part of the deletion operation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "Starting from the API documentation which specifies deleteVolume, the service layer (VolumeService.deleteVolume) exposes the operation, which then calls the repository layer (VolumeRepository.deleteVolume) to perform the actual deletion. This chain is necessary to fully implement the documented functionality.",
          "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly specifies a function signature 'GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)' and describes the operation to generate temporary volume credentials. This exactly matches the method implemented in the TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials artifact, which accepts a GenerateTemporaryVolumeCredential parameter and returns an appropriate response. Hence, the relationship is explicit and it implements the documented functionality.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "Starting at the documentation file (TemporaryVolumeCredentialsApi.md) that defines the 'generateTemporaryVolumeCredentials' operation, the trace chain leads directly to the code artifact TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials. This chain confirms that the API documentation is directly implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation snippet clearly defines a 'listVolumes' operation with parameters catalog_name, schema_name, max_results, and page_token along with a return type of ListVolumesResponseContent. The method VolumeService.listVolumes directly maps to this API endpoint by declaring these parameters (with an additional optional include_browse) and returning a JSON response built from the underlying repository output. This direct mapping makes the relationship explicit.",
          "predicted_trace_chain": "api/Apis/VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation (located in api/Apis/VolumesApi.md) describes the list volumes functionality which is implemented by the VolumeService.listVolumes method.",
          "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although the documentation snippet does not mention the repository layer directly, VolumeService.listVolumes relies on VolumeRepository.listVolumes to actually retrieve the volumes data from the persistence store. This lower-level method, which returns ListVolumesResponseContent, is implicitly part of the overall chain that supports the documented functionality.",
          "predicted_trace_chain": "api/Apis/VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The chain shows that the API endpoint defined in the documentation is handled first by VolumeService.listVolumes, which subsequently delegates the data retrieval logic to VolumeRepository.listVolumes, thereby making VolumeRepository.listVolumes an implicit but essential part of the traceability pathway.",
          "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes API endpoint",
          "relationship_explanation": "The documentation snippet describes the HTTP API for createSchema, including HTTP headers and the expected JSON payload. This method is annotated with @Post(\"\") and takes a CreateSchema object, returning the JSON representation of the SchemaInfo, which directly matches the documented interface. Thus, it is explicitly linked to the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The API documentation from 'SchemasApi.md' defines the createSchema endpoint. 'SchemaService.createSchema' is the server\u2019s public interface for handling the CREATE operation, making it a direct trace from the documentation.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements business logic",
          "relationship_explanation": "The documented signature 'SchemaInfo createSchema(CreateSchema)' is implemented by this method. It performs input validation, persistence (via Session and Transaction), and ultimately returns a SchemaInfo object. This exact functionality directly corresponds to what is defined in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The HTTP endpoint in 'SchemaService.createSchema' delegates the core functionality to 'SchemaRepository.createSchema'. This repository method carries out the internal steps (validation, database interaction) required to create the schema, forming the complete pathway from the documented API call to its implementation.",
          "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly defines the 'listFunctions' API endpoint with parameters (catalog_name, schema_name, max_results, page_token) and specifies a return type of ListFunctionsResponse. The FunctionService.listFunctions method is annotated with @Get and its method signature matches the documented endpoint. This is a direct implementation of the documented functionality.",
          "predicted_trace_chain": "Apis/FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "Starting from the API documentation file (Apis/FunctionsApi.md), the listFunctions endpoint is directly implemented by the FunctionService.listFunctions method, making it the first and most explicit step in the traceability chain.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "While not directly exposed to the HTTP client, FunctionRepository.listFunctions is called by FunctionService.listFunctions to perform the underlying business logic and retrieve the ListFunctionsResponse. This makes it an implicit but essential part of the implementation chain for the listFunctions functionality described in the documentation.",
          "predicted_trace_chain": "Apis/FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation guides the endpoint implementation in FunctionService.listFunctions, which in turn delegates the core functionality to FunctionRepository.listFunctions. This chain reflects how the documented API is ultimately realized through a layered architecture.",
          "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.listFunctions",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements REST endpoint",
          "relationship_explanation": "This method is annotated with @Delete(\"/{full_name}\") and accepts the 'full_name' parameter as described in the documentation. It directly implements the deleteTable operation on the server side by calling TABLE_REPOSITORY.deleteTable(fullName).",
          "predicted_trace_chain": "Apis/TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation from 'Apis/TablesApi.md' describing deleteTable maps directly to the server endpoint 'TableService.deleteTable', which handles the HTTP DELETE request using the 'full_name' parameter.",
          "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 46,
          "artifact_title": "TableCli.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "invokes client API",
          "relationship_explanation": "This client-side method reads the 'full_name' from the JSON parameters and invokes tablesApi.deleteTable. Its naming and parameter handling directly correlate with the documented deleteTable operation.",
          "predicted_trace_chain": "Apis/TablesApi.md -> TableCli.deleteTable",
          "predicted_trace_chain_explanation": "The documented deleteTable operation is used by the CLI client to initiate a table deletion; hence, 'TableCli.deleteTable' is directly linked to the documentation by matching the method name and parameter usage.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "delegated implementation",
          "relationship_explanation": "This lower-level repository method is called by TableService.deleteTable to perform the actual deletion of the table from the persistence layer. Although not directly exposed in the API contract, it is an indispensable part of the operation.",
          "predicted_trace_chain": "Apis/TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The deleteTable operation documented in 'Apis/TablesApi.md' is implemented at the service level by 'TableService.deleteTable', which delegates the deletion process to 'TableRepository.deleteTable'. This forms a traceable pathway from the API specification to the underlying data operation.",
          "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes a REST API operation 'getTable' with the signature 'TableInfo getTable(full_name)' and specifies HTTP headers such as 'Accept: application/json'. Artifact 'TableService.getTable' directly implements this endpoint by receiving the full table name as a parameter, invoking the underlying data access method, and returning a JSON representation of the TableInfo. This direct match in name and functionality makes the relationship explicit.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The trace chain starts at the documentation file (TablesApi.md) which defines the 'getTable' operation and directly maps to the service endpoint 'TableService.getTable' that fulfills the documented API contract.",
          "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although not directly exposed as an HTTP endpoint, the 'TableRepository.getTable' method is invoked by the 'TableService.getTable' endpoint to query and retrieve the actual table information from the database. Its functionality supports the behavior documented for getting a table, making its inclusion implicit in the trace chain.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "This pathway indicates that the API documented in TablesApi.md is first realized by the service layer (TableService.getTable) which in turn depends on the repository method (TableRepository.getTable) to execute the data retrieval. Each intermediate step is necessary to bridge the high-level API contract to the underlying persistence layer.",
          "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableInfoDAO",
          "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies the deleteFunction operation with a 'name' parameter. The FunctionService.deleteFunction method is the HTTP endpoint (annotated with @Delete) that directly implements this operation, accepting the function's fully-qualified name as described.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation located in 'api/Apis/FunctionsApi.md' defines the deleteFunction operation, which is directly implemented by the FunctionService.deleteFunction method.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "While not directly exposed by the documentation, FunctionRepository.deleteFunction is invoked by the FunctionService.deleteFunction method to execute the actual deletion logic. This underlying implementation supports the deleteFunction operation documented in the API.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "Starting from the API documentation in 'FunctionsApi.md', the deleteFunction endpoint is implemented by FunctionService.deleteFunction, which in turn calls FunctionRepository.deleteFunction to perform the deletion, forming a traceability chain.",
          "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.deleteFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly lists the 'generateTemporaryTableCredentials' endpoint (HTTP POST /temporary-table-credentials) which directly maps to the service method in the TemporaryTableCredentialsService artifact. This method implements the functionality to generate temporary table credentials as described in the doc snippet.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The trace begins from the documentation file 'TemporaryTableCredentialsApi.md' (where the endpoint is defined) and directly points to the service method 'TemporaryTableCredentialsService.generateTemporaryTableCredentials'. This establishes a clear and direct link between the documented API endpoint and its implementation.",
          "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes API endpoint",
          "relationship_explanation": "The documentation snippet details an updateSchema operation with a signature (full_name, UpdateSchema) that returns a SchemaInfo, matching the HTTP PATCH endpoint in SchemaService.updateSchema. This method directly exposes the API by accepting the 'full_name' and 'UpdateSchema' parameters and then returning a JSON-formatted SchemaInfo response.",
          "predicted_trace_chain": "api/Apis/SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "Starting from the API documentation (located at api/Apis/SchemasApi.md), the updateSchema functionality is provided by SchemaService.updateSchema, which is the direct API endpoint that implements the documented behavior.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements business logic",
          "relationship_explanation": "SchemaRepository.updateSchema implements the core update logic for a schema by accepting the same parameters (full_name, UpdateSchema) and returning a SchemaInfo object as described in the documentation. It is called by SchemaService.updateSchema to perform the actual data update operations.",
          "predicted_trace_chain": "api/Apis/SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The documented updateSchema API is exposed via SchemaService.updateSchema, which in turn delegates the actual update process to SchemaRepository.updateSchema. This chain ensures that the HTTP endpoint's request is processed correctly with business logic applied in the repository layer.",
          "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is annotated with '@Get' to expose an HTTP GET endpoint and directly corresponds to the documented 'getVolume' API. It takes the fully qualified volume name from the path parameter and returns a JSON payload of VolumeInfo, matching the documented signature 'VolumeInfo getVolume(name)'.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The documentation located in VolumesApi.md outlines the getVolume operation. VolumeService.getVolume is the HTTP endpoint implementation that directly satisfies this documented functionality.",
          "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "This repository method encapsulates the business logic to retrieve a VolumeInfo by its fully qualified name. It is invoked by VolumeService.getVolume and returns the VolumeInfo object that is ultimately delivered to the client. Its signature mirrors the documented 'VolumeInfo getVolume(name)'.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The getVolume HTTP endpoint in VolumeService.getVolume calls VolumeRepository.getVolume to perform the actual retrieval of the volume. This chain demonstrates that the documented API operation is fulfilled via this layered architecture.",
          "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies the operation 'createCatalog' with signature 'CatalogInfo createCatalog(CreateCatalog)' along with HTTP details. The 'CatalogService.createCatalog' method explicitly implements this API endpoint by receiving a CreateCatalog object and returning a CatalogInfo in JSON format, which matches the documented signature.",
          "predicted_trace_chain": "api/Apis/CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The documentation from 'api/Apis/CatalogsApi.md' directly describes the catalog creation endpoint that is implemented by the 'CatalogService.createCatalog' method. This direct correspondence makes it the first step in the traceability chain.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although not mentioned directly in the documentation snippet, 'CatalogRepository.addCatalog' is the method invoked by the service layer to handle the business logic of catalog creation. It accepts a CreateCatalog object and returns a CatalogInfo, thereby encapsulating the core functionality detailed in the documentation.",
          "predicted_trace_chain": "api/Apis/CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "Starting from the documented API in 'api/Apis/CatalogsApi.md', the 'CatalogService.createCatalog' method is identified as the endpoint implementation which in turn calls 'CatalogRepository.addCatalog'. This chain shows how the high-level API call is translated into lower-level business logic within the codebase.",
          "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation entry for createFunction specifies a POST endpoint to create a function. The FunctionService.createFunction method is explicitly annotated with @Post and directly provides this functionality.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The chain starts at the FunctionsApi.md documentation which describes the createFunction endpoint and maps directly to the FunctionService.createFunction artifact.",
          "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation entry for deleteFunction specifies a DELETE endpoint to remove a function. The FunctionService.deleteFunction method directly implements this endpoint by handling DELETE requests.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "Starting from the FunctionsApi.md documentation, the deleteFunction operation is traced to the FunctionService.deleteFunction artifact.",
          "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation entry for getFunction indicates a GET endpoint to retrieve a function. The FunctionService.getFunction method is explicitly implemented to handle GET requests for a specific function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The documentation in FunctionsApi.md describing the getFunction endpoint is directly mapped to the FunctionService.getFunction artifact.",
          "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation entry for listFunctions specifies a GET endpoint to list functions. The FunctionService.listFunctions method directly implements this endpoint by providing the logic to list available functions.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The functions listing functionality described in FunctionsApi.md is directly traced to the FunctionService.listFunctions artifact.",
          "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.listFunctions",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.deleteFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.createFunction",
          "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.deleteFunction",
          "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.createFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.getFunction",
          "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.listFunctions",
          "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation lists the 'createSchema' endpoint (HTTP POST /schemas). 'SchemaService.createSchema' is annotated with @Post and directly implements that endpoint, thus providing an explicit trace from the documentation to this method.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The chain starts at the documentation file 'SchemasApi.md' which describes the createSchema API, and directly maps to the 'SchemaService.createSchema' artifact that handles the schema creation.",
          "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation specifies the 'deleteSchema' endpoint (HTTP DELETE /schemas/{full_name}). 'SchemaService.deleteSchema' is marked with @Delete and directly corresponds to this functionality, making the trace explicit.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "This chain shows that the 'deleteSchema' endpoint described in 'SchemasApi.md' is implemented by the 'SchemaService.deleteSchema' method.",
          "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation indicates a GET operation on /schemas/{full_name} for retrieving a schema. 'SchemaService.getSchema' is annotated with @Get and implements this endpoint explicitly.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "Beginning with 'SchemasApi.md', the chain directly leads to the 'SchemaService.getSchema' artifact as it delivers the GET functionality for schemas.",
          "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation describes a 'listSchemas' endpoint (HTTP GET /schemas) for listing schemas. 'SchemaService.listSchemas' implements this endpoint directly, serving as an explicit implementation of the documented operation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The documentation's listing operation is traced directly to the 'SchemaService.listSchemas' artifact, confirming its role in listing schema resources.",
          "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation specifies an 'updateSchema' endpoint (HTTP PATCH /schemas/{full_name}). 'SchemaService.updateSchema' is marked with @Patch and directly handles the schema update functionality, making it an explicit mapping.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The chain begins at the documentation ('SchemasApi.md') and ends at 'SchemaService.updateSchema', which fully implements the patch operation for modifying schemas as described.",
          "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.getSchema",
          "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.listSchemas",
          "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.updateSchema",
          "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.createSchema",
          "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.deleteSchema",
          "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation for the 'createVolume' operation (POST /volumes) is explicitly referenced in the VolumesApi documentation. The VolumeService.createVolume method (artifact_id 71) directly implements this endpoint by processing the CreateVolumeRequestContent and delegating volume creation to the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The chain begins at the VolumesApi.md documentation, which explicitly lists the createVolume operation. This directly maps to the implementation in VolumeService.createVolume, establishing a clear trace from the documentation to the code artifact.",
          "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The 'deleteVolume' operation (DELETE /volumes/{name}) noted in the documentation is explicitly implemented by the VolumeService.deleteVolume method (artifact_id 72). This method handles the deletion logic by calling VOLUME_REPOSITORY.deleteVolume and returning an appropriate HTTP response.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "Starting from VolumesApi.md, the deleteVolume endpoint is directly mapped to the VolumeService.deleteVolume implementation, thus forming a direct traceability chain.",
          "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The GET /volumes/{name} endpoint described in the documentation corresponds to the VolumeService.getVolume method (artifact_id 73). This method is responsible for retrieving the details of a specified volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The documentation\u2019s reference to the getVolume operation is directly implemented in VolumeService.getVolume, creating a clear linkage in the chain from the API spec to the service method.",
          "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "According to the documentation, the GET /volumes endpoint is used to list volumes. The VolumeService.listVolumes method (artifact_id 74) directly implements this operation by retrieving and returning a list of volumes.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The trace starts with the VolumesApi.md documentation indicating a list operation, and directly maps to the VolumeService.listVolumes method, establishing the implementation pathway.",
          "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The PATCH /volumes/{name} operation specified in the documentation for updating a volume is explicitly handled by VolumeService.updateVolume (artifact_id 75). This method processes update requests and applies modifications via the VolumeRepository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The chain follows the documentation\u2019s updateVolume reference to the corresponding implementation in VolumeService.updateVolume, clearly connecting the API documentation to its backend implementation.",
          "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.getVolume",
          "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.deleteVolume",
          "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.updateVolume",
          "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.createVolume",
          "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.listVolumes",
          "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes the listTables operation with parameters catalog_name, schema_name, max_results, and page_token that returns a ListTablesResponse. This method in TableService is directly annotated as an HTTP GET endpoint matching that signature and therefore explicitly implements the documented API.",
          "predicted_trace_chain": "Apis/TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The documentation originates in the Apis/TablesApi.md file and directly maps to the 'TableService.listTables' method, which exposes the endpoint and converts the service call into an HTTP response containing the list of tables.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "Although not directly mentioned in the documentation snippet, this repository method is used by TableService.listTables to fetch and construct the ListTablesResponse. It underpins the main functionality and is an implicit part of the execution chain for the listTables API.",
          "predicted_trace_chain": "Apis/TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The API endpoint in TableService delegates the retrieval and formatting of table data to TableRepository.listTables, forming an implicit trace chain from the high\u2010level API specification down to its underlying data access layer.",
          "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet lists the 'createTable' API endpoint for creating a table (HTTP POST /tables). This is directly implemented by the TableService.createTable method, which is annotated with @Post and handles the creation logic.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The documentation file (TablesApi.md) explicitly references the createTable operation which is implemented in TableService.createTable, forming a direct traceability pathway.",
          "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies the 'deleteTable' endpoint (HTTP DELETE /tables/{full_name}). TableService.deleteTable is annotated with @Delete and clearly implements the functionality to delete a table, matching the documented description.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The deleteTable operation in the TablesApi.md document is directly implemented by TableService.deleteTable, establishing a clear trace from documentation to code.",
          "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The snippet documents the 'getTable' endpoint (HTTP GET /tables/{full_name}). TableService.getTable is annotated with @Get and implements the endpoint to retrieve a table, directly corresponding to the API documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The TablesApi.md file explicitly describes the getTable API, which is directly mapped to the getTable method in TableService, completing the trace chain.",
          "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation lists the 'listTables' operation (HTTP GET /tables) for listing tables. TableService.listTables is annotated with @Get and returns the list of tables, directly fulfilling the documented API specification.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The documented listTables API in TablesApi.md is implemented by TableService.listTables, forming a direct and explicit traceability link between the documentation and the code.",
          "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.deleteTable",
          "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.createTable",
          "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.listTables",
          "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.getTable",
          "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes HTTP API endpoint",
          "relationship_explanation": "The documentation snippet describes the 'listSchemas' API, including its parameters and return type. This exactly matches the method 'SchemaService.listSchemas', which is annotated as an HTTP GET endpoint and returns a JSON response containing a ListSchemasResponse. It directly implements the documented functionality.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation (SchemasApi.md) explicitly details the 'listSchemas' operation, which is implemented by the SchemaService.listSchemas method, making this a direct mapping from document to code.",
          "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "data retrieval support",
          "relationship_explanation": "While not directly exposed in the HTTP API, 'SchemaRepository.listSchemas' is used by SchemaService.listSchemas to retrieve the actual list of schemas from the persistence layer. This method supports the documented functionality by providing the underlying data needed to construct the ListSchemasResponse.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The documentation starts at SchemasApi.md, which maps to the API endpoint in SchemaService.listSchemas. This endpoint in turn delegates to SchemaRepository.listSchemas to perform the database query, forming the complete trace from documentation to data retrieval.",
          "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation describes a getCatalog endpoint that returns a CatalogInfo. The method 'CatalogService.getCatalog' directly implements this endpoint by accepting a catalog name and returning its information. Its signature and behavior directly match the documented function.",
          "predicted_trace_chain": "api/Apis/CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation (from CatalogsApi.md) specifies the getCatalog operation. The chain begins there and directly maps to the CatalogService.getCatalog method, which is the HTTP endpoint implementation.",
          "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 8,
          "artifact_title": "CatalogRepository.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates",
          "relationship_explanation": "Within the implementation of CatalogService.getCatalog, the service method delegates the work of retrieving catalog data to the repository. 'CatalogRepository.getCatalog' carries out the logic for fetching the catalog from the persistence layer using the provided name.",
          "predicted_trace_chain": "api/Apis/CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "predicted_trace_chain_explanation": "The documented getCatalog operation is fulfilled by the service method, which in turn relies on the repository method to perform the actual data retrieval. This chain of delegation is essential to separate concerns between the service and data layers.",
          "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "converts",
          "relationship_explanation": "The CatalogRepository.getCatalog method uses CatalogInfoDAO to convert the retrieved database entity into the public CatalogInfo model that is returned to the caller. This conversion is a necessary step in preparing data for the API response.",
          "predicted_trace_chain": "api/Apis/CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "After the service method calls the repository for catalog retrieval, CatalogRepository.getCatalog leverages CatalogInfoDAO to map the persistent entity to the output model 'CatalogInfo' as specified in the documentation. This completes the end\u2010to\u2010end traceability from API documentation to data conversion.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        }
      ]
    },
    {
      "dataset": "unity_catalog",
      "run_id": 4,
      "timestamp": "2025-02-12T14:45:24.348281",
      "results": [
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies the createSchema functionality with the signature 'SchemaInfo createSchema(CreateSchema)'. The SchemaService.createSchema method is the HTTP endpoint implementation that directly exposes this functionality. It receives a CreateSchema object and returns a SchemaInfo wrapped in an HTTP response, in accordance with the documentation's API contract.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The API documentation located in 'SchemasApi.md' maps directly to the HTTP endpoint provided by SchemaService.createSchema, making this the explicit implementation of the createSchema API.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates",
          "relationship_explanation": "Although not directly exposed in the API documentation, SchemaRepository.createSchema implements the core business logic to create a new schema. It accepts a CreateSchema object and returns a SchemaInfo, precisely matching the documented signature. This method is internally invoked by the service endpoint, thereby indirectly satisfying the documented functionality.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The createSchema endpoint in SchemaService delegates the actual creation process to SchemaRepository.createSchema. This chain links the externally documented API to its underlying business logic implementation.",
          "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the 'listVolumes' functionality as described in the documentation. It accepts the parameters (catalogName, schemaName, maxResults, pageToken) and returns a ListVolumesResponseContent object, which exactly matches the documented API signature.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation (located in 'VolumesApi.md') specifies the listVolumes operation, and the repository method 'VolumeRepository.listVolumes' is the core implementation that executes the logic to retrieve the list of volumes.",
          "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This service method exposes the listVolumes API as an HTTP GET endpoint. While the documentation does not explicitly mention the service layer, VolumeService.listVolumes internally delegates to VolumeRepository.listVolumes, forming part of the complete API chain.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation originates in 'VolumesApi.md'. The request is handled by 'VolumeService.listVolumes', which then calls 'VolumeRepository.listVolumes' to perform the actual volume listing. This chain explains the complete path from API exposure to business logic.",
          "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is directly responsible for handling HTTP GET requests to retrieve a schema. Its signature and behavior (returning a JSON response that encapsulates a SchemaInfo) exactly match the documentation's description of getSchema(full_name). It serves as the public API endpoint as documented in SchemasApi.md.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The documentation (from api/Apis/SchemasApi.md) defines the getSchema operation. This directly maps to SchemaService.getSchema, which implements the described REST API endpoint, making it the first and explicit artifact in the traceability chain.",
          "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although not directly exposed as the API endpoint, this repository method is internally called by SchemaService.getSchema to retrieve the SchemaInfo from the persistence layer. It returns the SchemaInfo object as required by the documented signature, thereby forming an implicit part of the overall getSchema functionality.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The chain starts with the documentation which maps to SchemaService.getSchema (the explicit API layer). SchemaService.getSchema then relies on SchemaRepository.getSchema to fetch the schema details, making this an essential implicit dependency in the traceability pathway.",
          "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet clearly specifies a 'createCatalog' operation with the signature 'CatalogInfo createCatalog(CreateCatalog)'. The 'CatalogService.createCatalog' method has a matching name and signature, as it is annotated with an HTTP POST and takes a CreateCatalog object as input, returning a JSON response containing a CatalogInfo. This directly implements the documented API functionality.",
          "predicted_trace_chain": "api/Apis/CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "Starting from the documentation file 'api/Apis/CatalogsApi.md', the trace chain leads directly to 'CatalogService.createCatalog', which is the REST API endpoint that exposes the createCatalog operation as described.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "While not explicitly mentioned in the documentation text, the 'CatalogRepository.addCatalog' method performs the internal business logic for creating a catalog by receiving a CreateCatalog object and returning a CatalogInfo. This method is invoked by 'CatalogService.createCatalog', thereby indirectly realizing the functionality described in the documentation.",
          "predicted_trace_chain": "api/Apis/CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "The documented createCatalog operation is implemented by 'CatalogService.createCatalog', which delegates the actual creation work to 'CatalogRepository.addCatalog'. This chain shows how the API documentation's operation leads to the internal repository method that carries out the operation.",
          "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation states the signature 'VolumeInfo createVolume(CreateVolumeRequestContent)' and describes creating a new volume. This directly matches the method 'VolumeRepository.createVolume' which takes a CreateVolumeRequestContent as its parameter and returns a VolumeInfo after performing necessary validations and creation logic.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The API documentation from 'VolumesApi.md' explicitly documents the volume creation operation, which is implemented at the repository level by 'VolumeRepository.createVolume'. This direct match in method signature and behavior forms the elementary trace pathway.",
          "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "orchestrates",
          "relationship_explanation": "While the documented signature exactly matches the repository method, the service endpoint 'VolumeService.createVolume' also plays a key role by exposing this functionality via a REST API. It receives a CreateVolumeRequestContent and delegates the creation to the repository. Thus, even though its return type is wrapped in an HttpResponse, it indirectly embodies the documented createVolume functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The documented API operation is exposed to clients via 'VolumeService.createVolume', which internally calls 'VolumeRepository.createVolume' to perform the actual volume creation. This chain indicates the complete pathway from the API documentation to the underlying implementation.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 61,
          "artifact_title": "VolumeCli.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "invokes",
          "relationship_explanation": "The documentation snippet explicitly describes a deleteVolume operation taking a fully-qualified volume name. The 'VolumeCli.deleteVolume' method is clearly named and directly invokes volumesApi.deleteVolume with the volume full name parameter. This shows an explicit mapping between the documented deleteVolume operation and the CLI client method.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "predicted_trace_chain_explanation": "Starting from the API documentation file (VolumesApi.md), the deleteVolume operation is directly implemented in the CLI through the method 'VolumeCli.deleteVolume', which serves as a client invocation of the operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes",
          "relationship_explanation": "The deleteVolume operation is an HTTP DELETE endpoint as defined in the API documentation. The 'VolumeService.deleteVolume' method is annotated with @Delete, accepts the full volume name parameter, and calls the repository method to perform the deletion. This directly maps to the documented functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "Starting at the API documentation in VolumesApi.md, the delete operation is exposed as an HTTP endpoint in the service layer by 'VolumeService.deleteVolume', demonstrating a direct pathway from the documented API to its implementation.",
          "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The core business logic for deleting a volume is implemented in the 'VolumeRepository.deleteVolume' method. This method accepts a three-level fully qualified volume name (as described in the documentation), splits it, verifies conditions, and performs the deletion. It is invoked indirectly via the service layer, making it an essential part of the deleteVolume operation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The documented deleteVolume operation is first exposed by the service layer ('VolumeService.deleteVolume') which then delegates the request to 'VolumeRepository.deleteVolume'. This chain shows the complete pathway from API documentation to endpoint to business logic that executes the delete operation.",
          "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation entry for 'createSchema' explicitly documents a POST /schemas endpoint used to create a schema. The 'SchemaService.createSchema' method directly implements this endpoint by accepting a CreateSchema object and returning a JSON response.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The documentation file 'SchemasApi.md' directly references the 'createSchema' operation, which is implemented by the SchemaService.createSchema method.",
          "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation entry for 'deleteSchema' describes the DELETE /schemas/{full_name} endpoint to delete a schema. The 'SchemaService.deleteSchema' method explicitly implements this functionality by handling the HTTP DELETE request.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The documentation in 'SchemasApi.md' clearly maps the delete schema operation to this method, making it a direct implementation.",
          "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The 'getSchema' documentation entry describes a GET /schemas/{full_name} endpoint to retrieve a schema. The 'SchemaService.getSchema' method explicitly implements this endpoint by fetching and returning schema details as JSON.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The documentation snippet from 'SchemasApi.md' directly references the getSchema operation which is implemented by this method.",
          "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation provides the GET /schemas endpoint for listing schemas. 'SchemaService.listSchemas' directly implements this functionality by returning a list of schemas in JSON format.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The endpoint documented in 'SchemasApi.md' for listing schemas directly maps to the SchemaService.listSchemas method.",
          "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation entry for 'updateSchema' specifies a PATCH /schemas/{full_name} endpoint to update schema data. 'SchemaService.updateSchema' explicitly implements this endpoint by accepting update requests and returning the updated schema in JSON.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The direct link in 'SchemasApi.md' for updating schemas is implemented by the SchemaService.updateSchema method, as reflected in the trace.",
          "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.getSchema",
          "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.listSchemas",
          "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.updateSchema",
          "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.createSchema",
          "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.deleteSchema",
          "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies a function 'CatalogInfo updateCatalog(name, UpdateCatalog)' that updates a catalog and returns a CatalogInfo. The method 'CatalogRepository.updateCatalog(String name, UpdateCatalog updateCatalog)' exactly matches this signature and encapsulates the business logic for updating a catalog. This direct correspondence makes it an explicit implementation of the documented functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "Starting from the API documentation (CatalogsApi.md), the updateCatalog function is realized in the repository layer by CatalogRepository.updateCatalog, which directly returns a CatalogInfo object as described.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes",
          "relationship_explanation": "The CatalogService.updateCatalog method is annotated as a REST endpoint (@Patch) and serves to expose the updateCatalog functionality over HTTP. It accepts the catalog name and an UpdateCatalog object and returns an HttpResponse containing the updated CatalogInfo. This endpoint delegates to the repository method, thereby fulfilling the external API contract described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation in CatalogsApi.md maps to the public REST interface provided by CatalogService.updateCatalog, which in turn calls the business logic in CatalogRepository.updateCatalog. This chain shows how the documented functionality is exposed over HTTP.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly describes a deleteSchema endpoint that accepts 'full_name' and 'force' parameters. The 'SchemaService.deleteSchema' method, with its @Delete annotation and matching signature, directly implements this functionality.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation from 'SchemasApi.md' directly maps to the 'SchemaService.deleteSchema' method, forming a clear trace from the documented feature to its implementation.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates",
          "relationship_explanation": "While not directly invoked by the HTTP endpoint, the 'SchemaService.deleteSchema' method delegates the deletion logic to 'SchemaRepository.deleteSchema'. This repository method is an implicit dependency that carries out the actual deletion process as described in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The deletion workflow starts at the API documentation, flows through the 'SchemaService.deleteSchema' endpoint, and is then delegated to the repository layer via 'SchemaRepository.deleteSchema', completing the functional chain.",
          "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation defines a GET endpoint 'getFunction(name)' that returns a FunctionInfo. The FunctionService.getFunction method is directly mapped to this operation via its @Get annotation, accepting a fully-qualified function name and returning JSON. This makes it an explicit trace of the documented functionality.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The documentation in FunctionsApi.md describes the functionality, and FunctionService.getFunction directly implements the API endpoint as described.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 23,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This repository method is called by FunctionService.getFunction to fetch the actual FunctionInfo from persistence. Although not directly mentioned in the documentation snippet, it underpins the implementation of the getFunction functionality described.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "After the HTTP GET request is handled by FunctionService.getFunction (as documented), the service calls FunctionRepository.getFunction to perform the data retrieval. This chain validates how the documented API operation is ultimately fulfilled.",
          "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionInfoDAO",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies a listTables endpoint that returns a ListTablesResponse based on provided parameters (catalog_name, schema_name, max_results, page_token). TableService.listTables is a REST endpoint method that directly handles HTTP GET requests for listing tables. Its parameters match the documentation when mapped from the HTTP request, and it returns the JSON result corresponding to the documented response.",
          "predicted_trace_chain": "Apis/TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The API documentation from Apis/TablesApi.md describes the listTables operation. TableService.listTables is the service layer method directly invoked by that REST API call.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This repository method carries out the core logic for the listTables operation by querying and assembling table information into a ListTablesResponse. Its signature and return type align with the documented API, and while it includes additional flags (omit_properties and omit_columns), these are managed by higher layers and defaulted appropriately.",
          "predicted_trace_chain": "Apis/TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "After the API endpoint (TableService.listTables) handles the HTTP request, it delegates data retrieval to TableRepository.listTables. This chain completes the functionality detailed in the API documentation.",
          "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet clearly describes a getTable operation that accepts a 'full_name' parameter and returns a TableInfo. The 'TableService.getTable' method directly implements this REST API endpoint by receiving 'full_name' via an HTTP GET request, calling the repository layer, and returning a JSON response. The method signature and behavior explicitly match the documented API.",
          "predicted_trace_chain": "api/Apis/TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The documentation from 'api/Apis/TablesApi.md' describes the getTable functionality, and the 'TableService.getTable' artifact is the REST endpoint that implements this functionality.",
          "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although not explicitly referenced in the documentation snippet, 'TableRepository.getTable' is called by 'TableService.getTable' to perform the actual retrieval of the table information. It encapsulates the business logic required to parse the full table name and fetch the TableInfo object from persistence. This makes it an essential, implicit component in the overall getTable operation.",
          "predicted_trace_chain": "api/Apis/TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API documentation for getTable leads to 'TableService.getTable' which in turn delegates the table retrieval to 'TableRepository.getTable'. This chain outlines the dependency path necessary to implement the described functionality.",
          "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 47,
          "artifact_title": "TableCli.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "calls",
          "relationship_explanation": "The 'TableCli.getTable' method is part of the client-side interface that allows users to invoke the getTable operation through a CLI. It constructs a request using the full table name and calls the 'getTable' function of the TablesApi, thereby demonstrating a usage example of the documented functionality, though it is not the primary REST endpoint.",
          "predicted_trace_chain": "api/Apis/TablesApi.md -> TableCli.getTable",
          "predicted_trace_chain_explanation": "The documentation describes the getTable API, and 'TableCli.getTable' shows how a client (CLI) might utilize this API call. This represents an implicit usage chain from documentation to client invocation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableInfoDAO",
          "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies an updateVolume operation that accepts a fully qualified volume name and an UpdateVolumeRequestContent, and returns a VolumeInfo. The VolumeService.updateVolume method is the REST API endpoint annotated with @Patch that directly implements this behavior by exposing these parameters and calling the underlying repository method.",
          "predicted_trace_chain": "api/Apis/VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "Starting from the Volumes API documentation in 'VolumesApi.md' which describes the updateVolume operation, the chain directly leads to the VolumeService.updateVolume method that implements this endpoint.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although not directly mentioned in the documentation snippet, VolumeRepository.updateVolume is the underlying method invoked by VolumeService.updateVolume to perform the actual update of the volume in the persistence layer. It handles the business logic such as validating the new name or comment and updating the volume record.",
          "predicted_trace_chain": "api/Apis/VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The updateVolume API call documented in the Volumes API eventually relies on VolumeService.updateVolume, which in turn uses VolumeRepository.updateVolume to update the volume. This chain links the API endpoint to the repository implementing the update functionality.",
          "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements HTTP DELETE endpoint",
          "relationship_explanation": "The documentation snippet explicitly describes a 'deleteFunction' operation that accepts a fully-qualified function name. The 'FunctionService.deleteFunction' method directly implements this functionality via its @Delete annotation and a 'name' parameter that corresponds to that description.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation from 'api/Apis/FunctionsApi.md' clearly defines the deleteFunction API. 'FunctionService.deleteFunction' is the endpoint that realizes this definition, forming a direct trace from the doc to the code.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "While not directly exposed via the API, 'FunctionRepository.deleteFunction' is invoked by 'FunctionService.deleteFunction' to perform the actual deletion of the function from persistence. This connection makes it a necessary internal part of the delete functionality chain described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "Starting from the API documentation in 'FunctionsApi.md', the delete operation is implemented by 'FunctionService.deleteFunction' which internally utilizes 'FunctionRepository.deleteFunction' to interact with the database. Each step is necessary for fulfilling the complete deletion operation.",
          "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.deleteFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly lists a 'createTable' API endpoint with a POST request to /tables. The 'TableService.createTable' method is annotated with @Post and directly implements the creation of a table, thereby fulfilling the documented functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "Starting from the TablesApi documentation (located at api/Apis/TablesApi.md) which specifies the createTable operation, we trace directly to the TableService.createTable method since it exposes the POST endpoint and implements the table creation logic.",
          "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly mentions a 'deleteTable' API endpoint with a DELETE request to /tables/{full_name}. The 'TableService.deleteTable' method, annotated with @Delete, implements this endpoint by handling the deletion of a table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The chain begins at the TablesApi documentation and directly maps to the TableService.deleteTable method, which provides the DELETE /tables/{full_name} functionality as specified.",
          "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly defines a 'getTable' API endpoint with a GET request to /tables/{full_name}. The 'TableService.getTable' method, annotated with @Get, implements this endpoint by retrieving table information.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "Starting from the TablesApi documentation, the trace directly leads to the TableService.getTable method, which is responsible for fulfilling the GET request for a specific table.",
          "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly lists a 'listTables' API endpoint with a GET request to /tables. The 'TableService.listTables' method implements this endpoint by returning a list of tables.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The trace chain starts at the TablesApi documentation and directly connects to the TableService.listTables method, which provides the functionality to list tables as described in the documentation.",
          "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.deleteTable",
          "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.createTable",
          "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.listTables",
          "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.getTable",
          "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes API endpoint",
          "relationship_explanation": "This method is annotated with @Get and acts as the REST endpoint for retrieving a volume. It directly corresponds to the 'getVolume' operation described in the documentation by returning a VolumeInfo object in JSON format.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The documentation in 'VolumesApi.md' defines the getVolume operation. VolumeService.getVolume is the entry point at the service layer that implements this functionality, making it the direct trace from the documentation.",
          "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements backend retrieval",
          "relationship_explanation": "This method performs the core business logic of fetching a volume from the persistence layer using the fully qualified volume name. It is invoked by VolumeService.getVolume to obtain the VolumeInfo object, thus directly implementing the documented functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The chain shows that the REST endpoint (VolumeService.getVolume) delegates the retrieval process to this repository method, which is essential to fulfilling the getVolume operation described in the document.",
          "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model conversion",
          "relationship_explanation": "Although not directly mentioned in the documentation, VolumeInfoDAO is used within VolumeRepository.getVolume to convert data from the database into a VolumeInfo object. This conversion aligns with the documented return type [VolumeInfo].",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "After VolumeRepository.getVolume retrieves raw volume data, it leverages VolumeInfoDAO to transform the persistent entity into the VolumeInfo model that is returned by the API, completing the documented getVolume functionality.",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet lists a POST endpoint for createVolume. The VolumeService.createVolume method is annotated with @Post and directly handles the creation of a Volume, matching this endpoint.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The document 'VolumesApi.md' specifies the createVolume operation and the chain leads directly to the implementation in VolumeService.createVolume.",
          "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The DELETE endpoint for deleteVolume in the documentation corresponds to the VolumeService.deleteVolume method, which is annotated with @Delete and implements the delete functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "Starting from 'VolumesApi.md', the deleteVolume operation is implemented by the VolumeService.deleteVolume method.",
          "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The GET endpoint for getVolume detailed in the documentation is directly implemented by VolumeService.getVolume, which retrieves a Volume based on its name.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The chain from the documentation 'VolumesApi.md' to VolumeService.getVolume demonstrates the direct mapping of the defined endpoint to its implementation.",
          "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation\u2019s GET request for listing volumes is fulfilled by the VolumeService.listVolumes method. This method handles queries to list all Volumes as described.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The documentation entry for listing Volumes from 'VolumesApi.md' maps directly to the VolumeService.listVolumes method.",
          "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The PATCH endpoint for updateVolume in the documentation is implemented by the VolumeService.updateVolume method, which processes updates to an existing Volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "Starting from the 'VolumesApi.md' documentation, the updateVolume endpoint is directly implemented by VolumeService.updateVolume.",
          "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.getVolume",
          "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.deleteVolume",
          "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.updateVolume",
          "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.createVolume",
          "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.listVolumes",
          "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies the updateSchema operation with signature 'SchemaInfo updateSchema(full_name, UpdateSchema)'. This corresponds directly to the REST endpoint defined in SchemaService.updateSchema, which accepts a 'full_name' parameter (annotated with @Param) and an UpdateSchema object, and returns an HttpResponse containing SchemaInfo. Its interface thus explicitly implements the documented API.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The document from 'SchemasApi.md' describes the updateSchema operation and its parameters. SchemaService.updateSchema is the endpoint method that implements this operation, making this link explicit.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "calls",
          "relationship_explanation": "SchemaService.updateSchema, after receiving the API request, delegates the actual update logic to SchemaRepository.updateSchema. While the repository method is not directly mentioned in the documentation snippet, it is an essential implementation step in processing the updateSchema operation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The updateSchema functionality is first exposed by SchemaService.updateSchema as described in 'SchemasApi.md' and then the service method calls SchemaRepository.updateSchema to perform the core business logic, forming an implicit chain from the documented API to the persistence layer.",
          "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly calls out the 'createFunction' endpoint (POST /functions). This is implemented by the FunctionService.createFunction method which directly handles the creation of functions as described.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The FunctionsApi documentation (located in FunctionsApi.md) specifies the 'createFunction' endpoint, and the trace directly follows to the FunctionService.createFunction artifact which implements this functionality.",
          "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly mentions the 'deleteFunction' endpoint (DELETE /functions/{name}). This behavior is implemented by the FunctionService.deleteFunction method.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "Starting from the FunctionsApi.md document that lists the deleteFunction endpoint, the chain directly links to the FunctionService.deleteFunction artifact which provides the deletion functionality.",
          "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly indicates a 'getFunction' endpoint (GET /functions/{name}). This functionality is provided by the FunctionService.getFunction implementation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The trace starts at FunctionsApi.md where the getFunction endpoint is specified, linking directly to the FunctionService.getFunction artifact that executes the retrieval of a function.",
          "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly defines a 'listFunctions' endpoint (GET /functions). This is implemented by FunctionService.listFunctions which returns a list of functions as described.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "Beginning at the FunctionsApi.md documentation, the listFunctions endpoint is detailed and the trace proceeds directly to the FunctionService.listFunctions artifact that implements the listing of functions.",
          "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.listFunctions",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.deleteFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.createFunction",
          "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.deleteFunction",
          "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.createFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.getFunction",
          "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.listFunctions",
          "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the 'listCatalogs' operation described in the documentation snippet. It accepts the 'max_results' and 'page_token' parameters as Optional values and returns a JSON response that wraps the ListCatalogsResponse, matching the documented API signature exactly.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The documentation snippet from 'CatalogsApi.md' describes the listCatalogs function. CatalogService.listCatalogs is the endpoint that provides this functionality by returning a ListCatalogsResponse. This direct connection establishes an explicit trace from the API documentation to this service method.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 9,
          "artifact_title": "CatalogRepository.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although not directly mentioned in the documentation snippet, this repository method is invoked by CatalogService.listCatalogs to perform the underlying data access logic. It is a key part of the execution chain that realizes the listCatalogs functionality, thereby forming an implicit link.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The service endpoint (CatalogService.listCatalogs) delegates the operation to CatalogRepository.listCatalogs to retrieve the list of catalogs from the persistence layer. This creates an implicit traceability pathway from the documentation through the service layer down to the repository method.",
          "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is the REST endpoint that directly implements the listFunctions API as specified in the documentation. It accepts the parameters catalog_name, schema_name, max_results, and page_token and returns a JSON response representing a ListFunctionsResponse. The HTTP request headers and the GET annotation in this method directly correlate with the documented API details.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The documentation from 'FunctionsApi.md' defines the listFunctions operation. FunctionService.listFunctions is the endpoint that directly realizes this documented functionality, making it the explicit trace target.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "This repository method is indirectly involved in the listFunctions functionality by supporting the service layer. It gathers and constructs the ListFunctionsResponse by fetching function data from the persistence layer, as invoked by FunctionService.listFunctions.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "While not directly apparent in the documentation snippet, FunctionRepository.listFunctions forms an essential part of the overall implementation chain by being called from the service endpoint. This intermediate dependency is necessary to fulfill the behavior as specified in the documentation.",
          "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.listFunctions",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet clearly defines the GET operation 'getCatalog' (with signature 'CatalogInfo getCatalog(name)'). This exactly matches the REST endpoint implemented in 'CatalogService.getCatalog', which is annotated with @Get and returns the catalog data as JSON. Thus, this method directly implements the documented API.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "Starting from the documentation file 'CatalogsApi.md', the getCatalog functionality is directly implemented by 'CatalogService.getCatalog'. The method\u2019s purpose, parameters, and return type all match the documentation.",
          "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "used_by",
          "relationship_explanation": "Although the documentation does not explicitly mention it, the return type 'CatalogInfo' (as referenced in the documentation) is constructed in the application by converting persistent data via the CatalogInfoDAO (using its toCatalogInfo() method). This DAO underpins the data model that 'CatalogService.getCatalog' ultimately returns.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The documented return type CatalogInfo is indirectly built using 'CatalogInfoDAO'. 'CatalogService.getCatalog' calls the repository which retrieves a Catalog entity and transforms it into a CatalogInfo object using CatalogInfoDAO. Thus, the DAO is an integral link in the implementation chain.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation snippet describes a deleteTable function that uses a 'full_name' parameter, is reached via an HTTP DELETE method and does not require authorization. The TableService.deleteTable method is annotated with @Delete (using the '/{full_name}' path) and explicitly receives a fullName parameter to delete a table, matching the documented behavior.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation from 'api/Apis/TablesApi.md' directly documents the deleteTable endpoint, which is implemented by the TableService.deleteTable method.",
          "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "dependency (implements underlying deletion logic)",
          "relationship_explanation": "Although not directly exposed via the HTTP endpoint, TableRepository.deleteTable is called by TableService.deleteTable to perform the actual deletion of the table data and related properties. Its functionality is an integral part of the overall table deletion process documented in the API.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The deleteTable API endpoint (documented in TablesApi.md) delegates the deletion operation to TableService.deleteTable, which in turn calls TableRepository.deleteTable to execute the underlying deletion logic, such as removing table records and file system directories.",
          "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "Although the documentation snippet does not explicitly name any code artifact, the documented 'listSchemas' endpoint (which returns a ListSchemasResponse) is implemented by the SchemaService.listSchemas method. This service method constructs the HTTP response for the list schemas operation as described in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The documentation located at 'api/Apis/SchemasApi.md' describes the listSchemas operation. The service layer, specifically SchemaService.listSchemas (artifact_id 43), implements this endpoint by invoking lower\u2013level data access methods to gather schema information and return the response.",
          "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "SchemaRepository.listSchemas is the repository method that is called by SchemaService.listSchemas to access persisted schema data and build the ListSchemasResponse. Its functionality fulfills the data retrieval requirements implicit in the documented operation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "Starting from the documentation in 'SchemasApi.md', the listSchemas endpoint is implemented in the service layer by SchemaService.listSchemas, which in turn calls SchemaRepository.listSchemas (artifact_id 38) to fetch the required schema data from storage. Each intermediate step is necessary to bridge the HTTP API with the database access logic.",
          "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly describes the 'generateTemporaryVolumeCredentials' API endpoint with its parameter of type GenerateTemporaryVolumeCredential and a return type of GenerateTemporaryVolumeCredentialResponse. The service method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials' directly implements this functionality as seen in its method signature and behavior.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The trace starts at the documented API file (TemporaryVolumeCredentialsApi.md) where the endpoint is defined and directly maps to the service method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials', with no intermediate steps required.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation snippet describes the 'createTable' API operation with an HTTP POST request, JSON content, and a signature of 'TableInfo createTable(CreateTable)'. 'TableService.createTable' is annotated with @Post and directly accepts a CreateTable object, returning an HttpResponse with the TableInfo, which exactly matches the documented functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The chain begins at the documentation file ('TablesApi.md') and immediately leads to the 'TableService.createTable' method, which is the exposed REST endpoint implementing the createTable operation.",
          "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "business logic implementation",
          "relationship_explanation": "Although not directly exposed as an HTTP endpoint, 'TableRepository.createTable' is called by 'TableService.createTable' to perform the actual creation of a table instance. Its signature 'TableInfo createTable(CreateTable)' exactly mirrors the documented API contract, making it an essential underlying component of the 'createTable' operation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "Starting from the API documentation, the chain follows the REST endpoint in 'TableService.createTable' and then continues to 'TableRepository.createTable', which implements the core table creation logic described in the documentation.",
          "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableInfoDAO",
          "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The provided documentation snippet describes a 'deleteCatalog' operation that takes a 'name' and an optional 'force' parameter and deletes a catalog. The CatalogService.deleteCatalog method (artifact id 12) is annotated with @Delete and accepts these two parameters, directly mapping to the documented API. It is the endpoint that processes the HTTP DELETE request as specified in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The documented API in CatalogsApi.md is implemented by CatalogService.deleteCatalog, which serves as the entry point for a deleteCatalog operation. This direct mapping makes it the explicit code artifact for the operation.",
          "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "While the documentation does not mention repository details, the deleteCatalog service method delegates the actual deletion logic to CatalogRepository.deleteCatalog (artifact id 7). This method is responsible for performing the persistence layer operations required to delete a catalog, such as checking if the catalog contains schemas and enforcing the 'force' flag.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The deletion process initiates at the documented API endpoint (CatalogService.deleteCatalog) and then leverages CatalogRepository.deleteCatalog to carry out the backend deletion logic. This chain explains how the high-level HTTP operation is translated into lower-level persistence actions.",
          "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.deleteCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies a POST endpoint for creating a catalog ('createCatalog'). The 'CatalogService.createCatalog' method is explicitly annotated with @Post and handles the creation of a catalog, directly implementing this functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The chain starts at the CatalogsApi documentation which lists the createCatalog operation and directly traces to the implementation in the CatalogService class.",
          "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation lists a DELETE endpoint for deleting a catalog ('deleteCatalog'). The 'CatalogService.deleteCatalog' method, annotated with @Delete, explicitly implements this endpoint by deleting a catalog by its name.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The documentation\u2019s deleteCatalog endpoint directly maps to the CatalogService.deleteCatalog method, forming a clear implementation trace.",
          "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation describes a GET endpoint for retrieving a catalog ('getCatalog'). The 'CatalogService.getCatalog' method is designed to handle GET requests to retrieve catalog data, matching the documented functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "Starting from the CatalogsApi.md document, the getCatalog endpoint is directly implemented by the CatalogService.getCatalog method, establishing the trace.",
          "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation details a GET endpoint for listing catalogs ('listCatalogs'). The 'CatalogService.listCatalogs' method is explicitly responsible for listing all catalogs and aligns with this endpoint.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The CatalogsApi.md documentation directly describes the listCatalogs operation, which is concretely implemented by the CatalogService.listCatalogs method.",
          "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "According to the documentation, the PATCH endpoint 'updateCatalog' is used to update a catalog. The 'CatalogService.updateCatalog' method, with its @Patch annotation, directly implements this functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The updateCatalog operation detailed in the CatalogsApi.md document traces directly to its implementation in the CatalogService.updateCatalog method.",
          "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.updateCatalog",
          "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.listCatalogs",
          "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.deleteCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.deleteCatalog",
          "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.addCatalog",
          "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly lists the POST endpoint for 'generateTemporaryVolumeCredentials', which directly maps to the service method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials'. The hyperlink text and HTTP method in the table strongly indicate that this artifact is responsible for generating temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "Starting from the documentation file 'TemporaryVolumeCredentialsApi.md', the snippet explicitly refers to the 'generateTemporaryVolumeCredentials' endpoint. This directly maps to the 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials' method in the code, forming a clear traceability pathway.",
          "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes REST endpoint",
          "relationship_explanation": "The documentation specifies a createFunction API complete with HTTP request headers and a JSON response. This closely matches the public endpoint implemented in FunctionService.createFunction which is annotated with @Post and accepts a CreateFunctionRequest parameter, directly exposing the API to clients.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The API documentation provided (from FunctionsApi.md) outlines the expected behavior and HTTP requirements, which map directly to the FunctionService.createFunction method that handles incoming HTTP requests.",
          "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements business logic",
          "relationship_explanation": "The documented signature 'FunctionInfo createFunction(CreateFunctionRequest)' is exactly implemented in FunctionRepository.createFunction. This method performs validation, persists data, and returns a FunctionInfo object, fulfilling the core functionality described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "Starting from the API documentation (FunctionsApi.md), the HTTP endpoint is handled by FunctionService.createFunction which then delegates the actual creation logic to FunctionRepository.createFunction, forming a clear chain of responsibility.",
          "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.createFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionInfoDAO",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        }
      ]
    },
    {
      "dataset": "unity_catalog",
      "run_id": 5,
      "timestamp": "2025-02-12T14:48:17.765827",
      "results": [
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes a listVolumes API endpoint with HTTP headers and parameters. The VolumeService.listVolumes method is a REST endpoint (annotated with @Get) that directly implements this functionality by mapping the HTTP request parameters to a call that returns a JSON response, matching the documented signature.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation in 'VolumesApi.md' specifies the listVolumes method signature. This endpoint is directly implemented by VolumeService.listVolumes, making it the explicit mapping from documentation to code.",
          "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "VolumeService.listVolumes delegates the business logic of fetching volume data to VolumeRepository.listVolumes. This repository method builds and returns the ListVolumesResponseContent (the documented return type), making it an implicit part of the overall functionality described in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The documentation\u2019s listVolumes definition is first handled by the REST endpoint in VolumeService.listVolumes, which then uses VolumeRepository.listVolumes to perform the actual data retrieval, linking the documented interface with the underlying data access logic.",
          "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 63,
          "artifact_title": "VolumeCli.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although not part of the server-side implementation, VolumeCli.listVolumes is a client\u2010side usage example that calls the volumesApi.listVolumes method. This illustrates how the documented listVolumes API is consumed and demonstrates its usage in a CLI context.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "predicted_trace_chain_explanation": "The documentation provided in 'VolumesApi.md' also informs client implementations. The VolumeCli.listVolumes method exemplifies this usage by invoking the API call to list volumes, thereby establishing an implicit link between the documentation and its consumer code.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation for the 'createTable' endpoint (POST /tables) is directly implemented by the 'TableService.createTable' method. This method is annotated with @Post and its name explicitly indicates its use for creating tables, matching the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "Starting from the TablesApi documentation (located at 'api/Apis/TablesApi.md'), the chain leads directly to the 'TableService.createTable' method which provides the implementation for creating a table.",
          "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The 'deleteTable' endpoint as described in the documentation (DELETE /tables/{full_name}) is implemented by the 'TableService.deleteTable' method. The method\u2019s annotation @Delete along with the URL parameter '{full_name}' confirms the match.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The documentation specifies the deletion of a table via a DELETE request. This directly maps to the 'TableService.deleteTable' method, forming a clear trace from the documentation to the code artifact.",
          "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "For the GET /tables/{full_name} operation documented in the TablesApi, the 'TableService.getTable' method provides the implementation. Its use of the @Get annotation and method name clearly align with the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "Beginning with the TablesApi documentation, the implementation of table retrieval is directly traced to 'TableService.getTable', ensuring a direct correspondence with the documented endpoint.",
          "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The listTables endpoint in the documentation (GET /tables) is implemented by the 'TableService.listTables' method. Its annotation @Get and its functionality for listing tables confirm this match.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The documented API for listing tables directly leads to the 'TableService.listTables' method, thus completing the trace chain from the TablesApi documentation to the code artifact.",
          "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.deleteTable",
          "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.listTables",
          "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.createTable",
          "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableRepository.getTable",
          "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation defines the operation 'updateSchema' with signature 'SchemaInfo updateSchema(full_name, UpdateSchema)'. This matches exactly with the method in SchemaRepository.updateSchema, which accepts a String (fullName) and an UpdateSchema object and returns a SchemaInfo. This direct correspondence makes it an explicit trace.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation from 'api/Apis/SchemasApi.md' directly describes the core update functionality, which is implemented in SchemaRepository.updateSchema.",
          "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates",
          "relationship_explanation": "Although the documentation snippet shows a signature matching the repository method, the SchemaService.updateSchema method acts as the REST endpoint and delegates the update operation to SchemaRepository.updateSchema. This makes it an implicit part of the update operation chain.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The documentation impact is propagated through the service layer; SchemaService.updateSchema wraps the repository call in an HTTP response, thereby connecting the API documentation to the implemented functionality.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet defines an API endpoint with the signature 'TableInfo createTable(CreateTable)', detailing HTTP headers and JSON content. The method 'TableService.createTable' (located in the server/service layer) is annotated with @Post and directly accepts a CreateTable object and returns a TableInfo object wrapped in an HTTP response. This directly corresponds to the documented API, making it an explicit implementation of the createTable functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The API documentation from 'api/Apis/TablesApi.md' directly describes the endpoint that is implemented by the 'TableService.createTable' method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "used_by",
          "relationship_explanation": "The 'TableRepository.createTable' method is used internally by 'TableService.createTable' to execute the business logic of creating a new table instance. Although it is not directly exposed as a HTTP endpoint, its functionality underpins the API\u2019s behavior described in the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The documented API endpoint is implemented at the service level by 'TableService.createTable', which in turn calls 'TableRepository.createTable' to perform the actual table creation operation, forming a clear traceability pathway.",
          "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableInfoDAO",
          "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet lists a 'createSchema' endpoint with HTTP POST at /schemas. This directly corresponds to the SchemaService.createSchema method, which is annotated with @Post and implements the creation of a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The chain starts from the SchemasApi.md documentation which outlines the createSchema operation and ends at the SchemaService.createSchema artifact that implements this endpoint.",
          "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet defines a DELETE endpoint at /schemas/{full_name} for deleting a schema. This maps explicitly to the SchemaService.deleteSchema method, which is annotated with @Delete and deletes a schema based on its full name.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The documentation's delete schema endpoint directly links to the SchemaService.deleteSchema method, forming the trace chain from the doc to the implementation.",
          "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation text specifies a GET endpoint at /schemas/{full_name} to retrieve a schema. The SchemaService.getSchema method, marked with @Get, directly implements this functionality, providing the schema based on its full name.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "Starting with the documentation in SchemasApi.md for 'getSchema', the trace chain leads directly to SchemaService.getSchema which implements the described endpoint.",
          "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation outlines a GET endpoint at /schemas for listing schemas. The SchemaService.listSchemas method, decorated with @Get, implements the listing functionality by calling the appropriate repository method to fetch schemas.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The documentation from SchemasApi.md for listing schemas directly maps to the SchemaService.listSchemas method, forming a clear trace from the doc to the code artifact.",
          "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation lists a PATCH endpoint at /schemas/{full_name} for updating a schema. This corresponds explicitly to the SchemaService.updateSchema method, which is annotated with @Patch and thereby updates the schema based on input parameters.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The trace chain begins with the updateSchema operation in SchemasApi.md and ends at the SchemaService.updateSchema artifact that implements the PATCH method for schema updates.",
          "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.getSchema",
          "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.listSchemas",
          "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.updateSchema",
          "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.createSchema",
          "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaRepository.deleteSchema",
          "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation snippet describes an API function 'listTables' that takes parameters (catalog_name, schema_name, max_results, page_token) and returns a ListTablesResponse. The 'TableService.listTables' method is annotated as an HTTP GET endpoint that accepts these parameters and immediately returns a JSON response. This directly implements the functionality defined in the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The documentation located in 'TablesApi.md' outlines the endpoint's signature and response. 'TableService.listTables' is the first step in the code that realizes this functionality, making the trace chain start at the documentation and end at this API endpoint implementation.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "used by API implementation",
          "relationship_explanation": "Although not directly mentioned in the documentation snippet, 'TableRepository.listTables' provides the core business logic that retrieves the list of tables from the persistence layer. 'TableService.listTables' delegates the data retrieval task to this repository method, making it an integral, implicit part of the implementation of the documented API.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The complete functional pathway starts with the API documentation in 'TablesApi.md', is directly implemented by 'TableService.listTables', and then further relies on 'TableRepository.listTables' to fetch the table data. Each step is necessary to bridge the high-level API description to the underlying data access.",
          "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes a listSchemas endpoint with parameters catalog_name, max_results, and page_token that returns a ListSchemasResponse. The SchemaService.listSchemas method directly implements this HTTP endpoint, mapping these input parameters and returning the expected JSON response.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation (SchemasApi.md) specifies the behavior and signature of listSchemas, which is directly implemented by the SchemaService.listSchemas method.",
          "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "SchemaService.listSchemas delegates the task of fetching the schema data to SchemaRepository.listSchemas, which applies the business logic for retrieving schemas from the database. This makes it an integral (implicit) part of the listSchemas API operation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The chain shows that while the HTTP endpoint is handled by SchemaService.listSchemas, it relies on SchemaRepository.listSchemas for the core data retrieval functionality, thereby fulfilling the documented listSchemas operation.",
          "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 32,
          "artifact_title": "SchemaCli.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "demonstrates/uses",
          "relationship_explanation": "SchemaCli.listSchemas is a client\u2010side method that demonstrates the usage of the listSchemas functionality by calling the schemasApi.listSchemas method with similar parameters. It serves as a practical usage example that adheres to the documented API.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "predicted_trace_chain_explanation": "The documentation in SchemasApi.md is reflected in how the CLI client (SchemaCli.listSchemas) constructs and invokes the listSchemas operation, making it an implicit link in the overall traceability pathway from documentation to code.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly defines the 'createFunction' endpoint (POST /functions). The FunctionService.createFunction method is annotated with @Post and directly calls FUNCTION_REPOSITORY.createFunction, which implements the endpoint for creating a function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "This chain starts at the FunctionsApi documentation file and directly leads to the FunctionService.createFunction method, which implements the documented API.",
          "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly defines the 'deleteFunction' endpoint (DELETE /functions/{name}). The FunctionService.deleteFunction method is annotated with @Delete and handles deletion by calling FUNCTION_REPOSITORY.deleteFunction, directly matching the documented behavior.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The chain begins at the FunctionsApi documentation and maps directly to the service method that handles function deletion.",
          "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly details the 'getFunction' endpoint (GET /functions/{name}). The FunctionService.getFunction method is annotated with @Get and calls FUNCTION_REPOSITORY.getFunction to retrieve a function, thereby directly implementing the documented functionality.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "This chain connects the documentation to the service method that retrieves a function as specified in the API.",
          "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly mentions the 'listFunctions' endpoint (GET /functions) for listing functions. The FunctionService.listFunctions method is annotated with @Get and implements this endpoint by calling FUNCTION_REPOSITORY.listFunctions, matching the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "This chain starts with the FunctionsApi documentation and directly leads to the listFunctions method that implements the functionality to list functions.",
          "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.listFunctions",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.deleteFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.createFunction",
          "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.deleteFunction",
          "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.createFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.getFunction",
          "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.listFunctions",
          "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly references the 'createVolume' endpoint (POST /volumes) and the link [**createVolume**] clearly indicates the API for creating a volume. This directly maps to the VolumeService.createVolume method which implements the API functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "Starting from the VolumesApi.md documentation, the createVolume API endpoint is implemented by the VolumeService.createVolume method, making it a direct link.",
          "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation lists the 'deleteVolume' endpoint (DELETE /volumes/{name}) with an explicit reference. VolumeService.deleteVolume is the method that handles this endpoint in the code.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The chain starts from the API documentation (VolumesApi.md) where deleteVolume is defined, and directly maps to the VolumeService.deleteVolume method.",
          "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation clearly defines the 'getVolume' endpoint (GET /volumes/{name}). This endpoint is implemented in the server code by the VolumeService.getVolume method.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The documentation explicitly maps the getVolume operation to a corresponding code artifact (VolumeService.getVolume) resulting in a direct traceability chain.",
          "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The 'listVolumes' endpoint (GET /volumes) is explicitly mentioned in the documentation. The VolumeService.listVolumes method is responsible for implementing this endpoint.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "Directly traced from the VolumesApi.md documentation to the VolumeService.listVolumes method, the chain shows the implementation of the list volumes functionality.",
          "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The updateVolume endpoint (PATCH /volumes/{name}) is explicitly detailed in the documentation. This functionality is implemented by the VolumeService.updateVolume method in the server code.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The traceability chain begins from VolumesApi.md, where the updateVolume API operation is defined, and directly leads to the implementation in the VolumeService.updateVolume method.",
          "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.getVolume",
          "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.deleteVolume",
          "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.updateVolume",
          "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.createVolume",
          "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeRepository.listVolumes",
          "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation defines a 'createCatalog' operation with signature 'CatalogInfo createCatalog(CreateCatalog)'. The CatalogService.createCatalog method (artifact 11) is the HTTP POST endpoint that directly implements this API by accepting a CreateCatalog request and returning a CatalogInfo (wrapped in an HttpResponse). Its name and behavior directly correspond to the documented functionality.",
          "predicted_trace_chain": "api/Apis/CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "Starting with the documentation file 'api/Apis/CatalogsApi.md', the 'createCatalog' operation is mapped directly to the CatalogService.createCatalog method which handles the API request for creating a catalog. This direct mapping is why the relationship is marked as explicit.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates",
          "relationship_explanation": "Within the implementation of CatalogService.createCatalog, the actual creation and persistence of the catalog is delegated to the CatalogRepository.addCatalog method (artifact 6). This method accepts a CreateCatalog object and returns a CatalogInfo, which exactly matches the documented signature, although it is not explicitly mentioned in the documentation snippet.",
          "predicted_trace_chain": "api/Apis/CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "The trace begins at the documentation in 'api/Apis/CatalogsApi.md', which specifies the 'createCatalog' operation. The API endpoint is implemented by CatalogService.createCatalog, which in turn calls CatalogRepository.addCatalog to perform the underlying catalog creation. This chain of delegation connects the documented behavior to its lower-level implementation.",
          "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements HTTP DELETE endpoint",
          "relationship_explanation": "The documentation snippet describes the 'deleteTable(full_name)' operation with a DELETE HTTP method and a parameter 'full_name'. 'TableService.deleteTable' is annotated with @Delete(\"/{full_name}\") and accepts a 'fullName' parameter, which exactly matches the documented API specification.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "Starting from the documentation file (located at api/Apis/TablesApi.md), the 'deleteTable' operation is directly implemented in the service layer by the 'TableService.deleteTable' method, making this the explicit trace for the documented functionality.",
          "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "Although not directly exposed in the API documentation, 'TableRepository.deleteTable' is invoked by 'TableService.deleteTable' to perform the underlying deletion logic of a table. It is an essential intermediate step in the deletion operation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The documented 'deleteTable' call flows from the API description (TablesApi.md) to the service layer ('TableService.deleteTable'), which in turn delegates the deletion action to the repository layer ('TableRepository.deleteTable'). This chain links the high-level operation to its underlying data manipulation implementation.",
          "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements API endpoint",
          "relationship_explanation": "The documentation snippet defines the createFunction API with a signature 'FunctionInfo createFunction(CreateFunctionRequest)' and specifies HTTP headers. The FunctionService.createFunction method is annotated with @Post and handles HTTP requests by accepting a CreateFunctionRequest and returning an HTTP response containing the FunctionInfo. This directly implements the documented API endpoint.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The trace begins with the FunctionsApi.md document which describes the createFunction functionality, leading directly to the FunctionService.createFunction artifact that exposes the HTTP endpoint as described.",
          "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "FunctionService.createFunction delegates the creation logic to FunctionRepository.createFunction. Although not mentioned explicitly in the documentation snippet, the repository method returns a FunctionInfo and executes the core functionality of creating a function instance, which matches the API's return type.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "The documented API defined in FunctionsApi.md is implemented by FunctionService.createFunction, which in turn calls FunctionRepository.createFunction. This chain shows the dependency where the service layer uses the repository to realize the functionality described in the documentation.",
          "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.createFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionInfoDAO",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the core schema creation logic as defined by the documentation. Its signature 'SchemaInfo createSchema(CreateSchema)' exactly matches the documented API, and it takes a CreateSchema object, validates it, and returns a SchemaInfo object.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The documented API in SchemasApi.md specifies the createSchema operation. The HTTP request is first handled by SchemaService.createSchema (artifact 40), which then delegates the creation task to SchemaRepository.createSchema (artifact 35) where the actual logic is implemented.",
          "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes",
          "relationship_explanation": "This REST endpoint is designed to expose the createSchema functionality over HTTP. It accepts a CreateSchema object and returns an HttpResponse containing the SchemaInfo, thereby directly aligning with the documented API signature.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "Starting from the API documentation (SchemasApi.md), SchemaService.createSchema is the entry point that handles HTTP POST requests for schema creation as documented.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 29,
          "artifact_title": "SchemaCli.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "invokes",
          "relationship_explanation": "This CLI method constructs a CreateSchema object and calls the createSchema function exposed by the schemasApi. Although it is a client\u2010side abstraction, it implicitly uses the same documented functionality to create a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "predicted_trace_chain_explanation": "The API documentation for createSchema is ultimately leveraged by this CLI command, which shows how a user might invoke the createSchema operation, even though it is not the core implementation endpoint.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet defines an API endpoint 'generateTemporaryVolumeCredentials' with the signature 'GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)'. This is explicitly implemented in the method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials', which is annotated with @Post and accepts a GenerateTemporaryVolumeCredential parameter while returning a GenerateTemporaryVolumeCredentialResponse.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The trace starts from the documentation file 'TemporaryVolumeCredentialsApi.md' (extracted from the location field) and directly maps to the service method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials', establishing a clear and direct link between the documented functionality and its implementation.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly references the 'generateTemporaryVolumeCredentials' operation (POST /temporary-volume-credentials) as part of the TemporaryVolumeCredentialsApi. This maps directly to the method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials', which implements the generation of temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "Starting from the documentation file 'TemporaryVolumeCredentialsApi.md', the endpoint described is directly implemented by 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials'. This chain clearly shows that the API documentation is linked to this service method that performs the described functionality.",
          "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes HTTP endpoint",
          "relationship_explanation": "The documentation snippet describes a GET operation that accepts a 'full_name' parameter and returns a TableInfo object. The method 'TableService.getTable' is annotated with @Get and directly maps the 'full_name' parameter from the HTTP request, thereby explicitly implementing the documented API behavior.",
          "predicted_trace_chain": "Apis/TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "Starting from the documentation (Apis/TablesApi.md), the endpoint for getting table information is implemented by 'TableService.getTable'. This method is the primary HTTP handler that fulfills the API contract described in the document.",
          "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "invoked by",
          "relationship_explanation": "Although not directly referenced in the documentation snippet, 'TableRepository.getTable' is the method invoked by 'TableService.getTable' to fetch the actual table information from the persistence layer. This aligns with the documented behavior of returning a TableInfo object by processing the 'full_name' parameter.",
          "predicted_trace_chain": "Apis/TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The getTable operation defined in the documentation is realized by the HTTP endpoint in 'TableService.getTable', which delegates the retrieval of table data to 'TableRepository.getTable'. This chain connects the API documentation to the actual data access implementation.",
          "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableInfoDAO",
          "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation specifies a GET operation named 'getCatalog' with a String parameter 'name' that returns a CatalogInfo. The CatalogService.getCatalog method directly implements this REST endpoint by accepting the 'name' parameter and wrapping the result from the repository into an HTTP JSON response. Its signature and behavior precisely match the documented functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "Starting from the documentation file (CatalogsApi.md), the getCatalog API is implemented by the CatalogService.getCatalog method, which directly fulfills the documented use case.",
          "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes API endpoint",
          "relationship_explanation": "The documentation snippet details the 'listFunctions' API, which directly matches the signature and parameters of the FunctionService.listFunctions method. It accepts catalog_name, schema_name, max_results, and page_token as parameters and returns a ListFunctionsResponse, making it an explicit implementation of the documented API.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation found in 'api/Apis/FunctionsApi.md' specifies the operation 'listFunctions' and its parameters. This chain directly maps the documented endpoint to the FunctionService.listFunctions artifact, which is annotated to handle HTTP GET requests and return JSON responses.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "invoked by",
          "relationship_explanation": "While the documentation does not directly mention repository operations, the FunctionService.listFunctions method (which is explicitly documented) internally calls FunctionRepository.listFunctions to retrieve the data. This makes the repository method an implicit part of the implementation chain for the 'listFunctions' API.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "The documented 'listFunctions' endpoint is handled by FunctionService.listFunctions, which delegates the retrieval of functions to FunctionRepository.listFunctions. This intermediate step is crucial for understanding the implementation pathway from the API documentation to the underlying data access layer.",
          "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.listFunctions",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is a REST endpoint that directly implements the 'deleteSchema' functionality as documented. It is annotated with @Delete and takes 'full_name' and 'force' parameters that match the documentation's signature.",
          "predicted_trace_chain": "Apis/SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The documentation snippet from 'Apis/SchemasApi.md' specifies the deleteSchema operation for removing a schema. SchemaService.deleteSchema is the API layer method that realizes this operation.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "calls/uses",
          "relationship_explanation": "While not directly referenced in the documentation, SchemaService.deleteSchema internally delegates to SchemaRepository.deleteSchema to execute the actual removal of the schema from the database. This repository method handles the lower\u2010level deletion logic.",
          "predicted_trace_chain": "Apis/SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "After the API endpoint (SchemaService.deleteSchema) receives the delete request, it calls SchemaRepository.deleteSchema, forming an end-to-end pathway from the documented API to the data persistence layer.",
          "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "exposes",
          "relationship_explanation": "The documentation snippet clearly defines the 'getFunction' operation (with the signature 'FunctionInfo getFunction(name)') which directly corresponds to the API endpoint in FunctionService.getFunction. This method is annotated with @Get and returns the function information as JSON, matching the documented behavior.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "Starting from the API documentation file (FunctionsApi.md), the getFunction API is implemented directly in the FunctionService.getFunction method, making it the explicit trace for the documented functionality.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 23,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates",
          "relationship_explanation": "While not directly visible in the documentation snippet, the FunctionService.getFunction method internally delegates the retrieval operation to FunctionRepository.getFunction. This repository method performs the actual database lookup based on the fully-qualified function name and returns a FunctionInfo, thus forming an implicit part of the overall getFunction functionality.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The complete pathway begins at FunctionsApi.md, mapping explicitly to FunctionService.getFunction which handles the HTTP GET request, and then delegates to FunctionRepository.getFunction to fetch the FunctionInfo from the persistence layer.",
          "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionInfoDAO",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly describes the deleteCatalog operation with parameters 'name' and 'force' and details the HTTP request (DELETE, headers, etc.). The 'CatalogService.deleteCatalog' artifact is the REST endpoint implementation with a @Delete annotation that directly matches the documented functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The deletion documented in 'CatalogsApi.md' is directly implemented by 'CatalogService.deleteCatalog', establishing a clear and direct mapping from the documented API to the service layer.",
          "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "used by",
          "relationship_explanation": "Although not mentioned directly in the documentation snippet, 'CatalogRepository.deleteCatalog' is invoked by 'CatalogService.deleteCatalog' to perform the actual deletion of a catalog from persistent storage. This makes it an implicit, but necessary, component of the overall deleteCatalog operation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The documented deleteCatalog operation relies on the service endpoint that in turn uses the repository layer. The trace chain shows the pathway from the API documentation to the service implementation and then to the low-level repository method that carries out the deletion.",
          "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.deleteCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet explicitly describes an API endpoint for generating temporary table credentials with a signature that accepts a GenerateTemporaryTableCredential and returns a GenerateTemporaryTableCredentialResponse. The code artifact 'TemporaryTableCredentialsService.generateTemporaryTableCredentials' directly implements this functionality by handling the HTTP POST request and constructing the appropriate JSON response, thereby matching the documented behavior.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The trace chain begins at the documentation file 'TemporaryTableCredentialsApi.md', from which the endpoint description is derived, and leads directly to the service method 'TemporaryTableCredentialsService.generateTemporaryTableCredentials' that realizes the described functionality.",
          "ground_truth_relationship": "The code implements the documented API endpoint by checking if a table exists at a storage location, then either generating AWS S3 temporary credentials or returning empty credentials for local filesystems, matching the documented GenerateTemporaryTableCredentialResponse return type.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies 'VolumeInfo getVolume(name)', and the method VolumeRepository.getVolume takes a three-level fully qualified name, splits it into catalog, schema, and volume, and returns a VolumeInfo object. This direct match in signature and functionality makes this an explicit trace.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The documentation from 'VolumesApi.md' describes the getVolume operation which is directly implemented in the VolumeRepository.getVolume method.",
          "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "VolumeService.getVolume is the HTTP endpoint that calls VOLUME_REPOSITORY.getVolume internally. Although the documentation focuses on the business logic of retrieving a volume, this service method wraps the repository call and exposes it as an API endpoint, making it an implicit link in the traceability chain.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The documented getVolume functionality is exposed via the service layer in VolumeService.getVolume, which in turn relies on the repository method, thereby forming a service-to-repository chain starting from the documentation.",
          "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "Provides REST API endpoint",
          "relationship_explanation": "The documentation fragment describes the 'deleteVolume' operation with a string parameter 'name' for deleting a volume. The 'VolumeService.deleteVolume' method is annotated with @Delete and accepts a parameter (named 'full_name') that corresponds in purpose to the documented 'name', thereby directly implementing the documented REST API endpoint.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "Starting from the documentation file (VolumesApi.md) which describes the deleteVolume operation, we trace directly to the VolumeService.deleteVolume method that implements the HTTP DELETE endpoint, establishing a direct mapping between documentation and code artifact.",
          "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "Internal dependency",
          "relationship_explanation": "The 'VolumeService.deleteVolume' method calls the VOLUME_REPOSITORY.deleteVolume function to actually remove the volume from the underlying persistent store. This repository layer method, while not directly exposed in the API documentation, is an essential internal step in the deletion process, making its relationship implicit.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The chain indicates that the API documentation maps to the service endpoint, which in turn relies on the repository's deleteVolume method to perform the deletion. Each intermediate step is necessary: the service exposes the API and delegates the deletion logic to the repository layer, completing the operation.",
          "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes a GET operation named 'getSchema' that returns a SchemaInfo object given a full_name parameter. The SchemaService.getSchema method (artifact_id 42) directly implements this API endpoint; it is annotated with @Get, takes the 'full_name' parameter, and returns a JSON representation of the SchemaInfo, thereby directly matching the documented behavior.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The starting point is the documentation in SchemasApi.md which describes the getSchema operation. This is directly implemented by SchemaService.getSchema, making it a clear, explicit trace from the documentation to the code artifact.",
          "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although the documentation does not mention the underlying data-access details, SchemaService.getSchema (the explicit implementation) delegates the retrieval of SchemaInfo to SchemaRepository.getSchema (artifact_id 37). This repository method contains the business logic to fetch and convert the schema from persistence, thereby indirectly supporting the documented getSchema functionality.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "Starting from SchemasApi.md, the API operation is first implemented by SchemaService.getSchema, and then this service method calls SchemaRepository.getSchema to perform the actual data retrieval. This chain illustrates the layered implementation supporting the documented functionality.",
          "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaInfoDAO",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation defines the 'updateCatalog' API operation with parameters (name, UpdateCatalog) and a return type of CatalogInfo. CatalogService.updateCatalog is the REST endpoint implementation that directly accepts these parameters and returns the updated catalog information in an HttpResponse. This method is the explicit implementation of the documented API.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "Starting from the 'CatalogsApi.md' documentation snippet, the updateCatalog operation is realized via the CatalogService.updateCatalog method, which directly maps the documented HTTP operation to its server-side implementation.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "Although not mentioned explicitly in the documentation snippet, CatalogRepository.updateCatalog is used by the service layer to perform the actual database update for the catalog. It takes the 'name' and 'UpdateCatalog' object, applies the update logic, and returns the updated CatalogInfo. This internal dependency is an implicit part of the updateCatalog API chain.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The REST endpoint defined by CatalogService.updateCatalog calls CatalogRepository.updateCatalog to execute the data persistence operations. This forms an implicit traceability pathway from the API documentation to the underlying repository method that fulfills the updateCatalog functionality.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogInfoDAO",
          "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly lists the 'createCatalog' endpoint (HTTP POST /catalogs) for creating a catalog. This artifact directly implements that functionality in the service layer.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "Starting at the documentation file (CatalogsApi.md) which defines the createCatalog endpoint, the chain directly leads to the CatalogService.createCatalog method that is responsible for creating a catalog.",
          "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly details the 'deleteCatalog' endpoint (HTTP DELETE /catalogs/{name}). This artifact implements the deletion of a catalog per the API specification.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The trace begins with the CatalogsApi.md documentation which specifies the deleteCatalog endpoint and leads directly to the CatalogService.deleteCatalog method that executes this operation.",
          "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly mentions the 'getCatalog' endpoint (HTTP GET /catalogs/{name}). This artifact implements the functionality to retrieve a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "From the documentation in CatalogsApi.md that describes the getCatalog operation, the trace leads directly to the CatalogService.getCatalog method which provides the corresponding service implementation.",
          "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly defines the 'listCatalogs' endpoint (HTTP GET /catalogs) to list available catalogs. This artifact implements that functionality in the service layer.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The trace begins with CatalogsApi.md, where the listCatalogs endpoint is documented, and moves directly to the CatalogService.listCatalogs method that is responsible for listing the catalogs.",
          "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly states the 'updateCatalog' endpoint (HTTP PATCH /catalogs/{name}) for modifying an existing catalog. This artifact implements the logic for updating catalog details.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "Starting from the CatalogsApi.md file that documents the updateCatalog operation, the trace directly leads to the CatalogService.updateCatalog method which fulfills the API's update functionality.",
          "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.updateCatalog",
          "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.listCatalogs",
          "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.deleteCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.deleteCatalog",
          "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.addCatalog",
          "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is the REST endpoint that directly implements the updateVolume operation described in the documentation. It accepts a three\u2010level volume identifier and an UpdateVolumeRequestContent as parameters and returns a JSON representation of a VolumeInfo, precisely matching the documented API signature.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation from 'VolumesApi.md' defines the updateVolume operation and its parameters. The VolumeService.updateVolume method is the direct implementation of this endpoint, making a clear trace from the document to the code artifact.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "used by",
          "relationship_explanation": "This repository method contains the core business logic to execute the volume update\u2014validating inputs, updating the volume's name or comment, and returning the updated VolumeInfo. It is invoked by VolumeService.updateVolume, thereby fulfilling the behavior expected by the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The updateVolume API operation is first handled by the VolumeService.updateVolume endpoint, which then delegates the update process to VolumeRepository.updateVolume. This chain validates the traceability from the documented API to its underlying business logic implementation.",
          "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet describes a 'deleteFunction(name)' endpoint that deletes a function based on its fully-qualified name. 'FunctionService.deleteFunction' is annotated with @Delete and accepts a 'name' parameter (along with an optional 'force' parameter), directly matching the documented behavior.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation (from 'FunctionsApi.md') directly corresponds to the HTTP endpoint defined in 'FunctionService.deleteFunction'. This service method implements the deletion operation as described in the documentation.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "delegates",
          "relationship_explanation": "Although not explicitly mentioned in the documentation snippet, 'FunctionService.deleteFunction' internally calls 'FunctionRepository.deleteFunction' to perform the actual deletion from persistent storage. This makes the repository deletion method an integral, though implicit, part of the deleteFunction chain.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "The deletion process as defined in the documentation is carried out by the service layer, which delegates the actual removal of the function to 'FunctionRepository.deleteFunction'. This chain illustrates the complete pathway from the API documentation to the underlying data operation.",
          "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.deleteFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation snippet specifies a function signature 'VolumeInfo createVolume(CreateVolumeRequestContent)' that creates a volume. This exactly matches the VolumeRepository.createVolume method, which accepts a CreateVolumeRequestContent and returns a VolumeInfo, directly implementing the documented functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The API documentation in 'VolumesApi.md' defines the contract for creating a volume, and the VolumeRepository.createVolume method is the concrete implementation of that contract.",
          "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "wrapper/endpoint",
          "relationship_explanation": "This method acts as the REST endpoint exposing the createVolume operation. It wraps the call to VolumeRepository.createVolume by converting its result into an HTTP response, thereby exposing the functionality described in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "Starting from the API documentation, the service layer method VolumeService.createVolume serves as the entry point for clients via HTTP, thereby indirectly linking to the documented createVolume operation.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 60,
          "artifact_title": "VolumeCli.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client call/usage",
          "relationship_explanation": "This method is part of the CLI client that invokes the createVolume operation by calling the underlying VolumesApi. Although it does not implement the operation itself, it demonstrates how the documented API functionality is consumed by client applications.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "predicted_trace_chain_explanation": "The documentation defines the createVolume API operation and the CLI implementation (VolumeCli.createVolume) uses this API to perform volume creation, showing an indirect usage pathway from the documentation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeInfoDAO",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation explicitly describes the 'listCatalogs' endpoint, including its parameters (page_token and max_results) and its return type of ListCatalogsResponse. The 'CatalogService.listCatalogs' method is the server-side REST endpoint that implements this functionality by processing these parameters and returning the appropriate response.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The documentation snippet from 'api/Apis/CatalogsApi.md' specifies the listing of catalogs, and this directly maps to the 'CatalogService.listCatalogs' method which handles the API call. This establishes a clear pathway from the documented API operation to the implemented service endpoint.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.listCatalogs",
          "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        }
      ]
    }
  ]
}