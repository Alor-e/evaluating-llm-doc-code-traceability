{
  "runs": [
    {
      "dataset": "unity_catalog",
      "run_id": 1,
      "timestamp": "2025-01-15T13:24:52.683490",
      "results": [
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createCatalog functionality described in the API documentation. It takes a CreateCatalog object as input and returns a CatalogInfo object, matching the API signature.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog endpoint, which would be implemented by a service layer (CatalogService), which in turn would use the repository layer (CatalogRepository) to perform the actual database operation.",
          "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the service layer for the createCatalog API endpoint. It would handle the HTTP request, delegate to the repository layer, and return the HTTP response.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be implemented by the CatalogService, which then uses the CatalogRepository to perform the actual data operation.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 0,
          "artifact_title": "CatalogCli.createCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This method likely provides a command-line interface for creating catalogs, which would use the same underlying API as described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the functionality, which is exposed through a CLI interface in CatalogCli, which would then call the CatalogService to perform the actual operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "represents",
          "relationship_explanation": "This class likely represents the database entity for a catalog, which would be used in the implementation of the createCatalog functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogRepository.addCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the catalog creation, which is implemented in the repository layer, which would use the CatalogInfoDAO to interact with the database.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 17,
          "artifact_title": "FunctionCli.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the deleteFunction API endpoint described in the documentation. It takes a function name as a parameter and calls the API to delete the function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation describes the deleteFunction API, which is likely implemented by the FunctionCli.deleteFunction method in the client.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the server-side logic for deleting a function as described in the API documentation. It would handle the actual deletion of the function from the database or storage system.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction endpoint, which would be handled by a service layer (FunctionService) that then calls the repository layer (FunctionRepository) to perform the actual deletion.",
          "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteFunction API endpoint described in the documentation. It takes a function name as a parameter and handles the HTTP DELETE request to delete the function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation directly describes the deleteFunction endpoint, which is implemented by the FunctionService.deleteFunction method in the server.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the 'getTable' operation described in the API documentation. It takes a 'fullName' parameter and returns a TableInfo object, matching the API specification.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API documentation describes the getTable operation, which is likely implemented in a service layer (TableService) that then delegates to the repository layer (TableRepository) for data access.",
          "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "service layer",
          "relationship_explanation": "While not explicitly mentioned, this service method is likely the intermediate step between the API and the repository, handling the HTTP request and calling the repository method.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API documentation implies a service layer that would handle the HTTP request, which then calls the repository layer to fetch the table data.",
          "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for table information, which is converted to the TableInfo object returned by the API.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API returns TableInfo, which is likely created from a TableInfoDAO object retrieved from the database in the repository layer.",
          "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the generateTemporaryVolumeCredentials operation described in the API documentation. It takes a GenerateTemporaryVolumeCredential object as input and returns a GenerateTemporaryVolumeCredentialResponse, matching the API specification.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the service method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 27,
          "artifact_title": "GenerateTemporaryVolumeCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "input_model",
          "relationship_explanation": "This class is explicitly mentioned as the input parameter type for the generateTemporaryVolumeCredentials operation in the API documentation.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> GenerateTemporaryVolumeCredential",
          "predicted_trace_chain_explanation": "The documentation directly references this model as the input for the API endpoint.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 28,
          "artifact_title": "GenerateTemporaryVolumeCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "output_model",
          "relationship_explanation": "This class is explicitly mentioned as the return type for the generateTemporaryVolumeCredentials operation in the API documentation.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> GenerateTemporaryVolumeCredentialResponse",
          "predicted_trace_chain_explanation": "The documentation directly references this model as the response type for the API endpoint.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data_access",
          "relationship_explanation": "While not explicitly mentioned, this DAO is likely used within the implementation to retrieve volume information based on the volumeId provided in the request.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The service method needs to access volume data to generate credentials, which is typically done through a DAO.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "data_access",
          "relationship_explanation": "This method might be used internally to retrieve volume information needed for generating temporary credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The service method may need to list volumes to verify the volume exists before generating credentials, which would involve using the repository.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 1,
          "artifact_title": "AwsCredentials",
          "predicted_relationship": "implicit",
          "relationship_type": "output_component",
          "relationship_explanation": "This class is likely used as part of the GenerateTemporaryVolumeCredentialResponse to provide AWS-specific credentials when applicable.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> GenerateTemporaryVolumeCredentialResponse -> AwsCredentials",
          "predicted_trace_chain_explanation": "The response may include AWS credentials, which would be represented by this class.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createTable API endpoint described in the documentation. It handles the POST request to '/tables' for creating a new table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The document describes the createTable API, which is directly implemented by the TableService.createTable method.",
          "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the deleteTable API endpoint described in the documentation. It handles the DELETE request to '/tables/{full_name}' for deleting a table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The document describes the deleteTable API, which is directly implemented by the TableService.deleteTable method.",
          "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the getTable API endpoint described in the documentation. It handles the GET request to '/tables/{full_name}' for retrieving table information.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The document describes the getTable API, which is directly implemented by the TableService.getTable method.",
          "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the listTables API endpoint described in the documentation. It handles the GET request to '/tables' for listing tables with pagination support.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The document describes the listTables API, which is directly implemented by the TableService.listTables method.",
          "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "While not directly mentioned in the documentation, this method likely supports the createTable API by handling the actual creation of the table in the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The document describes the createTable API, which is implemented by TableService.createTable, which in turn likely calls TableRepository.createTable to perform the actual table creation.",
          "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method likely supports the deleteTable API by handling the actual deletion of the table in the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The document describes the deleteTable API, which is implemented by TableService.deleteTable, which likely calls TableRepository.deleteTable to perform the actual table deletion.",
          "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method likely supports the getTable API by retrieving the actual table information from the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The document describes the getTable API, which is implemented by TableService.getTable, which likely calls TableRepository.getTable to retrieve the table information.",
          "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method likely supports the listTables API by retrieving the list of tables from the repository with pagination support.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The document describes the listTables API, which is implemented by TableService.listTables, which likely calls TableRepository.listTables to retrieve the list of tables.",
          "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for table information, which is used in various table operations described in the API documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService -> TableRepository -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The document describes table operations, which are implemented in TableService, which uses TableRepository, which likely uses TableInfoDAO as the data model for tables.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getVolume operation described in the API documentation. It takes a 'full_name' parameter which corresponds to the 'name' parameter in the documentation, and returns a VolumeInfo object as specified.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The API documentation in VolumesApi.md directly describes the getVolume operation, which is implemented by the VolumeService.getVolume method.",
          "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by VolumeService.getVolume to retrieve the volume information from the database. It takes a 'fullName' parameter which matches the 'name' parameter in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the getVolume operation, which is implemented in VolumeService.getVolume. This service method likely calls VolumeRepository.getVolume to fetch the actual data.",
          "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the database model for volume information. It's likely used by VolumeRepository.getVolume to map database data to the VolumeInfo object returned by the API.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the returned VolumeInfo, which is likely created from a VolumeInfoDAO object retrieved by VolumeRepository.getVolume and then transformed in VolumeService.getVolume.",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 62,
          "artifact_title": "VolumeCli.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method implements the client-side call to the getVolume API. It takes a 'volumeFullName' parameter which corresponds to the 'name' parameter in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the getVolume operation, which is implemented on the client side by VolumeCli.getVolume for command-line interface usage.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 3,
          "artifact_title": "CatalogCli.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listCatalogs functionality described in the API documentation. It handles the 'max_results' parameter and calls the CatalogsApi to list catalogs.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs operation, which is implemented in CatalogCli.listCatalogs. This method likely calls CatalogService.listCatalogs to perform the actual catalog listing operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This service method is likely called by CatalogCli.listCatalogs to perform the actual catalog listing operation. It handles the 'maxResults' and 'pageToken' parameters mentioned in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation leads to CatalogCli.listCatalogs, which likely calls CatalogService.listCatalogs. This service method probably uses CatalogRepository.listCatalogs to fetch the actual data.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 9,
          "artifact_title": "CatalogRepository.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This repository method is likely used by CatalogService.listCatalogs to fetch the catalog data from the database. It handles the pagination and maximum results as described in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation leads to CatalogCli.listCatalogs, which calls CatalogService.listCatalogs, which in turn uses CatalogRepository.listCatalogs to fetch the actual catalog data from the database.",
          "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This DAO (Data Access Object) likely represents the catalog data in the database and is used by CatalogRepository.listCatalogs to fetch and return catalog information.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation leads to a chain of calls that ultimately uses CatalogInfoDAO to represent and fetch catalog data from the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the createFunction API endpoint described in the documentation. It handles the POST request to create a new function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionCli.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which is implemented by the FunctionService, which uses the FunctionRepository to persist the data, and finally the FunctionCli provides a command-line interface to this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 17,
          "artifact_title": "FunctionCli.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the deleteFunction API endpoint described in the documentation. It handles the DELETE request to remove an existing function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction -> FunctionCli.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction endpoint, which is implemented by the FunctionService, which uses the FunctionRepository to remove the data, and finally the FunctionCli provides a command-line interface to this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 18,
          "artifact_title": "FunctionCli.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the getFunction API endpoint described in the documentation. It handles the GET request to retrieve information about a specific function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionCli.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction endpoint, which is implemented by the FunctionService, which uses the FunctionRepository to fetch the data, and finally the FunctionCli provides a command-line interface to this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 19,
          "artifact_title": "FunctionCli.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the listFunctions API endpoint described in the documentation. It handles the GET request to retrieve a list of functions within a specified catalog and schema.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions -> FunctionCli.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is implemented by the FunctionService, which uses the FunctionRepository to fetch the list of functions, and finally the FunctionCli provides a command-line interface to this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method likely implements the server-side logic for the createFunction API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which is directly implemented by the FunctionService on the server side.",
          "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method likely implements the server-side logic for the deleteFunction API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction endpoint, which is directly implemented by the FunctionService on the server side.",
          "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method likely implements the server-side logic for the getFunction API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction endpoint, which is directly implemented by the FunctionService on the server side.",
          "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method likely implements the server-side logic for the listFunctions API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is directly implemented by the FunctionService on the server side.",
          "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access",
          "relationship_explanation": "This method likely handles the persistence of new function data when creating a function via the API.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which is implemented by the FunctionService, which in turn uses the FunctionRepository to persist the function data.",
          "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access",
          "relationship_explanation": "This method likely handles the removal of function data when deleting a function via the API.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction endpoint, which is implemented by the FunctionService, which in turn uses the FunctionRepository to remove the function data.",
          "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 23,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access",
          "relationship_explanation": "This method likely retrieves function data when getting a function's information via the API.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction endpoint, which is implemented by the FunctionService, which in turn uses the FunctionRepository to fetch the function data.",
          "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access",
          "relationship_explanation": "This method likely retrieves a list of functions when listing functions via the API.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is implemented by the FunctionService, which in turn uses the FunctionRepository to fetch the list of functions.",
          "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Model",
          "relationship_explanation": "This class likely represents the data model for function information, which is used in the API responses for function-related operations.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService -> FunctionRepository -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes function-related operations, which are implemented by the FunctionService and FunctionRepository, which likely use FunctionInfoDAO to represent and manipulate function data.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the updateSchema operation described in the API documentation. It takes the same parameters (full_name and UpdateSchema) and returns a SchemaInfo object as specified.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The documentation in SchemasApi.md directly describes the updateSchema operation, which is implemented by the SchemaService.updateSchema method.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by SchemaService.updateSchema to perform the actual database operations for updating a schema. It matches the parameter types and return type specified in the API documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in SchemaService.updateSchema, which in turn likely uses SchemaRepository.updateSchema for data access.",
          "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for schema information, which would be used in the process of updating a schema as described in the API documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API describes updating a schema, which is implemented through the service and repository, ultimately interacting with the SchemaInfoDAO for database operations.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation directly describes the 'createVolume' operation, which is implemented by the VolumeService.createVolume method. This method takes a CreateVolumeRequestContent parameter and returns a VolumeInfo object, matching the documented API signature.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The API documentation in VolumesApi.md directly describes the createVolume operation, which is implemented by the VolumeService.createVolume method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeRepository.createVolume method is likely called by VolumeService.createVolume to perform the actual volume creation in the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume operation, which is implemented by VolumeService.createVolume. This service method likely delegates the actual volume creation to VolumeRepository.createVolume.",
          "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The VolumeInfoDAO class is likely used to persist and retrieve volume information in the database, supporting the creation of volumes as described in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The createVolume operation described in the API is implemented through the service and repository layers, ultimately using VolumeInfoDAO for data persistence.",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 60,
          "artifact_title": "VolumeCli.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "The VolumeCli.createVolume method likely provides a command-line interface for creating volumes, implementing the client-side of the documented API operation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume operation, which is implemented on the client-side by VolumeCli.createVolume for command-line interactions.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The SchemaRepository.createSchema method directly implements the createSchema functionality described in the API documentation. It handles the creation of a new schema in the specified catalog.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The documentation in SchemasApi.md describes the createSchema API endpoint. This is likely implemented in the SchemaService, which would then call SchemaRepository.createSchema to perform the actual database operations.",
          "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "The SchemaService.createSchema method likely implements the API endpoint described in the documentation. It would handle the HTTP request and delegate to the SchemaRepository for data persistence.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the createSchema endpoint, which would be implemented by SchemaService.createSchema. This service method would then call SchemaRepository.createSchema to perform the actual schema creation.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The SchemaInfoDAO class likely represents the data model for schemas in the database. It would be used by SchemaRepository.createSchema to persist the new schema data.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The createSchema operation described in the API would be implemented by SchemaService, which calls SchemaRepository.createSchema. The repository method would then use SchemaInfoDAO to persist the schema data to the database.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getSchema functionality described in the API documentation. It takes a 'fullName' parameter and returns a SchemaInfo object, matching the API specification.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the getSchema endpoint, which is implemented by the SchemaService, which in turn calls the SchemaRepository to fetch the actual schema data.",
          "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the GET endpoint for fetching a schema as described in the API documentation. It takes a 'fullName' parameter and returns a SchemaInfo object via HTTP response.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The API documentation directly maps to this service method, which handles the HTTP request for getting a schema.",
          "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data representation",
          "relationship_explanation": "While not explicitly mentioned, this class likely represents the database entity for schemas and is used to convert between the database representation and the SchemaInfo object returned by the API.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes returning a SchemaInfo object, which is likely created from a SchemaInfoDAO instance retrieved from the database.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listSchemas API endpoint described in the documentation. It takes the same parameters (catalogName, maxResults, pageToken) and returns a ListSchemasResponse object.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation in SchemasApi.md directly describes the listSchemas endpoint, which is implemented by the SchemaService.listSchemas method.",
          "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by SchemaService.listSchemas to retrieve the actual schema data from the repository. It handles the database querying and pagination logic.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation describes the listSchemas endpoint, which is implemented by SchemaService.listSchemas. This service method then uses SchemaRepository.listSchemas to access and retrieve the schema data.",
          "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for schema information. It's used by SchemaRepository.listSchemas to map database records to SchemaInfo objects.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the schema data, which is retrieved by SchemaService.listSchemas using SchemaRepository.listSchemas. This repository method interacts with the database using the SchemaInfoDAO to represent schema records.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 32,
          "artifact_title": "ListSchemasResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "This class is explicitly mentioned as the return type for the listSchemas API endpoint. It encapsulates the list of schemas and potentially pagination information.",
          "predicted_trace_chain": "SchemasApi.md -> ListSchemasResponse",
          "predicted_trace_chain_explanation": "The API documentation directly specifies ListSchemasResponse as the return type for the listSchemas endpoint.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the deleteTable operation described in the API documentation. It takes a 'full_name' parameter and returns an HTTP response, matching the API specification.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation directly describes the deleteTable operation, which is implemented by the TableService.deleteTable method.",
          "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is likely called by TableService.deleteTable to perform the actual deletion of the table from the repository. It matches the operation described in the API documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteTable operation, which is implemented in TableService.deleteTable, which in turn likely calls TableRepository.deleteTable to perform the actual deletion.",
          "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 46,
          "artifact_title": "TableCli.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method implements the client-side operation for deleting a table, which corresponds to the server-side API documented here.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteTable operation, which is implemented on the client side by TableCli.deleteTable for CLI operations.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "The FunctionRepository.getFunction method is the likely implementation of the getFunction API endpoint described in the documentation. It takes a 'name' parameter which matches the 'name' parameter in the API description.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction endpoint, which would be implemented by a corresponding method in the FunctionService class, which in turn would likely call the getFunction method in the FunctionRepository class to retrieve the function data from storage.",
          "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "service layer",
          "relationship_explanation": "The FunctionService.getFunction method is the service layer implementation of the getFunction API endpoint. It would handle the HTTP request, call the repository method, and return the response.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The API documentation directly maps to a corresponding method in the FunctionService class, which would handle the HTTP request and orchestrate the retrieval of function data.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The FunctionInfoDAO class is likely used to represent the function data in the database. The getFunction API returns a FunctionInfo object, which would be created from a FunctionInfoDAO instance.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API returns a FunctionInfo object, which would be created from a FunctionInfoDAO instance retrieved by the FunctionRepository and passed back through the service layer.",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "The FunctionCli.getFunction method is likely a client-side implementation that calls the getFunction API endpoint. It would handle parsing the response and returning the FunctionInfo object to the CLI user.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint that the FunctionCli.getFunction method would call to retrieve function information for the command-line interface.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the 'Create a schema' API endpoint described in the documentation. It matches the POST /schemas HTTP request and creates a new schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The document describes the API endpoint, which is directly implemented by the SchemaService.createSchema method.",
          "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the 'Delete a schema' API endpoint described in the documentation. It matches the DELETE /schemas/{full_name} HTTP request and deletes the specified schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The document describes the API endpoint, which is directly implemented by the SchemaService.deleteSchema method.",
          "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the 'Get a schema' API endpoint described in the documentation. It matches the GET /schemas/{full_name} HTTP request and retrieves the specified schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The document describes the API endpoint, which is directly implemented by the SchemaService.getSchema method.",
          "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the 'List schemas' API endpoint described in the documentation. It matches the GET /schemas HTTP request and retrieves an array of schemas for a catalog.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The document describes the API endpoint, which is directly implemented by the SchemaService.listSchemas method.",
          "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the 'Update a schema' API endpoint described in the documentation. It matches the PATCH /schemas/{full_name} HTTP request and updates the specified schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The document describes the API endpoint, which is directly implemented by the SchemaService.updateSchema method.",
          "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation dependency",
          "relationship_explanation": "This method is likely called by SchemaService.createSchema to perform the actual schema creation in the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by SchemaService, which likely delegates the actual schema creation to SchemaRepository.",
          "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation dependency",
          "relationship_explanation": "This method is likely called by SchemaService.deleteSchema to perform the actual schema deletion in the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by SchemaService, which likely delegates the actual schema deletion to SchemaRepository.",
          "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation dependency",
          "relationship_explanation": "This method is likely called by SchemaService.getSchema to retrieve the schema information from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by SchemaService, which likely delegates the actual schema retrieval to SchemaRepository.",
          "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation dependency",
          "relationship_explanation": "This method is likely called by SchemaService.listSchemas to retrieve the list of schemas from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by SchemaService, which likely delegates the actual schema listing to SchemaRepository.",
          "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation dependency",
          "relationship_explanation": "This method is likely called by SchemaService.updateSchema to perform the actual schema update in the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by SchemaService, which likely delegates the actual schema update to SchemaRepository.",
          "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schema information used in the implementation of the schema-related operations.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService -> SchemaRepository -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API endpoints are implemented by SchemaService, which uses SchemaRepository, which in turn likely uses SchemaInfoDAO for data persistence and retrieval.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the 'generateTemporaryTableCredentials' API endpoint described in the documentation. It takes a GenerateTemporaryTableCredential object as input and returns a GenerateTemporaryTableCredentialResponse, matching the documented API signature.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the TemporaryTableCredentialsService class's generateTemporaryTableCredentials method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 26,
          "artifact_title": "GenerateTemporaryTableCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "input model",
          "relationship_explanation": "This class is explicitly mentioned in the documentation as the input parameter for the generateTemporaryTableCredentials API call.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredential -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The documentation specifies GenerateTemporaryTableCredential as the input model, which is then used by the service method to process the request.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 27,
          "artifact_title": "GenerateTemporaryTableCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "output model",
          "relationship_explanation": "This class is explicitly mentioned in the documentation as the return type for the generateTemporaryTableCredentials API call.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredentialResponse -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The documentation specifies GenerateTemporaryTableCredentialResponse as the output model, which is returned by the service method after processing the request.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the createVolume API endpoint described in the documentation. It handles POST requests to '/volumes' for creating a new volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The documentation directly describes the createVolume API endpoint, which is implemented by this method.",
          "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the deleteVolume API endpoint described in the documentation. It handles DELETE requests to '/volumes/{name}' for deleting a specific volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The documentation directly describes the deleteVolume API endpoint, which is implemented by this method.",
          "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the getVolume API endpoint described in the documentation. It handles GET requests to '/volumes/{name}' for retrieving information about a specific volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The documentation directly describes the getVolume API endpoint, which is implemented by this method.",
          "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the listVolumes API endpoint described in the documentation. It handles GET requests to '/volumes' for listing available volumes under a parent catalog and schema.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The documentation directly describes the listVolumes API endpoint, which is implemented by this method.",
          "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the updateVolume API endpoint described in the documentation. It handles PATCH requests to '/volumes/{name}' for updating a specific volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The documentation directly describes the updateVolume API endpoint, which is implemented by this method.",
          "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "backend implementation",
          "relationship_explanation": "This method is likely called by VolumeService.createVolume to handle the actual creation of a volume in the data storage.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The API endpoint is implemented in VolumeService, which would then use VolumeRepository to perform the actual data operations.",
          "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "backend implementation",
          "relationship_explanation": "This method is likely called by VolumeService.deleteVolume to handle the actual deletion of a volume from the data storage.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The API endpoint is implemented in VolumeService, which would then use VolumeRepository to perform the actual data operations.",
          "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "backend implementation",
          "relationship_explanation": "This method is likely called by VolumeService.getVolume to retrieve the actual volume information from the data storage.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The API endpoint is implemented in VolumeService, which would then use VolumeRepository to perform the actual data retrieval.",
          "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "backend implementation",
          "relationship_explanation": "This method is likely called by VolumeService.listVolumes to retrieve the list of volumes from the data storage.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API endpoint is implemented in VolumeService, which would then use VolumeRepository to perform the actual data retrieval.",
          "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "backend implementation",
          "relationship_explanation": "This method is likely called by VolumeService.updateVolume to handle the actual update of a volume in the data storage.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The API endpoint is implemented in VolumeService, which would then use VolumeRepository to perform the actual data update operations.",
          "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for a Volume, which is used in the CRUD operations described in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService -> VolumeRepository -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API operations are implemented in VolumeService, which uses VolumeRepository for data operations, which in turn likely uses VolumeInfoDAO as the data model.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listVolumes functionality described in the documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and returns a ListVolumesResponseContent object as specified in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes the listVolumes endpoint, which is likely implemented by a VolumeService class that delegates to the VolumeRepository for data access.",
          "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is the service layer implementation of the listVolumes API endpoint. It takes the same parameters as described in the documentation (catalogName, schemaName, maxResults, pageToken) and likely calls the repository method to fetch the data.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation directly maps to the VolumeService implementation, which handles the HTTP request and delegates to the repository.",
          "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 63,
          "artifact_title": "VolumeCli.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method is a CLI client implementation that calls the listVolumes API. It uses the same parameters (catalogName, schemaName, maxResults) as described in the API documentation, indicating it's a client-side usage of the listVolumes functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint that the CLI client method calls to retrieve the list of volumes.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for volume information that is returned as part of the ListVolumesResponseContent. It's implicitly related as it would be used to construct the response data for the listVolumes API call.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API returns volume information, which is likely represented by the VolumeInfoDAO class in the data access layer.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listTables API endpoint described in the documentation. It takes the same parameters (catalog_name, schema_name, max_results, page_token) and returns a ListTablesResponse object as specified in the API documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The API documentation in TablesApi.md directly describes the listTables endpoint, which is implemented by the TableService.listTables method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "database_interaction",
          "relationship_explanation": "This method is likely called by TableService.listTables to interact with the database and retrieve the list of tables. It handles the actual data retrieval logic based on the parameters specified in the API documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes the listTables endpoint, which is implemented by TableService.listTables. This service method likely calls TableRepository.listTables to handle the database interaction and retrieve the actual table data.",
          "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data_model",
          "relationship_explanation": "This class represents the data model for table information in the database. It is likely used by TableRepository.listTables to map database records to TableInfo objects that are returned in the ListTablesResponse.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the structure of table information. TableService.listTables calls TableRepository.listTables, which uses TableInfoDAO to map database records to the required format.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 48,
          "artifact_title": "TableCli.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "cli_implementation",
          "relationship_explanation": "This method implements the CLI command for listing tables. It likely uses the same underlying API endpoint described in the documentation, providing a command-line interface for the listTables functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes the listTables endpoint, which is implemented as a CLI command by TableCli.listTables, providing an alternative interface to the same functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteVolume operation described in the API documentation. It takes a 'full_name' parameter which corresponds to the 'name' parameter in the documentation, described as 'The three-level (fully qualified) name of the volume'.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation directly describes the deleteVolume operation, which is implemented by the VolumeService.deleteVolume method.",
          "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "While not explicitly mentioned in the documentation, this method is likely called by VolumeService.deleteVolume to perform the actual deletion of the volume from the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is implemented by VolumeService.deleteVolume, which in turn likely calls VolumeRepository.deleteVolume to perform the actual deletion.",
          "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 61,
          "artifact_title": "VolumeCli.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This method is likely used to implement the CLI interface for the deleteVolume operation described in the API documentation. It would call the API endpoint to delete a volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is likely exposed through the CLI via VolumeCli.deleteVolume, which would then call VolumeService.deleteVolume to perform the operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "represents",
          "relationship_explanation": "This class likely represents the data access object for volume information, which would be involved in the deletion process of a volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, implemented by VolumeService.deleteVolume, which calls VolumeRepository.deleteVolume, which in turn likely interacts with VolumeInfoDAO to remove the volume from the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the 'generateTemporaryTableCredentials' API endpoint described in the documentation. It takes a GenerateTemporaryTableCredential object as input and returns a GenerateTemporaryTableCredentialResponse, matching the documented parameters and return type.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the TemporaryTableCredentialsService class method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by checking if a table exists at a storage location, then either generating AWS S3 temporary credentials or returning empty credentials for local filesystems, matching the documented GenerateTemporaryTableCredentialResponse return type.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 27,
          "artifact_title": "GenerateTemporaryTableCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "input parameter",
          "relationship_explanation": "This class is explicitly mentioned in the documentation as the input parameter for the generateTemporaryTableCredentials method. It represents the request body for the API call.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredential -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The documentation specifies GenerateTemporaryTableCredential as the input, which is then used in the service method implementation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 28,
          "artifact_title": "GenerateTemporaryTableCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "This class is explicitly mentioned in the documentation as the return type for the generateTemporaryTableCredentials method. It represents the response body of the API call.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredentialResponse -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The documentation specifies GenerateTemporaryTableCredentialResponse as the return type, which is then used in the service method implementation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "dependency",
          "relationship_explanation": "While not explicitly mentioned in the documentation, the implementation of generateTemporaryTableCredentials likely uses this method to retrieve table information based on the provided table ID.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The service method needs to fetch table information to generate credentials, which is likely done using the TableRepository.getTable method.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for table information, which is used in the process of generating temporary table credentials.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The TableRepository.getTable method likely returns a TableInfoDAO object, which is then used in the credential generation process.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The SchemaService.deleteSchema method directly implements the deleteSchema operation described in the API documentation. It handles the deletion of a schema based on the full name and force parameters.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The document describes the deleteSchema API endpoint, which is directly implemented by the SchemaService.deleteSchema method.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "The SchemaRepository.deleteSchema method is likely called by SchemaService.deleteSchema to perform the actual deletion of the schema from the database.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteSchema operation, which is implemented in SchemaService.deleteSchema. This service method would typically call SchemaRepository.deleteSchema to perform the actual deletion in the database.",
          "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The SchemaInfoDAO class likely represents the data model for schemas in the database, which would be manipulated during the deletion process.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The deleteSchema operation described in the API is implemented by SchemaService.deleteSchema, which calls SchemaRepository.deleteSchema. This repository method would interact with the SchemaInfoDAO to remove the schema from the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the listFunctions API endpoint described in the documentation. It takes the same parameters (catalog_name, schema_name, max_results, page_token) and returns a ListFunctionsResponse as specified.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation directly describes the functionality implemented by the FunctionService.listFunctions method.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by FunctionService.listFunctions to retrieve the list of functions from the database. It handles the pagination and filtering logic described in the API documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "The API is implemented by FunctionService.listFunctions, which likely delegates the actual data retrieval to FunctionRepository.listFunctions.",
          "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 23,
          "artifact_title": "ListFunctionsResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "This class is explicitly mentioned as the return type for the listFunctions API call. It encapsulates the list of functions and pagination information.",
          "predicted_trace_chain": "FunctionsApi.md -> ListFunctionsResponse",
          "predicted_trace_chain_explanation": "The API documentation directly specifies ListFunctionsResponse as the return type for the listFunctions endpoint.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This class likely represents the database entity for functions and is used by FunctionRepository.listFunctions to retrieve function information from the database.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API functionality is implemented through the service and repository layers, which ultimately interact with the database using FunctionInfoDAO.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.listFunctions",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 4,
          "artifact_title": "CatalogCli.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the client-side logic for updating a catalog, which corresponds to the updateCatalog operation described in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogCli.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog operation, which would be implemented by the CatalogService, then delegated to the CatalogRepository for data access, and finally exposed through the CatalogCli for command-line interaction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method likely handles the data access logic for updating a catalog in the database, corresponding to the updateCatalog operation described in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog operation, which would be implemented by the CatalogService and then delegated to the CatalogRepository for actual data access and persistence.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the updateCatalog operation described in the API documentation. It takes the catalog name and UpdateCatalog object as parameters, matching the API specification.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation directly describes the updateCatalog operation, which would be implemented in the CatalogService class.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data access object for catalog information, which would be used in the process of updating a catalog as described in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes updating a catalog, which would be implemented in CatalogService, use CatalogRepository for data access, and ultimately interact with the CatalogInfoDAO for database operations.",
          "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The VolumeService.updateVolume method directly implements the updateVolume operation described in the documentation. It takes the same parameters (full_name and UpdateVolumeRequestContent) and returns a VolumeInfo object as specified in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the updateVolume operation, which is implemented by the VolumeService.updateVolume method.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "The VolumeRepository.updateVolume method is likely called by VolumeService.updateVolume to perform the actual database operations for updating a volume. It handles the business logic and data persistence aspects of the update operation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the updateVolume operation, which is implemented in VolumeService.updateVolume. This service method likely calls VolumeRepository.updateVolume to perform the actual update in the database.",
          "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The VolumeInfoDAO class represents the data model for volumes in the database. It is likely used within the VolumeRepository.updateVolume method to persist the updated volume information.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The updateVolume operation described in the API is implemented by VolumeService.updateVolume, which calls VolumeRepository.updateVolume. This repository method likely uses VolumeInfoDAO to interact with the database and persist the updated volume data.",
          "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 64,
          "artifact_title": "VolumeCli.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "CLI implementation",
          "relationship_explanation": "The VolumeCli.updateVolume method provides a command-line interface for updating volumes. It likely calls the VolumeService.updateVolume method indirectly through an API client to perform the update operation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the updateVolume operation, which is implemented for CLI usage in VolumeCli.updateVolume. This CLI method likely uses an API client to call VolumeService.updateVolume on the server.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 1,
          "artifact_title": "CatalogCli.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the deleteCatalog operation described in the API documentation. It takes the catalog name and force parameter, matching the documented function signature.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation directly describes the deleteCatalog operation, which is implemented in the CatalogCli.deleteCatalog method.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the core logic for deleting a catalog, including the force deletion behavior mentioned in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog operation, which is likely implemented in CatalogCli.deleteCatalog, which in turn probably calls CatalogRepository.deleteCatalog for the actual deletion logic.",
          "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This service method likely handles the HTTP request for deleting a catalog, matching the documented API endpoint.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the HTTP endpoint for deleting a catalog, which is likely implemented in CatalogService.deleteCatalog, which then calls CatalogRepository.deleteCatalog for the actual deletion.",
          "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The TableService.createTable method directly implements the createTable API endpoint described in the documentation. It takes a CreateTable object as input and returns a TableInfo object, matching the API signature.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The document describes the createTable API, which is directly implemented by the TableService.createTable method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "The TableRepository.createTable method is likely called by TableService.createTable to perform the actual table creation logic. It takes a CreateTable object and returns a TableInfo object, matching the API signature.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The API is implemented by TableService.createTable, which likely delegates the actual table creation to TableRepository.createTable.",
          "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "TableInfoDAO is likely used to persist and retrieve table information, which is necessary for implementing the createTable functionality.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The createTable API results in table creation, which likely involves persisting table information using TableInfoDAO.",
          "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 45,
          "artifact_title": "TableCli.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "TableCli.createTable is likely a client-side implementation that calls the createTable API described in the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.createTable",
          "predicted_trace_chain_explanation": "The document describes the createTable API, which is likely called by the TableCli.createTable method in client implementations.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the getCatalog API endpoint described in the documentation. It takes a 'name' parameter and returns a CatalogInfo object, matching the documented behavior.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog endpoint, which is implemented by CatalogService.getCatalog. This method likely calls CatalogRepository.getCatalog to retrieve the actual data.",
          "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 8,
          "artifact_title": "CatalogRepository.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "data_access",
          "relationship_explanation": "While not explicitly mentioned in the documentation, this method is likely called by CatalogService.getCatalog to retrieve the catalog data from the repository.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation leads to the service implementation, which would use the repository to access the data storage layer.",
          "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data_model",
          "relationship_explanation": "This class represents the data model for a catalog in the database. It's likely used by CatalogRepository.getCatalog to map the database result to a CatalogInfo object.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API call is handled by the service, which uses the repository to fetch data, and the repository likely uses CatalogInfoDAO to map database results.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the server-side logic for creating a new function, which is the core functionality described in the API documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which would be handled by the FunctionService, which in turn would use the FunctionRepository to persist the new function.",
          "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the API endpoint described in the documentation. It handles the CreateFunctionRequest and returns a FunctionInfo object.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The API documentation directly maps to this service method, which would handle the HTTP request and response.",
          "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This CLI method likely provides a command-line interface for creating functions, utilizing the same API described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionCli.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by the FunctionService, and the CLI method would use this service to provide a command-line interface for function creation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "represents",
          "relationship_explanation": "This class likely represents the database entity for storing function information, which would be created as a result of the createFunction operation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API call would be handled by the FunctionService, which uses the FunctionRepository to persist the data, likely using the FunctionInfoDAO to represent the database entity.",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the API endpoint for generating temporary volume credentials as described in the documentation.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the service method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This class is likely used to retrieve volume information when generating temporary credentials, as the API requires a volume ID.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API endpoint requires volume information, which is likely retrieved using the VolumeInfoDAO class.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data retrieval",
          "relationship_explanation": "This method is likely used to retrieve volume information based on the provided volume ID when generating temporary credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The API endpoint needs to retrieve volume information, which is likely done using the VolumeRepository.getVolume method.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 0,
          "artifact_title": "CatalogCli.createCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the createCatalog functionality described in the API documentation. It handles the creation of a catalog using the CatalogsApi.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogCli.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog endpoint, which is likely implemented by the CatalogService, which then uses the CatalogRepository to add the catalog, and finally the CatalogCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 1,
          "artifact_title": "CatalogCli.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the deleteCatalog functionality described in the API documentation. It handles the deletion of a catalog using the CatalogsApi.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog -> CatalogCli.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog endpoint, which is likely implemented by the CatalogService, which then uses the CatalogRepository to delete the catalog, and finally the CatalogCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 2,
          "artifact_title": "CatalogCli.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the getCatalog functionality described in the API documentation. It retrieves a specific catalog using the CatalogsApi.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogCli.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog endpoint, which is likely implemented by the CatalogService, which then uses the CatalogRepository to retrieve the catalog, and finally the CatalogCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 3,
          "artifact_title": "CatalogCli.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the listCatalogs functionality described in the API documentation. It lists available catalogs using the CatalogsApi.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogCli.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which is likely implemented by the CatalogService, which then uses the CatalogRepository to list the catalogs, and finally the CatalogCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 4,
          "artifact_title": "CatalogCli.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the updateCatalog functionality described in the API documentation. It updates a specific catalog using the CatalogsApi.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogCli.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog endpoint, which is likely implemented by the CatalogService, which then uses the CatalogRepository to update the catalog, and finally the CatalogCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createCatalog API endpoint described in the documentation. It handles the HTTP POST request to create a new catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog endpoint, which is directly implemented by this method in the CatalogService.",
          "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteCatalog API endpoint described in the documentation. It handles the HTTP DELETE request to remove a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog endpoint, which is directly implemented by this method in the CatalogService.",
          "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the getCatalog API endpoint described in the documentation. It handles the HTTP GET request to retrieve a specific catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog endpoint, which is directly implemented by this method in the CatalogService.",
          "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the listCatalogs API endpoint described in the documentation. It handles the HTTP GET request to list available catalogs.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which is directly implemented by this method in the CatalogService.",
          "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the updateCatalog API endpoint described in the documentation. It handles the HTTP PATCH request to update a specific catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog endpoint, which is directly implemented by this method in the CatalogService.",
          "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.addCatalog",
          "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.listCatalogs",
          "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.updateCatalog",
          "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.deleteCatalog",
          "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        }
      ]
    },
    {
      "dataset": "unity_catalog",
      "run_id": 2,
      "timestamp": "2025-01-15T13:33:35.605378",
      "results": [
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteVolume operation described in the API documentation. It takes a 'fullName' parameter which corresponds to the 'name' parameter in the documentation, described as 'The three-level (fully qualified) name of the volume'.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the deleteVolume operation, which is implemented by the VolumeService.deleteVolume method.",
          "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "While not explicitly mentioned in the documentation, this method is likely called by VolumeService.deleteVolume to perform the actual deletion of the volume from the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is implemented by VolumeService.deleteVolume. This service method would then call VolumeRepository.deleteVolume to perform the actual deletion in the data store.",
          "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 61,
          "artifact_title": "VolumeCli.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This CLI method likely uses the deleteVolume API operation to provide a command-line interface for deleting volumes.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is likely used by the VolumeCli.deleteVolume method to implement the CLI command for deleting volumes.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "represents",
          "relationship_explanation": "This class likely represents the data access object for volumes, which would be involved in the deletion process, although not explicitly mentioned in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, implemented by VolumeService.deleteVolume, which calls VolumeRepository.deleteVolume. The repository method would interact with the VolumeInfoDAO to perform the actual deletion in the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the 'getVolume' API endpoint described in the documentation. It takes a 'fullName' parameter matching the 'name' parameter in the API spec, and returns a VolumeInfo object as specified.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The documentation directly describes the API endpoint, which is implemented by the VolumeService.getVolume method.",
          "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "helper",
          "relationship_explanation": "This method is likely called by VolumeService.getVolume to retrieve the volume information from the repository. It matches the signature and return type described in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by VolumeService.getVolume, which in turn likely uses VolumeRepository.getVolume to fetch the actual data.",
          "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data model for a volume in the system. It's likely used internally to store and retrieve volume information, corresponding to the VolumeInfo return type mentioned in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, implemented by VolumeService.getVolume, which uses VolumeRepository.getVolume to fetch data, which in turn likely uses VolumeInfoDAO as the internal representation of volume data.",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 62,
          "artifact_title": "VolumeCli.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method is likely a client-side implementation for calling the 'getVolume' API endpoint. It matches the operation described in the documentation, taking a volume name as input and returning volume information.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented on the client side by VolumeCli.getVolume for CLI interactions.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the updateCatalog operation described in the API documentation. It takes the catalog name and UpdateCatalog object as parameters, matching the API specification.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog operation, which would be implemented by a service layer (CatalogService) that delegates to the repository layer (CatalogRepository) for data access and manipulation.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "service layer",
          "relationship_explanation": "While not explicitly mentioned, this service method would typically handle the HTTP request, validate inputs, and call the repository layer to perform the update operation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be handled by the CatalogService, which in turn calls the CatalogRepository to perform the actual update operation.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for a catalog, which would be updated during the updateCatalog operation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The update operation described in the API would ultimately result in modifications to the CatalogInfoDAO, which represents the catalog in the database.",
          "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 4,
          "artifact_title": "CatalogCli.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "CLI implementation",
          "relationship_explanation": "This method likely provides a command-line interface for the updateCatalog operation, allowing users to update catalogs via CLI.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the operation that would be accessible via CLI through CatalogCli, which would then call the CatalogService to perform the update.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the 'createFunction' API endpoint described in the documentation. It handles the creation of a new function using the FunctionsApi.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionCli.createFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented in the FunctionService, which uses the FunctionRepository for persistence, and is exposed through the CLI via FunctionCli.createFunction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 17,
          "artifact_title": "FunctionCli.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the 'deleteFunction' API endpoint described in the documentation. It handles the deletion of a function using the FunctionsApi.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction -> FunctionCli.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented in the FunctionService, which uses the FunctionRepository for persistence, and is exposed through the CLI via FunctionCli.deleteFunction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 18,
          "artifact_title": "FunctionCli.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the 'getFunction' API endpoint described in the documentation. It retrieves a function's information using the FunctionsApi.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionCli.getFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented in the FunctionService, which uses the FunctionRepository for retrieval, and is exposed through the CLI via FunctionCli.getFunction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 19,
          "artifact_title": "FunctionCli.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the 'listFunctions' API endpoint described in the documentation. It lists functions within a specified catalog and schema using the FunctionsApi.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions -> FunctionCli.listFunctions",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented in the FunctionService, which uses the FunctionRepository for listing, and is exposed through the CLI via FunctionCli.listFunctions.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method likely implements the server-side logic for the 'createFunction' API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented in the FunctionService class.",
          "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method likely implements the server-side logic for the 'deleteFunction' API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented in the FunctionService class.",
          "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method likely implements the server-side logic for the 'getFunction' API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented in the FunctionService class.",
          "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method likely implements the server-side logic for the 'listFunctions' API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented in the FunctionService class.",
          "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access",
          "relationship_explanation": "This method likely handles the data persistence for creating a new function, as described in the 'createFunction' API endpoint documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented in FunctionService, which in turn uses FunctionRepository for data persistence.",
          "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access",
          "relationship_explanation": "This method likely handles the data deletion for removing a function, as described in the 'deleteFunction' API endpoint documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented in FunctionService, which in turn uses FunctionRepository for data deletion.",
          "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 23,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access",
          "relationship_explanation": "This method likely handles the data retrieval for getting a function's information, as described in the 'getFunction' API endpoint documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented in FunctionService, which in turn uses FunctionRepository for data retrieval.",
          "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access",
          "relationship_explanation": "This method likely handles the data retrieval for listing functions, as described in the 'listFunctions' API endpoint documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented in FunctionService, which in turn uses FunctionRepository for data listing.",
          "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Model",
          "relationship_explanation": "This class likely represents the data model for function information, which is used in the FunctionInfo responses mentioned in the API documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService -> FunctionRepository -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The documentation describes API responses, which are likely implemented using FunctionService and FunctionRepository, which in turn use FunctionInfoDAO for data modeling.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method directly implements the generateTemporaryVolumeCredentials operation described in the API documentation. It handles the POST request to '/temporary-volume-credentials' and processes the GenerateTemporaryVolumeCredential input to generate temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The API documentation directly describes the operation that is implemented by this service method. The service method is the concrete implementation of the API endpoint.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 27,
          "artifact_title": "GenerateTemporaryVolumeCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "Input Model",
          "relationship_explanation": "This class is explicitly mentioned as the input parameter for the generateTemporaryVolumeCredentials operation. It encapsulates the request data needed to generate temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> GenerateTemporaryVolumeCredential -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The API documentation specifies GenerateTemporaryVolumeCredential as the input model. This model is then used by the service method to process the request.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 28,
          "artifact_title": "GenerateTemporaryVolumeCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "Output Model",
          "relationship_explanation": "This class is explicitly mentioned as the return type for the generateTemporaryVolumeCredentials operation. It encapsulates the response data containing the generated temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> GenerateTemporaryVolumeCredentialResponse -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The API documentation specifies GenerateTemporaryVolumeCredentialResponse as the return type. This model is used by the service method to structure the response data.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 6,
          "artifact_title": "AwsCredentials",
          "predicted_relationship": "implicit",
          "relationship_type": "Potential Response Component",
          "relationship_explanation": "While not explicitly mentioned in this snippet, AwsCredentials is likely a component of the GenerateTemporaryVolumeCredentialResponse, as temporary credentials for volumes often involve AWS credentials when dealing with cloud storage.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> GenerateTemporaryVolumeCredentialResponse -> AwsCredentials",
          "predicted_trace_chain_explanation": "The API returns a GenerateTemporaryVolumeCredentialResponse, which likely contains AwsCredentials when dealing with AWS-based storage volumes.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "Supporting Operation",
          "relationship_explanation": "This method is likely called within the generateTemporaryVolumeCredentials implementation to retrieve volume information based on the provided volume ID, which is necessary to generate the appropriate credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The service method likely needs to retrieve volume information to generate the appropriate credentials, which is done through the VolumeRepository.getVolume method.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access Object",
          "relationship_explanation": "This class is likely used indirectly in the process of generating temporary volume credentials, as it represents the data access object for volume information, which is necessary for credential generation.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.getVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The service method retrieves volume information through the repository, which in turn uses the VolumeInfoDAO to access the underlying data.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createCatalog API endpoint described in the documentation. It handles the POST request to create a new catalog instance.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog endpoint, which is implemented by CatalogService.createCatalog. This method likely calls CatalogRepository.addCatalog to persist the catalog data.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "persists data",
          "relationship_explanation": "While not explicitly mentioned in the documentation, this method is likely called by CatalogService.createCatalog to persist the new catalog instance to the database.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "The API documentation leads to the service implementation, which would use the repository to persist the catalog data.",
          "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for a catalog in the database, corresponding to the CatalogInfo return type mentioned in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation specifies CatalogInfo as the return type, which is likely mapped to CatalogInfoDAO for database operations.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 0,
          "artifact_title": "CatalogCli.createCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method likely provides a command-line interface for creating a catalog, corresponding to the createCatalog API endpoint described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is likely called by the CLI method, which in turn invokes the service method.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getFunction operation described in the API documentation. It retrieves a function based on the fully-qualified name provided.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction operation, which is likely implemented in the FunctionService, which then delegates to the FunctionRepository for actual data retrieval.",
          "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This service method likely implements the API endpoint for getting a function, matching the operation described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction operation, which is directly implemented by this service method.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This DAO (Data Access Object) likely represents the internal data model for functions, corresponding to the FunctionInfo return type mentioned in the API documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API returns FunctionInfo, which is likely created from FunctionInfoDAO data retrieved by the repository.",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 17,
          "artifact_title": "FunctionCli.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This CLI method likely provides a command-line interface for the getFunction operation described in the API documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction operation, which is implemented as a CLI command by this method.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 18,
          "artifact_title": "FunctionCli.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the listFunctions functionality described in the API documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and returns a list of functions matching the API description.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "predicted_trace_chain_explanation": "The documentation in FunctionsApi.md directly describes the listFunctions operation, which is implemented in the FunctionCli.listFunctions method.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely provides the underlying implementation for listing functions, including pagination logic mentioned in the API documentation. It handles the maxResults and pageToken parameters described in the API.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions operation, which is implemented in FunctionCli.listFunctions, which in turn likely calls FunctionRepository.listFunctions for the actual data retrieval and pagination.",
          "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This service method directly implements the listFunctions API endpoint. It takes the same parameters described in the API documentation (catalogName, schemaName, maxResults, pageToken) and returns a ListFunctionsResponse.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation in FunctionsApi.md describes the listFunctions operation, which is directly implemented as an HTTP endpoint in FunctionService.listFunctions.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createTable API endpoint described in the documentation. It takes a CreateTable object as input and returns a TableInfo object, matching the API signature.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The document describes the createTable API, which is directly implemented by the TableService.createTable method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "data persistence",
          "relationship_explanation": "This method is likely called by TableService.createTable to persist the new table data. It handles the actual creation of the table in the database.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by TableService, which then uses TableRepository to handle the actual data persistence.",
          "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data model for table information in the database. It's used by TableRepository.createTable to persist the table data.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API creates a table, which is implemented in TableService, persisted through TableRepository, and modeled as TableInfoDAO for database operations.",
          "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 45,
          "artifact_title": "TableCli.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method provides a command-line interface for creating tables, which likely uses the createTable API endpoint described in the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.createTable",
          "predicted_trace_chain_explanation": "The document describes the createTable API, which is utilized by the TableCli.createTable method to provide a CLI interface for table creation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the createVolume API endpoint described in the documentation. It handles POST requests to '/volumes' to create a new volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The document directly describes the createVolume API endpoint, which is implemented by this method.",
          "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the deleteVolume API endpoint described in the documentation. It handles DELETE requests to '/volumes/{name}' to delete a specific volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The document directly describes the deleteVolume API endpoint, which is implemented by this method.",
          "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the getVolume API endpoint described in the documentation. It handles GET requests to '/volumes/{name}' to retrieve information about a specific volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The document directly describes the getVolume API endpoint, which is implemented by this method.",
          "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the listVolumes API endpoint described in the documentation. It handles GET requests to '/volumes' to list available volumes under a parent catalog and schema.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The document directly describes the listVolumes API endpoint, which is implemented by this method.",
          "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the updateVolume API endpoint described in the documentation. It handles PATCH requests to '/volumes/{name}' to update a specific volume's properties.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The document directly describes the updateVolume API endpoint, which is implemented by this method.",
          "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by VolumeService.createVolume to perform the actual creation of a volume in the data store.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by the service, which then uses the repository for data persistence.",
          "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by VolumeService.deleteVolume to perform the actual deletion of a volume from the data store.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by the service, which then uses the repository for data deletion.",
          "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by VolumeService.getVolume to retrieve the volume information from the data store.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by the service, which then uses the repository to fetch the volume data.",
          "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by VolumeService.listVolumes to retrieve the list of volumes from the data store.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by the service, which then uses the repository to fetch the list of volumes.",
          "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by VolumeService.updateVolume to perform the actual update of a volume in the data store.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by the service, which then uses the repository for data updates.",
          "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for volumes, which is used in the CRUD operations described in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService -> VolumeRepository -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API operations are implemented by the service, which uses the repository, which in turn uses the DAO for data persistence.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getSchema functionality described in the API documentation. It takes a full_name parameter and returns a SchemaInfo object, matching the documented behavior.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the getSchema endpoint, which is likely implemented by a SchemaService class, which in turn would use the SchemaRepository to fetch the actual data.",
          "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "service layer",
          "relationship_explanation": "This method likely acts as an intermediary between the API endpoint and the repository layer, handling the HTTP request and response. It matches the parameter and return type described in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be implemented in the SchemaService, which then calls the repository method to fetch the data.",
          "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for schema information. It's implicitly related as it would be used to store and retrieve the schema data that's returned by the getSchema method.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the schema info returned, which would be fetched from the repository, which in turn would use the SchemaInfoDAO to interact with the database.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The TableService.deleteTable method directly implements the deleteTable operation described in the documentation. It takes a 'full_name' parameter and handles the deletion of a table, which matches the documented API endpoint.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The document describes the deleteTable API endpoint, which is directly implemented by the TableService.deleteTable method.",
          "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "The TableRepository.deleteTable method is likely called by TableService.deleteTable to perform the actual deletion of the table from the database. It handles the low-level details of removing the table data.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by TableService.deleteTable, which likely delegates the actual deletion to TableRepository.deleteTable for database interaction.",
          "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The TableInfoDAO class likely represents the data model for tables in the system. While not explicitly mentioned in the documentation, it's probable that this class is used in the deletion process to identify and remove the table data.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The deletion process likely involves finding and removing the TableInfoDAO object corresponding to the table being deleted.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 46,
          "artifact_title": "TableCli.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "The TableCli.deleteTable method is likely a command-line interface that calls the deleteTable API. While not directly mentioned in the API documentation, it provides a way for users to interact with the deleteTable functionality through a CLI.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.deleteTable -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The CLI method TableCli.deleteTable likely calls the API endpoint implemented by TableService.deleteTable, providing a command-line interface for users to delete tables.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the updateSchema functionality described in the API documentation. It takes the full name of the schema and an UpdateSchema object as parameters, matching the documented API.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the updateSchema endpoint, which is implemented by the SchemaService, which in turn calls the SchemaRepository to perform the actual update operation.",
          "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly corresponds to the updateSchema API endpoint described in the documentation. It handles the HTTP PATCH request and processes the input parameters.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the updateSchema endpoint, which is directly implemented by this SchemaService method.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 33,
          "artifact_title": "SchemaCli.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "While not explicitly mentioned in the documentation, this CLI method likely uses the updateSchema API to provide command-line functionality for updating schemas.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaCli.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the updateSchema endpoint, which is implemented by the SchemaService and likely utilized by the CLI for schema update operations.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schema information, which is used in the update operation to persist changes to the schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the updateSchema operation, which is implemented through the service and repository layers, ultimately interacting with the SchemaInfoDAO for data persistence.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the createFunction API functionality described in the documentation. It creates a new function instance based on the provided CreateFunctionRequest.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which is likely implemented in the FunctionService, which then delegates to FunctionRepository for the actual creation of the function.",
          "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "service layer",
          "relationship_explanation": "This method likely serves as the service layer implementation of the createFunction API, handling the HTTP request and response, and delegating to the repository layer.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which is directly implemented in the FunctionService class.",
          "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method provides a CLI implementation for creating a function, which corresponds to the createFunction API described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which is implemented as a CLI command in the FunctionCli class for client-side usage.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data model for a function, which is likely used in the creation process described by the createFunction API.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API creates a function, which is implemented through the service and repository layers, ultimately using the FunctionInfoDAO to represent the function data.",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listTables API endpoint described in the documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and returns a ListTablesResponse as specified.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The documentation in TablesApi.md directly describes the API endpoint, which is implemented by the TableService.listTables method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by TableService.listTables to retrieve the actual table data from the repository. It matches the parameters and return type described in the API documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by TableService.listTables, which in turn likely calls TableRepository.listTables to access the data.",
          "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 48,
          "artifact_title": "TableCli.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method implements the client-side CLI command for listing tables, matching the API parameters and functionality described in the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes the listTables endpoint, which is implemented as a CLI command by TableCli.listTables for client-side usage.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 17,
          "artifact_title": "FunctionCli.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "CLI implementation",
          "relationship_explanation": "This method likely implements the CLI functionality for deleting a function, which corresponds to the documented API endpoint.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, while FunctionCli.deleteFunction is likely the CLI implementation that interacts with this endpoint.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Backend implementation",
          "relationship_explanation": "This method is likely the backend implementation for deleting a function, which the documented API endpoint would ultimately invoke.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be handled by a service layer (FunctionService) that then calls the repository layer (FunctionRepository) to perform the actual deletion.",
          "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Service implementation",
          "relationship_explanation": "This method directly implements the deleteFunction API endpoint described in the documentation. It handles the HTTP DELETE request for deleting a function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation directly describes the endpoint that FunctionService.deleteFunction implements.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "The SchemaService.listSchemas method directly implements the listSchemas API endpoint described in the documentation. It takes the same parameters (catalogName, maxResults, pageToken) and returns a ListSchemasResponse object.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The documentation in SchemasApi.md directly describes the listSchemas API endpoint, which is implemented by the SchemaService.listSchemas method.",
          "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "The SchemaRepository.listSchemas method is likely called by SchemaService.listSchemas to retrieve the actual schema data from the database. It handles the database query and pagination logic.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by SchemaService.listSchemas, which in turn uses SchemaRepository.listSchemas to access the data.",
          "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The SchemaInfoDAO class likely represents the database model for schemas, which is used by SchemaRepository.listSchemas to retrieve and return schema information.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, implemented by SchemaService.listSchemas, which uses SchemaRepository.listSchemas to query the database, which in turn uses SchemaInfoDAO to represent the schema data.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the createTable API endpoint described in the documentation. It handles POST requests to '/tables' to create a new table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The document describes the createTable API, which is directly implemented by the TableService.createTable method.",
          "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the deleteTable API endpoint described in the documentation. It handles DELETE requests to '/tables/{full_name}' to delete a table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The document describes the deleteTable API, which is directly implemented by the TableService.deleteTable method.",
          "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the getTable API endpoint described in the documentation. It handles GET requests to '/tables/{full_name}' to retrieve table information.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The document describes the getTable API, which is directly implemented by the TableService.getTable method.",
          "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the listTables API endpoint described in the documentation. It handles GET requests to '/tables' to list tables with optional pagination.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The document describes the listTables API, which is directly implemented by the TableService.listTables method.",
          "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.createTable to perform the actual table creation in the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The API document describes createTable, which is implemented in TableService, which in turn likely calls TableRepository to perform the actual creation.",
          "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.deleteTable to perform the actual table deletion in the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The API document describes deleteTable, which is implemented in TableService, which in turn likely calls TableRepository to perform the actual deletion.",
          "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.getTable to retrieve the table information from the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API document describes getTable, which is implemented in TableService, which in turn likely calls TableRepository to retrieve the table information.",
          "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.listTables to retrieve the list of tables from the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The API document describes listTables, which is implemented in TableService, which in turn likely calls TableRepository to retrieve the list of tables.",
          "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for table information, which is used in the responses of the table API endpoints.",
          "predicted_trace_chain": "TablesApi.md -> TableService -> TableRepository -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API document describes operations on tables, which are implemented in TableService and TableRepository, which likely use TableInfoDAO as the data model.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteSchema operation described in the API documentation. It takes the full_name and force parameters as specified in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The document describes the deleteSchema API endpoint, which is directly implemented by the SchemaService.deleteSchema method.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by SchemaService.deleteSchema to perform the actual deletion of the schema from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by SchemaService.deleteSchema, which would typically delegate the actual deletion to SchemaRepository.deleteSchema.",
          "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schemas that are being deleted.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The deletion operation would involve manipulating SchemaInfoDAO objects, which represent the schemas in the data layer.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createSchema operation described in the API documentation. It takes a CreateSchema object as input and returns a SchemaInfo object, matching the documented parameters and return type.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The API documentation in SchemasApi.md directly describes the createSchema operation, which is implemented by the SchemaService.createSchema method.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by SchemaService.createSchema to perform the actual schema creation in the repository. It matches the expected input (CreateSchema) and output (SchemaInfo) types.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in SchemaService.createSchema, which in turn likely calls SchemaRepository.createSchema to perform the actual schema creation.",
          "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schema information, corresponding to the SchemaInfo return type mentioned in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation specifies SchemaInfo as the return type, which is likely implemented using SchemaInfoDAO in the data access layer.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the generateTemporaryVolumeCredentials API endpoint described in the documentation. It handles the POST request to '/temporary-volume-credentials' and generates temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the generateTemporaryVolumeCredentials method in the TemporaryVolumeCredentialsService class.",
          "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The VolumeInfoDAO class likely represents the data model for volume information, which is necessary for generating temporary credentials for a specific volume.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes generating credentials for volumes. The service method implements this functionality, which likely uses the VolumeInfoDAO to retrieve volume information necessary for credential generation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "helper",
          "relationship_explanation": "The listVolumes method in VolumeRepository may be used to retrieve volume information needed for generating temporary credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes an operation on volumes. The service method implements this, likely using the VolumeRepository to access volume data needed for credential generation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 2,
          "artifact_title": "CatalogCli.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the getCatalog functionality described in the API documentation. It takes a catalog name as input and returns a JSON string representation of the catalog info, which aligns with the API description.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogCli.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog endpoint, which would be implemented by the CatalogService, which in turn would use the CatalogRepository to fetch the data, and finally the CatalogCli provides a command-line interface to this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 8,
          "artifact_title": "CatalogRepository.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely responsible for retrieving the catalog information from the database based on the catalog name, which is the core functionality described in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog endpoint, which would be implemented by the CatalogService, which in turn would use the CatalogRepository to fetch the actual data from the storage layer.",
          "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This method directly implements the getCatalog API endpoint described in the documentation. It takes a catalog name as input and returns an HttpResponse containing the catalog information.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation directly describes the functionality that would be implemented by the CatalogService.getCatalog method, which serves as the entry point for handling the API request.",
          "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for catalog information in the database. It's used to store and retrieve the catalog data that is returned by the getCatalog API.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes returning CatalogInfo, which would be represented by CatalogInfoDAO in the data layer. The service and repository would use this DAO to interact with the stored catalog data.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createCatalog API endpoint described in the documentation. It handles POST requests to '/catalogs' for creating a new catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The document describes the createCatalog API, which is directly implemented by the CatalogService.createCatalog method.",
          "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the deleteCatalog API endpoint described in the documentation. It handles DELETE requests to '/catalogs/{name}' for deleting a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The document describes the deleteCatalog API, which is directly implemented by the CatalogService.deleteCatalog method.",
          "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the getCatalog API endpoint described in the documentation. It handles GET requests to '/catalogs/{name}' for retrieving a specific catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "The document describes the getCatalog API, which is directly implemented by the CatalogService.getCatalog method.",
          "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the listCatalogs API endpoint described in the documentation. It handles GET requests to '/catalogs' for listing available catalogs.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The document describes the listCatalogs API, which is directly implemented by the CatalogService.listCatalogs method.",
          "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the updateCatalog API endpoint described in the documentation. It handles PATCH requests to '/catalogs/{name}' for updating a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The document describes the updateCatalog API, which is directly implemented by the CatalogService.updateCatalog method.",
          "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method likely supports the creation of catalogs, which is part of the createCatalog API functionality described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "The document describes the createCatalog API, which is implemented by CatalogService.createCatalog, which likely uses CatalogRepository.addCatalog to perform the actual catalog creation in the database.",
          "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method likely supports the deletion of catalogs, which is part of the deleteCatalog API functionality described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The document describes the deleteCatalog API, which is implemented by CatalogService.deleteCatalog, which likely uses CatalogRepository.deleteCatalog to perform the actual catalog deletion in the database.",
          "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 8,
          "artifact_title": "CatalogRepository.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method likely supports retrieving a specific catalog, which is part of the getCatalog API functionality described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "predicted_trace_chain_explanation": "The document describes the getCatalog API, which is implemented by CatalogService.getCatalog, which likely uses CatalogRepository.getCatalog to retrieve the catalog information from the database.",
          "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 9,
          "artifact_title": "CatalogRepository.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method likely supports listing available catalogs, which is part of the listCatalogs API functionality described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The document describes the listCatalogs API, which is implemented by CatalogService.listCatalogs, which likely uses CatalogRepository.listCatalogs to retrieve the list of catalogs from the database.",
          "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method likely supports updating a catalog, which is part of the updateCatalog API functionality described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The document describes the updateCatalog API, which is implemented by CatalogService.updateCatalog, which likely uses CatalogRepository.updateCatalog to perform the actual catalog update in the database.",
          "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This class likely represents the data structure for catalog information, which is used across various catalog operations described in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService -> CatalogRepository -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The document describes catalog operations, which are implemented in CatalogService, which uses CatalogRepository, which likely uses CatalogInfoDAO to represent catalog data in the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.deleteCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createVolume operation described in the API documentation. It takes a CreateVolumeRequestContent parameter and returns a VolumeInfo object, matching the signature specified in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The API documentation directly describes the createVolume operation, which is implemented by the VolumeService.createVolume method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation detail",
          "relationship_explanation": "This method is likely called by VolumeService.createVolume to perform the actual creation of the volume in the repository. It takes a CreateVolumeRequestContent parameter and returns a VolumeInfo object, matching the required functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume operation, which is implemented by VolumeService.createVolume, which in turn likely uses VolumeRepository.createVolume for the actual data persistence.",
          "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data access object for volume information. It's likely used internally by VolumeRepository.createVolume to persist the volume data.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume operation, implemented by VolumeService.createVolume, which uses VolumeRepository.createVolume, which in turn likely uses VolumeInfoDAO for data persistence.",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 60,
          "artifact_title": "VolumeCli.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method implements the client-side CLI command for creating a volume. It likely uses the VolumesApi to send the createVolume request to the server.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume operation, which is implemented on the client side by VolumeCli.createVolume for CLI usage.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listVolumes API endpoint described in the documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and returns a ListVolumesResponseContent object as specified.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the API endpoint, which is implemented by the VolumeService.listVolumes method.",
          "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by VolumeService.listVolumes to retrieve the actual volume data from the database. It handles the pagination logic mentioned in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented in VolumeService.listVolumes, which in turn uses VolumeRepository.listVolumes to access the data.",
          "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for volumes, which is used by VolumeRepository.listVolumes to retrieve and return volume information.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, implemented by VolumeService.listVolumes, which uses VolumeRepository.listVolumes to access data, which in turn uses VolumeInfoDAO as the data model.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 63,
          "artifact_title": "VolumeCli.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method is a CLI client implementation that calls the listVolumes API endpoint. It handles parsing of command-line arguments and formatting of the response.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is used by the VolumeCli.listVolumes method to implement the CLI client functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the updateVolume functionality described in the documentation. It takes the same parameters (fullName and updateVolumeRequest) and returns a VolumeInfo object as specified.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation in VolumesApi.md directly describes the updateVolume operation, which is implemented by the VolumeService.updateVolume method.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by VolumeService.updateVolume to perform the actual database update operation for the volume. It matches the parameters and return type described in the API.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in VolumeService, which in turn likely uses VolumeRepository to perform the actual data update.",
          "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data access object for volume information. It's likely used within the VolumeRepository.updateVolume method to interact with the database.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API describes the operation, implemented in VolumeService, which uses VolumeRepository, which in turn likely uses VolumeInfoDAO for database interactions.",
          "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 64,
          "artifact_title": "VolumeCli.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method provides a command-line interface for the updateVolume operation, allowing users to interact with the API through a CLI.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the updateVolume operation, which is implemented as a CLI command in VolumeCli.updateVolume for user interaction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The TableService.getTable method directly implements the getTable API endpoint described in the documentation. It takes a 'fullName' parameter and returns a TableInfo object, matching the API specification.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API documentation describes the getTable endpoint, which is implemented by TableService.getTable. This method likely calls TableRepository.getTable to fetch the actual data.",
          "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "While not explicitly mentioned in the documentation, TableRepository.getTable is likely called by TableService.getTable to retrieve the table information from the database.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API endpoint is implemented in TableService.getTable, which would use TableRepository.getTable to access the underlying data store.",
          "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The TableInfoDAO class likely represents the database model for table information, which is used to construct the TableInfo object returned by the API.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API returns a TableInfo object, which is likely constructed from a TableInfoDAO instance retrieved by TableRepository.getTable.",
          "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 3,
          "artifact_title": "CatalogCli.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listCatalogs functionality described in the API documentation. It takes the same parameters (max_results and page_token) and returns a list of catalogs.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogCli.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which is likely implemented in the CatalogService, which then uses the CatalogRepository for data access, and finally the CatalogCli provides a command-line interface for this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 9,
          "artifact_title": "CatalogRepository.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely responsible for retrieving the list of catalogs from the database, implementing the pagination logic described in the API documentation using maxResults and pageToken parameters.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which is implemented in the CatalogService, which then uses the CatalogRepository for actual data retrieval and pagination logic.",
          "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This service method directly corresponds to the listCatalogs API endpoint described in the documentation. It takes the same parameters (maxResults and pageToken) and likely returns a ListCatalogsResponse.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which is directly implemented in the CatalogService.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the generateTemporaryTableCredentials functionality described in the API documentation. It takes a GenerateTemporaryTableCredential object as input and returns a GenerateTemporaryTableCredentialResponse, matching the API specification.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The API documentation directly describes the endpoint, which is implemented by the TemporaryTableCredentialsService class in the server code.",
          "ground_truth_relationship": "The code implements the documented API endpoint by checking if a table exists at a storage location, then either generating AWS S3 temporary credentials or returning empty credentials for local filesystems, matching the documented GenerateTemporaryTableCredentialResponse return type.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "dependency",
          "relationship_explanation": "The generateTemporaryTableCredentials method likely needs to retrieve table information to generate credentials. This method is used to get the table details, including its storage location.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API call requires table information, which is retrieved using the TableRepository.getTable method to access the necessary table details for generating credentials.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data model for table information, which is likely used in the process of generating temporary table credentials.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The TableInfoDAO is the underlying data model used by TableRepository.getTable to retrieve and represent table information needed for generating credentials.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createSchema operation described in the API documentation. It handles the POST request to '/schemas' for creating a new schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The API documentation directly describes the createSchema operation, which is implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the deleteSchema operation described in the API documentation. It handles the DELETE request to '/schemas/{full_name}' for deleting a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation directly describes the deleteSchema operation, which is implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the getSchema operation described in the API documentation. It handles the GET request to '/schemas/{full_name}' for retrieving a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The API documentation directly describes the getSchema operation, which is implemented by this service method.",
          "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the listSchemas operation described in the API documentation. It handles the GET request to '/schemas' for listing schemas.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation directly describes the listSchemas operation, which is implemented by this service method.",
          "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the updateSchema operation described in the API documentation. It handles the PATCH request to '/schemas/{full_name}' for updating a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation directly describes the updateSchema operation, which is implemented by this service method.",
          "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is likely called by SchemaService.createSchema to perform the actual creation of the schema in the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the createSchema operation, which is implemented in the service layer, which in turn calls the repository layer to perform the actual data manipulation.",
          "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is likely called by SchemaService.deleteSchema to perform the actual deletion of the schema from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteSchema operation, which is implemented in the service layer, which in turn calls the repository layer to perform the actual data manipulation.",
          "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is likely called by SchemaService.getSchema to retrieve the schema information from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the getSchema operation, which is implemented in the service layer, which in turn calls the repository layer to fetch the actual data.",
          "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is likely called by SchemaService.listSchemas to retrieve the list of schemas from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation describes the listSchemas operation, which is implemented in the service layer, which in turn calls the repository layer to fetch the actual data.",
          "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is likely called by SchemaService.updateSchema to perform the actual update of the schema in the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the updateSchema operation, which is implemented in the service layer, which in turn calls the repository layer to perform the actual data manipulation.",
          "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schema information, which is used in the operations described in the API documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService -> SchemaRepository -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes operations on schemas, which are implemented in the service and repository layers, ultimately using this DAO to interact with the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the API endpoint described in the documentation for generating temporary table credentials.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The document describes the API endpoint, which is directly implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 28,
          "artifact_title": "GenerateTemporaryTableCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "input",
          "relationship_explanation": "This class is explicitly mentioned as the input parameter for the generateTemporaryTableCredentials API call.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredential -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The document specifies GenerateTemporaryTableCredential as input, which is then used by the service method to process the request.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 29,
          "artifact_title": "GenerateTemporaryTableCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "output",
          "relationship_explanation": "This class is explicitly mentioned as the return type for the generateTemporaryTableCredentials API call.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredentialResponse -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The document specifies GenerateTemporaryTableCredentialResponse as the return type, which is what the service method returns after processing.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 1,
          "artifact_title": "CatalogCli.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the deleteCatalog operation described in the API documentation. It takes the catalog name and force flag as parameters, matching the API specification.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation directly describes the deleteCatalog operation, which is implemented by the CatalogCli.deleteCatalog method.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the core logic for deleting a catalog, including the force deletion functionality mentioned in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog operation, which is likely first handled by CatalogCli.deleteCatalog, then delegated to CatalogRepository.deleteCatalog for the actual deletion logic.",
          "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "service layer",
          "relationship_explanation": "This service method likely handles the HTTP request for deleting a catalog, coordinating between the API layer and the repository layer.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog operation, which is likely handled at the service layer by CatalogService.deleteCatalog, which then calls CatalogRepository.deleteCatalog for the actual deletion.",
          "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        }
      ]
    },
    {
      "dataset": "unity_catalog",
      "run_id": 3,
      "timestamp": "2025-01-15T13:42:44.823661",
      "results": [
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createVolume API endpoint described in the documentation. It takes a CreateVolumeRequestContent parameter and returns a VolumeInfo object, matching the API signature.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The API documentation directly describes the createVolume endpoint, which is implemented by the VolumeService.createVolume method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by VolumeService.createVolume to perform the actual creation of the volume in the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume endpoint, which is implemented by VolumeService.createVolume, which in turn likely calls VolumeRepository.createVolume to perform the actual creation.",
          "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for a volume, which is used in the process of creating a new volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes creating a volume, which is implemented through the service and repository, ultimately using the VolumeInfoDAO to represent the volume data.",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 60,
          "artifact_title": "VolumeCli.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This method likely provides a command-line interface for creating a volume, using the same underlying API.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume endpoint, which is also exposed through the CLI via VolumeCli.createVolume.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the createTable API endpoint described in the documentation. It handles the POST request to '/tables' for creating a new table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The document describes the createTable API, which is directly implemented by the TableService.createTable method.",
          "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the deleteTable API endpoint described in the documentation. It handles the DELETE request to '/tables/{full_name}' for deleting a table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The document describes the deleteTable API, which is directly implemented by the TableService.deleteTable method.",
          "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the getTable API endpoint described in the documentation. It handles the GET request to '/tables/{full_name}' for retrieving a table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The document describes the getTable API, which is directly implemented by the TableService.getTable method.",
          "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the listTables API endpoint described in the documentation. It handles the GET request to '/tables' for listing tables.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The document describes the listTables API, which is directly implemented by the TableService.listTables method.",
          "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.createTable to perform the actual table creation in the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The API documentation describes the createTable endpoint, which is implemented by TableService.createTable, which in turn likely calls TableRepository.createTable to perform the actual table creation.",
          "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.deleteTable to perform the actual table deletion in the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteTable endpoint, which is implemented by TableService.deleteTable, which in turn likely calls TableRepository.deleteTable to perform the actual table deletion.",
          "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.getTable to retrieve the table information from the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API documentation describes the getTable endpoint, which is implemented by TableService.getTable, which in turn likely calls TableRepository.getTable to retrieve the table information.",
          "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.listTables to retrieve the list of tables from the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes the listTables endpoint, which is implemented by TableService.listTables, which in turn likely calls TableRepository.listTables to retrieve the list of tables.",
          "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the createFunction API endpoint described in the documentation. It handles the POST request to create a new function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionCli.createFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented by the FunctionService, which uses the FunctionRepository for data access, and is finally executed by the FunctionCli for command-line operations.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 17,
          "artifact_title": "FunctionCli.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the deleteFunction API endpoint described in the documentation. It handles the DELETE request to remove an existing function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction -> FunctionCli.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented by the FunctionService, which uses the FunctionRepository for data access, and is finally executed by the FunctionCli for command-line operations.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 18,
          "artifact_title": "FunctionCli.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the getFunction API endpoint described in the documentation. It handles the GET request to retrieve information about a specific function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionCli.getFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented by the FunctionService, which uses the FunctionRepository for data access, and is finally executed by the FunctionCli for command-line operations.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 19,
          "artifact_title": "FunctionCli.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the listFunctions API endpoint described in the documentation. It handles the GET request to list functions within a specified catalog and schema.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions -> FunctionCli.listFunctions",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented by the FunctionService, which uses the FunctionRepository for data access, and is finally executed by the FunctionCli for command-line operations.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This service method likely implements the business logic for creating a function, as described in the createFunction API endpoint.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is directly implemented by the FunctionService class.",
          "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This service method likely implements the business logic for deleting a function, as described in the deleteFunction API endpoint.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is directly implemented by the FunctionService class.",
          "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This service method likely implements the business logic for retrieving a function, as described in the getFunction API endpoint.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is directly implemented by the FunctionService class.",
          "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This service method likely implements the business logic for listing functions, as described in the listFunctions API endpoint.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is directly implemented by the FunctionService class.",
          "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for function information, which is used in the responses of the API endpoints described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService -> FunctionRepository -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The documentation describes the API, which is implemented by the FunctionService, which uses the FunctionRepository for data access, which in turn uses the FunctionInfoDAO for database operations.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.listFunctions",
          "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.getFunction",
          "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.createFunction",
          "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.deleteFunction",
          "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getCatalog operation described in the API documentation. It takes a 'name' parameter and returns a CatalogInfo object, matching the specification.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation defines the getCatalog operation, which is implemented by CatalogService.getCatalog. This method likely calls CatalogRepository.getCatalog to retrieve the actual data.",
          "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 8,
          "artifact_title": "CatalogRepository.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "data retrieval",
          "relationship_explanation": "While not explicitly mentioned, this method is likely called by CatalogService.getCatalog to retrieve the catalog data from the database based on the provided name.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation leads to the service implementation, which then uses the repository to fetch the actual catalog data.",
          "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data representation",
          "relationship_explanation": "This class likely represents the database entity for a catalog. It's implicitly related as it would be used to store and retrieve catalog information.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation leads to the service, which uses the repository to fetch data, and the repository likely uses CatalogInfoDAO to represent the catalog data from the database.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createSchema API endpoint described in the documentation. It handles POST requests to '/schemas' to create a new schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The documentation describes the createSchema API endpoint, which is directly implemented by the SchemaService.createSchema method.",
          "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the deleteSchema API endpoint described in the documentation. It handles DELETE requests to '/schemas/{full_name}' to delete a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The documentation describes the deleteSchema API endpoint, which is directly implemented by the SchemaService.deleteSchema method.",
          "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the getSchema API endpoint described in the documentation. It handles GET requests to '/schemas/{full_name}' to retrieve a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The documentation describes the getSchema API endpoint, which is directly implemented by the SchemaService.getSchema method.",
          "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the listSchemas API endpoint described in the documentation. It handles GET requests to '/schemas' to list schemas in a catalog.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The documentation describes the listSchemas API endpoint, which is directly implemented by the SchemaService.listSchemas method.",
          "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the updateSchema API endpoint described in the documentation. It handles PATCH requests to '/schemas/{full_name}' to update a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The documentation describes the updateSchema API endpoint, which is directly implemented by the SchemaService.updateSchema method.",
          "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schema information, which is used in the SchemaInfo responses mentioned in the API documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation mentions SchemaInfo as a response type. SchemaService methods likely use SchemaInfoDAO to interact with the database, which is then converted to SchemaInfo for the API response.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by SchemaService.getSchema to retrieve schema data from the database.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The API documentation describes getting a schema. SchemaService.getSchema likely calls SchemaRepository.getSchema to fetch the data from the database before returning it through the API.",
          "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by SchemaService.listSchemas to retrieve a list of schemas from the database.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation describes listing schemas. SchemaService.listSchemas likely calls SchemaRepository.listSchemas to fetch the data from the database before returning it through the API.",
          "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by SchemaService.createSchema to persist a new schema to the database.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The API documentation describes creating a schema. SchemaService.createSchema likely calls SchemaRepository.createSchema to persist the new schema data to the database.",
          "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by SchemaService.updateSchema to update an existing schema in the database.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes updating a schema. SchemaService.updateSchema likely calls SchemaRepository.updateSchema to persist the updated schema data to the database.",
          "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by SchemaService.deleteSchema to remove a schema from the database.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation describes deleting a schema. SchemaService.deleteSchema likely calls SchemaRepository.deleteSchema to remove the schema data from the database.",
          "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the generateTemporaryTableCredentials API endpoint described in the documentation. It matches the HTTP POST method and /temporary-table-credentials path mentioned in the API spec.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The document describes the API endpoint, which is directly implemented by the TemporaryTableCredentialsService class's generateTemporaryTableCredentials method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 26,
          "artifact_title": "GenerateTemporaryTableCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "input parameter",
          "relationship_explanation": "The documentation explicitly mentions GenerateTemporaryTableCredential as the input parameter for the generateTemporaryTableCredentials API call.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredential -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The document specifies GenerateTemporaryTableCredential as the input, which is then used by the TemporaryTableCredentialsService.generateTemporaryTableCredentials method.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 27,
          "artifact_title": "GenerateTemporaryTableCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "The documentation explicitly states that GenerateTemporaryTableCredentialResponse is the return type for the generateTemporaryTableCredentials API call.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredentialResponse -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The document specifies GenerateTemporaryTableCredentialResponse as the return type, which is then returned by the TemporaryTableCredentialsService.generateTemporaryTableCredentials method.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the createCatalog functionality described in the API documentation. It handles the creation of a new catalog instance as specified in the API.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog endpoint, which is likely implemented by a CatalogService, which in turn would use the CatalogRepository to perform the actual database operation.",
          "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the deleteCatalog functionality described in the API documentation. It handles the deletion of a catalog that matches the supplied name.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog endpoint, which is likely implemented by a CatalogService, which would then use the CatalogRepository to perform the actual deletion in the database.",
          "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 8,
          "artifact_title": "CatalogRepository.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the getCatalog functionality described in the API documentation. It retrieves the specified catalog information.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog endpoint, which would be implemented by a CatalogService that uses the CatalogRepository to fetch the catalog data from the database.",
          "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 9,
          "artifact_title": "CatalogRepository.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the listCatalogs functionality described in the API documentation. It retrieves a list of available catalogs, potentially with pagination.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which would be implemented by a CatalogService that uses the CatalogRepository to fetch the list of catalogs from the database.",
          "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the updateCatalog functionality described in the API documentation. It updates the catalog that matches the supplied name.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog endpoint, which would be implemented by a CatalogService that uses the CatalogRepository to perform the actual update in the database.",
          "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the service layer for the createCatalog API endpoint, handling the HTTP request and response.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog endpoint, which would be directly implemented by this service method to handle the HTTP interaction.",
          "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the service layer for the deleteCatalog API endpoint, handling the HTTP request and response.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog endpoint, which would be directly implemented by this service method to handle the HTTP interaction.",
          "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the service layer for the getCatalog API endpoint, handling the HTTP request and response.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog endpoint, which would be directly implemented by this service method to handle the HTTP interaction.",
          "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the service layer for the listCatalogs API endpoint, handling the HTTP request and response.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which would be directly implemented by this service method to handle the HTTP interaction.",
          "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the service layer for the updateCatalog API endpoint, handling the HTTP request and response.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog endpoint, which would be directly implemented by this service method to handle the HTTP interaction.",
          "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for catalog information, which is used in the CRUD operations described in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService -> CatalogRepository -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API operations would be implemented by the CatalogService, which uses the CatalogRepository to interact with the database. The CatalogInfoDAO would be the data model used to represent catalog information in these interactions.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.getCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.createCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.deleteCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.updateCatalog",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogCli.listCatalogs",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createCatalog operation described in the API documentation. It takes a CreateCatalog object as input and returns a CatalogInfo object, matching the API specification.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The documentation in CatalogsApi.md directly describes the createCatalog operation, which is implemented by the CatalogService.createCatalog method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is likely called by CatalogService.createCatalog to persist the new catalog. It takes a CreateCatalog object and returns a CatalogInfo object, matching the expected behavior.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "The CatalogService.createCatalog method likely delegates the actual creation and persistence of the catalog to CatalogRepository.addCatalog.",
          "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data model for a catalog in the database. It's likely used by CatalogRepository.addCatalog to persist the catalog information.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "CatalogInfoDAO is the data access object used to represent and persist catalog information in the database, which is necessary for the addCatalog operation.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 0,
          "artifact_title": "CatalogCli.createCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method implements the client-side CLI command for creating a catalog. It likely calls the createCatalog API endpoint described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "predicted_trace_chain_explanation": "CatalogCli.createCatalog is the CLI implementation that would use the createCatalog API described in the documentation to create a catalog from the command line.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 11,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method directly implements the createFunction API endpoint described in the documentation. It handles the POST request to create a new function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The documentation describes the createFunction API, which is directly implemented by the FunctionService.createFunction method.",
          "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access",
          "relationship_explanation": "This method is likely called by FunctionService.createFunction to persist the new function in the database.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by FunctionService, which would then use FunctionRepository to persist the data.",
          "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Model",
          "relationship_explanation": "This class represents the database entity for storing function information, which is created when a new function is added.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API creates a function, which is persisted by the repository using the FunctionInfoDAO entity.",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Client Implementation",
          "relationship_explanation": "This method provides a CLI interface for creating functions, which would interact with the createFunction API endpoint.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "predicted_trace_chain_explanation": "The documentation describes the createFunction API, which is utilized by the CLI method to create functions.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 18,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the listFunctions API endpoint described in the documentation. It handles the GET request to list functions, taking the same parameters (catalog_name, schema_name, max_results, page_token) as specified in the API documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation directly describes the listFunctions endpoint, which is implemented by the FunctionService.listFunctions method.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by FunctionService.listFunctions to retrieve the list of functions from the database. It implements the business logic for listing functions based on the provided parameters.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is implemented by FunctionService.listFunctions. This service method likely calls FunctionRepository.listFunctions to perform the actual database query.",
          "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 19,
          "artifact_title": "FunctionCli.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This CLI method provides a command-line interface for listing functions. It likely uses the same underlying API endpoint described in the documentation, making it relevant to the listFunctions functionality.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is utilized by the FunctionCli.listFunctions method to provide CLI access to this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for functions in the database. It's implicitly related to the listFunctions functionality as it defines the structure of the function data that will be returned in the ListFunctionsResponse.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionRepository.listFunctions -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is implemented by FunctionRepository.listFunctions. This repository method likely uses FunctionInfoDAO to map database results to the function objects returned in the response.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the generateTemporaryTableCredentials API endpoint described in the documentation. It takes a GenerateTemporaryTableCredential object as input and returns a GenerateTemporaryTableCredentialResponse, matching the API specification.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by checking if a table exists at a storage location, then either generating AWS S3 temporary credentials or returning empty credentials for local filesystems, matching the documented GenerateTemporaryTableCredentialResponse return type.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "The generateTemporaryTableCredentials method likely calls getTable to retrieve the table information needed to generate credentials. This is inferred from the need to access table storage location.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by the service, which needs to retrieve table information to generate credentials, thus calling the repository method.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 25,
          "artifact_title": "GenerateTemporaryTableCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "input parameter",
          "relationship_explanation": "The documentation explicitly mentions GenerateTemporaryTableCredential as an input parameter for the API endpoint.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredential",
          "predicted_trace_chain_explanation": "The API documentation directly references this model as an input parameter.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 26,
          "artifact_title": "GenerateTemporaryTableCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "The documentation explicitly mentions GenerateTemporaryTableCredentialResponse as the return type for the API endpoint.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredentialResponse",
          "predicted_trace_chain_explanation": "The API documentation directly references this model as the return type.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the updateSchema operation described in the API documentation. It takes the full_name and UpdateSchema parameters mentioned in the documentation and returns a SchemaInfo object as specified.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the updateSchema operation, which is implemented in the SchemaService class, which in turn calls the SchemaRepository.updateSchema method to perform the actual update operation.",
          "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the API endpoint for updating a schema. It matches the PATCH HTTP method, takes the full_name parameter, and uses the UpdateSchema object as input, as specified in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the updateSchema operation, which is directly implemented by the SchemaService.updateSchema method.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "While not explicitly mentioned, this class likely represents the data model for schema information, which is manipulated during the update operation and returned as part of the SchemaInfo response.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes returning SchemaInfo, which is likely implemented using SchemaInfoDAO in the data access layer.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "The FunctionService.getFunction method directly implements the getFunction API endpoint described in the documentation. It takes a 'name' parameter as specified in the API and returns a FunctionInfo object.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction endpoint, which is implemented by FunctionService.getFunction. This service method likely calls FunctionRepository.getFunction to retrieve the actual function data from the database.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 23,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "While not explicitly mentioned in the documentation, the FunctionRepository.getFunction method is likely called by the FunctionService to retrieve the function data from the database based on the provided name.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The API documentation leads to the FunctionService implementation, which would use the FunctionRepository to access the underlying data storage and retrieve the function information.",
          "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The FunctionInfoDAO class likely represents the database model for function information, which is used to store and retrieve function data mentioned in the API documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the function retrieval, which is implemented through the service and repository layers, ultimately using the FunctionInfoDAO to represent the data in the database.",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listVolumes functionality described in the documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and returns a ListVolumesResponseContent object as specified in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the listVolumes API endpoint, which is implemented by the VolumeService.listVolumes method.",
          "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by VolumeService.listVolumes to retrieve the actual volume data from the repository. It handles the database interaction and pagination logic described in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes the listVolumes endpoint, which is implemented in VolumeService.listVolumes. This service method likely delegates the data retrieval to VolumeRepository.listVolumes.",
          "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 63,
          "artifact_title": "VolumeCli.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method provides a CLI interface for the listVolumes API functionality. It processes user input and calls the API endpoint described in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes the listVolumes endpoint, which is utilized by the VolumeCli.listVolumes method to provide a command-line interface for this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for volumes in the system. The listVolumes API returns information about volumes, which is probably mapped from instances of this DAO class.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the volume information returned by listVolumes. This data flows from the VolumeInfoDAO through the repository and service layers to the API response.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the generateTemporaryVolumeCredentials API endpoint described in the documentation. It handles the POST request to '/temporary-volume-credentials' and generates the temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "The VolumeInfoDAO is likely used within the implementation to retrieve volume information when generating temporary credentials. It's implicitly related as the API deals with volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation leads to the service implementation, which likely uses VolumeInfoDAO to access volume data needed for generating credentials.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data retrieval",
          "relationship_explanation": "The getVolume method is likely used within the implementation to retrieve volume information necessary for generating temporary credentials. It's implicitly related as the API deals with volume-specific credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The API documentation leads to the service implementation, which likely uses VolumeRepository.getVolume to retrieve the necessary volume data for generating credentials.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteSchema operation described in the API documentation. It takes the same parameters (full_name and force) and is responsible for deleting the specified schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation in SchemasApi.md directly describes the deleteSchema operation, which is implemented by the SchemaService.deleteSchema method.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by SchemaService.deleteSchema to perform the actual deletion of the schema from the repository. It handles the details of removing the schema from the database.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in SchemaService.deleteSchema, which in turn calls SchemaRepository.deleteSchema to perform the actual deletion.",
          "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data model for a schema in the database. It is likely used by SchemaRepository.deleteSchema when removing the schema from the database.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The deletion operation described in the API is implemented through the service and repository layers, ultimately affecting the SchemaInfoDAO representing the schema in the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The documentation describes the createTable API endpoint, which is directly implemented by the TableService.createTable method. This method handles the HTTP POST request to create a new table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The API documentation directly maps to the service implementation.",
          "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "While not explicitly mentioned, the TableRepository.createTable method is likely called by the TableService to perform the actual table creation in the database.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The API call is handled by the service, which then uses the repository to interact with the database.",
          "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The TableInfoDAO class likely represents the data model for the table information, which is used in the process of creating a table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API call leads to the service, which uses the repository to create a table entry, represented by the TableInfoDAO.",
          "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 45,
          "artifact_title": "TableCli.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "The TableCli.createTable method is likely the client-side implementation that calls this API endpoint to create a table.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.createTable",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint that the CLI method would call to create a table.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "The TableService.getTable method directly implements the getTable API endpoint described in the documentation. It takes a fullName parameter and returns a TableInfo object, matching the API specification.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The documentation in TablesApi.md directly describes the getTable API endpoint, which is implemented by the TableService.getTable method.",
          "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "The TableRepository.getTable method is likely called by TableService.getTable to retrieve the table information from the database. It matches the signature of taking a full name parameter and returning a TableInfo object.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API documentation describes the getTable endpoint, which is implemented by TableService.getTable. This service method likely calls TableRepository.getTable to access the actual data.",
          "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The TableInfoDAO class is likely used to represent the table data in the database. It would be used by TableRepository.getTable to map the database data to the TableInfo object returned by the API.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the TableInfo return type, which is likely implemented using the TableInfoDAO for database mapping. TableRepository.getTable would use this DAO to retrieve and convert the data.",
          "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the updateVolume operation described in the documentation. It takes the same parameters (fullName and UpdateVolumeRequestContent) and returns a VolumeInfo object as specified.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the updateVolume operation, which is implemented by the VolumeService.updateVolume method.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by implementation",
          "relationship_explanation": "This method is likely called by VolumeService.updateVolume to perform the actual update operation on the volume data. It takes the same parameters and returns a VolumeInfo object.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The documentation describes the updateVolume operation, which is implemented by VolumeService.updateVolume, which in turn calls VolumeRepository.updateVolume to perform the actual data update.",
          "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data model for a volume in the database. It is likely used by VolumeRepository.updateVolume to update the volume information.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The updateVolume operation described in the documentation is implemented through a chain of calls that ultimately interact with the VolumeInfoDAO to update the volume data in the database.",
          "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 64,
          "artifact_title": "VolumeCli.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method provides a command-line interface for updating a volume, which corresponds to the updateVolume operation described in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "predicted_trace_chain_explanation": "The updateVolume operation described in the API documentation is implemented as a CLI command by the VolumeCli.updateVolume method, providing a user-friendly way to interact with the API.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the deleteVolume operation described in the API documentation. It takes a 'full_name' parameter which corresponds to the 'name' parameter in the API description.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation directly describes the deleteVolume operation, which is implemented by the VolumeService.deleteVolume method.",
          "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is likely called by VolumeService.deleteVolume to perform the actual deletion of the volume from the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is implemented in VolumeService.deleteVolume, which in turn likely calls VolumeRepository.deleteVolume to perform the actual deletion.",
          "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 61,
          "artifact_title": "VolumeCli.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method provides a command-line interface for deleting a volume, which corresponds to the deleteVolume operation described in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is implemented as a CLI command in VolumeCli.deleteVolume for client-side usage.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for a volume in the system. The deleteVolume operation would involve removing an instance of this class from the database.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is implemented in VolumeService, which uses VolumeRepository, which in turn operates on VolumeInfoDAO objects.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "The documentation describes a 'getVolume' operation that takes a 'name' parameter and returns a VolumeInfo object. This directly corresponds to the VolumeService.getVolume method, which implements this functionality.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The API documentation in VolumesApi.md directly describes the getVolume operation, which is implemented by the VolumeService.getVolume method.",
          "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeRepository.getVolume method is likely called by VolumeService.getVolume to retrieve the volume information from the database.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the getVolume operation, which is implemented in VolumeService.getVolume. This service method likely calls VolumeRepository.getVolume to access the actual data.",
          "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The VolumeInfoDAO class represents the data model for volumes in the database. It's likely used by VolumeRepository.getVolume to map database records to VolumeInfo objects.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes returning a VolumeInfo object. This data likely originates from a VolumeInfoDAO object retrieved by VolumeRepository.getVolume and converted to a VolumeInfo object.",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 62,
          "artifact_title": "VolumeCli.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "CLI implementation",
          "relationship_explanation": "While not mentioned in the API documentation, VolumeCli.getVolume likely provides a command-line interface for the getVolume operation, calling the API described in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the getVolume operation, which is likely exposed through the command-line interface implemented in VolumeCli.getVolume.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the generateTemporaryVolumeCredentials API endpoint described in the documentation. It takes a GenerateTemporaryVolumeCredential object as input and returns a GenerateTemporaryVolumeCredentialResponse, matching the documented parameters and return type.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the TemporaryVolumeCredentialsService class in the server code.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 26,
          "artifact_title": "GenerateTemporaryVolumeCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "input parameter",
          "relationship_explanation": "This class is explicitly mentioned as the input parameter for the generateTemporaryVolumeCredentials method in the documentation.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> GenerateTemporaryVolumeCredential",
          "predicted_trace_chain_explanation": "The documentation directly references this class as the input parameter for the API endpoint.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 27,
          "artifact_title": "GenerateTemporaryVolumeCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "This class is explicitly mentioned as the return type for the generateTemporaryVolumeCredentials method in the documentation.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> GenerateTemporaryVolumeCredentialResponse",
          "predicted_trace_chain_explanation": "The documentation directly references this class as the return type for the API endpoint.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "While not explicitly mentioned, this class is likely used to access volume information when generating temporary credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The service method likely uses VolumeInfoDAO to retrieve volume information needed for generating credentials.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data retrieval",
          "relationship_explanation": "This method is likely used to retrieve volume information when generating temporary credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The service method probably calls VolumeRepository.getVolume to fetch the necessary volume data for credential generation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 1,
          "artifact_title": "CatalogCli.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the deleteCatalog operation described in the API documentation. It takes the catalog name and force parameters, and calls the API to delete the catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog -> CatalogCli.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog operation, which is implemented in the server's CatalogService, then in the CatalogRepository, and finally exposed through the CLI in CatalogCli.deleteCatalog.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the core logic for deleting a catalog, including the force deletion option mentioned in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog operation, which is implemented in the server's CatalogService and then in the CatalogRepository for data persistence.",
          "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This service method likely handles the HTTP request for deleting a catalog, as described in the API documentation, including parameter parsing and response generation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog operation, which is directly implemented in the server's CatalogService to handle the HTTP request.",
          "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 3,
          "artifact_title": "CatalogCli.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the listCatalogs functionality described in the API documentation. It handles the optional parameters 'max_results' and 'page_token', which correspond to the documented parameters.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogCli.listCatalogs",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is likely implemented by a service layer (CatalogService), which in turn uses a repository layer (CatalogRepository) for data access, and finally the CLI provides a command-line interface to this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 9,
          "artifact_title": "CatalogRepository.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely responsible for retrieving the catalog data from the database, handling pagination and max results as described in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by the service layer, which then uses the repository for data access and pagination handling.",
          "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This service method likely implements the business logic for listing catalogs, handling the optional parameters and calling the repository layer.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is directly implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for catalog information, which is used when listing catalogs.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API describes the data returned, which is fetched by the service and repository layers, ultimately mapping from this DAO object.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 4,
          "artifact_title": "CatalogCli.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the updateCatalog operation described in the API documentation. It handles the PATCH request to update a catalog, matching the parameters and return type specified in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogCli.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation defines the updateCatalog operation, which is implemented by the CatalogService, which uses the CatalogRepository to perform the update, and finally the CatalogCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This method likely implements the server-side logic for the updateCatalog operation, handling the PATCH request and invoking the necessary repository methods to update the catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation defines the updateCatalog operation, which is implemented by the CatalogService, which in turn uses the CatalogRepository to perform the actual update in the database.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely responsible for performing the actual update of the catalog in the database, based on the parameters provided in the UpdateCatalog object.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation defines the updateCatalog operation, which is implemented by the CatalogService, which uses the CatalogRepository to perform the actual update in the database.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data access object for catalog information, which would be used in the process of updating a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation defines the updateCatalog operation, which is implemented by the CatalogService, which uses the CatalogRepository to perform the update, which in turn likely uses the CatalogInfoDAO to interact with the database.",
          "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "The SchemaRepository.createSchema method likely implements the backend logic for creating a new schema as described in the API documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the createSchema endpoint, which would be implemented by the SchemaService, which in turn would use the SchemaRepository to perform the actual database operations.",
          "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "The SchemaService.createSchema method likely implements the service layer logic for the createSchema API endpoint described in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the createSchema endpoint, which would be directly implemented by the corresponding method in the SchemaService.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The SchemaInfoDAO class likely represents the data model for schema information, which corresponds to the SchemaInfo return type mentioned in the API documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation mentions returning SchemaInfo, which would be represented by SchemaInfoDAO in the data access layer, used by the repository and service layers.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listSchemas API endpoint described in the documentation. It takes the same parameters (catalog_name, maxResults, pageToken) and returns a ListSchemasResponse object as specified in the API description.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation in SchemasApi.md directly describes the listSchemas endpoint, which is implemented by the SchemaService.listSchemas method.",
          "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by SchemaService.listSchemas to retrieve the actual schema data from the repository. It matches the parameters and return type described in the API documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation describes the listSchemas endpoint, which is implemented by SchemaService.listSchemas. This service method likely delegates the actual data retrieval to SchemaRepository.listSchemas.",
          "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schemas in the database. It's used to map between the database representation and the SchemaInfo objects returned in the ListSchemasResponse.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the schema information returned, which is implemented through the service and repository layers, ultimately mapping to the SchemaInfoDAO for database interactions.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 17,
          "artifact_title": "FunctionCli.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "CLI implementation",
          "relationship_explanation": "This method likely implements the CLI command for deleting a function, which corresponds to the deleteFunction API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "predicted_trace_chain_explanation": "The document describes the deleteFunction API, which would be invoked by the CLI implementation in FunctionCli.deleteFunction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Repository implementation",
          "relationship_explanation": "This method likely implements the actual deletion of a function from the database, which is necessary to fulfill the deleteFunction API request.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "The API endpoint would be handled by a service layer, which would then call the repository layer to perform the actual deletion.",
          "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Service implementation",
          "relationship_explanation": "This method directly implements the deleteFunction API endpoint described in the documentation. It handles the HTTP DELETE request for deleting a function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The document describes the deleteFunction API endpoint, which is directly implemented by FunctionService.deleteFunction.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createVolume API endpoint described in the documentation. It handles POST requests to '/volumes' to create a new volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The document describes the createVolume API, which is directly implemented by this method.",
          "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the deleteVolume API endpoint described in the documentation. It handles DELETE requests to '/volumes/{name}' to delete a volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The document describes the deleteVolume API, which is directly implemented by this method.",
          "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the getVolume API endpoint described in the documentation. It handles GET requests to '/volumes/{name}' to retrieve volume information.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The document describes the getVolume API, which is directly implemented by this method.",
          "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the listVolumes API endpoint described in the documentation. It handles GET requests to '/volumes' to list available volumes.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The document describes the listVolumes API, which is directly implemented by this method.",
          "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the updateVolume API endpoint described in the documentation. It handles PATCH requests to '/volumes/{name}' to update volume information.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The document describes the updateVolume API, which is directly implemented by this method.",
          "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by VolumeService.createVolume to perform the actual creation of a volume in the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes createVolume, which is implemented in VolumeService, which in turn likely calls VolumeRepository to perform the actual creation.",
          "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by VolumeService.deleteVolume to perform the actual deletion of a volume from the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation describes deleteVolume, which is implemented in VolumeService, which in turn likely calls VolumeRepository to perform the actual deletion.",
          "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by VolumeService.getVolume to retrieve volume information from the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The API documentation describes getVolume, which is implemented in VolumeService, which in turn likely calls VolumeRepository to retrieve the volume information.",
          "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by VolumeService.listVolumes to retrieve the list of volumes from the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes listVolumes, which is implemented in VolumeService, which in turn likely calls VolumeRepository to retrieve the list of volumes.",
          "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by VolumeService.updateVolume to perform the actual update of a volume in the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation describes updateVolume, which is implemented in VolumeService, which in turn likely calls VolumeRepository to perform the actual update.",
          "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for volumes, which is used in the implementation of the Volume API operations.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService -> VolumeRepository -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes volume operations, which are implemented in VolumeService, which uses VolumeRepository, which in turn likely uses VolumeInfoDAO as the data model for volumes.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "The SchemaService.getSchema method directly implements the getSchema operation described in the API documentation. It takes a 'full_name' parameter and returns a SchemaInfo object, matching the documented interface.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The documentation in SchemasApi.md directly describes the getSchema operation, which is implemented by the SchemaService.getSchema method.",
          "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "The SchemaRepository.getSchema method is likely called by SchemaService.getSchema to retrieve the schema information from the database. It matches the expected input (full name) and output (SchemaInfo) of the documented API.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the getSchema operation, which is implemented in SchemaService.getSchema. This service method likely calls SchemaRepository.getSchema to access the actual data.",
          "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The SchemaInfoDAO class likely represents the database model for schema information. It's used to map between the database representation and the SchemaInfo object returned by the API.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the SchemaInfo return type, which is likely mapped from a SchemaInfoDAO object retrieved by SchemaRepository.getSchema and returned through SchemaService.getSchema.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the deleteTable operation described in the API documentation. It takes a 'fullName' parameter which corresponds to the 'full_name' parameter in the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation in TablesApi.md directly describes the deleteTable operation, which is implemented by the TableService.deleteTable method.",
          "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is likely called by TableService.deleteTable to perform the actual deletion of the table from the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteTable operation, which is implemented in TableService.deleteTable, which in turn likely calls TableRepository.deleteTable to perform the actual deletion.",
          "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 46,
          "artifact_title": "TableCli.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "usage",
          "relationship_explanation": "This method likely provides a command-line interface to delete a table, using the same underlying API described in the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteTable operation, which is likely utilized by the TableCli.deleteTable method to provide a CLI interface for this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data access object for table information, which would be involved in the deletion process.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteTable operation, implemented by TableService.deleteTable, which calls TableRepository.deleteTable, which in turn likely interacts with TableInfoDAO to remove the table data.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listTables API functionality described in the documentation. It takes the same parameters (catalog_name, schema_name, max_results, page_token) and returns a ListTablesResponse object as specified in the API documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The API documentation in TablesApi.md directly describes the listTables operation, which is implemented by the TableService.listTables method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by TableService.listTables to retrieve the actual table data from the repository. It handles the database interaction and pagination logic described in the API documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes the listTables operation, which is implemented in TableService.listTables. This service method likely calls TableRepository.listTables to access the underlying data store and retrieve the table information.",
          "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 47,
          "artifact_title": "ListTablesResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "The API documentation explicitly states that the listTables operation returns a ListTablesResponse object. This class represents the structure of the response data.",
          "predicted_trace_chain": "TablesApi.md -> ListTablesResponse",
          "predicted_trace_chain_explanation": "The API documentation directly references the ListTablesResponse as the return type for the listTables operation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 48,
          "artifact_title": "TableCli.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method likely provides a command-line interface for the listTables API operation, allowing users to interact with the API through a CLI tool.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes the listTables operation, which is likely exposed through a CLI interface implemented by TableCli.listTables.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data representation",
          "relationship_explanation": "This class likely represents the database entity for table information. It's probably used by TableRepository.listTables to map database records to TableInfo objects returned in the ListTablesResponse.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the listTables operation, implemented by TableService.listTables, which uses TableRepository.listTables to access data, likely represented by TableInfoDAO objects in the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        }
      ]
    },
    {
      "dataset": "unity_catalog",
      "run_id": 4,
      "timestamp": "2025-01-15T13:51:54.522163",
      "results": [
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createSchema API endpoint described in the documentation. It takes a CreateSchema object as input and returns a SchemaInfo object, matching the documented parameters and return type.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The API documentation in SchemasApi.md directly describes the createSchema endpoint, which is implemented by the SchemaService.createSchema method.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "While not explicitly mentioned in the documentation, this method is likely called by SchemaService.createSchema to perform the actual schema creation in the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the createSchema endpoint, which is implemented by SchemaService.createSchema. This service method likely calls SchemaRepository.createSchema to perform the actual schema creation operation.",
          "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schema information in the database, corresponding to the SchemaInfo return type mentioned in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes returning a SchemaInfo object. The service and repository methods handle this, ultimately using SchemaInfoDAO to interact with the database.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 29,
          "artifact_title": "SchemaCli.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method likely provides a command-line interface for creating schemas, corresponding to the createSchema API endpoint described in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the createSchema endpoint, which is likely accessed through the command-line interface implemented by SchemaCli.createSchema.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createVolume API endpoint described in the documentation. It takes a CreateVolumeRequestContent parameter and returns a VolumeInfo object, matching the signature specified in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The API documentation directly describes the createVolume endpoint, which is implemented by the VolumeService.createVolume method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by VolumeService.createVolume to perform the actual creation of the volume in the repository. It takes a CreateVolumeRequestContent parameter and returns a VolumeInfo object, matching the types mentioned in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume endpoint, which is implemented by VolumeService.createVolume, which in turn likely calls VolumeRepository.createVolume to perform the actual data operations.",
          "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data access object for VolumeInfo, which is the return type specified in the API documentation. It's used to map between the database representation and the VolumeInfo object returned by the API.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation specifies VolumeInfo as the return type, which is likely implemented using VolumeInfoDAO in the data layer, accessed through the service and repository layers.",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 60,
          "artifact_title": "VolumeCli.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This method is part of the command-line interface that likely uses the createVolume API endpoint. It constructs a CreateVolumeRequestContent object from CLI arguments and calls the API to create a volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume endpoint, which is utilized by the VolumeCli.createVolume method to provide a command-line interface for volume creation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 2,
          "artifact_title": "CatalogCli.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the getCatalog functionality described in the API documentation. It takes a catalog name as a parameter and returns catalog information, matching the documented behavior.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogCli.getCatalog",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which would be implemented by the CatalogService, which would use the CatalogRepository to fetch data, and finally the CatalogCli would provide a command-line interface to this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getCatalog API endpoint described in the documentation. It takes a catalog name as a parameter and returns catalog information.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation directly describes the functionality that would be implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 8,
          "artifact_title": "CatalogRepository.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely used to retrieve the catalog information from the database or storage system. It supports the implementation of the getCatalog API functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be implemented by the CatalogService, which in turn would use the CatalogRepository to fetch the actual data.",
          "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for catalog information in the system. It would be used to store and retrieve catalog data, supporting the getCatalog functionality.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the catalog information returned, which would be implemented using the CatalogInfoDAO as the underlying data model, accessed through the repository and service layers.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 3,
          "artifact_title": "CatalogCli.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the listCatalogs functionality described in the API documentation. It takes optional maxResults and pageToken parameters, which directly correspond to the documented max_results and page_token parameters.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogCli.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which is likely implemented in CatalogService, then uses CatalogRepository for data access, and finally CatalogCli provides the command-line interface for this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This method likely implements the server-side logic for the listCatalogs API endpoint, handling the maxResults and pageToken parameters described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented in CatalogService, which then uses CatalogRepository for data access.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 9,
          "artifact_title": "CatalogRepository.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method likely handles the database query to retrieve the list of catalogs, implementing the pagination logic described in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, CatalogService implements it, and CatalogRepository handles the actual data retrieval and pagination.",
          "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for catalog information, which would be used to construct the ListCatalogsResponse mentioned in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogRepository.listCatalogs -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the response, CatalogRepository retrieves the data, and CatalogInfoDAO represents the individual catalog entries.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listVolumes functionality described in the documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and returns a ListVolumesResponseContent object as specified in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes the listVolumes endpoint, which is likely implemented by a VolumeService class that delegates to the VolumeRepository for data access.",
          "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "service layer",
          "relationship_explanation": "This method serves as the service layer implementation of the listVolumes API endpoint. It takes the same parameters as described in the documentation (catalogName, schemaName, maxResults, pageToken) and likely calls the VolumeRepository to fetch the data.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation directly maps to the VolumeService class, which would handle the HTTP request and delegate to the repository layer.",
          "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 63,
          "artifact_title": "VolumeCli.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method is a client-side implementation for listing volumes. It uses the same parameters (catalogName, schemaName, maxResults) as described in the API documentation, indicating it's designed to interact with the listVolumes endpoint.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeCli.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by the VolumeService, and the VolumeCli provides a command-line interface to interact with this service.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for volume information. While not explicitly mentioned in the documentation snippet, it's integral to the implementation of listing volumes as it defines the structure of the volume data returned by the API.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by the VolumeService and VolumeRepository. The VolumeRepository would use the VolumeInfoDAO to interact with the database and structure the returned data.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the generateTemporaryVolumeCredentials API endpoint described in the documentation. It handles the POST request to '/temporary-volume-credentials' and generates temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 27,
          "artifact_title": "GenerateTemporaryVolumeCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "input parameter",
          "relationship_explanation": "This class is explicitly mentioned in the documentation as the input parameter for the generateTemporaryVolumeCredentials method.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> GenerateTemporaryVolumeCredential",
          "predicted_trace_chain_explanation": "The documentation specifies GenerateTemporaryVolumeCredential as the input, which is then used in the service method implementation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 28,
          "artifact_title": "GenerateTemporaryVolumeCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "This class is explicitly mentioned in the documentation as the return type for the generateTemporaryVolumeCredentials method.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> GenerateTemporaryVolumeCredentialResponse",
          "predicted_trace_chain_explanation": "The documentation specifies GenerateTemporaryVolumeCredentialResponse as the return type, which is then used in the service method implementation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "The documentation directly describes the updateVolume operation, which is implemented by the VolumeService.updateVolume method. This method takes the same parameters (name and UpdateVolumeRequestContent) and returns a VolumeInfo object as specified in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation directly maps to the server-side implementation method.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "While not explicitly mentioned, the VolumeRepository.updateVolume method is likely called by the VolumeService to perform the actual update operation on the volume data.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The API call is handled by the VolumeService, which then uses the VolumeRepository to perform the actual data update.",
          "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The VolumeInfoDAO class is likely used to represent the volume data in the database. It's implicitly related as it would be used by the VolumeRepository to update the volume information.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The update operation ultimately modifies the VolumeInfoDAO object in the database.",
          "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 64,
          "artifact_title": "VolumeCli.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "The VolumeCli.updateVolume method is likely the client-side implementation that calls the updateVolume API. It's implicitly related as it would be used to invoke this API operation from a command-line interface.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The CLI method invokes the API, which is then handled by the VolumeService.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createTable API endpoint described in the documentation. It handles POST requests to '/tables' for creating a new table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The document describes the createTable API, which is directly implemented by the TableService.createTable method.",
          "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the deleteTable API endpoint described in the documentation. It handles DELETE requests to '/tables/{full_name}' for deleting a table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The document describes the deleteTable API, which is directly implemented by the TableService.deleteTable method.",
          "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the getTable API endpoint described in the documentation. It handles GET requests to '/tables/{full_name}' for retrieving table information.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The document describes the getTable API, which is directly implemented by the TableService.getTable method.",
          "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the listTables API endpoint described in the documentation. It handles GET requests to '/tables' for listing tables with optional pagination.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The document describes the listTables API, which is directly implemented by the TableService.listTables method.",
          "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.createTable to perform the actual table creation operation in the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The API documentation describes createTable, which is implemented in TableService, which in turn would use TableRepository to perform the actual creation.",
          "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.deleteTable to perform the actual table deletion operation in the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation describes deleteTable, which is implemented in TableService, which in turn would use TableRepository to perform the actual deletion.",
          "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.getTable to retrieve the actual table information from the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API documentation describes getTable, which is implemented in TableService, which in turn would use TableRepository to retrieve the table information.",
          "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.listTables to retrieve the list of tables from the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes listTables, which is implemented in TableService, which in turn would use TableRepository to retrieve the list of tables.",
          "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for table information, which is used in the responses of the API endpoints described in the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService -> TableRepository -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes operations on tables, which are implemented in TableService and TableRepository, which likely use TableInfoDAO as the underlying data model.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the generateTemporaryTableCredentials operation described in the API documentation. It takes a GenerateTemporaryTableCredential object as input and returns a GenerateTemporaryTableCredentialResponse, matching the API specification.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The API documentation directly describes the operation that is implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by checking if a table exists at a storage location, then either generating AWS S3 temporary credentials or returning empty credentials for local filesystems, matching the documented GenerateTemporaryTableCredentialResponse return type.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 27,
          "artifact_title": "GenerateTemporaryTableCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "input parameter",
          "relationship_explanation": "The API documentation explicitly mentions GenerateTemporaryTableCredential as the input parameter for the generateTemporaryTableCredentials operation.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredential -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The API doc specifies GenerateTemporaryTableCredential as input, which is then used by the service method to generate credentials.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 28,
          "artifact_title": "GenerateTemporaryTableCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "The API documentation explicitly states that GenerateTemporaryTableCredentialResponse is the return type for the generateTemporaryTableCredentials operation.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredentialResponse -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The API doc specifies GenerateTemporaryTableCredentialResponse as the return type, which is then produced by the service method.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "helper method",
          "relationship_explanation": "The generateTemporaryTableCredentials method likely uses TableRepository.getTable to retrieve table information needed for generating credentials.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "To generate temporary credentials for a table, the service needs to retrieve table information, which is likely done using the TableRepository.getTable method.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data access object",
          "relationship_explanation": "The TableInfoDAO is likely used indirectly when retrieving table information for generating credentials.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The service method uses TableRepository to get table info, which in turn uses TableInfoDAO to access the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 0,
          "artifact_title": "CatalogCli.createCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the createCatalog operation described in the API documentation. It handles the creation of a new catalog based on the provided JSON input.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogCli.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog operation, which would be implemented in the CatalogService, then use the CatalogRepository for persistence, and finally be exposed through the CLI interface in CatalogCli.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 1,
          "artifact_title": "CatalogCli.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the deleteCatalog operation described in the API documentation. It handles the deletion of a catalog based on the provided name and force flag.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog -> CatalogCli.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog operation, which would be implemented in the CatalogService, then use the CatalogRepository for persistence, and finally be exposed through the CLI interface in CatalogCli.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 2,
          "artifact_title": "CatalogCli.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the getCatalog operation described in the API documentation. It retrieves a catalog based on the provided name.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogCli.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog operation, which would be implemented in the CatalogService, then use the CatalogRepository for retrieval, and finally be exposed through the CLI interface in CatalogCli.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 3,
          "artifact_title": "CatalogCli.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the listCatalogs operation described in the API documentation. It retrieves a list of catalogs with optional pagination.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogCli.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs operation, which would be implemented in the CatalogService, then use the CatalogRepository for retrieval, and finally be exposed through the CLI interface in CatalogCli.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 4,
          "artifact_title": "CatalogCli.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the updateCatalog operation described in the API documentation. It updates a catalog based on the provided name and update information.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogCli.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog operation, which would be implemented in the CatalogService, then use the CatalogRepository for persistence, and finally be exposed through the CLI interface in CatalogCli.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createCatalog operation described in the API documentation. It handles the HTTP POST request to create a new catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog operation, which is directly implemented in the CatalogService.",
          "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the deleteCatalog operation described in the API documentation. It handles the HTTP DELETE request to remove a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog operation, which is directly implemented in the CatalogService.",
          "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getCatalog operation described in the API documentation. It handles the HTTP GET request to retrieve a specific catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog operation, which is directly implemented in the CatalogService.",
          "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listCatalogs operation described in the API documentation. It handles the HTTP GET request to list available catalogs with pagination support.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs operation, which is directly implemented in the CatalogService.",
          "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the updateCatalog operation described in the API documentation. It handles the HTTP PATCH request to update an existing catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog operation, which is directly implemented in the CatalogService.",
          "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.addCatalog",
          "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.listCatalogs",
          "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.updateCatalog",
          "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.deleteCatalog",
          "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the updateSchema operation described in the API documentation. It takes the full name of the schema and an UpdateSchema object as parameters, matching the API specification.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the updateSchema operation, which is likely implemented in the SchemaService class, which then delegates to the SchemaRepository for actual data manipulation.",
          "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "service layer",
          "relationship_explanation": "This service method likely handles the HTTP request for updating a schema, implementing the API endpoint described in the documentation. It would validate input and call the repository method.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by the SchemaService, acting as an intermediary between the HTTP layer and the repository layer.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This DAO (Data Access Object) likely represents the schema in the database and is used by the SchemaRepository to persist changes when updating a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The update operation ultimately modifies the schema data, which is likely represented by the SchemaInfoDAO in the database layer.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "helper method",
          "relationship_explanation": "This method is likely used within the updateSchema method to retrieve the existing schema before applying updates.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "Before updating a schema, the existing schema needs to be retrieved, which is likely done using the getSchema method of the SchemaRepository.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Class",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createTable API endpoint described in the documentation. It takes a CreateTable object as input and returns a TableInfo object, matching the API signature.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The documentation describes the createTable API endpoint, which is directly implemented by the TableService.createTable method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is likely called by TableService.createTable to perform the actual table creation in the repository. It takes a CreateTable object and returns a TableInfo object, matching the API signature.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by TableService.createTable, which likely delegates the actual table creation to TableRepository.createTable.",
          "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data access object for table information, which is likely used in the process of creating and returning table information.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The creation process likely involves creating or manipulating a TableInfoDAO object to persist the table information.",
          "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 45,
          "artifact_title": "TableCli.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method provides a command-line interface for creating tables, which likely uses the API endpoint described in the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.createTable",
          "predicted_trace_chain_explanation": "The CLI method provides a user interface for the createTable API endpoint described in the documentation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getTable functionality described in the documentation. It takes a full_name parameter and returns a TableInfo object, matching the API specification.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API documentation describes the getTable endpoint, which is likely implemented by a TableService class, which in turn would use the TableRepository to fetch the actual data.",
          "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "service layer",
          "relationship_explanation": "While not explicitly mentioned, this service method would typically handle the HTTP request for getting a table, validating input, and calling the repository method.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be handled by the TableService, which then uses the TableRepository to fetch the data.",
          "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This DAO (Data Access Object) is likely used internally by the TableRepository to map database records to TableInfo objects returned by the API.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the returned TableInfo, which is likely mapped from a TableInfoDAO object used in the data access layer.",
          "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 17,
          "artifact_title": "FunctionCli.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "CLI implementation",
          "relationship_explanation": "This method likely implements the CLI command for deleting a function, which corresponds to the documented API endpoint.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction -> FunctionCli.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction operation, which would be implemented in the FunctionService, then use the FunctionRepository for data access, and finally be exposed through the CLI via FunctionCli.deleteFunction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Data access implementation",
          "relationship_explanation": "This method likely implements the actual deletion of the function from the data store, corresponding to the documented API operation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction operation, which would be implemented in the FunctionService and then use the FunctionRepository for the actual data deletion.",
          "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Service implementation",
          "relationship_explanation": "This method directly implements the deleteFunction API operation described in the documentation, handling the HTTP DELETE request for deleting a function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation directly describes the deleteFunction operation, which is implemented in the FunctionService class.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "Data model",
          "relationship_explanation": "This class likely represents the data model for functions in the system, which would be involved in the deletion process.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes deleting a function, which would involve the FunctionService, use the FunctionRepository for data access, and ultimately interact with the FunctionInfoDAO data model.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createVolume API endpoint described in the documentation. It handles POST requests to '/volumes' to create a new volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The document describes the createVolume API, which is directly implemented by the VolumeService.createVolume method.",
          "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the deleteVolume API endpoint described in the documentation. It handles DELETE requests to '/volumes/{name}' to delete a specific volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The document outlines the deleteVolume API, which is directly implemented by the VolumeService.deleteVolume method.",
          "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the getVolume API endpoint described in the documentation. It handles GET requests to '/volumes/{name}' to retrieve information about a specific volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The document describes the getVolume API, which is directly implemented by the VolumeService.getVolume method.",
          "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the listVolumes API endpoint described in the documentation. It handles GET requests to '/volumes' to retrieve a list of available volumes.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The document outlines the listVolumes API, which is directly implemented by the VolumeService.listVolumes method.",
          "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the updateVolume API endpoint described in the documentation. It handles PATCH requests to '/volumes/{name}' to update the properties of a specific volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The document describes the updateVolume API, which is directly implemented by the VolumeService.updateVolume method.",
          "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method is likely called by VolumeService.createVolume to handle the actual creation of the volume in the data layer.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume endpoint, which is implemented by VolumeService.createVolume, which in turn likely uses VolumeRepository.createVolume for data persistence.",
          "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method is likely called by VolumeService.deleteVolume to handle the actual deletion of the volume in the data layer.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation outlines the deleteVolume endpoint, which is implemented by VolumeService.deleteVolume, which probably uses VolumeRepository.deleteVolume for data removal.",
          "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method is likely called by VolumeService.getVolume to retrieve the volume information from the data layer.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the getVolume endpoint, which is implemented by VolumeService.getVolume, which presumably uses VolumeRepository.getVolume to fetch the data.",
          "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method is likely called by VolumeService.listVolumes to retrieve the list of volumes from the data layer.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation outlines the listVolumes endpoint, which is implemented by VolumeService.listVolumes, which probably uses VolumeRepository.listVolumes to fetch the list of volumes.",
          "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method is likely called by VolumeService.updateVolume to handle the actual update of the volume properties in the data layer.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the updateVolume endpoint, which is implemented by VolumeService.updateVolume, which in turn likely uses VolumeRepository.updateVolume for data updates.",
          "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for volumes, which is used throughout the volume-related operations described in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService -> VolumeRepository -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes volume operations, which are implemented in VolumeService, which uses VolumeRepository, which in turn likely uses VolumeInfoDAO for data persistence and retrieval.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 0,
          "artifact_title": "CatalogCli.createCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the createCatalog functionality described in the API documentation. It takes a CreateCatalog object and returns a CatalogInfo object, matching the API specification.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogCli.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog endpoint, which would be implemented by the CatalogService, which in turn would use the CatalogRepository to persist the data, and finally the CatalogCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createCatalog API endpoint described in the documentation. It takes a CreateCatalog object and returns a HttpResponse containing a CatalogInfo object.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog endpoint, which is directly implemented by the CatalogService.createCatalog method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "data persistence",
          "relationship_explanation": "This method is likely called by CatalogService.createCatalog to persist the new catalog data. It takes a CreateCatalog object and returns a CatalogInfo object, matching the API specification.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog endpoint, which would be implemented by the CatalogService, which in turn would use the CatalogRepository to persist the catalog data.",
          "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for a catalog, corresponding to the CatalogInfo object returned by the API.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes returning a CatalogInfo object, which would be created from the CatalogInfoDAO in the data persistence layer.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the listTables API endpoint described in the documentation. It takes the same parameters (catalogName, schemaName, maxResults, pageToken) and returns a ListTablesResponse object.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The API documentation in TablesApi.md directly describes the listTables endpoint, which is implemented by the TableService.listTables method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by TableService.listTables to retrieve the actual table data from the repository. It handles the database interaction and pagination logic.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes the listTables endpoint, which is implemented by TableService.listTables. This service method then calls TableRepository.listTables to fetch the actual data.",
          "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 47,
          "artifact_title": "ListTablesResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "returns",
          "relationship_explanation": "The documentation explicitly states that the listTables endpoint returns a ListTablesResponse object.",
          "predicted_trace_chain": "TablesApi.md -> ListTablesResponse",
          "predicted_trace_chain_explanation": "The API documentation directly mentions ListTablesResponse as the return type for the listTables endpoint.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 48,
          "artifact_title": "TableCli.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This CLI method likely uses the listTables API endpoint to provide a command-line interface for listing tables. It handles parameter parsing and formatting the response for CLI output.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableCli.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes the listTables endpoint, which is implemented by TableService.listTables. The TableCli.listTables method likely uses this service to provide CLI functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the 'Generate temporary table credentials' functionality described in the API documentation. It matches the POST /temporary-table-credentials endpoint and takes a GenerateTemporaryTableCredential object as input, returning a GenerateTemporaryTableCredentialResponse.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the TemporaryTableCredentialsService.generateTemporaryTableCredentials method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "dependency",
          "relationship_explanation": "The generateTemporaryTableCredentials method likely depends on this to retrieve table information, specifically the storage location, which is necessary for generating temporary credentials.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API endpoint is implemented by TemporaryTableCredentialsService, which needs to get table information from TableRepository to generate the credentials.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the core functionality described in the updateCatalog API documentation. It handles updating a catalog based on the provided name and UpdateCatalog object.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog operation, which would be implemented in the CatalogService, which in turn calls the CatalogRepository to perform the actual update operation.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the service layer for the updateCatalog API operation, handling the HTTP request and response, and delegating to the CatalogRepository for data access.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation directly maps to the CatalogService method, which would handle the HTTP-specific aspects of the API call.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 4,
          "artifact_title": "CatalogCli.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "While not directly mentioned in the API documentation, this CLI method likely provides a command-line interface for updating catalogs, which would use the same underlying API.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogCli.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the operation that would be used by the CLI method to update catalogs through the command line interface.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data access object for catalog information, which would be used in the process of updating a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API operation would ultimately involve updating the catalog information in the database, which would be represented by this DAO class.",
          "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the createFunction API endpoint described in the documentation. It handles the POST request to create a new function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionCli.createFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented in the FunctionService, which uses the FunctionRepository, and ultimately calls the FunctionCli.createFunction method to handle the CLI interaction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 17,
          "artifact_title": "FunctionCli.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the deleteFunction API endpoint described in the documentation. It handles the DELETE request to remove an existing function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction -> FunctionCli.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented in the FunctionService, which uses the FunctionRepository, and ultimately calls the FunctionCli.deleteFunction method to handle the CLI interaction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 18,
          "artifact_title": "FunctionCli.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the getFunction API endpoint described in the documentation. It handles the GET request to retrieve information about a specific function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionCli.getFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented in the FunctionService, which uses the FunctionRepository, and ultimately calls the FunctionCli.getFunction method to handle the CLI interaction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 19,
          "artifact_title": "FunctionCli.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method implements the listFunctions API endpoint described in the documentation. It handles the GET request to list functions within a specified catalog and schema.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions -> FunctionCli.listFunctions",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is implemented in the FunctionService, which uses the FunctionRepository, and ultimately calls the FunctionCli.listFunctions method to handle the CLI interaction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method is the service-layer implementation of the createFunction API endpoint described in the documentation. It handles the business logic for creating a new function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented in the FunctionService.createFunction method.",
          "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method is the service-layer implementation of the deleteFunction API endpoint described in the documentation. It handles the business logic for deleting an existing function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented in the FunctionService.deleteFunction method.",
          "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method is the service-layer implementation of the getFunction API endpoint described in the documentation. It handles the business logic for retrieving information about a specific function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented in the FunctionService.getFunction method.",
          "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "Service Implementation",
          "relationship_explanation": "This method is the service-layer implementation of the listFunctions API endpoint described in the documentation. It handles the business logic for listing functions within a specified catalog and schema.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented in the FunctionService.listFunctions method.",
          "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access Object",
          "relationship_explanation": "This class likely represents the data structure for storing and retrieving function information, which is used in the implementation of the FunctionsApi endpoints.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService -> FunctionRepository -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The documentation describes API endpoints that deal with function information. The FunctionService and FunctionRepository likely use FunctionInfoDAO to persist and retrieve function data.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.deleteFunction",
          "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.getFunction",
          "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.createFunction",
          "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionRepository.listFunctions",
          "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the 'getVolume' API endpoint described in the documentation. It takes a 'fullName' parameter which corresponds to the 'name' parameter in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The API documentation directly describes the behavior implemented by the VolumeService.getVolume method.",
          "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by VolumeService.getVolume to retrieve the volume information from the database. It implements the data access logic for fetching a volume by its full name.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by VolumeService.getVolume, which in turn uses VolumeRepository.getVolume to fetch the data.",
          "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data model for a volume in the database. It is likely used by VolumeRepository.getVolume to map database records to VolumeInfo objects.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the volume data, which is fetched by VolumeService.getVolume using VolumeRepository.getVolume, which likely uses VolumeInfoDAO for data mapping.",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 62,
          "artifact_title": "VolumeCli.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "CLI implementation",
          "relationship_explanation": "This method implements the CLI command for getting a volume. It likely uses the same API endpoint described in the documentation, providing a command-line interface for the getVolume operation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the getVolume operation, which is implemented as a CLI command by VolumeCli.getVolume.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the deleteTable operation described in the API documentation. It takes a 'fullName' parameter and returns an HttpResponse, which aligns with the documentation's description of the deleteTable operation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation in TablesApi.md directly describes the deleteTable operation, which is implemented by the TableService.deleteTable method.",
          "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method is likely called by TableService.deleteTable to perform the actual deletion of the table from the repository. It takes parameters for session, schemaId, and tableName, which correspond to the full_name parameter in the API.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteTable operation, which is implemented in TableService.deleteTable. This service method likely calls TableRepository.deleteTable to perform the actual deletion in the data store.",
          "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 46,
          "artifact_title": "TableCli.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method implements the client-side CLI command for deleting a table. It takes a JSON object containing the full_name parameter and calls the deleteTable method of the TablesApi.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteTable operation, which is implemented as a CLI command in TableCli.deleteTable for client-side usage.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the 'getFunction' operation described in the API documentation. It retrieves a function based on its fully-qualified name, which matches the 'name' parameter in the API specification.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction operation, which would typically be implemented in a service layer (FunctionService) that then delegates to a repository layer (FunctionRepository) for data access.",
          "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "service layer",
          "relationship_explanation": "While not explicitly mentioned, this service method would typically handle the HTTP request described in the API documentation, validating the input and calling the repository layer.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which would be handled by the FunctionService, which then calls the FunctionRepository for data access.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for function information, which would be used to construct the FunctionInfo response object mentioned in the API documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation specifies a FunctionInfo return type, which would be constructed from the FunctionInfoDAO retrieved by the repository.",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createSchema API endpoint described in the documentation. It handles POST requests to '/schemas' to create a new schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The documentation describes the createSchema API endpoint, which is directly implemented by the SchemaService.createSchema method.",
          "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the deleteSchema API endpoint described in the documentation. It handles DELETE requests to '/schemas/{full_name}' to delete a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The documentation describes the deleteSchema API endpoint, which is directly implemented by the SchemaService.deleteSchema method.",
          "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the getSchema API endpoint described in the documentation. It handles GET requests to '/schemas/{full_name}' to retrieve a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The documentation describes the getSchema API endpoint, which is directly implemented by the SchemaService.getSchema method.",
          "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the listSchemas API endpoint described in the documentation. It handles GET requests to '/schemas' to list schemas in a catalog.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The documentation describes the listSchemas API endpoint, which is directly implemented by the SchemaService.listSchemas method.",
          "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the updateSchema API endpoint described in the documentation. It handles PATCH requests to '/schemas/{full_name}' to update a schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The documentation describes the updateSchema API endpoint, which is directly implemented by the SchemaService.updateSchema method.",
          "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "supporting implementation",
          "relationship_explanation": "This method is likely called by SchemaService.createSchema to perform the actual creation of the schema in the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the createSchema endpoint, which is implemented by SchemaService.createSchema. This service method likely delegates the actual schema creation to SchemaRepository.createSchema.",
          "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "supporting implementation",
          "relationship_explanation": "This method is likely called by SchemaService.deleteSchema to perform the actual deletion of the schema from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteSchema endpoint, which is implemented by SchemaService.deleteSchema. This service method likely delegates the actual schema deletion to SchemaRepository.deleteSchema.",
          "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "supporting implementation",
          "relationship_explanation": "This method is likely called by SchemaService.getSchema to retrieve the schema information from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the getSchema endpoint, which is implemented by SchemaService.getSchema. This service method likely delegates the actual schema retrieval to SchemaRepository.getSchema.",
          "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "supporting implementation",
          "relationship_explanation": "This method is likely called by SchemaService.listSchemas to retrieve the list of schemas from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation describes the listSchemas endpoint, which is implemented by SchemaService.listSchemas. This service method likely delegates the actual schema listing to SchemaRepository.listSchemas.",
          "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "supporting implementation",
          "relationship_explanation": "This method is likely called by SchemaService.updateSchema to perform the actual update of the schema in the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the updateSchema endpoint, which is implemented by SchemaService.updateSchema. This service method likely delegates the actual schema update to SchemaRepository.updateSchema.",
          "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schema information, which is used in the implementation of the schema-related operations described in the API documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService methods -> SchemaRepository methods -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes schema operations, which are implemented by SchemaService methods. These methods use SchemaRepository methods, which in turn likely use SchemaInfoDAO to interact with the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createFunction API endpoint described in the documentation. It handles the POST request to create a new function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The documentation describes the createFunction API, which is directly implemented by the FunctionService.createFunction method.",
          "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "helper",
          "relationship_explanation": "This method is likely called by FunctionService.createFunction to persist the new function in the database.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "The API documentation leads to the service method, which would use the repository method to create the function in the database.",
          "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the database model for storing function information, which is likely used in the process of creating a new function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API leads to the service, which uses the repository, which in turn uses the DAO to interact with the database.",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method implements the client-side CLI command for creating a function, which would interact with the createFunction API endpoint.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint that the CLI method would interact with to create a function.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteSchema operation described in the API documentation. It takes the same parameters (full_name and force) and is responsible for deleting the specified schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation in SchemasApi.md directly describes the deleteSchema operation, which is implemented by the SchemaService.deleteSchema method.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by SchemaService.deleteSchema to perform the actual deletion of the schema from the repository. It handles the logic of deleting the schema and its related entities.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteSchema operation, which is implemented in SchemaService.deleteSchema. This service method likely calls SchemaRepository.deleteSchema to perform the actual deletion in the data layer.",
          "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data access object for schema information. It is likely used in the process of deleting a schema, as it represents the schema entity in the database.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The deleteSchema operation described in the API is implemented through the service and repository layers, which ultimately interact with the SchemaInfoDAO to remove the schema from the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteVolume operation described in the API documentation. It takes a 'fullName' parameter which corresponds to the 'name' parameter in the documentation, described as 'The three-level (fully qualified) name of the volume'.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation in VolumesApi.md directly describes the deleteVolume operation, which is implemented by the VolumeService.deleteVolume method.",
          "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by VolumeService.deleteVolume to perform the actual deletion of the volume from the repository. It's not explicitly mentioned in the documentation but is a necessary part of the implementation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is implemented by VolumeService.deleteVolume. This service method would then call VolumeRepository.deleteVolume to perform the actual deletion in the data store.",
          "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for a volume in the system. While not explicitly mentioned in the documentation, it's implicitly involved in the deletion process as it represents the volume being deleted.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, implemented by VolumeService.deleteVolume, which calls VolumeRepository.deleteVolume. This repository method would interact with the VolumeInfoDAO to remove the volume from the data store.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 61,
          "artifact_title": "VolumeCli.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "cli implementation",
          "relationship_explanation": "This method likely implements the CLI command for deleting a volume. While not explicitly mentioned in the API documentation, it's implicitly related as it provides a command-line interface for the deleteVolume operation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is implemented for CLI use by VolumeCli.deleteVolume. This provides a command-line interface for the operation described in the API.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 1,
          "artifact_title": "CatalogCli.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteCatalog operation described in the API documentation. It takes the catalog name and force parameter as inputs, matching the documented parameters.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation directly describes the deleteCatalog operation, which is implemented by the CatalogCli.deleteCatalog method.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the core logic for deleting a catalog, including the force deletion functionality mentioned in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the operation, CatalogCli.deleteCatalog handles the CLI interface, and CatalogRepository.deleteCatalog likely implements the actual deletion logic.",
          "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This service method likely handles the HTTP request for deleting a catalog, as described in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the HTTP endpoint, CatalogService.deleteCatalog handles the request, and delegates to CatalogRepository.deleteCatalog for the actual deletion.",
          "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for catalogs in the system, which would be involved in the deletion process.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The deletion process described in the API would ultimately involve removing or updating records represented by CatalogInfoDAO.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the 'generateTemporaryVolumeCredentials' API endpoint described in the documentation. It takes a GenerateTemporaryVolumeCredential object as input and returns a GenerateTemporaryVolumeCredentialResponse, matching the documentation's description.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the TemporaryVolumeCredentialsService class in the server code.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 30,
          "artifact_title": "GenerateTemporaryVolumeCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "input parameter",
          "relationship_explanation": "This class is explicitly mentioned in the documentation as the input parameter for the generateTemporaryVolumeCredentials method.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> GenerateTemporaryVolumeCredential -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The documentation specifies GenerateTemporaryVolumeCredential as the input, which is then used in the service implementation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 31,
          "artifact_title": "GenerateTemporaryVolumeCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "This class is explicitly mentioned in the documentation as the return type for the generateTemporaryVolumeCredentials method.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> GenerateTemporaryVolumeCredentialResponse -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The documentation specifies GenerateTemporaryVolumeCredentialResponse as the return type, which is then used in the service implementation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "dependency",
          "relationship_explanation": "The TemporaryVolumeCredentialsService likely uses this method to retrieve volume information based on the provided volumeId.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The service implementation needs to get volume information to generate credentials, which is likely done using the VolumeRepository.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the volume information in the database, which is used to generate temporary credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.getVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The VolumeInfoDAO is the data model used by the VolumeRepository to retrieve volume information needed for generating credentials.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getSchema operation described in the API documentation. It takes a 'full_name' parameter and returns a SchemaInfo object, matching the documentation exactly.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The API documentation in SchemasApi.md directly describes the getSchema operation, which is implemented by the SchemaService.getSchema method.",
          "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called_by_implementation",
          "relationship_explanation": "While not explicitly mentioned, this method is likely called by SchemaService.getSchema to retrieve the schema information from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the getSchema operation, which is implemented by SchemaService.getSchema. This service method likely calls SchemaRepository.getSchema to fetch the actual schema data.",
          "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data_model",
          "relationship_explanation": "This class likely represents the database model for schema information, which is used to store and retrieve schema data mentioned in the API documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the schema information returned, which is implemented through the service and repository layers, ultimately using SchemaInfoDAO to interact with the database.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The SchemaService.listSchemas method directly implements the listSchemas API endpoint described in the documentation. It takes the same parameters (catalogName, maxResults, pageToken) and returns a ListSchemasResponse object.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The documentation in SchemasApi.md directly describes the listSchemas endpoint, which is implemented by the SchemaService.listSchemas method.",
          "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "The SchemaRepository.listSchemas method is likely called by SchemaService.listSchemas to retrieve the actual schema data. It takes the same parameters and returns a ListSchemasResponse object.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation describes the listSchemas endpoint, which is implemented by SchemaService.listSchemas. This service method likely calls SchemaRepository.listSchemas to fetch the actual data.",
          "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The SchemaInfoDAO class likely represents the data model for schemas in the database. It's used by SchemaRepository.listSchemas to fetch and return schema information.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the schema data returned, which is fetched by SchemaRepository.listSchemas, likely using the SchemaInfoDAO to represent the schema data from the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        }
      ]
    },
    {
      "dataset": "unity_catalog",
      "run_id": 5,
      "timestamp": "2025-01-15T14:00:31.684138",
      "results": [
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "Implementation",
          "relationship_explanation": "This method directly implements the API endpoint described in the documentation for generating temporary volume credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The API documentation directly describes the endpoint that is implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Access",
          "relationship_explanation": "This DAO is likely used to retrieve volume information when generating temporary credentials, as the API requires a volume ID.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The service method needs to access volume information to generate credentials, which is likely done through this DAO.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "Data Retrieval",
          "relationship_explanation": "This method is likely used to retrieve the volume information based on the provided volume ID when generating temporary credentials.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The service method needs to get volume details, which is likely done through this repository method.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteVolume operation described in the API documentation. It takes a 'fullName' parameter, which corresponds to the 'name' parameter in the documentation, representing the three-level fully qualified name of the volume to be deleted.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation directly describes the deleteVolume operation, which is implemented by the VolumeService.deleteVolume method.",
          "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is likely called by VolumeService.deleteVolume to perform the actual deletion of the volume from the repository. It handles the low-level details of removing the volume data.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is implemented by VolumeService.deleteVolume, which in turn likely calls VolumeRepository.deleteVolume to perform the actual deletion.",
          "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data model for a volume in the system. While not explicitly mentioned in the documentation snippet, it is likely used internally by the deleteVolume operation to identify and remove the volume data from the persistence layer.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The deleteVolume operation described in the API is implemented by VolumeService.deleteVolume, which uses VolumeRepository.deleteVolume to perform the deletion, which in turn likely interacts with VolumeInfoDAO to remove the volume data from the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 61,
          "artifact_title": "VolumeCli.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "cli implementation",
          "relationship_explanation": "This method implements the command-line interface for the deleteVolume operation. While not directly mentioned in the API documentation, it provides a CLI wrapper for the same functionality, allowing users to delete volumes through a command-line tool.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteVolume operation, which is also implemented in the CLI through VolumeCli.deleteVolume, providing an alternative interface for the same functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the generateTemporaryTableCredentials operation described in the API documentation. It takes a GenerateTemporaryTableCredential object as input and returns a GenerateTemporaryTableCredentialResponse, matching the signature specified in the documentation.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The document describes the API endpoint, which is directly implemented by the TemporaryTableCredentialsService class in the server code.",
          "ground_truth_relationship": "The code implements the documented API endpoint by checking if a table exists at a storage location, then either generating AWS S3 temporary credentials or returning empty credentials for local filesystems, matching the documented GenerateTemporaryTableCredentialResponse return type.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "dependency",
          "relationship_explanation": "The generateTemporaryTableCredentials method likely uses the TableRepository to retrieve table information, specifically the storage location, which is necessary for generating temporary credentials.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API endpoint requires table information to generate credentials, which necessitates retrieving table data from the TableRepository.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The TableInfoDAO class likely represents the data model for table information, including the storage location, which is used in the process of generating temporary credentials.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials -> TableRepository.getTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The TableRepository uses TableInfoDAO to represent table data, which is necessary for retrieving the storage location used in generating credentials.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 4,
          "artifact_title": "CatalogCli.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the updateCatalog operation described in the API documentation. It handles the client-side logic for updating a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogCli.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog operation, which would be implemented by the CatalogService, then handled by the CatalogRepository for data persistence, and finally exposed through the CLI for user interaction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 10,
          "artifact_title": "CatalogRepository.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method likely handles the database operations for updating a catalog, as described in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog operation, which would be implemented by the CatalogService and then delegated to the CatalogRepository for actual data manipulation.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the updateCatalog operation described in the API documentation. It handles the HTTP PATCH request for updating a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation directly describes the updateCatalog operation, which is implemented by the CatalogService.updateCatalog method.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for a catalog in the database, which would be updated during the updateCatalog operation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes updating a catalog, which would involve the CatalogService, then the CatalogRepository, and ultimately affect the CatalogInfoDAO representing the catalog in the database.",
          "ground_truth_relationship": "The CatalogInfoDAO class supports the updateCatalog endpoint by providing the data persistence layer and mapping functions (from/toCatalogInfo) that convert between the API's CatalogInfo model and the database entity representation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 0,
          "artifact_title": "CatalogCli.createCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the createCatalog operation described in the API documentation. It handles the creation of a new catalog based on the provided JSON input.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogCli.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog operation, which would be implemented in the CatalogService, then use the CatalogRepository for persistence, and finally be exposed through the CLI interface in CatalogCli.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 1,
          "artifact_title": "CatalogCli.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the deleteCatalog operation described in the API documentation. It handles the deletion of a catalog based on the provided name and force flag.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog -> CatalogCli.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog operation, which would be implemented in the CatalogService, then use the CatalogRepository for persistence, and finally be exposed through the CLI interface in CatalogCli.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 2,
          "artifact_title": "CatalogCli.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the getCatalog operation described in the API documentation. It retrieves a catalog based on the provided name.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogCli.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog operation, which would be implemented in the CatalogService, then use the CatalogRepository for retrieval, and finally be exposed through the CLI interface in CatalogCli.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 3,
          "artifact_title": "CatalogCli.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the listCatalogs operation described in the API documentation. It retrieves a list of catalogs with optional pagination.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogCli.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs operation, which would be implemented in the CatalogService, then use the CatalogRepository for retrieval, and finally be exposed through the CLI interface in CatalogCli.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 4,
          "artifact_title": "CatalogCli.updateCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method likely implements the updateCatalog operation described in the API documentation. It updates a catalog based on the provided name and update information.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog -> CatalogCli.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog operation, which would be implemented in the CatalogService, then use the CatalogRepository for persistence, and finally be exposed through the CLI interface in CatalogCli.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createCatalog operation described in the API documentation. It handles the HTTP POST request to create a new catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog operation, which is directly implemented in the CatalogService as an HTTP POST endpoint.",
          "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the deleteCatalog operation described in the API documentation. It handles the HTTP DELETE request to remove a catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog operation, which is directly implemented in the CatalogService as an HTTP DELETE endpoint.",
          "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getCatalog operation described in the API documentation. It handles the HTTP GET request to retrieve a specific catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog operation, which is directly implemented in the CatalogService as an HTTP GET endpoint.",
          "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listCatalogs operation described in the API documentation. It handles the HTTP GET request to list all catalogs with optional pagination.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs operation, which is directly implemented in the CatalogService as an HTTP GET endpoint.",
          "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 15,
          "artifact_title": "CatalogService.updateCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the updateCatalog operation described in the API documentation. It handles the HTTP PATCH request to update an existing catalog.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the updateCatalog operation, which is directly implemented in the CatalogService as an HTTP PATCH endpoint.",
          "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.addCatalog",
          "ground_truth_relationship": "The CatalogRepository.addCatalog method implements the backend persistence logic for the POST /catalogs API endpoint, handling the creation of a new catalog with validation, transaction management, and database persistence of the catalog metadata and its properties.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.listCatalogs",
          "ground_truth_relationship": "The CatalogRepository.listCatalogs method implements the GET /catalogs endpoint by providing paginated retrieval of catalog information from the database, with support for maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.updateCatalog",
          "ground_truth_relationship": "The CatalogRepository.updateCatalog method implements the PATCH /catalogs/{name} endpoint by handling catalog updates including name changes, comments, and properties while managing database transactions and validation.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.updateCatalog -> CatalogRepository.updateCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.getCatalog",
          "ground_truth_relationship": "The getCatalogDAO method implements the database query layer for the GET /catalogs/{name} API endpoint by retrieving a single CatalogInfoDAO record matching the specified catalog name from the database session.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_title": "CatalogRepository.deleteCatalog",
          "ground_truth_relationship": "The deleteCatalog method implements the DELETE /catalogs/{name} API endpoint by handling catalog deletion with schema cleanup, supporting forced deletion via a boolean parameter, and providing appropriate error responses for non-existent catalogs or catalogs with schemas.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 2,
          "artifact_title": "CatalogCli.getCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getCatalog functionality described in the API documentation. It takes a catalog name as input and returns the catalog information.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogCli.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the getCatalog endpoint, which would be implemented in the CatalogService. The service would use the CatalogRepository to fetch the data, and the CatalogCli provides a command-line interface to this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 13,
          "artifact_title": "CatalogService.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This method likely implements the server-side logic for the getCatalog API endpoint, processing the request and returning the CatalogInfo.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented in the CatalogService. The service would use the CatalogRepository to fetch the actual data.",
          "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 8,
          "artifact_title": "CatalogRepository.getCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely responsible for retrieving the CatalogInfo from the data store based on the provided catalog name.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented in the CatalogService. The service uses the CatalogRepository to fetch the actual data from the storage.",
          "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for catalog information, which is used to store and retrieve catalog data.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.getCatalog -> CatalogRepository.getCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the returned CatalogInfo. The CatalogService and CatalogRepository would use the CatalogInfoDAO to interact with the database and map the data to the CatalogInfo model.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the createVolume API endpoint described in the documentation. It takes a CreateVolumeRequestContent parameter and returns a VolumeInfo object, matching the documented signature.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The API documentation directly describes the createVolume endpoint, which is implemented by the VolumeService.createVolume method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "supporting implementation",
          "relationship_explanation": "This method is likely called by VolumeService.createVolume to handle the actual creation of the volume in the repository. It takes a CreateVolumeRequestContent parameter and returns a VolumeInfo object, matching the API signature.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume endpoint, which is implemented by VolumeService.createVolume, which in turn likely uses VolumeRepository.createVolume for the actual data persistence.",
          "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class represents the data access object for volume information. It's likely used within the VolumeRepository to persist and retrieve volume data, supporting the createVolume operation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation leads to the service implementation, which uses the repository, which in turn likely uses the VolumeInfoDAO for data persistence.",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and mapping functionality for the createVolume API endpoint by defining the database schema and conversion methods between the API's VolumeInfo model and the database representation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 60,
          "artifact_title": "VolumeCli.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method implements the client-side CLI command for creating a volume, which corresponds to the createVolume API endpoint described in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the createVolume endpoint, which is implemented on the client side by the VolumeCli.createVolume method for CLI interactions.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 58,
          "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the 'Generate temporary table credentials' functionality described in the API documentation. It matches the HTTP POST method and '/temporary-table-credentials' endpoint mentioned.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The document describes the API endpoint, which is directly implemented by the generateTemporaryTableCredentials method in the TemporaryTableCredentialsService class.",
          "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
          "ground_truth_trace_chain": "TemporaryTableCredentialsApi.md -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 26,
          "artifact_title": "GenerateTemporaryTableCredential",
          "predicted_relationship": "explicit",
          "relationship_type": "input parameter",
          "relationship_explanation": "This class is explicitly mentioned as the input parameter for the generateTemporaryTableCredentials operation in the API documentation.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredential -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The document specifies GenerateTemporaryTableCredential as the input, which is then used by the service method to process the request.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
          "document_location": "api/Apis/TemporaryTableCredentialsApi.md",
          "artifact_id": 27,
          "artifact_title": "GenerateTemporaryTableCredentialResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "This class is explicitly mentioned as the return type for the generateTemporaryTableCredentials operation in the API documentation.",
          "predicted_trace_chain": "TemporaryTableCredentialsApi.md -> GenerateTemporaryTableCredentialResponse -> TemporaryTableCredentialsService.generateTemporaryTableCredentials",
          "predicted_trace_chain_explanation": "The document specifies GenerateTemporaryTableCredentialResponse as the return type, which is then used by the service method to structure the response.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 3,
          "artifact_title": "CatalogCli.listCatalogs",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the listCatalogs functionality described in the API documentation. It takes the same parameters (max_results and page_token) and returns a list of catalogs.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs -> CatalogCli.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which is likely implemented in the CatalogService, which then uses the CatalogRepository for data access, and finally the CatalogCli provides a command-line interface for this functionality.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listCatalogs endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 9,
          "artifact_title": "CatalogRepository.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely responsible for retrieving the catalog data from the database, applying pagination and max results constraints as specified in the API documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation describes the listCatalogs endpoint, which is likely implemented in the CatalogService, which then uses the CatalogRepository for actual data retrieval and pagination handling.",
          "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs -> CatalogRepository.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 14,
          "artifact_title": "CatalogService.listCatalogs",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This service method likely implements the business logic for listing catalogs, handling the API parameters and returning the response as described in the documentation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "predicted_trace_chain_explanation": "The API documentation directly describes the functionality that would be implemented in the CatalogService.listCatalogs method.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.listCatalogs",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the updateSchema functionality described in the API documentation. It takes the full_name and UpdateSchema parameters mentioned in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the updateSchema endpoint, which is likely implemented by a service layer (SchemaService) that then delegates to the repository layer (SchemaRepository) for data access and business logic.",
          "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This service method likely implements the API endpoint described in the documentation, handling the HTTP PATCH request and delegating to the repository layer.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is typically implemented in a service layer that handles HTTP requests before delegating to the repository layer for data access.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schema information, which is returned as SchemaInfo in the API documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API returns SchemaInfo, which is likely mapped from a DAO (Data Access Object) in the repository layer.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and object mapping functionality needed to support the updateSchema API endpoint by managing schema metadata in the database and converting between SchemaInfo API objects and database entities.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the createFunction API endpoint described in the documentation. It handles the POST request to create a new function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionCli.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which is likely implemented in the FunctionService, which then uses the FunctionRepository to persist the data, and finally the FunctionCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 17,
          "artifact_title": "FunctionCli.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the deleteFunction API endpoint described in the documentation. It handles the DELETE request to remove an existing function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction -> FunctionCli.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction endpoint, which is likely implemented in the FunctionService, which then uses the FunctionRepository to remove the data, and finally the FunctionCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 18,
          "artifact_title": "FunctionCli.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the getFunction API endpoint described in the documentation. It handles the GET request to retrieve information about a specific function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionCli.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction endpoint, which is likely implemented in the FunctionService, which then uses the FunctionRepository to fetch the data, and finally the FunctionCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 19,
          "artifact_title": "FunctionCli.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method implements the listFunctions API endpoint described in the documentation. It handles the GET request to list functions within a specified catalog and schema.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions -> FunctionCli.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is likely implemented in the FunctionService, which then uses the FunctionRepository to fetch the list of functions, and finally the FunctionCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This method is likely the service-layer implementation of the createFunction API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which is directly implemented in the FunctionService class.",
          "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This method is likely the service-layer implementation of the deleteFunction API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction endpoint, which is directly implemented in the FunctionService class.",
          "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 27,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This method is likely the service-layer implementation of the getFunction API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction endpoint, which is directly implemented in the FunctionService class.",
          "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 28,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "service implementation",
          "relationship_explanation": "This method is likely the service-layer implementation of the listFunctions API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is directly implemented in the FunctionService class.",
          "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "data persistence",
          "relationship_explanation": "This method is likely responsible for persisting the new function data when the createFunction API is called.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which is implemented in the FunctionService, which then uses the FunctionRepository to persist the function data.",
          "ground_truth_relationship": "This code implements the experimental POST /functions endpoint by creating a new function with extensive metadata including UUID, name, catalog, schema, and parameters, while validating uniqueness and schema existence in the database.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "data persistence",
          "relationship_explanation": "This method is likely responsible for removing the function data when the deleteFunction API is called.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction endpoint, which is implemented in the FunctionService, which then uses the FunctionRepository to remove the function data.",
          "ground_truth_relationship": "The FunctionRepository.deleteFunction method implements the DELETE /functions/{name} API endpoint by validating a three-part function name (catalog.schema.function), checking for schema existence, and permanently removing the function from the database within a transaction.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 23,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "data retrieval",
          "relationship_explanation": "This method is likely responsible for retrieving the function data when the getFunction API is called.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction endpoint, which is implemented in the FunctionService, which then uses the FunctionRepository to fetch the function data.",
          "ground_truth_relationship": "The FunctionRepository.getFunction method implements the backend logic for the GET /functions/{name} API endpoint by retrieving a function's details from the database based on its fully qualified name split into catalog, schema, and function components.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "data retrieval",
          "relationship_explanation": "This method is likely responsible for retrieving the list of functions when the listFunctions API is called.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is implemented in the FunctionService, which then uses the FunctionRepository to fetch the list of functions.",
          "ground_truth_relationship": "The FunctionRepository.listFunctions code implements the backend logic for the GET /functions API endpoint, handling pagination through maxResults and pageToken parameters while retrieving function metadata from a database session and transforming it into the API response format.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for function information, which is used in the various function-related operations described in the API documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService -> FunctionRepository -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes function operations, which are implemented in the FunctionService, which uses the FunctionRepository to interact with the database, and the FunctionInfoDAO represents the data model for functions.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 71,
          "artifact_title": "VolumeService.createVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the createVolume API endpoint described in the documentation. It handles POST requests to '/volumes' to create a new volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "predicted_trace_chain_explanation": "The document describes the createVolume API, which is directly implemented by the VolumeService.createVolume method.",
          "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 72,
          "artifact_title": "VolumeService.deleteVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the deleteVolume API endpoint described in the documentation. It handles DELETE requests to '/volumes/{name}' to delete a specific volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "predicted_trace_chain_explanation": "The document describes the deleteVolume API, which is directly implemented by the VolumeService.deleteVolume method.",
          "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the getVolume API endpoint described in the documentation. It handles GET requests to '/volumes/{name}' to retrieve information about a specific volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The document describes the getVolume API, which is directly implemented by the VolumeService.getVolume method.",
          "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the listVolumes API endpoint described in the documentation. It handles GET requests to '/volumes' to list available volumes under a parent catalog and schema.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The document describes the listVolumes API, which is directly implemented by the VolumeService.listVolumes method.",
          "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the updateVolume API endpoint described in the documentation. It handles PATCH requests to '/volumes/{name}' to update the specified volume.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The document describes the updateVolume API, which is directly implemented by the VolumeService.updateVolume method.",
          "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 66,
          "artifact_title": "VolumeRepository.createVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is likely called by VolumeService.createVolume to perform the actual creation of a volume in the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "predicted_trace_chain_explanation": "The document describes the createVolume API, which is implemented by VolumeService.createVolume, which in turn likely calls VolumeRepository.createVolume to perform the actual creation.",
          "ground_truth_relationship": "The VolumeRepository.createVolume method implements the POST /volumes API endpoint by validating the request, creating a new volume record with generated UUID and metadata, and persisting it to the database while enforcing schema existence and volume uniqueness constraints.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.createVolume -> VolumeRepository.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 67,
          "artifact_title": "VolumeRepository.deleteVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is likely called by VolumeService.deleteVolume to perform the actual deletion of a volume from the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "predicted_trace_chain_explanation": "The document describes the deleteVolume API, which is implemented by VolumeService.deleteVolume, which in turn likely calls VolumeRepository.deleteVolume to perform the actual deletion.",
          "ground_truth_relationship": "The deleteVolume method in VolumeRepository implements the DELETE /volumes/{name} API endpoint by parsing the three-part volume name (catalog.schema.volume), validating the schema exists, and removing both the volume's metadata from the database and its storage directory if it's a managed volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.deleteVolume -> VolumeRepository.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is likely called by VolumeService.getVolume to retrieve the actual volume information from the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The document describes the getVolume API, which is implemented by VolumeService.getVolume, which in turn likely calls VolumeRepository.getVolume to retrieve the actual volume information.",
          "ground_truth_relationship": "The VolumeRepository.getVolume method implements the GET /volumes/{name} endpoint by parsing a three-part volume name (catalog.schema.volume), retrieving the volume data from a database session, and returning a VolumeInfo object that represents the requested volume.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is likely called by VolumeService.listVolumes to retrieve the list of volumes from the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The document describes the listVolumes API, which is implemented by VolumeService.listVolumes, which in turn likely calls VolumeRepository.listVolumes to retrieve the actual list of volumes.",
          "ground_truth_relationship": "The listVolumes method implements the GET /volumes API endpoint by querying the database for volumes within a specified schema, supporting pagination through maxResults and pageToken parameters, and returning the results as a ListVolumesResponseContent object.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method is likely called by VolumeService.updateVolume to perform the actual update of a volume in the repository.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The document describes the updateVolume API, which is implemented by VolumeService.updateVolume, which in turn likely calls VolumeRepository.updateVolume to perform the actual update.",
          "ground_truth_relationship": "The VolumeRepository.updateVolume method implements the PATCH /volumes/{name} API endpoint by validating input parameters, managing database transactions, and performing volume updates including name and comment changes while handling potential conflicts and exceptions.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for volumes, which is used in the implementation of the Volume API endpoints.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService -> VolumeRepository -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The document describes Volume APIs, which are implemented by VolumeService, which uses VolumeRepository, which in turn likely uses VolumeInfoDAO as the data model for volumes.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.getVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.deleteVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.deleteVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.updateVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.createVolume",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.createVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_title": "VolumeCli.listVolumes",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The SchemaRepository.createSchema method directly implements the createSchema operation described in the API documentation. It takes a CreateSchema object as input and returns a SchemaInfo object, matching the API specification.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The API documentation defines the createSchema operation, which is implemented by the SchemaService.createSchema method, which in turn calls SchemaRepository.createSchema to perform the actual schema creation.",
          "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The SchemaService.createSchema method directly implements the HTTP POST endpoint for creating a schema as described in the API documentation. It takes a CreateSchema object as input and returns an HttpResponse containing a SchemaInfo object.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The API documentation defines the createSchema operation, which is directly implemented by the SchemaService.createSchema method in the server code.",
          "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The SchemaInfoDAO class is implicitly related to the createSchema operation as it likely represents the data model for storing schema information in the database, which is created during the schema creation process.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation defines the createSchema operation, implemented by SchemaService and SchemaRepository, which likely use SchemaInfoDAO to persist the schema data.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence layer and conversion methods (from/toSchemaInfo) that enable storing and retrieving the SchemaInfo objects that are returned by the documented createSchema API endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 29,
          "artifact_title": "SchemaCli.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "The SchemaCli.createSchema method is implicitly related to the createSchema operation as it likely provides a command-line interface for creating schemas, implementing the client-side of the API call.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "predicted_trace_chain_explanation": "The API documentation defines the createSchema operation, which is implemented on the client-side by the SchemaCli.createSchema method for command-line usage.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 18,
          "artifact_title": "FunctionService.listFunctions",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listFunctions API endpoint described in the documentation. It takes the same parameters (catalog_name, schema_name, max_results, page_token) and returns a ListFunctionsResponse object as specified in the API description.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation directly describes the listFunctions endpoint, which is implemented by the FunctionService.listFunctions method.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 24,
          "artifact_title": "FunctionRepository.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "data retrieval",
          "relationship_explanation": "This method is likely called by FunctionService.listFunctions to retrieve the actual function data from the repository. It handles the pagination and filtering logic described in the API documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is implemented by FunctionService.listFunctions. This service method likely delegates the actual data retrieval to FunctionRepository.listFunctions.",
          "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for function information. It's used to store and retrieve function data that is returned in the ListFunctionsResponse.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.listFunctions -> FunctionRepository.listFunctions -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the function data returned, which is implemented in FunctionService.listFunctions, retrieved by FunctionRepository.listFunctions, and represented in the database by FunctionInfoDAO.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 19,
          "artifact_title": "FunctionCli.listFunctions",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method provides a command-line interface for calling the listFunctions API. It takes similar parameters and likely makes a call to the server endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "predicted_trace_chain_explanation": "The API documentation describes the listFunctions endpoint, which is accessed through the command-line interface implemented by FunctionCli.listFunctions.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listFunctions endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.listFunctions",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "The documentation describes the 'createTable' API endpoint, which is directly implemented by the TableService.createTable method. This method handles the HTTP POST request to create a new table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The API documentation directly describes the functionality implemented by TableService.createTable.",
          "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "backend implementation",
          "relationship_explanation": "While not explicitly mentioned in the documentation, TableRepository.createTable is likely called by TableService.createTable to perform the actual table creation in the database.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The API documentation describes the functionality, which is implemented in TableService.createTable, which in turn likely uses TableRepository.createTable for database operations.",
          "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 23,
          "artifact_title": "CreateTable",
          "predicted_relationship": "explicit",
          "relationship_type": "input model",
          "relationship_explanation": "The documentation explicitly mentions CreateTable as the input parameter for the createTable operation.",
          "predicted_trace_chain": "TablesApi.md -> CreateTable",
          "predicted_trace_chain_explanation": "The API documentation directly references the CreateTable model as the input for the operation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 33,
          "artifact_title": "TableInfo",
          "predicted_relationship": "explicit",
          "relationship_type": "return model",
          "relationship_explanation": "The documentation explicitly states that TableInfo is the return type for the createTable operation.",
          "predicted_trace_chain": "TablesApi.md -> TableInfo",
          "predicted_trace_chain_explanation": "The API documentation directly references the TableInfo model as the return type for the operation.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data access object",
          "relationship_explanation": "While not explicitly mentioned, TableInfoDAO is likely used to persist and retrieve table information in the database as part of the table creation process.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API functionality is implemented through TableService and TableRepository, which likely use TableInfoDAO for database operations.",
          "ground_truth_relationship": "The TableInfoDAO class provides the persistence layer mapping and conversion logic for the TableInfo objects returned by the documented createTable API endpoint, handling the storage and retrieval of table metadata in the 'uc_tables' database table.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getSchema functionality described in the documentation. It takes a full name parameter and returns a SchemaInfo object, matching the API specification.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which would be implemented by a service layer (SchemaService), which in turn would use the repository layer (SchemaRepository) to fetch the data.",
          "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "service layer",
          "relationship_explanation": "While not explicitly mentioned, this service method would typically be used to handle the API request, delegating to the repository layer for data retrieval.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The API documentation implies a service layer that would handle the request before delegating to the repository layer for data access.",
          "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the database model for schema information, which would be used by the repository layer to fetch and return schema data.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The SchemaInfo returned by the API would be constructed from data fetched using the SchemaInfoDAO in the repository layer.",
          "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 1,
          "artifact_title": "CatalogCli.deleteCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the deleteCatalog functionality described in the API documentation. It takes the catalog name and force parameter, matching the API specification.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog -> CatalogCli.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteCatalog operation, which would be implemented in the CatalogService, then use the CatalogRepository for data access, and finally be exposed through the CatalogCli for command-line interaction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 7,
          "artifact_title": "CatalogRepository.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method likely handles the actual deletion of the catalog from the data store, including the force deletion logic mentioned in the API.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the operation, which would be implemented in the CatalogService and then use the CatalogRepository for the actual data manipulation.",
          "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 12,
          "artifact_title": "CatalogService.deleteCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "service layer",
          "relationship_explanation": "This service method would coordinate the deletion process, including parameter validation and calling the repository layer.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "predicted_trace_chain_explanation": "The API documentation directly maps to a service layer method that would implement the described functionality.",
          "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for a catalog, which would be involved in the deletion process.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.deleteCatalog -> CatalogRepository.deleteCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The deletion operation would ultimately affect the data represented by CatalogInfoDAO, going through the service and repository layers.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 54,
          "artifact_title": "TableService.createTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the createTable API endpoint described in the documentation. It handles POST requests to '/tables' for creating a new table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable",
          "predicted_trace_chain_explanation": "The document describes the createTable API, which is directly implemented by the TableService.createTable method.",
          "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the deleteTable API endpoint described in the documentation. It handles DELETE requests to '/tables/{full_name}' for deleting a table.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The document describes the deleteTable API, which is directly implemented by the TableService.deleteTable method.",
          "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the getTable API endpoint described in the documentation. It handles GET requests to '/tables/{full_name}' for retrieving table information.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The document describes the getTable API, which is directly implemented by the TableService.getTable method.",
          "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the listTables API endpoint described in the documentation. It handles GET requests to '/tables' for listing tables with optional parameters.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The document describes the listTables API, which is directly implemented by the TableService.listTables method.",
          "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 50,
          "artifact_title": "TableRepository.createTable",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method is likely called by TableService.createTable to perform the actual table creation in the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "predicted_trace_chain_explanation": "The API documentation describes table creation, which is implemented in TableService and likely uses TableRepository for the actual creation logic.",
          "ground_truth_relationship": "The TableRepository.createTable method implements the backend logic for the experimental POST /tables API endpoint, handling table creation with validations for SQL object names, schema existence, and storage location requirements while preventing creation of managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.createTable -> TableRepository.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method is likely called by TableService.deleteTable to perform the actual table deletion in the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation describes table deletion, which is implemented in TableService and likely uses TableRepository for the actual deletion logic.",
          "ground_truth_relationship": "The deleteTable method implements the DELETE /tables/{full_name} API endpoint's backend logic by removing the table's metadata from the session, cleaning up associated properties, and deleting the physical directory for managed tables.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method is likely called by TableService.getTable to retrieve the actual table information from the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API documentation describes retrieving table information, which is implemented in TableService and likely uses TableRepository to fetch the data.",
          "ground_truth_relationship": "The TableRepository.getTable method implements the backend database logic for the GET /tables/{full_name} API endpoint, retrieving a table's details from the database by parsing the full_name parameter into catalog, schema and table components and returning a TableInfo object with attached properties.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "supports",
          "relationship_explanation": "This method is likely called by TableService.listTables to retrieve the list of tables from the repository.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes listing tables, which is implemented in TableService and likely uses TableRepository to fetch the list of tables.",
          "ground_truth_relationship": "The TableRepository.listTables code implements the GET /tables REST API endpoint by querying tables from a database session, applying pagination through maxResults and pageToken parameters, and returning a ListTablesResponse containing table information with optional properties and columns.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for table information, which is used in the responses of the API endpoints described in the documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService -> TableRepository -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes operations on tables, which are implemented through the service and repository layers, ultimately using TableInfoDAO to represent table data.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.deleteTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.createTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.createTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.listTables",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 74,
          "artifact_title": "VolumeService.listVolumes",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the listVolumes API operation described in the documentation. It takes the same parameters (catalog_name, schema_name, max_results, page_token) and returns a ListVolumesResponseContent object as specified in the API documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation in VolumesApi.md directly describes the listVolumes operation, which is implemented by the VolumeService.listVolumes method.",
          "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by VolumeService.listVolumes to retrieve the actual volume data from the repository. It handles the business logic of listing volumes based on the provided parameters.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes the listVolumes operation, which is implemented by VolumeService.listVolumes. This service method then calls VolumeRepository.listVolumes to fetch the actual data.",
          "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for volumes in the database. It's used by VolumeRepository.listVolumes to map database records to VolumeInfo objects that are returned in the ListVolumesResponseContent.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.listVolumes -> VolumeRepository.listVolumes -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the listVolumes operation, implemented by VolumeService.listVolumes, which calls VolumeRepository.listVolumes. This repository method uses VolumeInfoDAO to map database records to VolumeInfo objects.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 63,
          "artifact_title": "VolumeCli.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This method likely provides a command-line interface for the listVolumes operation. It calls the VolumesApi to list volumes, parsing the JSON input and formatting the output for CLI users.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes -> VolumeService.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes the listVolumes operation. VolumeCli.listVolumes provides a CLI interface for this operation, which ultimately calls VolumeService.listVolumes to perform the actual listing.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.listVolumes",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 59,
          "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the generateTemporaryVolumeCredentials API endpoint described in the documentation. It takes a GenerateTemporaryVolumeCredential object as input and returns a GenerateTemporaryVolumeCredentialResponse, matching the API specification.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "predicted_trace_chain_explanation": "The documentation describes the API endpoint, which is directly implemented by the generateTemporaryVolumeCredentials method in the TemporaryVolumeCredentialsService class.",
          "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
          "ground_truth_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "The VolumeInfoDAO is likely used within the generateTemporaryVolumeCredentials method to retrieve volume information based on the provided volume ID. This is necessary to access the storage location of the volume.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes generating credentials for a volume. The service method implements this functionality, which likely requires retrieving volume information using the VolumeInfoDAO.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
          "document_location": "api/Apis/TemporaryVolumeCredentialsApi.md",
          "artifact_id": 69,
          "artifact_title": "VolumeRepository.listVolumes",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "The VolumeRepository.listVolumes method might be used indirectly to retrieve the volume information needed for generating temporary credentials. It's part of the data access layer that the service would rely on.",
          "predicted_trace_chain": "TemporaryVolumeCredentialsApi.md -> TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials -> VolumeRepository.listVolumes",
          "predicted_trace_chain_explanation": "The API documentation describes an operation on volumes. The service method implements this, likely using the VolumeRepository to access volume data, which includes the listVolumes method as part of its interface.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 56,
          "artifact_title": "TableService.getTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "The document describes a 'getTable' operation that takes a 'full_name' parameter and returns a TableInfo object. This directly corresponds to the TableService.getTable method implementation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable",
          "predicted_trace_chain_explanation": "The API documentation in TablesApi.md directly describes the getTable operation, which is implemented by the TableService.getTable method.",
          "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 52,
          "artifact_title": "TableRepository.getTable",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "While not explicitly mentioned, the TableRepository.getTable method is likely called by TableService.getTable to retrieve the table information from the database.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "predicted_trace_chain_explanation": "The API documentation describes the getTable operation, which is implemented in TableService.getTable. This service method likely uses TableRepository.getTable to access the underlying data.",
          "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 49,
          "artifact_title": "TableInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The TableInfoDAO class is likely used to represent the table data in the database, which is then converted to the TableInfo object returned by the getTable operation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.getTable -> TableRepository.getTable -> TableInfoDAO",
          "predicted_trace_chain_explanation": "The API describes returning a TableInfo object. The service and repository layers handle this request, likely using TableInfoDAO as the database representation before converting to TableInfo.",
          "ground_truth_relationship": "The TableInfoDAO class provides the data persistence layer and model conversion methods that enable the documented getTable API endpoint to retrieve and return table information in the expected TableInfo format.",
          "ground_truth_trace_chain": "TablesApi.md -> TableInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_title": "TableCli.getTable",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.getTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 17,
          "artifact_title": "FunctionCli.deleteFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteFunction operation described in the API documentation. It takes a function name as input and calls the API to delete the function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "predicted_trace_chain_explanation": "The documentation describes the deleteFunction API, which is directly implemented by the FunctionCli.deleteFunction method.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionRepository.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the backend logic for deleting a function, which is called by the API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction operation, which would be routed through a service layer (FunctionService) before calling the repository method to perform the actual deletion.",
          "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction -> FunctionRepository.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 26,
          "artifact_title": "FunctionService.deleteFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This service method likely implements the API endpoint for deleting a function, acting as an intermediary between the API controller and the repository.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteFunction operation, which would be directly implemented by the corresponding method in the FunctionService.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.deleteFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 57,
          "artifact_title": "TableService.listTables",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the listTables API endpoint described in the documentation. It takes the same parameters (catalog_name, schema_name, max_results, page_token) and returns a ListTablesResponse object.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables",
          "predicted_trace_chain_explanation": "The API documentation in TablesApi.md directly describes the listTables endpoint, which is implemented by the TableService.listTables method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 53,
          "artifact_title": "TableRepository.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "This method is likely called by TableService.listTables to retrieve the actual table data from the repository. It handles the database interaction and pagination logic described in the API documentation.",
          "predicted_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "predicted_trace_chain_explanation": "The API documentation describes the listTables endpoint, which is implemented by TableService.listTables. This service method likely delegates the actual data retrieval to TableRepository.listTables.",
          "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.listTables -> TableRepository.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 48,
          "artifact_title": "TableCli.listTables",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "This method implements the client-side logic for calling the listTables API endpoint. It takes similar parameters and handles the API response, suggesting it's the CLI implementation of the documented API.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.listTables",
          "predicted_trace_chain_explanation": "The API documentation in TablesApi.md describes the listTables endpoint, which is directly used by the TableCli.listTables method to provide CLI functionality for listing tables.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.listTables",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 47,
          "artifact_title": "ListTablesResponse",
          "predicted_relationship": "explicit",
          "relationship_type": "return type",
          "relationship_explanation": "The documentation explicitly mentions ListTablesResponse as the return type for the listTables API endpoint.",
          "predicted_trace_chain": "TablesApi.md -> ListTablesResponse",
          "predicted_trace_chain_explanation": "The API documentation directly references ListTablesResponse as the return type for the listTables endpoint.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 16,
          "artifact_title": "FunctionCli.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "CLI implementation",
          "relationship_explanation": "This method implements the CLI command for creating a function, which is directly related to the documented API endpoint for creating a function.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionCli.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which is implemented in the FunctionService, which uses the FunctionRepository, and is exposed through the CLI via FunctionCli.createFunction.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 21,
          "artifact_title": "FunctionRepository.createFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "Data persistence",
          "relationship_explanation": "This method handles the persistence of the function data, which is necessary to fulfill the create function API request.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the createFunction endpoint, which is implemented in the FunctionService, which then uses the FunctionRepository to persist the function data.",
          "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 25,
          "artifact_title": "FunctionService.createFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "Direct implementation",
          "relationship_explanation": "This method is the direct implementation of the createFunction API endpoint described in the documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "predicted_trace_chain_explanation": "The API documentation directly describes the createFunction endpoint, which is implemented in the FunctionService.",
          "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.createFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "Data model",
          "relationship_explanation": "This class represents the data model for a function, which is used in the creation process described in the API documentation.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.createFunction -> FunctionRepository.createFunction -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes creating a function, which is implemented through the service and repository, ultimately using the FunctionInfoDAO to represent the function data.",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the database persistence layer and object mapping functionality that enables the createFunction API endpoint to store and retrieve function metadata in the uc_functions table, converting between the API's FunctionInfo model and its database representation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 40,
          "artifact_title": "SchemaService.createSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createSchema API endpoint described in the documentation. It handles POST requests to '/schemas' to create a new schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "predicted_trace_chain_explanation": "The documentation describes the createSchema API, which is directly implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the deleteSchema API endpoint. It handles DELETE requests to '/schemas/{full_name}' to delete a specified schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The documentation outlines the deleteSchema API, which is directly implemented by this service method.",
          "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 42,
          "artifact_title": "SchemaService.getSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the getSchema API endpoint. It handles GET requests to '/schemas/{full_name}' to retrieve information about a specific schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "predicted_trace_chain_explanation": "The documentation describes the getSchema API, which is directly implemented by this service method.",
          "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the listSchemas API endpoint. It handles GET requests to '/schemas' to list schemas in a catalog.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The documentation outlines the listSchemas API, which is directly implemented by this service method.",
          "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 44,
          "artifact_title": "SchemaService.updateSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method implements the updateSchema API endpoint. It handles PATCH requests to '/schemas/{full_name}' to update a specified schema.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "predicted_trace_chain_explanation": "The documentation describes the updateSchema API, which is directly implemented by this service method.",
          "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 35,
          "artifact_title": "SchemaRepository.createSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by SchemaService.createSchema to perform the actual creation of a schema in the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "predicted_trace_chain_explanation": "The API documentation leads to the service method, which would typically call the repository method to perform the actual schema creation.",
          "ground_truth_relationship": "The SchemaRepository.createSchema method implements the backend logic for the POST /schemas endpoint by validating the schema name, checking for duplicates, creating a new SchemaInfo object with a UUID, persisting it to the database within a transaction, and returning the created schema details.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.createSchema -> SchemaRepository.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by SchemaService.deleteSchema to perform the actual deletion of a schema from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation leads to the service method, which would typically call the repository method to perform the actual schema deletion.",
          "ground_truth_relationship": "The SchemaRepository.deleteSchema method implements the DELETE /schemas/{full_name} API endpoint by handling schema deletion logic, including processing child tables, volumes, and functions, and removing associated properties from the database session.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by SchemaService.getSchema to retrieve schema information from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "predicted_trace_chain_explanation": "The API documentation leads to the service method, which would typically call the repository method to fetch the schema information.",
          "ground_truth_relationship": "The SchemaRepository.getSchema method implements the GET /schemas/{full_name} API endpoint by retrieving schema information from a database, converting it from DAO format, and attaching properties while managing database transactions.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.getSchema -> SchemaRepository.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by SchemaService.listSchemas to retrieve the list of schemas from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation leads to the service method, which would typically call the repository method to fetch the list of schemas.",
          "ground_truth_relationship": "The code implements the GET /schemas endpoint by retrieving schemas from a database session, supporting pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing schema information and a next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 39,
          "artifact_title": "SchemaRepository.updateSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by SchemaService.updateSchema to perform the actual update of a schema in the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "predicted_trace_chain_explanation": "The API documentation leads to the service method, which would typically call the repository method to perform the actual schema update.",
          "ground_truth_relationship": "The SchemaRepository.updateSchema method implements the PATCH /schemas/{full_name} API endpoint by handling the validation, modification, and persistence of schema updates including name changes, comments, and properties within a database transaction.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.updateSchema -> SchemaRepository.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schema information, which is used in the schema-related operations described in the API.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService methods -> SchemaRepository methods -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API operations lead to service methods, which use repository methods, which in turn likely use this DAO for database operations related to schemas.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.updateSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.updateSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.deleteSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.listSchemas",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.getSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.getSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_title": "SchemaCli.createSchema",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.createSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 75,
          "artifact_title": "VolumeService.updateVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "The documentation directly describes the updateVolume operation, which is implemented by the VolumeService.updateVolume method. The method signature matches the documented parameters (fullName and UpdateVolumeRequestContent) and return type (VolumeInfo).",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation directly describes the updateVolume operation, which is implemented by the VolumeService.updateVolume method.",
          "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 70,
          "artifact_title": "VolumeRepository.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "called by implementation",
          "relationship_explanation": "While not explicitly mentioned in the documentation, the VolumeRepository.updateVolume method is likely called by VolumeService.updateVolume to perform the actual update operation on the volume data.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the updateVolume operation, which is implemented by VolumeService.updateVolume. This service method likely calls VolumeRepository.updateVolume to perform the actual data update.",
          "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The VolumeInfoDAO class represents the data model for volumes in the database. It is likely used within the VolumeRepository.updateVolume method to persist the updated volume information.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.updateVolume -> VolumeRepository.updateVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The updateVolume operation described in the API is implemented by VolumeService.updateVolume, which calls VolumeRepository.updateVolume. This repository method likely uses VolumeInfoDAO to interact with the database.",
          "ground_truth_relationship": "The VolumeInfoDAO class implements the data persistence layer for volumes, with fields and conversion methods that match the VolumeInfo structure referenced in the updateVolume API documentation, particularly supporting the comment and name fields that are marked as updatable in the documentation.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 64,
          "artifact_title": "VolumeCli.updateVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "The VolumeCli.updateVolume method is likely a client-side implementation that calls the updateVolume API endpoint described in the documentation. It handles parsing user input and making the API request.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume -> VolumeService.updateVolume",
          "predicted_trace_chain_explanation": "The API documentation describes the updateVolume operation. VolumeCli.updateVolume is a client-side method that likely calls this API endpoint, which is then handled by VolumeService.updateVolume on the server side.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented updateVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.updateVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 41,
          "artifact_title": "SchemaService.deleteSchema",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the deleteSchema operation described in the API documentation. It takes the same parameters (full_name and force) and performs the schema deletion.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The documentation in SchemasApi.md directly describes the deleteSchema operation, which is implemented by the SchemaService.deleteSchema method.",
          "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 36,
          "artifact_title": "SchemaRepository.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by SchemaService.deleteSchema to perform the actual deletion of the schema from the repository.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in SchemaService.deleteSchema, which in turn calls SchemaRepository.deleteSchema to perform the actual deletion.",
          "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 37,
          "artifact_title": "SchemaRepository.getSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "potentially called",
          "relationship_explanation": "This method might be called before deletion to verify the schema exists or to retrieve its details.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.getSchema -> SchemaRepository.deleteSchema",
          "predicted_trace_chain_explanation": "The deletion process might first check if the schema exists or retrieve its details before proceeding with deletion, hence the potential call to getSchema before deleteSchema.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for a schema, which would be involved in the deletion process.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.deleteSchema -> SchemaRepository.deleteSchema -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The deletion operation described in the API would ultimately involve removing or updating records represented by SchemaInfoDAO in the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 30,
          "artifact_title": "SchemaCli.deleteSchema",
          "predicted_relationship": "implicit",
          "relationship_type": "CLI implementation",
          "relationship_explanation": "This method likely implements the CLI command for deleting a schema, which would use the same API described in the documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema -> SchemaService.deleteSchema",
          "predicted_trace_chain_explanation": "The API documentation describes the operation that would be invoked by the CLI command implemented in SchemaCli.deleteSchema, which would then call the service method.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteSchema endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.deleteSchema",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 22,
          "artifact_title": "FunctionService.getFunction",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "This method directly implements the getFunction operation described in the API documentation. It takes a 'fullName' parameter which corresponds to the 'name' parameter in the API, and returns a FunctionInfo object as specified in the API return type.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The API documentation describes the getFunction operation, which is implemented by FunctionService.getFunction. This method likely calls FunctionRepository.getFunction to retrieve the actual function data from the repository.",
          "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 23,
          "artifact_title": "FunctionRepository.getFunction",
          "predicted_relationship": "implicit",
          "relationship_type": "data_access",
          "relationship_explanation": "While not explicitly mentioned in the API documentation, this method is likely called by FunctionService.getFunction to retrieve the function data from the repository. It would take the fully-qualified function name as a parameter and return the FunctionInfo object.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "predicted_trace_chain_explanation": "The API documentation leads to the FunctionService implementation, which would then use the FunctionRepository to access the actual function data.",
          "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_id": 20,
          "artifact_title": "FunctionInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data_model",
          "relationship_explanation": "This class likely represents the data access object for function information. It's not explicitly mentioned in the API documentation, but it's probably used internally to map between the database representation and the FunctionInfo object returned by the API.",
          "predicted_trace_chain": "FunctionsApi.md -> FunctionService.getFunction -> FunctionRepository.getFunction -> FunctionInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the operation, which is implemented in FunctionService, which uses FunctionRepository to access data, which in turn likely uses FunctionInfoDAO for database mapping.",
          "ground_truth_relationship": "The FunctionInfoDAO class provides the data persistence layer that enables the documented getFunction endpoint by mapping database records to FunctionInfo objects through JPA annotations and conversion methods toFunctionInfo() and from().",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/FunctionsApi.md",
          "artifact_title": "FunctionCli.getFunction",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getFunction endpoint.",
          "ground_truth_trace_chain": "FunctionsApi.md -> FunctionCli.getFunction",
          "traceability_granularity": "Method",
          "confusion_metrics": "False Negative",
          "predicted_relationship": null,
          "relationship_type": null,
          "relationship_explanation": null,
          "predicted_trace_chain": null,
          "predicted_trace_chain_explanation": null,
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false,
            "missed_by_llm": true
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 43,
          "artifact_title": "SchemaService.listSchemas",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the listSchemas API endpoint described in the documentation. It takes the same parameters (catalogName, maxResults, pageToken) and returns a ListSchemasResponse as specified.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "predicted_trace_chain_explanation": "The documentation in SchemasApi.md directly describes the API endpoint, which is implemented by the SchemaService.listSchemas method.",
          "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 38,
          "artifact_title": "SchemaRepository.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "called by",
          "relationship_explanation": "This method is likely called by SchemaService.listSchemas to retrieve the actual schema data from the repository. It takes the same parameters and returns a ListSchemasResponse.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is implemented by SchemaService.listSchemas, which in turn calls SchemaRepository.listSchemas to fetch the actual data.",
          "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 34,
          "artifact_title": "SchemaInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for schemas in the database. It's used to store and retrieve schema information, which is then converted to the SchemaInfo objects returned in the ListSchemasResponse.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaService.listSchemas -> SchemaRepository.listSchemas -> SchemaInfoDAO",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, implemented by SchemaService.listSchemas, which calls SchemaRepository.listSchemas, which in turn uses SchemaInfoDAO to interact with the database.",
          "ground_truth_relationship": null,
          "ground_truth_trace_chain": null,
          "traceability_granularity": "Method",
          "confusion_metrics": "False Positive",
          "prediction_details": {
            "matches_ground_truth": false,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/SchemasApi.md",
          "artifact_id": 32,
          "artifact_title": "SchemaCli.listSchemas",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "This method is part of the command-line interface and likely uses the listSchemas API endpoint to retrieve and display schema information. It takes similar parameters (catalogName, maxResults) as described in the API documentation.",
          "predicted_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "predicted_trace_chain_explanation": "The API documentation describes the endpoint, which is used by the SchemaCli.listSchemas method to provide CLI functionality for listing schemas.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
          "ground_truth_trace_chain": "SchemasApi.md -> SchemaCli.listSchemas",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 0,
          "artifact_title": "CatalogCli.createCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the createCatalog operation described in the API documentation. It takes a CreateCatalog object and returns a CatalogInfo object, matching the documented parameters and return type.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogCli.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog operation, which would be implemented by the CatalogService, which likely uses CatalogRepository to persist the data, and finally CatalogCli provides a command-line interface for this operation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented createCatalog endpoint.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogCli.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 11,
          "artifact_title": "CatalogService.createCatalog",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method directly implements the createCatalog operation described in the API documentation. It takes a CreateCatalog object and returns a CatalogInfo object, matching the documented parameters and return type.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog operation, which is directly implemented by the CatalogService.createCatalog method.",
          "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 6,
          "artifact_title": "CatalogRepository.addCatalog",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "This method likely implements the data persistence logic for creating a new catalog. It takes a CreateCatalog object and returns a CatalogInfo object, matching the documented parameters and return type.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "predicted_trace_chain_explanation": "The API documentation describes the createCatalog operation, which would be implemented by the CatalogService, which in turn likely uses CatalogRepository.addCatalog to persist the data.",
          "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
          "document_location": "api/Apis/CatalogsApi.md",
          "artifact_id": 5,
          "artifact_title": "CatalogInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "This class likely represents the data model for a catalog in the database. It's used to persist and retrieve catalog information, which is central to the createCatalog operation.",
          "predicted_trace_chain": "CatalogsApi.md -> CatalogService.createCatalog -> CatalogRepository.addCatalog -> CatalogInfoDAO",
          "predicted_trace_chain_explanation": "The createCatalog operation described in the API would ultimately result in the creation of a CatalogInfoDAO object to represent the catalog in the database.",
          "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented createCatalog API endpoint, with methods to convert between the DAO and API model representations.",
          "ground_truth_trace_chain": "CatalogsApi.md -> CatalogInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 55,
          "artifact_title": "TableService.deleteTable",
          "predicted_relationship": "explicit",
          "relationship_type": "implements",
          "relationship_explanation": "The TableService.deleteTable method directly implements the deleteTable operation described in the API documentation. It takes a 'fullName' parameter and returns an HttpResponse, which matches the API specification.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation in TablesApi.md directly describes the deleteTable operation, which is implemented by the TableService.deleteTable method.",
          "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 51,
          "artifact_title": "TableRepository.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "implements",
          "relationship_explanation": "The TableRepository.deleteTable method is likely called by TableService.deleteTable to perform the actual deletion of the table from the repository. It takes a session, schemaId, and tableName as parameters, which are derived from the full_name parameter in the API.",
          "predicted_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteTable operation, which is implemented in TableService.deleteTable. This service method likely calls TableRepository.deleteTable to perform the actual deletion in the database.",
          "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
          "ground_truth_trace_chain": "TablesApi.md -> TableService.deleteTable -> TableRepository.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/TablesApi.md",
          "artifact_id": 46,
          "artifact_title": "TableCli.deleteTable",
          "predicted_relationship": "implicit",
          "relationship_type": "uses",
          "relationship_explanation": "The TableCli.deleteTable method is a command-line interface that likely uses the deleteTable API. It takes a TablesApi instance and a JSONObject containing the full_name parameter, which matches the API specification.",
          "predicted_trace_chain": "TablesApi.md -> TableCli.deleteTable -> TableService.deleteTable",
          "predicted_trace_chain_explanation": "The API documentation describes the deleteTable operation, which is used by the TableCli.deleteTable method to provide a command-line interface for deleting tables. This CLI method likely calls the TableService.deleteTable method indirectly through the TablesApi.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
          "ground_truth_trace_chain": "TablesApi.md -> TableCli.deleteTable",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 73,
          "artifact_title": "VolumeService.getVolume",
          "predicted_relationship": "explicit",
          "relationship_type": "implementation",
          "relationship_explanation": "The documentation directly describes the 'getVolume' operation, which is implemented by the VolumeService.getVolume method. The method signature matches the described operation, taking a 'fullName' parameter that corresponds to the 'name' parameter in the documentation.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "predicted_trace_chain_explanation": "The documentation in VolumesApi.md directly describes the getVolume operation, which is implemented by the VolumeService.getVolume method.",
          "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 68,
          "artifact_title": "VolumeRepository.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "data access",
          "relationship_explanation": "The VolumeRepository.getVolume method is likely called by VolumeService.getVolume to retrieve the volume information from the data store. It matches the operation described in the documentation by taking a full name parameter and returning VolumeInfo.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "predicted_trace_chain_explanation": "The documentation describes the getVolume operation, which is implemented by VolumeService.getVolume. This service method likely calls VolumeRepository.getVolume to access the data store and retrieve the volume information.",
          "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 65,
          "artifact_title": "VolumeInfoDAO",
          "predicted_relationship": "implicit",
          "relationship_type": "data model",
          "relationship_explanation": "The VolumeInfoDAO class represents the data model for volumes in the system. It is likely used by VolumeRepository.getVolume to map database records to the VolumeInfo object returned by the API.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeService.getVolume -> VolumeRepository.getVolume -> VolumeInfoDAO",
          "predicted_trace_chain_explanation": "The documentation describes the getVolume operation, implemented by VolumeService.getVolume, which uses VolumeRepository.getVolume to access data. VolumeInfoDAO is the data model used to represent volume information in the database.",
          "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeInfoDAO",
          "traceability_granularity": "Class",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        },
        {
          "sent_document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
          "document_location": "api/Apis/VolumesApi.md",
          "artifact_id": 62,
          "artifact_title": "VolumeCli.getVolume",
          "predicted_relationship": "implicit",
          "relationship_type": "client implementation",
          "relationship_explanation": "The VolumeCli.getVolume method is a client-side implementation that likely calls the getVolume API described in the documentation. It takes a JSON object containing the volume name and returns the volume information.",
          "predicted_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "predicted_trace_chain_explanation": "The documentation describes the getVolume API, which is consumed by the VolumeCli.getVolume method in the client implementation.",
          "ground_truth_relationship": "The code implements a CLI wrapper for the documented getVolume endpoint.",
          "ground_truth_trace_chain": "VolumesApi.md -> VolumeCli.getVolume",
          "traceability_granularity": "Method",
          "confusion_metrics": "True Positive",
          "prediction_details": {
            "matches_ground_truth": true,
            "relationship_match": false
          }
        }
      ]
    }
  ]
}