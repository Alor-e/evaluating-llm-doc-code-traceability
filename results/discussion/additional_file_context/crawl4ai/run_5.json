{
  "dataset": "crawl4ai",
  "run_id": 5,
  "timestamp": "2025-01-15T15:50:24.294168",
  "results": [
    {
      "sent_document_text": "## Wait Conditions\n\n### CSS-Based Waiting\n\nWait for elements to appear:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:.dynamic-content\"  # Wait for element with class 'dynamic-content'\n)\n```\n\n### JavaScript-Based Waiting\n\nWait for custom conditions:\n\n```python\n# Wait for number of elements\nwait_condition = \"\"\"() => {\n    return document.querySelectorAll('.item').length > 10;\n}\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=f\"js:{wait_condition}\"\n)\n\n# Wait for dynamic content to load\nwait_for_content = \"\"\"() => {\n    const content = document.querySelector('.content');\n    return content && content.innerText.length > 100;\n}\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=f\"js:{wait_for_content}\"\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The documentation directly demonstrates usage of the 'arun()' method of AsyncWebCrawler class, showing how to use wait conditions with CSS and JavaScript-based waiting.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document describes page interaction techniques, which are implemented through the AsyncWebCrawler class, specifically using its arun() method to execute the crawl with various waiting conditions.",
      "ground_truth_relationship": "The arun() method implements waiting functionality through its **kwargs parameter, which accepts the 'wait_for' conditions documented in both CSS and JavaScript formats to control when crawling proceeds.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Wait Conditions\n\n### CSS-Based Waiting\n\nWait for elements to appear:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:.dynamic-content\"  # Wait for element with class 'dynamic-content'\n)\n```\n\n### JavaScript-Based Waiting\n\nWait for custom conditions:\n\n```python\n# Wait for number of elements\nwait_condition = \"\"\"() => {\n    return document.querySelectorAll('.item').length > 10;\n}\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=f\"js:{wait_condition}\"\n)\n\n# Wait for dynamic content to load\nwait_for_content = \"\"\"() => {\n    const content = document.querySelector('.content');\n    return content && content.innerText.length > 100;\n}\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=f\"js:{wait_for_content}\"\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementation",
      "relationship_explanation": "While not explicitly mentioned, the AsyncPlaywrightCrawlerStrategy is likely responsible for implementing the wait conditions and JavaScript execution described in the documentation.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The document describes page interaction techniques that are likely implemented by the AsyncPlaywrightCrawlerStrategy, which is used by AsyncWebCrawler to perform the actual crawling operations.",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy implements the documented wait conditions through its smart_wait method, which handles both CSS-based waiting using page.wait_for_selector and JavaScript-based waiting using page.evaluate for custom conditions.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Wait Conditions\n\n### CSS-Based Waiting\n\nWait for elements to appear:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:.dynamic-content\"  # Wait for element with class 'dynamic-content'\n)\n```\n\n### JavaScript-Based Waiting\n\nWait for custom conditions:\n\n```python\n# Wait for number of elements\nwait_condition = \"\"\"() => {\n    return document.querySelectorAll('.item').length > 10;\n}\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=f\"js:{wait_condition}\"\n)\n\n# Wait for dynamic content to load\nwait_for_content = \"\"\"() => {\n    const content = document.querySelector('.content');\n    return content && content.innerText.length > 100;\n}\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=f\"js:{wait_for_content}\"\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 0,
      "artifact_title": "AsyncCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "interface",
      "relationship_explanation": "As the base class for AsyncPlaywrightCrawlerStrategy, it defines the interface for crawler strategies that implement waiting and JavaScript execution capabilities.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncCrawlerStrategy",
      "predicted_trace_chain_explanation": "The document describes features that are implemented by AsyncPlaywrightCrawlerStrategy, which inherits from AsyncCrawlerStrategy, defining the general interface for these capabilities.",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the base interface that enables waiting functionality through its crawl method's **kwargs parameter, which can accept the wait_for conditions described in the documentation.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Wait Conditions\n\n### CSS-Based Waiting\n\nWait for elements to appear:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:.dynamic-content\"  # Wait for element with class 'dynamic-content'\n)\n```\n\n### JavaScript-Based Waiting\n\nWait for custom conditions:\n\n```python\n# Wait for number of elements\nwait_condition = \"\"\"() => {\n    return document.querySelectorAll('.item').length > 10;\n}\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=f\"js:{wait_condition}\"\n)\n\n# Wait for dynamic content to load\nwait_for_content = \"\"\"() => {\n    const content = document.querySelector('.content');\n    return content && content.innerText.length > 100;\n}\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=f\"js:{wait_for_content}\"\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class stores the data collected after waiting for dynamic content to load using the documented CSS and JavaScript wait conditions, including the final HTML, extracted content, and success status.",
      "ground_truth_trace_chain": "page-interaction.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Wait Conditions\n\n### CSS-Based Waiting\n\nWait for elements to appear:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:.dynamic-content\"  # Wait for element with class 'dynamic-content'\n)\n```\n\n### JavaScript-Based Waiting\n\nWait for custom conditions:\n\n```python\n# Wait for number of elements\nwait_condition = \"\"\"() => {\n    return document.querySelectorAll('.item').length > 10;\n}\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=f\"js:{wait_condition}\"\n)\n\n# Wait for dynamic content to load\nwait_for_content = \"\"\"() => {\n    const content = document.querySelector('.content');\n    return content && content.innerText.length > 100;\n}\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=f\"js:{wait_for_content}\"\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "AsyncWebCrawler",
      "ground_truth_relationship": "The AsyncWebCrawler's arun() method implements the documented wait conditions through its kwargs parameter, which allows passing CSS selectors and JavaScript expressions via the wait_for parameter to control when the crawler proceeds with extraction.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Adding Basic Options\n\nCustomize your crawl with these common options:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Minimum words per content block\n    exclude_external_links=True,    # Remove external links\n    remove_overlay_elements=True,   # Remove popups/modals\n    process_iframes=True           # Process iframe content\n)\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly mentioned in the code example as the main class used for crawling.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly refers to the AsyncWebCrawler class for creating a crawler instance.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented configuration options through its arun method, which accepts parameters like word_count_threshold and other kwargs that directly correspond to the basic crawling options shown in the documentation example.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Adding Basic Options\n\nCustomize your crawl with these common options:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Minimum words per content block\n    exclude_external_links=True,    # Remove external links\n    remove_overlay_elements=True,   # Remove popups/modals\n    process_iframes=True           # Process iframe content\n)\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method is explicitly used in the code example to perform the crawl operation with various options.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows the usage of the arun() method through the AsyncWebCrawler instance.",
      "ground_truth_relationship": "The code implements an asynchronous crawler method that accepts the documented options like word_count_threshold and handles various crawling parameters through its **kwargs argument system, allowing for flexible configuration as shown in the documentation examples.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Adding Basic Options\n\nCustomize your crawl with these common options:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Minimum words per content block\n    exclude_external_links=True,    # Remove external links\n    remove_overlay_elements=True,   # Remove popups/modals\n    process_iframes=True           # Process iframe content\n)\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult is implicitly used as the return value of the arun() method, as evidenced by accessing properties like 'markdown' in the code example.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult object, which is then used to access various properties of the crawl result.",
      "ground_truth_relationship": "The CrawlResult class defines the data structure that stores all crawled outputs and processing flags shown in the documentation's basic options, including the cleaned content, extracted media, and success status.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Adding Basic Options\n\nCustomize your crawl with these common options:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Minimum words per content block\n    exclude_external_links=True,    # Remove external links\n    remove_overlay_elements=True,   # Remove popups/modals\n    process_iframes=True           # Process iframe content\n)\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "implicit",
      "relationship_type": "property access",
      "relationship_explanation": "The markdown property of CrawlResult is implicitly used in the code example to print the clean markdown content.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The documentation shows accessing the markdown property of the CrawlResult returned by arun().",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Adding Basic Options\n\nCustomize your crawl with these common options:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Minimum words per content block\n    exclude_external_links=True,    # Remove external links\n    remove_overlay_elements=True,   # Remove popups/modals\n    process_iframes=True           # Process iframe content\n)\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core methods that enable the crawler configuration options shown in the documentation through its crawl method's kwargs parameter.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Adding Basic Options\n\nCustomize your crawl with these common options:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Minimum words per content block\n    exclude_external_links=True,    # Remove external links\n    remove_overlay_elements=True,   # Remove popups/modals\n    process_iframes=True           # Process iframe content\n)\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the documented crawling options through its crawl method, which processes parameters like process_iframes=True for handling iframe content and remove_overlay_elements=True for removing popups/modals through dedicated helper methods.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Quick Start\n\nHere's a quick example to show you how easy it is to use Crawl4AI with its asynchronous capabilities:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    # Create an instance of AsyncWebCrawler\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # Run the crawler on a URL\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n\n        # Print the extracted content\n        print(result.markdown)\n\n# Run the async main function\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/index.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly mentioned and used in the code example provided in the documentation. It is the main class used to create an instance of the crawler.",
      "predicted_trace_chain": "index.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The code implements the AsyncWebCrawler class with async context manager methods (__aenter__ and __aexit__) that directly enable the 'async with' syntax shown in the quickstart documentation example.",
      "ground_truth_trace_chain": "index.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Quick Start\n\nHere's a quick example to show you how easy it is to use Crawl4AI with its asynchronous capabilities:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    # Create an instance of AsyncWebCrawler\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # Run the crawler on a URL\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n\n        # Print the extracted content\n        print(result.markdown)\n\n# Run the async main function\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/index.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to run the crawler on a specified URL.",
      "predicted_trace_chain": "index.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows the usage of arun() method, which is accessed through an instance of AsyncWebCrawler.",
      "ground_truth_relationship": "The code implements AsyncWebCrawler's arun() method which enables the asynchronous web crawling functionality shown in the quickstart documentation by handling URL fetching, content extraction, and error handling using async/await patterns.",
      "ground_truth_trace_chain": "index.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Quick Start\n\nHere's a quick example to show you how easy it is to use Crawl4AI with its asynchronous capabilities:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    # Create an instance of AsyncWebCrawler\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # Run the crawler on a URL\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n\n        # Print the extracted content\n        print(result.markdown)\n\n# Run the async main function\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/index.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "While not explicitly named, the CrawlResult class is implicitly used as it is the return type of the arun() method, evidenced by accessing the 'markdown' attribute of the result.",
      "predicted_trace_chain": "index.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The documentation shows the usage of the result returned by arun(), which is an instance of CrawlResult, allowing access to its 'markdown' attribute.",
      "ground_truth_relationship": "The CrawlResult class defines the structured data model that stores the crawled webpage content, including the markdown field shown being printed in the documentation's example code.",
      "ground_truth_trace_chain": "index.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Quick Start\n\nHere's a quick example to show you how easy it is to use Crawl4AI with its asynchronous capabilities:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    # Create an instance of AsyncWebCrawler\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # Run the crawler on a URL\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n\n        # Print the extracted content\n        print(result.markdown)\n\n# Run the async main function\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/index.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The 'markdown' attribute of the CrawlResult is explicitly accessed in the code example to print the extracted content.",
      "predicted_trace_chain": "index.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The documentation demonstrates accessing the 'markdown' attribute of the result returned by arun(), which is an instance of CrawlResult.",
      "ground_truth_relationship": "The CrawlResult.markdown property stores the extracted content as a formatted string, which is displayed in the Quick Start example when printing result.markdown.",
      "ground_truth_trace_chain": "index.md -> CrawlResult.markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Quick Start\n\nHere's a quick example to show you how easy it is to use Crawl4AI with its asynchronous capabilities:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    # Create an instance of AsyncWebCrawler\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # Run the crawler on a URL\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n\n        # Print the extracted content\n        print(result.markdown)\n\n# Run the async main function\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/index.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods that enable the asynchronous web crawling functionality shown in the Quick Start documentation example.",
      "ground_truth_trace_chain": "index.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Quick Start\n\nHere's a quick example to show you how easy it is to use Crawl4AI with its asynchronous capabilities:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    # Create an instance of AsyncWebCrawler\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # Run the crawler on a URL\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n\n        # Print the extracted content\n        print(result.markdown)\n\n# Run the async main function\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/index.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the core asynchronous web crawling functionality demonstrated in the quick start documentation, providing the underlying browser automation and content extraction capabilities used by AsyncWebCrawler's arun method.",
      "ground_truth_trace_chain": "index.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Fit Markdown: Smart Content Extraction\nOne of Crawl4AI's most powerful features is `fit_markdown`. This feature uses advanced heuristics to identify and extract the main content from a webpage while excluding irrelevant elements.\n\n#### How Fit Markdown Works\n- Analyzes content density and distribution\n- Identifies content patterns and structures\n- Removes boilerplate content (headers, footers, sidebars)\n- Preserves the most relevant content blocks\n- Maintains content hierarchy and formatting\n\n#### Perfect For:\n- Blog posts and articles\n- News content\n- Documentation pages\n- Any page with a clear main content area\n\n#### Not Recommended For:\n- E-commerce product listings\n- Search results pages\n- Social media feeds\n- Pages with multiple equal-weight content sections\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Get the most relevant content\nmain_content = result.fit_markdown\n\n# Compare with regular markdown\nall_content = result.markdown\n\nprint(f\"Fit Markdown Length: {len(main_content)}\")\nprint(f\"Regular Markdown Length: {len(all_content)}\")\n```\n\n#### Example Use Case\n```python\nasync def extract_article_content(url: str) -> str:\n    \"\"\"Extract main article content from a blog or news site.\"\"\"\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=url)\n        \n        # fit_markdown will focus on the article content,\n        # excluding navigation, ads, and other distractions\n        return result.fit_markdown\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "explicit",
      "relationship_type": "Contains attributes",
      "relationship_explanation": "The CrawlResult class is explicitly mentioned in the documentation as containing the fit_markdown and markdown attributes, which are used to access the extracted content.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document describes the usage of AsyncWebCrawler to obtain a result, which is an instance of CrawlResult containing the fit_markdown and markdown attributes.",
      "ground_truth_relationship": "The CrawlResult class implements the fit_markdown feature through a dedicated string field that stores the extracted main content after applying heuristic filtering to remove boilerplate elements from the full markdown content.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Fit Markdown: Smart Content Extraction\nOne of Crawl4AI's most powerful features is `fit_markdown`. This feature uses advanced heuristics to identify and extract the main content from a webpage while excluding irrelevant elements.\n\n#### How Fit Markdown Works\n- Analyzes content density and distribution\n- Identifies content patterns and structures\n- Removes boilerplate content (headers, footers, sidebars)\n- Preserves the most relevant content blocks\n- Maintains content hierarchy and formatting\n\n#### Perfect For:\n- Blog posts and articles\n- News content\n- Documentation pages\n- Any page with a clear main content area\n\n#### Not Recommended For:\n- E-commerce product listings\n- Search results pages\n- Social media feeds\n- Pages with multiple equal-weight content sections\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Get the most relevant content\nmain_content = result.fit_markdown\n\n# Compare with regular markdown\nall_content = result.markdown\n\nprint(f\"Fit Markdown Length: {len(main_content)}\")\nprint(f\"Regular Markdown Length: {len(all_content)}\")\n```\n\n#### Example Use Case\n```python\nasync def extract_article_content(url: str) -> str:\n    \"\"\"Extract main article content from a blog or news site.\"\"\"\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=url)\n        \n        # fit_markdown will focus on the article content,\n        # excluding navigation, ads, and other distractions\n        return result.fit_markdown\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "Possible implementation",
      "relationship_explanation": "While not explicitly mentioned, the extracted_content attribute of CrawlResult may be used internally to store the fit_markdown content, as it represents extracted content from the webpage.",
      "predicted_trace_chain": "content-processing.md -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document describes extracting content, which is likely stored in the extracted_content attribute of CrawlResult.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Fit Markdown: Smart Content Extraction\nOne of Crawl4AI's most powerful features is `fit_markdown`. This feature uses advanced heuristics to identify and extract the main content from a webpage while excluding irrelevant elements.\n\n#### How Fit Markdown Works\n- Analyzes content density and distribution\n- Identifies content patterns and structures\n- Removes boilerplate content (headers, footers, sidebars)\n- Preserves the most relevant content blocks\n- Maintains content hierarchy and formatting\n\n#### Perfect For:\n- Blog posts and articles\n- News content\n- Documentation pages\n- Any page with a clear main content area\n\n#### Not Recommended For:\n- E-commerce product listings\n- Search results pages\n- Social media feeds\n- Pages with multiple equal-weight content sections\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Get the most relevant content\nmain_content = result.fit_markdown\n\n# Compare with regular markdown\nall_content = result.markdown\n\nprint(f\"Fit Markdown Length: {len(main_content)}\")\nprint(f\"Regular Markdown Length: {len(all_content)}\")\n```\n\n#### Example Use Case\n```python\nasync def extract_article_content(url: str) -> str:\n    \"\"\"Extract main article content from a blog or news site.\"\"\"\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=url)\n        \n        # fit_markdown will focus on the article content,\n        # excluding navigation, ads, and other distractions\n        return result.fit_markdown\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 12,
      "artifact_title": "CrawlResult.fit_markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "Attribute access",
      "relationship_explanation": "The fit_markdown attribute is explicitly mentioned and used in the code examples to access the most relevant content extracted from the webpage.",
      "predicted_trace_chain": "content-processing.md -> CrawlResult -> CrawlResult.fit_markdown",
      "predicted_trace_chain_explanation": "The document directly references and demonstrates usage of the fit_markdown attribute from the CrawlResult class.",
      "ground_truth_relationship": "The CrawlResult class defines fit_markdown as an optional string property that stores the extracted main content after applying content extraction heuristics to remove boilerplate elements from webpages.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult.fit_markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Fit Markdown: Smart Content Extraction\nOne of Crawl4AI's most powerful features is `fit_markdown`. This feature uses advanced heuristics to identify and extract the main content from a webpage while excluding irrelevant elements.\n\n#### How Fit Markdown Works\n- Analyzes content density and distribution\n- Identifies content patterns and structures\n- Removes boilerplate content (headers, footers, sidebars)\n- Preserves the most relevant content blocks\n- Maintains content hierarchy and formatting\n\n#### Perfect For:\n- Blog posts and articles\n- News content\n- Documentation pages\n- Any page with a clear main content area\n\n#### Not Recommended For:\n- E-commerce product listings\n- Search results pages\n- Social media feeds\n- Pages with multiple equal-weight content sections\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Get the most relevant content\nmain_content = result.fit_markdown\n\n# Compare with regular markdown\nall_content = result.markdown\n\nprint(f\"Fit Markdown Length: {len(main_content)}\")\nprint(f\"Regular Markdown Length: {len(all_content)}\")\n```\n\n#### Example Use Case\n```python\nasync def extract_article_content(url: str) -> str:\n    \"\"\"Extract main article content from a blog or news site.\"\"\"\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=url)\n        \n        # fit_markdown will focus on the article content,\n        # excluding navigation, ads, and other distractions\n        return result.fit_markdown\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "Attribute access",
      "relationship_explanation": "The markdown attribute is explicitly mentioned and used in the code examples to access the regular markdown content extracted from the webpage.",
      "predicted_trace_chain": "content-processing.md -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The document directly references and demonstrates usage of the markdown attribute from the CrawlResult class.",
      "ground_truth_relationship": "The markdown property serves as the base text extraction method that captures all webpage content, contrasting with fit_markdown which provides filtered, relevant content only.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult.markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Fit Markdown: Smart Content Extraction\nOne of Crawl4AI's most powerful features is `fit_markdown`. This feature uses advanced heuristics to identify and extract the main content from a webpage while excluding irrelevant elements.\n\n#### How Fit Markdown Works\n- Analyzes content density and distribution\n- Identifies content patterns and structures\n- Removes boilerplate content (headers, footers, sidebars)\n- Preserves the most relevant content blocks\n- Maintains content hierarchy and formatting\n\n#### Perfect For:\n- Blog posts and articles\n- News content\n- Documentation pages\n- Any page with a clear main content area\n\n#### Not Recommended For:\n- E-commerce product listings\n- Search results pages\n- Social media feeds\n- Pages with multiple equal-weight content sections\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Get the most relevant content\nmain_content = result.fit_markdown\n\n# Compare with regular markdown\nall_content = result.markdown\n\nprint(f\"Fit Markdown Length: {len(main_content)}\")\nprint(f\"Regular Markdown Length: {len(all_content)}\")\n```\n\n#### Example Use Case\n```python\nasync def extract_article_content(url: str) -> str:\n    \"\"\"Extract main article content from a blog or news site.\"\"\"\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=url)\n        \n        # fit_markdown will focus on the article content,\n        # excluding navigation, ads, and other distractions\n        return result.fit_markdown\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "Class usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code examples to create a crawler instance and perform web page content extraction.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler for crawling and content extraction.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the fit_markdown feature through its aprocess_html method, which extracts and processes the main content using a scraping strategy that identifies and preserves relevant content blocks while excluding boilerplate elements.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Fit Markdown: Smart Content Extraction\nOne of Crawl4AI's most powerful features is `fit_markdown`. This feature uses advanced heuristics to identify and extract the main content from a webpage while excluding irrelevant elements.\n\n#### How Fit Markdown Works\n- Analyzes content density and distribution\n- Identifies content patterns and structures\n- Removes boilerplate content (headers, footers, sidebars)\n- Preserves the most relevant content blocks\n- Maintains content hierarchy and formatting\n\n#### Perfect For:\n- Blog posts and articles\n- News content\n- Documentation pages\n- Any page with a clear main content area\n\n#### Not Recommended For:\n- E-commerce product listings\n- Search results pages\n- Social media feeds\n- Pages with multiple equal-weight content sections\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Get the most relevant content\nmain_content = result.fit_markdown\n\n# Compare with regular markdown\nall_content = result.markdown\n\nprint(f\"Fit Markdown Length: {len(main_content)}\")\nprint(f\"Regular Markdown Length: {len(all_content)}\")\n```\n\n#### Example Use Case\n```python\nasync def extract_article_content(url: str) -> str:\n    \"\"\"Extract main article content from a blog or news site.\"\"\"\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=url)\n        \n        # fit_markdown will focus on the article content,\n        # excluding navigation, ads, and other distractions\n        return result.fit_markdown\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "Method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in the code examples to perform the crawling and content extraction process.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows direct usage of the arun() method to crawl a webpage and obtain the CrawlResult.",
      "ground_truth_relationship": "The code implements the AsyncWebCrawler.arun() method that processes webpage content and enables the fit_markdown feature by passing the crawled HTML through extraction and chunking strategies to identify relevant content blocks while filtering out boilerplate elements.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Fit Markdown: Smart Content Extraction\nOne of Crawl4AI's most powerful features is `fit_markdown`. This feature uses advanced heuristics to identify and extract the main content from a webpage while excluding irrelevant elements.\n\n#### How Fit Markdown Works\n- Analyzes content density and distribution\n- Identifies content patterns and structures\n- Removes boilerplate content (headers, footers, sidebars)\n- Preserves the most relevant content blocks\n- Maintains content hierarchy and formatting\n\n#### Perfect For:\n- Blog posts and articles\n- News content\n- Documentation pages\n- Any page with a clear main content area\n\n#### Not Recommended For:\n- E-commerce product listings\n- Search results pages\n- Social media feeds\n- Pages with multiple equal-weight content sections\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Get the most relevant content\nmain_content = result.fit_markdown\n\n# Compare with regular markdown\nall_content = result.markdown\n\nprint(f\"Fit Markdown Length: {len(main_content)}\")\nprint(f\"Regular Markdown Length: {len(all_content)}\")\n```\n\n#### Example Use Case\n```python\nasync def extract_article_content(url: str) -> str:\n    \"\"\"Extract main article content from a blog or news site.\"\"\"\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=url)\n        \n        # fit_markdown will focus on the article content,\n        # excluding navigation, ads, and other distractions\n        return result.fit_markdown\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods that enable the fit_markdown functionality through its crawl() method, which returns AsyncCrawlResponse objects containing the extracted content.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Fit Markdown: Smart Content Extraction\nOne of Crawl4AI's most powerful features is `fit_markdown`. This feature uses advanced heuristics to identify and extract the main content from a webpage while excluding irrelevant elements.\n\n#### How Fit Markdown Works\n- Analyzes content density and distribution\n- Identifies content patterns and structures\n- Removes boilerplate content (headers, footers, sidebars)\n- Preserves the most relevant content blocks\n- Maintains content hierarchy and formatting\n\n#### Perfect For:\n- Blog posts and articles\n- News content\n- Documentation pages\n- Any page with a clear main content area\n\n#### Not Recommended For:\n- E-commerce product listings\n- Search results pages\n- Social media feeds\n- Pages with multiple equal-weight content sections\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Get the most relevant content\nmain_content = result.fit_markdown\n\n# Compare with regular markdown\nall_content = result.markdown\n\nprint(f\"Fit Markdown Length: {len(main_content)}\")\nprint(f\"Regular Markdown Length: {len(all_content)}\")\n```\n\n#### Example Use Case\n```python\nasync def extract_article_content(url: str) -> str:\n    \"\"\"Extract main article content from a blog or news site.\"\"\"\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=url)\n        \n        # fit_markdown will focus on the article content,\n        # excluding navigation, ads, and other distractions\n        return result.fit_markdown\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the fit_markdown functionality through its content extraction methods, particularly in the crawl() method which handles page loading and content processing to enable smart content identification while removing unwanted elements through remove_overlay_elements().",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining with JavaScript Execution\n\nFor pages that load data dynamically, you can combine the `JsonCssExtractionStrategy` with JavaScript execution:\n\n```python\nasync def extract_dynamic_structured_data():\n    schema = {\n        \"name\": \"Dynamic Crypto Prices\",\n        \"baseSelector\": \".crypto-row\",\n        \"fields\": [\n            {\"name\": \"name\", \"selector\": \".crypto-name\", \"type\": \"text\"},\n            {\"name\": \"price\", \"selector\": \".crypto-price\", \"type\": \"text\"},\n        ]\n    }\n\n    js_code = \"\"\"\n    window.scrollTo(0, document.body.scrollHeight);\n    await new Promise(resolve => setTimeout(resolve, 2000));  // Wait for 2 seconds\n    \"\"\"\n\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com/crypto-prices\",\n            extraction_strategy=extraction_strategy,\n            js_code=js_code,\n            wait_for=\".crypto-row:nth-child(20)\",  # Wait for 20 rows to load\n            bypass_cache=True,\n        )\n\n        crypto_data = json.loads(result.extracted_content)\n        print(f\"Extracted {len(crypto_data)} cryptocurrency entries\")\n\nasyncio.run(extract_dynamic_structured_data())\n```\n\nThis advanced example demonstrates how to:\n1. Execute JavaScript to trigger dynamic content loading.\n2. Wait for a specific condition (20 rows loaded) before extraction.\n3. Extract data from the dynamically loaded content.\n\nBy mastering the `JsonCssExtractionStrategy`, you can efficiently extract structured data from a wide variety of web pages, making it a valuable tool in your web scraping toolkit.\n\nFor more details on schema definitions and advanced extraction strategies, check out the[Advanced JsonCssExtraction](./css-advanced.md).",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to perform web crawling and extraction tasks.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler for web crawling tasks.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the dynamic data extraction functionality described in the documentation through its arun method, which supports JavaScript execution (js_code), waiting conditions (wait_for), and custom extraction strategies (JsonCssExtractionStrategy).",
      "ground_truth_trace_chain": "css.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining with JavaScript Execution\n\nFor pages that load data dynamically, you can combine the `JsonCssExtractionStrategy` with JavaScript execution:\n\n```python\nasync def extract_dynamic_structured_data():\n    schema = {\n        \"name\": \"Dynamic Crypto Prices\",\n        \"baseSelector\": \".crypto-row\",\n        \"fields\": [\n            {\"name\": \"name\", \"selector\": \".crypto-name\", \"type\": \"text\"},\n            {\"name\": \"price\", \"selector\": \".crypto-price\", \"type\": \"text\"},\n        ]\n    }\n\n    js_code = \"\"\"\n    window.scrollTo(0, document.body.scrollHeight);\n    await new Promise(resolve => setTimeout(resolve, 2000));  // Wait for 2 seconds\n    \"\"\"\n\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com/crypto-prices\",\n            extraction_strategy=extraction_strategy,\n            js_code=js_code,\n            wait_for=\".crypto-row:nth-child(20)\",  # Wait for 20 rows to load\n            bypass_cache=True,\n        )\n\n        crypto_data = json.loads(result.extracted_content)\n        print(f\"Extracted {len(crypto_data)} cryptocurrency entries\")\n\nasyncio.run(extract_dynamic_structured_data())\n```\n\nThis advanced example demonstrates how to:\n1. Execute JavaScript to trigger dynamic content loading.\n2. Wait for a specific condition (20 rows loaded) before extraction.\n3. Extract data from the dynamically loaded content.\n\nBy mastering the `JsonCssExtractionStrategy`, you can efficiently extract structured data from a wide variety of web pages, making it a valuable tool in your web scraping toolkit.\n\nFor more details on schema definitions and advanced extraction strategies, check out the[Advanced JsonCssExtraction](./css-advanced.md).",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly used in the code example to define the extraction strategy for structured data.",
      "predicted_trace_chain": "css.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of JsonCssExtractionStrategy for defining extraction rules.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class enables structured data extraction from dynamic web pages by processing a schema that defines CSS selectors for base elements and their fields, which directly supports the documented advanced usage pattern of combining with JavaScript execution for dynamic content scraping.",
      "ground_truth_trace_chain": "css.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining with JavaScript Execution\n\nFor pages that load data dynamically, you can combine the `JsonCssExtractionStrategy` with JavaScript execution:\n\n```python\nasync def extract_dynamic_structured_data():\n    schema = {\n        \"name\": \"Dynamic Crypto Prices\",\n        \"baseSelector\": \".crypto-row\",\n        \"fields\": [\n            {\"name\": \"name\", \"selector\": \".crypto-name\", \"type\": \"text\"},\n            {\"name\": \"price\", \"selector\": \".crypto-price\", \"type\": \"text\"},\n        ]\n    }\n\n    js_code = \"\"\"\n    window.scrollTo(0, document.body.scrollHeight);\n    await new Promise(resolve => setTimeout(resolve, 2000));  // Wait for 2 seconds\n    \"\"\"\n\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com/crypto-prices\",\n            extraction_strategy=extraction_strategy,\n            js_code=js_code,\n            wait_for=\".crypto-row:nth-child(20)\",  # Wait for 20 rows to load\n            bypass_cache=True,\n        )\n\n        crypto_data = json.loads(result.extracted_content)\n        print(f\"Extracted {len(crypto_data)} cryptocurrency entries\")\n\nasyncio.run(extract_dynamic_structured_data())\n```\n\nThis advanced example demonstrates how to:\n1. Execute JavaScript to trigger dynamic content loading.\n2. Wait for a specific condition (20 rows loaded) before extraction.\n3. Extract data from the dynamically loaded content.\n\nBy mastering the `JsonCssExtractionStrategy`, you can efficiently extract structured data from a wide variety of web pages, making it a valuable tool in your web scraping toolkit.\n\nFor more details on schema definitions and advanced extraction strategies, check out the[Advanced JsonCssExtraction](./css-advanced.md).",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling and extraction task.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which leads to the usage of its arun() method for executing the crawl.",
      "ground_truth_relationship": "The arun() method implements support for dynamic content extraction by accepting parameters for js_code execution, extraction_strategy, and screenshot capabilities as shown in the documentation's advanced usage example.",
      "ground_truth_trace_chain": "css.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining with JavaScript Execution\n\nFor pages that load data dynamically, you can combine the `JsonCssExtractionStrategy` with JavaScript execution:\n\n```python\nasync def extract_dynamic_structured_data():\n    schema = {\n        \"name\": \"Dynamic Crypto Prices\",\n        \"baseSelector\": \".crypto-row\",\n        \"fields\": [\n            {\"name\": \"name\", \"selector\": \".crypto-name\", \"type\": \"text\"},\n            {\"name\": \"price\", \"selector\": \".crypto-price\", \"type\": \"text\"},\n        ]\n    }\n\n    js_code = \"\"\"\n    window.scrollTo(0, document.body.scrollHeight);\n    await new Promise(resolve => setTimeout(resolve, 2000));  // Wait for 2 seconds\n    \"\"\"\n\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com/crypto-prices\",\n            extraction_strategy=extraction_strategy,\n            js_code=js_code,\n            wait_for=\".crypto-row:nth-child(20)\",  # Wait for 20 rows to load\n            bypass_cache=True,\n        )\n\n        crypto_data = json.loads(result.extracted_content)\n        print(f\"Extracted {len(crypto_data)} cryptocurrency entries\")\n\nasyncio.run(extract_dynamic_structured_data())\n```\n\nThis advanced example demonstrates how to:\n1. Execute JavaScript to trigger dynamic content loading.\n2. Wait for a specific condition (20 rows loaded) before extraction.\n3. Extract data from the dynamically loaded content.\n\nBy mastering the `JsonCssExtractionStrategy`, you can efficiently extract structured data from a wide variety of web pages, making it a valuable tool in your web scraping toolkit.\n\nFor more details on schema definitions and advanced extraction strategies, check out the[Advanced JsonCssExtraction](./css-advanced.md).",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as evidenced by accessing properties like 'success' and 'extracted_content'.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult object, as evidenced by accessing its properties.",
      "ground_truth_relationship": "The CrawlResult class stores the extracted_content field which holds the structured data parsed by JsonCssExtractionStrategy as shown in the documentation example where crypto price data is extracted and stored.",
      "ground_truth_trace_chain": "css.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining with JavaScript Execution\n\nFor pages that load data dynamically, you can combine the `JsonCssExtractionStrategy` with JavaScript execution:\n\n```python\nasync def extract_dynamic_structured_data():\n    schema = {\n        \"name\": \"Dynamic Crypto Prices\",\n        \"baseSelector\": \".crypto-row\",\n        \"fields\": [\n            {\"name\": \"name\", \"selector\": \".crypto-name\", \"type\": \"text\"},\n            {\"name\": \"price\", \"selector\": \".crypto-price\", \"type\": \"text\"},\n        ]\n    }\n\n    js_code = \"\"\"\n    window.scrollTo(0, document.body.scrollHeight);\n    await new Promise(resolve => setTimeout(resolve, 2000));  // Wait for 2 seconds\n    \"\"\"\n\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com/crypto-prices\",\n            extraction_strategy=extraction_strategy,\n            js_code=js_code,\n            wait_for=\".crypto-row:nth-child(20)\",  # Wait for 20 rows to load\n            bypass_cache=True,\n        )\n\n        crypto_data = json.loads(result.extracted_content)\n        print(f\"Extracted {len(crypto_data)} cryptocurrency entries\")\n\nasyncio.run(extract_dynamic_structured_data())\n```\n\nThis advanced example demonstrates how to:\n1. Execute JavaScript to trigger dynamic content loading.\n2. Wait for a specific condition (20 rows loaded) before extraction.\n3. Extract data from the dynamically loaded content.\n\nBy mastering the `JsonCssExtractionStrategy`, you can efficiently extract structured data from a wide variety of web pages, making it a valuable tool in your web scraping toolkit.\n\nFor more details on schema definitions and advanced extraction strategies, check out the[Advanced JsonCssExtraction](./css-advanced.md).",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "property access",
      "relationship_explanation": "The extracted_content property of CrawlResult is implicitly used in the code example when parsing the extracted data.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult, from which the extracted_content property is accessed.",
      "ground_truth_relationship": "The extracted_content attribute stores the dynamic crypto pricing data after it's scraped using JsonCssExtractionStrategy and processed through JavaScript execution.",
      "ground_truth_trace_chain": "css.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining with JavaScript Execution\n\nFor pages that load data dynamically, you can combine the `JsonCssExtractionStrategy` with JavaScript execution:\n\n```python\nasync def extract_dynamic_structured_data():\n    schema = {\n        \"name\": \"Dynamic Crypto Prices\",\n        \"baseSelector\": \".crypto-row\",\n        \"fields\": [\n            {\"name\": \"name\", \"selector\": \".crypto-name\", \"type\": \"text\"},\n            {\"name\": \"price\", \"selector\": \".crypto-price\", \"type\": \"text\"},\n        ]\n    }\n\n    js_code = \"\"\"\n    window.scrollTo(0, document.body.scrollHeight);\n    await new Promise(resolve => setTimeout(resolve, 2000));  // Wait for 2 seconds\n    \"\"\"\n\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com/crypto-prices\",\n            extraction_strategy=extraction_strategy,\n            js_code=js_code,\n            wait_for=\".crypto-row:nth-child(20)\",  # Wait for 20 rows to load\n            bypass_cache=True,\n        )\n\n        crypto_data = json.loads(result.extracted_content)\n        print(f\"Extracted {len(crypto_data)} cryptocurrency entries\")\n\nasyncio.run(extract_dynamic_structured_data())\n```\n\nThis advanced example demonstrates how to:\n1. Execute JavaScript to trigger dynamic content loading.\n2. Wait for a specific condition (20 rows loaded) before extraction.\n3. Extract data from the dynamically loaded content.\n\nBy mastering the `JsonCssExtractionStrategy`, you can efficiently extract structured data from a wide variety of web pages, making it a valuable tool in your web scraping toolkit.\n\nFor more details on schema definitions and advanced extraction strategies, check out the[Advanced JsonCssExtraction](./css-advanced.md).",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The success property of CrawlResult is explicitly checked in the code example to verify if the crawling was successful.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult, from which the success property is explicitly checked.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining with JavaScript Execution\n\nFor pages that load data dynamically, you can combine the `JsonCssExtractionStrategy` with JavaScript execution:\n\n```python\nasync def extract_dynamic_structured_data():\n    schema = {\n        \"name\": \"Dynamic Crypto Prices\",\n        \"baseSelector\": \".crypto-row\",\n        \"fields\": [\n            {\"name\": \"name\", \"selector\": \".crypto-name\", \"type\": \"text\"},\n            {\"name\": \"price\", \"selector\": \".crypto-price\", \"type\": \"text\"},\n        ]\n    }\n\n    js_code = \"\"\"\n    window.scrollTo(0, document.body.scrollHeight);\n    await new Promise(resolve => setTimeout(resolve, 2000));  // Wait for 2 seconds\n    \"\"\"\n\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com/crypto-prices\",\n            extraction_strategy=extraction_strategy,\n            js_code=js_code,\n            wait_for=\".crypto-row:nth-child(20)\",  # Wait for 20 rows to load\n            bypass_cache=True,\n        )\n\n        crypto_data = json.loads(result.extracted_content)\n        print(f\"Extracted {len(crypto_data)} cryptocurrency entries\")\n\nasyncio.run(extract_dynamic_structured_data())\n```\n\nThis advanced example demonstrates how to:\n1. Execute JavaScript to trigger dynamic content loading.\n2. Wait for a specific condition (20 rows loaded) before extraction.\n3. Extract data from the dynamically loaded content.\n\nBy mastering the `JsonCssExtractionStrategy`, you can efficiently extract structured data from a wide variety of web pages, making it a valuable tool in your web scraping toolkit.\n\nFor more details on schema definitions and advanced extraction strategies, check out the[Advanced JsonCssExtraction](./css-advanced.md).",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundational architecture for implementing specialized extraction strategies like JsonCssExtractionStrategy, which is demonstrated in the documentation example for extracting dynamic cryptocurrency data.",
      "ground_truth_trace_chain": "css.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining with JavaScript Execution\n\nFor pages that load data dynamically, you can combine the `JsonCssExtractionStrategy` with JavaScript execution:\n\n```python\nasync def extract_dynamic_structured_data():\n    schema = {\n        \"name\": \"Dynamic Crypto Prices\",\n        \"baseSelector\": \".crypto-row\",\n        \"fields\": [\n            {\"name\": \"name\", \"selector\": \".crypto-name\", \"type\": \"text\"},\n            {\"name\": \"price\", \"selector\": \".crypto-price\", \"type\": \"text\"},\n        ]\n    }\n\n    js_code = \"\"\"\n    window.scrollTo(0, document.body.scrollHeight);\n    await new Promise(resolve => setTimeout(resolve, 2000));  // Wait for 2 seconds\n    \"\"\"\n\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com/crypto-prices\",\n            extraction_strategy=extraction_strategy,\n            js_code=js_code,\n            wait_for=\".crypto-row:nth-child(20)\",  # Wait for 20 rows to load\n            bypass_cache=True,\n        )\n\n        crypto_data = json.loads(result.extracted_content)\n        print(f\"Extracted {len(crypto_data)} cryptocurrency entries\")\n\nasyncio.run(extract_dynamic_structured_data())\n```\n\nThis advanced example demonstrates how to:\n1. Execute JavaScript to trigger dynamic content loading.\n2. Wait for a specific condition (20 rows loaded) before extraction.\n3. Extract data from the dynamically loaded content.\n\nBy mastering the `JsonCssExtractionStrategy`, you can efficiently extract structured data from a wide variety of web pages, making it a valuable tool in your web scraping toolkit.\n\nFor more details on schema definitions and advanced extraction strategies, check out the[Advanced JsonCssExtraction](./css-advanced.md).",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements dynamic content loading through its crawl method by executing JavaScript code and waiting for specified selectors as documented in the example's advanced usage section for combining with JavaScript execution.",
      "ground_truth_trace_chain": "css.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining with JavaScript Execution\n\nFor pages that load data dynamically, you can combine the `JsonCssExtractionStrategy` with JavaScript execution:\n\n```python\nasync def extract_dynamic_structured_data():\n    schema = {\n        \"name\": \"Dynamic Crypto Prices\",\n        \"baseSelector\": \".crypto-row\",\n        \"fields\": [\n            {\"name\": \"name\", \"selector\": \".crypto-name\", \"type\": \"text\"},\n            {\"name\": \"price\", \"selector\": \".crypto-price\", \"type\": \"text\"},\n        ]\n    }\n\n    js_code = \"\"\"\n    window.scrollTo(0, document.body.scrollHeight);\n    await new Promise(resolve => setTimeout(resolve, 2000));  // Wait for 2 seconds\n    \"\"\"\n\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com/crypto-prices\",\n            extraction_strategy=extraction_strategy,\n            js_code=js_code,\n            wait_for=\".crypto-row:nth-child(20)\",  # Wait for 20 rows to load\n            bypass_cache=True,\n        )\n\n        crypto_data = json.loads(result.extracted_content)\n        print(f\"Extracted {len(crypto_data)} cryptocurrency entries\")\n\nasyncio.run(extract_dynamic_structured_data())\n```\n\nThis advanced example demonstrates how to:\n1. Execute JavaScript to trigger dynamic content loading.\n2. Wait for a specific condition (20 rows loaded) before extraction.\n3. Extract data from the dynamically loaded content.\n\nBy mastering the `JsonCssExtractionStrategy`, you can efficiently extract structured data from a wide variety of web pages, making it a valuable tool in your web scraping toolkit.\n\nFor more details on schema definitions and advanced extraction strategies, check out the[Advanced JsonCssExtraction](./css-advanced.md).",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods that enable the dynamic data extraction capabilities demonstrated in the documentation's example, particularly through its crawl method that supports JavaScript execution parameters.",
      "ground_truth_trace_chain": "css.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Handling Errors\n\nAlways check if the crawl was successful:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nif not result.success:\n    print(f\"Crawl failed: {result.error_message}\")\n    print(f\"Status code: {result.status_code}\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The CrawlResult class is explicitly used in the code example to access properties such as 'success', 'error_message', and 'status_code' for error handling.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document discusses error handling for AsyncWebCrawler, which returns a CrawlResult object. The chain shows how the documentation relates to the actual implementation.",
      "ground_truth_relationship": "The CrawlResult class provides the necessary success, error_message, and status_code fields that enable error handling as demonstrated in the documentation's code example.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Errors\n\nAlways check if the crawl was successful:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nif not result.success:\n    print(f\"Crawl failed: {result.error_message}\")\n    print(f\"Status code: {result.status_code}\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The code example explicitly checks the 'success' property of the CrawlResult object to determine if the crawl was successful.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows how to check for crawl success, which involves accessing the 'success' property of the CrawlResult object returned by AsyncWebCrawler.",
      "ground_truth_relationship": "The boolean success property in CrawlResult enables error handling by providing a simple way to check if a crawl operation completed successfully, as demonstrated in the documentation's error handling example.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Errors\n\nAlways check if the crawl was successful:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nif not result.success:\n    print(f\"Crawl failed: {result.error_message}\")\n    print(f\"Status code: {result.status_code}\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 10,
      "artifact_title": "CrawlResult.error_message",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The code example explicitly accesses the 'error_message' property of the CrawlResult object to print the error message if the crawl fails.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> CrawlResult -> CrawlResult.error_message",
      "predicted_trace_chain_explanation": "The document demonstrates error handling by showing how to access the 'error_message' property of the CrawlResult object returned by AsyncWebCrawler.",
      "ground_truth_relationship": "The error_message field in CrawlResult stores the failure reason shown in the documentation's error handling example when crawls are unsuccessful.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.error_message",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Errors\n\nAlways check if the crawl was successful:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nif not result.success:\n    print(f\"Crawl failed: {result.error_message}\")\n    print(f\"Status code: {result.status_code}\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 19,
      "artifact_title": "CrawlResult.status_code",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The code example explicitly accesses the 'status_code' property of the CrawlResult object to print the HTTP status code if the crawl fails.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> CrawlResult -> CrawlResult.status_code",
      "predicted_trace_chain_explanation": "The document shows how to retrieve the HTTP status code in case of a crawl failure, which involves accessing the 'status_code' property of the CrawlResult object returned by AsyncWebCrawler.",
      "ground_truth_relationship": "The status_code field stores HTTP response codes from crawl attempts, enabling error handling as shown in the documentation where failed crawls can be diagnosed using result.status_code.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.status_code",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Errors\n\nAlways check if the crawl was successful:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nif not result.success:\n    print(f\"Crawl failed: {result.error_message}\")\n    print(f\"Status code: {result.status_code}\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example, as it's the context manager that provides the 'arun' method to perform the crawl.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document discusses error handling for web crawling, which implicitly involves using the AsyncWebCrawler class to perform the crawl operation.",
      "ground_truth_relationship": "The documentation demonstrates error handling using the success attribute and error_message fields that are explicitly set in the AsyncWebCrawler's arun() method when exceptions occur during crawling.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Errors\n\nAlways check if the crawl was successful:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nif not result.success:\n    print(f\"Crawl failed: {result.error_message}\")\n    print(f\"Status code: {result.status_code}\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The code example explicitly calls the 'arun()' method of the AsyncWebCrawler instance to perform the crawl operation.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows how to perform a crawl and handle errors, which directly involves calling the 'arun()' method of the AsyncWebCrawler class.",
      "ground_truth_relationship": "The code implements error handling by returning a CrawlResult object with success and error_message fields that can be checked exactly as shown in the documentation example.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Errors\n\nAlways check if the crawl was successful:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nif not result.success:\n    print(f\"Crawl failed: {result.error_message}\")\n    print(f\"Status code: {result.status_code}\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the foundational crawl() method that returns an AsyncCrawlResponse, which contains the success, error_message, and status_code properties shown in the error handling documentation.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Handling Errors\n\nAlways check if the crawl was successful:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nif not result.success:\n    print(f\"Crawl failed: {result.error_message}\")\n    print(f\"Status code: {result.status_code}\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements error handling through the AsyncCrawlResponse class which returns success status, error messages, and status codes that can be checked exactly as shown in the documentation's example.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Content Filters\n\nControl what content is included:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Minimum words per block\n    exclude_external_links=True,    # Remove external links\n    exclude_external_images=True,   # Remove external images\n    excluded_tags=['form', 'nav']   # Remove specific HTML tags\n)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate content filtering options.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly shows usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The documentation describes filtering options that are directly implemented as parameters in the AsyncWebCrawler.arun() method, where word_count_threshold controls minimum block size and kwargs handles exclude_external_links, exclude_external_images, and excluded_tags options.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Content Filters\n\nControl what content is included:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Minimum words per block\n    exclude_external_links=True,    # Remove external links\n    exclude_external_images=True,   # Remove external images\n    excluded_tags=['form', 'nav']   # Remove specific HTML tags\n)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to demonstrate how to set content filtering options.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows a call to arun() method, which is part of the AsyncWebCrawler class, hence the intermediate step.",
      "ground_truth_relationship": "The arun() method implements content filtering by accepting parameters like word_count_threshold, extraction_strategy, and chunking_strategy which are used to process and filter the crawled HTML content according to user-specified criteria.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Content Filters\n\nControl what content is included:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Minimum words per block\n    exclude_external_links=True,    # Remove external links\n    exclude_external_images=True,   # Remove external images\n    excluded_tags=['form', 'nav']   # Remove specific HTML tags\n)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, containing the crawled and filtered content.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult object, which is implied by the usage of 'result' variable in the example.",
      "ground_truth_relationship": "The CrawlResult class stores filtered content outputs from the crawler, with properties like cleaned_html and extracted_content that reflect the content filtering options documented in the configuration parameters.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Content Filters\n\nControl what content is included:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Minimum words per block\n    exclude_external_links=True,    # Remove external links\n    exclude_external_images=True,   # Remove external images\n    excluded_tags=['form', 'nav']   # Remove specific HTML tags\n)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the interface that enables content filtering capabilities through its crawl method's kwargs parameter, which allows passing filtering options like word_count_threshold and excluded_tags as documented.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Content Filters\n\nControl what content is included:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Minimum words per block\n    exclude_external_links=True,    # Remove external links\n    exclude_external_images=True,   # Remove external images\n    excluded_tags=['form', 'nav']   # Remove specific HTML tags\n)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements content filtering through its crawl method by accepting parameters like word_count_threshold and excluded_tags which are used to control what content is included in the final HTML output.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## JavaScript Execution\n\nExecute custom JavaScript before crawling:\n\n```python\n# Single JavaScript command\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\"\n)\n\n# Multiple commands\njs_commands = [\n    \"window.scrollTo(0, document.body.scrollHeight);\",\n    \"document.querySelector('.load-more').click();\"\n]\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_commands\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code examples to create a crawler instance and execute the arun method.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document describes configuration options for the AsyncWebCrawler, which is then used to create an instance and call its arun method.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented JavaScript execution functionality through its arun method, which accepts a 'js_code' parameter and passes it to the underlying crawler_strategy for execution before webpage scraping.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## JavaScript Execution\n\nExecute custom JavaScript before crawling:\n\n```python\n# Single JavaScript command\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\"\n)\n\n# Multiple commands\njs_commands = [\n    \"window.scrollTo(0, document.body.scrollHeight);\",\n    \"document.querySelector('.load-more').click();\"\n]\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_commands\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method is explicitly used in the code examples to execute the crawling process with custom JavaScript code.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of the arun() method to perform crawling operations with specific configurations.",
      "ground_truth_relationship": "The arun() method implements the documented JavaScript execution functionality by accepting custom JavaScript commands through its **kwargs parameter, which are then passed to the crawler_strategy.crawl() method for execution during the page crawl.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## JavaScript Execution\n\nExecute custom JavaScript before crawling:\n\n```python\n# Single JavaScript command\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\"\n)\n\n# Multiple commands\njs_commands = [\n    \"window.scrollTo(0, document.body.scrollHeight);\",\n    \"document.querySelector('.load-more').click();\"\n]\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_commands\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the foundational crawl() method that enables JavaScript execution during web scraping as shown in the documentation's arun() examples.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## JavaScript Execution\n\nExecute custom JavaScript before crawling:\n\n```python\n# Single JavaScript command\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\"\n)\n\n# Multiple commands\njs_commands = [\n    \"window.scrollTo(0, document.body.scrollHeight);\",\n    \"document.querySelector('.load-more').click();\"\n]\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_commands\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class stores the outcomes of JavaScript execution during crawling, including the modified HTML content, success status, and any errors that occurred during script execution.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## JavaScript Execution\n\nExecute custom JavaScript before crawling:\n\n```python\n# Single JavaScript command\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\"\n)\n\n# Multiple commands\njs_commands = [\n    \"window.scrollTo(0, document.body.scrollHeight);\",\n    \"document.querySelector('.load-more').click();\"\n]\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_commands\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements JavaScript execution functionality through the crawl() method, which accepts js_code parameter that can handle both single commands and arrays of commands, evaluating them on the page using page.evaluate().",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Tips for Using JsonCssExtractionStrategy\n\n1. **Inspect the Page**: Use browser developer tools to identify the correct CSS selectors.\n2. **Test Selectors**: Verify your selectors in the browser console before using them in the script.\n3. **Handle Dynamic Content**: If the page uses JavaScript to load content, you may need to combine this with JS execution (see the Advanced Usage section).\n4. **Error Handling**: Always check the `result.success` flag and handle potential failures.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The text explicitly mentions JsonCssExtractionStrategy as a feature for extracting structured data from web pages using CSS selectors.",
      "predicted_trace_chain": "css.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly references the JsonCssExtractionStrategy class, which is the final step in the trace.",
      "ground_truth_relationship": "The code implements a CSS-based extraction strategy that directly aligns with the documentation's tips by using BeautifulSoup selectors to parse HTML elements according to a predefined schema, which explains why the docs emphasize inspecting and testing CSS selectors before use.",
      "ground_truth_trace_chain": "css.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Tips for Using JsonCssExtractionStrategy\n\n1. **Inspect the Page**: Use browser developer tools to identify the correct CSS selectors.\n2. **Test Selectors**: Verify your selectors in the browser console before using them in the script.\n3. **Handle Dynamic Content**: If the page uses JavaScript to load content, you may need to combine this with JS execution (see the Advanced Usage section).\n4. **Error Handling**: Always check the `result.success` flag and handle potential failures.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage context",
      "relationship_explanation": "The text mentions using JsonCssExtractionStrategy with AsyncWebCrawler, implying that AsyncWebCrawler is the context in which JsonCssExtractionStrategy is used.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document mentions using JsonCssExtractionStrategy with AsyncWebCrawler, which then uses JsonCssExtractionStrategy for extraction.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Tips for Using JsonCssExtractionStrategy\n\n1. **Inspect the Page**: Use browser developer tools to identify the correct CSS selectors.\n2. **Test Selectors**: Verify your selectors in the browser console before using them in the script.\n3. **Handle Dynamic Content**: If the page uses JavaScript to load content, you may need to combine this with JS execution (see the Advanced Usage section).\n4. **Error Handling**: Always check the `result.success` flag and handle potential failures.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundation for implementing JSON/CSS extraction with error handling and parallel processing capabilities that the documentation's tips guide users to properly utilize.",
      "ground_truth_trace_chain": "css.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Tips for Using JsonCssExtractionStrategy\n\n1. **Inspect the Page**: Use browser developer tools to identify the correct CSS selectors.\n2. **Test Selectors**: Verify your selectors in the browser console before using them in the script.\n3. **Handle Dynamic Content**: If the page uses JavaScript to load content, you may need to combine this with JS execution (see the Advanced Usage section).\n4. **Error Handling**: Always check the `result.success` flag and handle potential failures.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class implements error handling guidance from the documentation through its 'success' boolean flag and 'error_message' field, allowing developers to check crawl status and handle failures as recommended.",
      "ground_truth_trace_chain": "css.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Tips for Using JsonCssExtractionStrategy\n\n1. **Inspect the Page**: Use browser developer tools to identify the correct CSS selectors.\n2. **Test Selectors**: Verify your selectors in the browser console before using them in the script.\n3. **Handle Dynamic Content**: If the page uses JavaScript to load content, you may need to combine this with JS execution (see the Advanced Usage section).\n4. **Error Handling**: Always check the `result.success` flag and handle potential failures.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_title": "CrawlResult.success",
      "ground_truth_relationship": "The success boolean flag in CrawlResult directly implements the error handling guidance from the documentation by providing a way to verify if extraction operations completed successfully.",
      "ground_truth_trace_chain": "css.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Combining with Magic Mode\n\nFor maximum protection, combine proxy with Magic Mode:\n\n```python\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\",\n    headers={\"Accept-Language\": \"en-US\"}\n) as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        magic=True  # Enable all anti-detection features\n    )\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class_usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate how to combine proxy settings with Magic Mode for enhanced security.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly uses the AsyncWebCrawler class in its example, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class constructor accepts proxy and headers parameters shown in the documentation through its **kwargs argument, which are then passed to the AsyncPlaywrightCrawlerStrategy for implementing the proxy and magic mode features.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Combining with Magic Mode\n\nFor maximum protection, combine proxy with Magic Mode:\n\n```python\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\",\n    headers={\"Accept-Language\": \"en-US\"}\n) as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        magic=True  # Enable all anti-detection features\n    )\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method_usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to demonstrate crawling a URL with Magic Mode enabled.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document uses the AsyncWebCrawler class, which contains the arun() method, forming a direct chain from the document to the method.",
      "ground_truth_relationship": "The arun() method implements the documented proxy and magic mode functionality by accepting kwargs parameters that configure crawler settings like proxies and enabling anti-detection features through the crawler_strategy object.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Combining with Magic Mode\n\nFor maximum protection, combine proxy with Magic Mode:\n\n```python\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\",\n    headers={\"Accept-Language\": \"en-US\"}\n) as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        magic=True  # Enable all anti-detection features\n    )\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the foundational methods that enable advanced crawling features like Magic Mode and proxy support shown in the documentation through its abstract crawl and configuration methods.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Combining with Magic Mode\n\nFor maximum protection, combine proxy with Magic Mode:\n\n```python\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\",\n    headers={\"Accept-Language\": \"en-US\"}\n) as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        magic=True  # Enable all anti-detection features\n    )\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class defines the structured output fields that store the results of a web crawl performed with AsyncWebCrawler, including fields like 'success' and 'cleaned_html' that are particularly relevant when magic mode is enabled for enhanced anti-detection.",
      "ground_truth_trace_chain": "proxy-security.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Combining with Magic Mode\n\nFor maximum protection, combine proxy with Magic Mode:\n\n```python\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\",\n    headers={\"Accept-Language\": \"en-US\"}\n) as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        magic=True  # Enable all anti-detection features\n    )\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements proxy configuration in the AsyncPlaywrightCrawlerStrategy class by setting up proxy settings during browser launch, which directly corresponds to the documentation's example of combining proxy settings with magic mode for enhanced protection.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Handling Overlays and Fitting Content Remove overlay elements and fit content appropriately: ```python async with AsyncWebCrawler(headless=False) as crawler: result = await crawler.arun( url=\"your-url-here\", bypass_cache=True, word_count_threshold=10, remove_overlay_elements=True, screenshot=True ) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to create an instance for web crawling.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements overlay removal through its arun() method which accepts a remove_overlay_elements parameter that gets passed to the underlying crawler strategy for handling webpage overlays during content extraction.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Handling Overlays and Fitting Content Remove overlay elements and fit content appropriately: ```python async with AsyncWebCrawler(headless=False) as crawler: result = await crawler.arun( url=\"your-url-here\", bypass_cache=True, word_count_threshold=10, remove_overlay_elements=True, screenshot=True ) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the web crawling operation.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows the usage of AsyncWebCrawler, which then calls its arun() method, forming a direct chain of execution.",
      "ground_truth_relationship": "The code implements the documented overlay removal functionality through the arun() method which accepts remove_overlay_elements as a parameter and processes it along with other crawling configurations like word_count_threshold and screenshot options.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Handling Overlays and Fitting Content Remove overlay elements and fit content appropriately: ```python async with AsyncWebCrawler(headless=False) as crawler: result = await crawler.arun( url=\"your-url-here\", bypass_cache=True, word_count_threshold=10, remove_overlay_elements=True, screenshot=True ) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, containing properties like 'screenshot'.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The documentation demonstrates calling arun(), which implicitly returns a CrawlResult object, forming a chain from the crawler to the result.",
      "ground_truth_relationship": "The CrawlResult class stores the outcomes of overlay removal and content fitting operations through its fit_html, fit_markdown, and cleaned_html fields that correspond to the documented overlay handling functionality.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Handling Overlays and Fitting Content Remove overlay elements and fit content appropriately: ```python async with AsyncWebCrawler(headless=False) as crawler: result = await crawler.arun( url=\"your-url-here\", bypass_cache=True, word_count_threshold=10, remove_overlay_elements=True, screenshot=True ) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 18,
      "artifact_title": "CrawlResult.screenshot",
      "predicted_relationship": "implicit",
      "relationship_type": "property usage",
      "relationship_explanation": "The screenshot property of CrawlResult is implicitly used when the 'screenshot' parameter is set to True in the arun() method call.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.screenshot",
      "predicted_trace_chain_explanation": "The documentation shows setting screenshot=True, which implies the usage of the screenshot property in the resulting CrawlResult.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Handling Overlays and Fitting Content Remove overlay elements and fit content appropriately: ```python async with AsyncWebCrawler(headless=False) as crawler: result = await crawler.arun( url=\"your-url-here\", bypass_cache=True, word_count_threshold=10, remove_overlay_elements=True, screenshot=True ) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface that enables overlay removal and content fitting through its crawl method, which the documentation demonstrates being used via the AsyncWebCrawler implementation.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Handling Overlays and Fitting Content Remove overlay elements and fit content appropriately: ```python async with AsyncWebCrawler(headless=False) as crawler: result = await crawler.arun( url=\"your-url-here\", bypass_cache=True, word_count_threshold=10, remove_overlay_elements=True, screenshot=True ) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements overlay removal in the remove_overlay_elements method using JavaScript to detect and remove elements with high z-index, fixed positions, and common overlay selectors like cookie banners, popups, and modals, matching the documented functionality for handling overlays.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Common Use Cases\n\n1. **E-commerce Scraping**\n   ```python\n   # CSS Strategy for product listings\n   schema = {\n       \"name\": \"Products\",\n       \"baseSelector\": \".product\",\n       \"fields\": [\n           {\"name\": \"name\", \"selector\": \".title\", \"type\": \"text\"},\n           {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"}\n       ]\n   }\n   ```\n\n2. **News Article Extraction**\n   ```python\n   # LLM Strategy for article content\n   class Article(BaseModel):\n       title: str\n       content: str\n       author: str\n       date: str\n\n   strategy = LLMExtractionStrategy(\n       provider=\"ollama/llama2\",\n       schema=Article.schema()\n   )\n   ```\n\n3. **Content Analysis**\n   ```python\n   # Cosine Strategy for topic analysis\n   strategy = CosineStrategy(\n       semantic_filter=\"technology trends\",\n       top_k=5\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly mentioned in the code example for e-commerce scraping. It's used to define a schema for extracting product information using CSS selectors.",
      "predicted_trace_chain": "overview.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly references and demonstrates the usage of JsonCssExtractionStrategy for e-commerce scraping.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class directly implements the CSS-based e-commerce scraping example from the documentation by processing HTML elements according to a schema that defines base selectors and field mappings.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Common Use Cases\n\n1. **E-commerce Scraping**\n   ```python\n   # CSS Strategy for product listings\n   schema = {\n       \"name\": \"Products\",\n       \"baseSelector\": \".product\",\n       \"fields\": [\n           {\"name\": \"name\", \"selector\": \".title\", \"type\": \"text\"},\n           {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"}\n       ]\n   }\n   ```\n\n2. **News Article Extraction**\n   ```python\n   # LLM Strategy for article content\n   class Article(BaseModel):\n       title: str\n       content: str\n       author: str\n       date: str\n\n   strategy = LLMExtractionStrategy(\n       provider=\"ollama/llama2\",\n       schema=Article.schema()\n   )\n   ```\n\n3. **Content Analysis**\n   ```python\n   # Cosine Strategy for topic analysis\n   strategy = CosineStrategy(\n       semantic_filter=\"technology trends\",\n       top_k=5\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 24,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The LLMExtractionStrategy class is explicitly mentioned in the code example for news article extraction. It's used to define a strategy for extracting article content using a language model.",
      "predicted_trace_chain": "overview.md -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly references and demonstrates the usage of LLMExtractionStrategy for news article extraction.",
      "ground_truth_relationship": "The LLMExtractionStrategy class demonstrated in the documentation implements schema-based extraction for articles by accepting a provider and schema parameter in its initialization, which directly corresponds to the 'News Article Extraction' use case shown in the documentation example.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Common Use Cases\n\n1. **E-commerce Scraping**\n   ```python\n   # CSS Strategy for product listings\n   schema = {\n       \"name\": \"Products\",\n       \"baseSelector\": \".product\",\n       \"fields\": [\n           {\"name\": \"name\", \"selector\": \".title\", \"type\": \"text\"},\n           {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"}\n       ]\n   }\n   ```\n\n2. **News Article Extraction**\n   ```python\n   # LLM Strategy for article content\n   class Article(BaseModel):\n       title: str\n       content: str\n       author: str\n       date: str\n\n   strategy = LLMExtractionStrategy(\n       provider=\"ollama/llama2\",\n       schema=Article.schema()\n   )\n   ```\n\n3. **Content Analysis**\n   ```python\n   # Cosine Strategy for topic analysis\n   strategy = CosineStrategy(\n       semantic_filter=\"technology trends\",\n       top_k=5\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The CosineStrategy class is explicitly mentioned in the code example for content analysis. It's used to define a strategy for topic analysis using cosine similarity.",
      "predicted_trace_chain": "overview.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document directly references and demonstrates the usage of CosineStrategy for content analysis and topic extraction.",
      "ground_truth_relationship": "The CosineStrategy class implements content analysis functionality by using cosine similarity and semantic filtering to cluster and analyze text content, as shown in the documentation's third example where it filters content based on 'technology trends' and returns top_k results.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Common Use Cases\n\n1. **E-commerce Scraping**\n   ```python\n   # CSS Strategy for product listings\n   schema = {\n       \"name\": \"Products\",\n       \"baseSelector\": \".product\",\n       \"fields\": [\n           {\"name\": \"name\", \"selector\": \".title\", \"type\": \"text\"},\n           {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"}\n       ]\n   }\n   ```\n\n2. **News Article Extraction**\n   ```python\n   # LLM Strategy for article content\n   class Article(BaseModel):\n       title: str\n       content: str\n       author: str\n       date: str\n\n   strategy = LLMExtractionStrategy(\n       provider=\"ollama/llama2\",\n       schema=Article.schema()\n   )\n   ```\n\n3. **Content Analysis**\n   ```python\n   # Cosine Strategy for topic analysis\n   strategy = CosineStrategy(\n       semantic_filter=\"technology trends\",\n       top_k=5\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 22,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "While not explicitly mentioned, ExtractionStrategy is the base class for all the extraction strategies demonstrated in the examples (JsonCssExtractionStrategy, LLMExtractionStrategy, and CosineStrategy).",
      "predicted_trace_chain": "overview.md -> ExtractionStrategy -> JsonCssExtractionStrategy/LLMExtractionStrategy/CosineStrategy",
      "predicted_trace_chain_explanation": "The document discusses various extraction strategies, which all inherit from the ExtractionStrategy base class. This base class defines the common interface for all extraction strategies.",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class serves as the foundation for the three documented use cases (CSS, LLM, and Cosine strategies) by providing a common interface for extracting structured data through its abstract extract() method and parallel processing capabilities in run().",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Common Use Cases\n\n1. **E-commerce Scraping**\n   ```python\n   # CSS Strategy for product listings\n   schema = {\n       \"name\": \"Products\",\n       \"baseSelector\": \".product\",\n       \"fields\": [\n           {\"name\": \"name\", \"selector\": \".title\", \"type\": \"text\"},\n           {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"}\n       ]\n   }\n   ```\n\n2. **News Article Extraction**\n   ```python\n   # LLM Strategy for article content\n   class Article(BaseModel):\n       title: str\n       content: str\n       author: str\n       date: str\n\n   strategy = LLMExtractionStrategy(\n       provider=\"ollama/llama2\",\n       schema=Article.schema()\n   )\n   ```\n\n3. **Content Analysis**\n   ```python\n   # Cosine Strategy for topic analysis\n   strategy = CosineStrategy(\n       semantic_filter=\"technology trends\",\n       top_k=5\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "While not explicitly mentioned, the CrawlResult class is implicitly used as it would contain the results of the extraction strategies demonstrated in the examples.",
      "predicted_trace_chain": "overview.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows examples of using crawler.arun(), which would return a CrawlResult object containing the extracted content and other crawl information.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Let's break down the key concepts:\n\n### Nested Objects\n\nTo create a nested object, use `\"type\": \"nested\"` and provide a `fields` array for the nested structure:\n\n```python\n{\n    \"name\": \"details\",\n    \"selector\": \"div.product-details\",\n    \"type\": \"nested\",\n    \"fields\": [\n        {\n            \"name\": \"brand\",\n            \"selector\": \"span.brand\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"model\",\n            \"selector\": \"span.model\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```\n\n### Simple Lists\n\nFor a simple list of identical items, use `\"type\": \"list\"`:\n\n```python\n{\n    \"name\": \"features\",\n    \"selector\": \"ul.product-features li\",\n    \"type\": \"list\",\n    \"fields\": [\n        {\n            \"name\": \"feature\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```\n\n### Nested Lists\n\nFor a list of complex objects, use `\"type\": \"nested_list\"`:\n\n```python\n{\n    \"name\": \"products\",\n    \"selector\": \"div.product\",\n    \"type\": \"nested_list\",\n    \"fields\": [\n        // ... fields for each product\n    ]\n}\n```\n\n### Lists of Objects\n\nSimilar to nested lists, but typically used for simpler objects within the list:\n\n```python\n{\n    \"name\": \"related_products\",\n    \"selector\": \"ul.related-products li\",\n    \"type\": \"list\",\n    \"fields\": [\n        {\n            \"name\": \"name\",\n            \"selector\": \"span.related-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"price\",\n            \"selector\": \"span.related-price\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class definition and usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly mentioned and discussed in detail throughout the text. It is the main focus of the documentation, explaining how to use this strategy for complex HTML structure extraction.",
      "predicted_trace_chain": "css-advanced.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly discusses and provides examples of using JsonCssExtractionStrategy, so there are no intermediate steps.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements a BeautifulSoup-based parser that processes nested JSON schemas with CSS selectors to extract structured data according to the documented field types (nested, list, nested_list) and their hierarchical relationships.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Let's break down the key concepts:\n\n### Nested Objects\n\nTo create a nested object, use `\"type\": \"nested\"` and provide a `fields` array for the nested structure:\n\n```python\n{\n    \"name\": \"details\",\n    \"selector\": \"div.product-details\",\n    \"type\": \"nested\",\n    \"fields\": [\n        {\n            \"name\": \"brand\",\n            \"selector\": \"span.brand\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"model\",\n            \"selector\": \"span.model\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```\n\n### Simple Lists\n\nFor a simple list of identical items, use `\"type\": \"list\"`:\n\n```python\n{\n    \"name\": \"features\",\n    \"selector\": \"ul.product-features li\",\n    \"type\": \"list\",\n    \"fields\": [\n        {\n            \"name\": \"feature\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```\n\n### Nested Lists\n\nFor a list of complex objects, use `\"type\": \"nested_list\"`:\n\n```python\n{\n    \"name\": \"products\",\n    \"selector\": \"div.product\",\n    \"type\": \"nested_list\",\n    \"fields\": [\n        // ... fields for each product\n    ]\n}\n```\n\n### Lists of Objects\n\nSimilar to nested lists, but typically used for simpler objects within the list:\n\n```python\n{\n    \"name\": \"related_products\",\n    \"selector\": \"ul.related-products li\",\n    \"type\": \"list\",\n    \"fields\": [\n        {\n            \"name\": \"name\",\n            \"selector\": \"span.related-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"price\",\n            \"selector\": \"span.related-price\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly mentioned in the usage example provided in the text. It is used to demonstrate how to apply the JsonCssExtractionStrategy for web crawling.",
      "predicted_trace_chain": "css-advanced.md -> JsonCssExtractionStrategy -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document discusses JsonCssExtractionStrategy, which is then used with AsyncWebCrawler in the provided example.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Let's break down the key concepts:\n\n### Nested Objects\n\nTo create a nested object, use `\"type\": \"nested\"` and provide a `fields` array for the nested structure:\n\n```python\n{\n    \"name\": \"details\",\n    \"selector\": \"div.product-details\",\n    \"type\": \"nested\",\n    \"fields\": [\n        {\n            \"name\": \"brand\",\n            \"selector\": \"span.brand\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"model\",\n            \"selector\": \"span.model\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```\n\n### Simple Lists\n\nFor a simple list of identical items, use `\"type\": \"list\"`:\n\n```python\n{\n    \"name\": \"features\",\n    \"selector\": \"ul.product-features li\",\n    \"type\": \"list\",\n    \"fields\": [\n        {\n            \"name\": \"feature\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```\n\n### Nested Lists\n\nFor a list of complex objects, use `\"type\": \"nested_list\"`:\n\n```python\n{\n    \"name\": \"products\",\n    \"selector\": \"div.product\",\n    \"type\": \"nested_list\",\n    \"fields\": [\n        // ... fields for each product\n    ]\n}\n```\n\n### Lists of Objects\n\nSimilar to nested lists, but typically used for simpler objects within the list:\n\n```python\n{\n    \"name\": \"related_products\",\n    \"selector\": \"ul.related-products li\",\n    \"type\": \"list\",\n    \"fields\": [\n        {\n            \"name\": \"name\",\n            \"selector\": \"span.related-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"price\",\n            \"selector\": \"span.related-price\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in the code example to demonstrate how to execute the web crawling process with the JsonCssExtractionStrategy.",
      "predicted_trace_chain": "css-advanced.md -> JsonCssExtractionStrategy -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document discusses JsonCssExtractionStrategy, which is used with AsyncWebCrawler, specifically calling its arun() method in the example.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Let's break down the key concepts:\n\n### Nested Objects\n\nTo create a nested object, use `\"type\": \"nested\"` and provide a `fields` array for the nested structure:\n\n```python\n{\n    \"name\": \"details\",\n    \"selector\": \"div.product-details\",\n    \"type\": \"nested\",\n    \"fields\": [\n        {\n            \"name\": \"brand\",\n            \"selector\": \"span.brand\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"model\",\n            \"selector\": \"span.model\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```\n\n### Simple Lists\n\nFor a simple list of identical items, use `\"type\": \"list\"`:\n\n```python\n{\n    \"name\": \"features\",\n    \"selector\": \"ul.product-features li\",\n    \"type\": \"list\",\n    \"fields\": [\n        {\n            \"name\": \"feature\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```\n\n### Nested Lists\n\nFor a list of complex objects, use `\"type\": \"nested_list\"`:\n\n```python\n{\n    \"name\": \"products\",\n    \"selector\": \"div.product\",\n    \"type\": \"nested_list\",\n    \"fields\": [\n        // ... fields for each product\n    ]\n}\n```\n\n### Lists of Objects\n\nSimilar to nested lists, but typically used for simpler objects within the list:\n\n```python\n{\n    \"name\": \"related_products\",\n    \"selector\": \"ul.related-products li\",\n    \"type\": \"list\",\n    \"fields\": [\n        {\n            \"name\": \"name\",\n            \"selector\": \"span.related-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"price\",\n            \"selector\": \"span.related-price\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 7,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "While not explicitly mentioned, ExtractionStrategy is the base class for JsonCssExtractionStrategy, which is the main focus of the document. This relationship is inferred from the class hierarchy in the available artifacts.",
      "predicted_trace_chain": "css-advanced.md -> JsonCssExtractionStrategy -> ExtractionStrategy",
      "predicted_trace_chain_explanation": "The document focuses on JsonCssExtractionStrategy, which inherits from ExtractionStrategy, making it a necessary part of understanding the full context.",
      "ground_truth_relationship": "The ExtractionStrategy abstract class provides the core framework for implementing different extraction patterns (nested, list, nested_list) described in the documentation through its extract() method that processes HTML content into structured data blocks.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Let's break down the key concepts:\n\n### Nested Objects\n\nTo create a nested object, use `\"type\": \"nested\"` and provide a `fields` array for the nested structure:\n\n```python\n{\n    \"name\": \"details\",\n    \"selector\": \"div.product-details\",\n    \"type\": \"nested\",\n    \"fields\": [\n        {\n            \"name\": \"brand\",\n            \"selector\": \"span.brand\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"model\",\n            \"selector\": \"span.model\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```\n\n### Simple Lists\n\nFor a simple list of identical items, use `\"type\": \"list\"`:\n\n```python\n{\n    \"name\": \"features\",\n    \"selector\": \"ul.product-features li\",\n    \"type\": \"list\",\n    \"fields\": [\n        {\n            \"name\": \"feature\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```\n\n### Nested Lists\n\nFor a list of complex objects, use `\"type\": \"nested_list\"`:\n\n```python\n{\n    \"name\": \"products\",\n    \"selector\": \"div.product\",\n    \"type\": \"nested_list\",\n    \"fields\": [\n        // ... fields for each product\n    ]\n}\n```\n\n### Lists of Objects\n\nSimilar to nested lists, but typically used for simpler objects within the list:\n\n```python\n{\n    \"name\": \"related_products\",\n    \"selector\": \"ul.related-products li\",\n    \"type\": \"list\",\n    \"fields\": [\n        {\n            \"name\": \"name\",\n            \"selector\": \"span.related-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"price\",\n            \"selector\": \"span.related-price\",\n            \"type\": \"text\"\n        }\n    ]\n}\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The CrawlResult class is implicitly used in the code example. The 'result' variable returned by the arun() method is assumed to be an instance of CrawlResult, as evidenced by accessing its 'success' and 'extracted_content' attributes.",
      "predicted_trace_chain": "css-advanced.md -> JsonCssExtractionStrategy -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the use of JsonCssExtractionStrategy with AsyncWebCrawler's arun() method, which returns a CrawlResult object, making it part of the usage pathway.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding Session-Based Crawling\n\nSession-based crawling allows you to maintain a persistent browser session across multiple requests. This is crucial when:\n\n1. The content changes dynamically without URL changes\n2. You need to interact with the page (e.g., clicking buttons) between requests\n3. The site requires authentication or maintains state across pages\n\nCrawl4AI's `AsyncWebCrawler` class supports session-based crawling through the `session_id` parameter and related methods.\n\n## Basic Concepts\n\nBefore diving into examples, let's review some key concepts:\n\n- **Session ID**: A unique identifier for a browsing session. Use the same `session_id` across multiple `arun` calls to maintain state.\n- **JavaScript Execution**: Use the `js_code` parameter to execute JavaScript on the page, such as clicking a \"Load More\" button.\n- **CSS Selectors**: Use these to target specific elements for extraction or interaction.\n- **Extraction Strategy**: Define how to extract structured data from the page.\n- **Wait Conditions**: Specify conditions to wait for before considering the page loaded.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "Class Usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly mentioned as supporting session-based crawling through the session_id parameter and related methods.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly references the AsyncWebCrawler class as the main component for session-based crawling.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements session-based crawling through the session_id parameter in its arun method, which allows maintaining persistent browser sessions across multiple requests as documented.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding Session-Based Crawling\n\nSession-based crawling allows you to maintain a persistent browser session across multiple requests. This is crucial when:\n\n1. The content changes dynamically without URL changes\n2. You need to interact with the page (e.g., clicking buttons) between requests\n3. The site requires authentication or maintains state across pages\n\nCrawl4AI's `AsyncWebCrawler` class supports session-based crawling through the `session_id` parameter and related methods.\n\n## Basic Concepts\n\nBefore diving into examples, let's review some key concepts:\n\n- **Session ID**: A unique identifier for a browsing session. Use the same `session_id` across multiple `arun` calls to maintain state.\n- **JavaScript Execution**: Use the `js_code` parameter to execute JavaScript on the page, such as clicking a \"Load More\" button.\n- **CSS Selectors**: Use these to target specific elements for extraction or interaction.\n- **Extraction Strategy**: Define how to extract structured data from the page.\n- **Wait Conditions**: Specify conditions to wait for before considering the page loaded.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "Method Usage",
      "relationship_explanation": "The arun method is explicitly mentioned as part of maintaining state across multiple calls using the same session_id.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document describes using the arun method of AsyncWebCrawler for session-based crawling, establishing a direct connection between the class and its method.",
      "ground_truth_relationship": "The `arun()` method implements session-based crawling by accepting a `session_id` parameter through kwargs and storing it in the CrawlResult object, enabling state persistence across multiple crawl requests.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding Session-Based Crawling\n\nSession-based crawling allows you to maintain a persistent browser session across multiple requests. This is crucial when:\n\n1. The content changes dynamically without URL changes\n2. You need to interact with the page (e.g., clicking buttons) between requests\n3. The site requires authentication or maintains state across pages\n\nCrawl4AI's `AsyncWebCrawler` class supports session-based crawling through the `session_id` parameter and related methods.\n\n## Basic Concepts\n\nBefore diving into examples, let's review some key concepts:\n\n- **Session ID**: A unique identifier for a browsing session. Use the same `session_id` across multiple `arun` calls to maintain state.\n- **JavaScript Execution**: Use the `js_code` parameter to execute JavaScript on the page, such as clicking a \"Load More\" button.\n- **CSS Selectors**: Use these to target specific elements for extraction or interaction.\n- **Extraction Strategy**: Define how to extract structured data from the page.\n- **Wait Conditions**: Specify conditions to wait for before considering the page loaded.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 2,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_relationship": "implicit",
      "relationship_type": "Method Usage",
      "relationship_explanation": "The kill_session method is implicitly referenced as part of the session management process, used to close sessions and free up resources.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_trace_chain_explanation": "The document mentions closing sessions, which implies the use of the kill_session method from the underlying strategy used by AsyncWebCrawler.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding Session-Based Crawling\n\nSession-based crawling allows you to maintain a persistent browser session across multiple requests. This is crucial when:\n\n1. The content changes dynamically without URL changes\n2. You need to interact with the page (e.g., clicking buttons) between requests\n3. The site requires authentication or maintains state across pages\n\nCrawl4AI's `AsyncWebCrawler` class supports session-based crawling through the `session_id` parameter and related methods.\n\n## Basic Concepts\n\nBefore diving into examples, let's review some key concepts:\n\n- **Session ID**: A unique identifier for a browsing session. Use the same `session_id` across multiple `arun` calls to maintain state.\n- **JavaScript Execution**: Use the `js_code` parameter to execute JavaScript on the page, such as clicking a \"Load More\" button.\n- **CSS Selectors**: Use these to target specific elements for extraction or interaction.\n- **Extraction Strategy**: Define how to extract structured data from the page.\n- **Wait Conditions**: Specify conditions to wait for before considering the page loaded.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 3,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_relationship": "implicit",
      "relationship_type": "Method Usage",
      "relationship_explanation": "The set_hook method is implicitly referenced in the context of setting custom hooks for different stages of the crawling process.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_trace_chain_explanation": "The document mentions setting custom hooks, which implies the use of the set_hook method from the underlying strategy used by AsyncWebCrawler.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding Session-Based Crawling\n\nSession-based crawling allows you to maintain a persistent browser session across multiple requests. This is crucial when:\n\n1. The content changes dynamically without URL changes\n2. You need to interact with the page (e.g., clicking buttons) between requests\n3. The site requires authentication or maintains state across pages\n\nCrawl4AI's `AsyncWebCrawler` class supports session-based crawling through the `session_id` parameter and related methods.\n\n## Basic Concepts\n\nBefore diving into examples, let's review some key concepts:\n\n- **Session ID**: A unique identifier for a browsing session. Use the same `session_id` across multiple `arun` calls to maintain state.\n- **JavaScript Execution**: Use the `js_code` parameter to execute JavaScript on the page, such as clicking a \"Load More\" button.\n- **CSS Selectors**: Use these to target specific elements for extraction or interaction.\n- **Extraction Strategy**: Define how to extract structured data from the page.\n- **Wait Conditions**: Specify conditions to wait for before considering the page loaded.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "Class Usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is implicitly referenced as part of the extraction strategies mentioned for structured data extraction.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document mentions using extraction strategies, and JsonCssExtractionStrategy is a specific implementation that would be used in conjunction with AsyncWebCrawler for structured data extraction.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding Session-Based Crawling\n\nSession-based crawling allows you to maintain a persistent browser session across multiple requests. This is crucial when:\n\n1. The content changes dynamically without URL changes\n2. You need to interact with the page (e.g., clicking buttons) between requests\n3. The site requires authentication or maintains state across pages\n\nCrawl4AI's `AsyncWebCrawler` class supports session-based crawling through the `session_id` parameter and related methods.\n\n## Basic Concepts\n\nBefore diving into examples, let's review some key concepts:\n\n- **Session ID**: A unique identifier for a browsing session. Use the same `session_id` across multiple `arun` calls to maintain state.\n- **JavaScript Execution**: Use the `js_code` parameter to execute JavaScript on the page, such as clicking a \"Load More\" button.\n- **CSS Selectors**: Use these to target specific elements for extraction or interaction.\n- **Extraction Strategy**: Define how to extract structured data from the page.\n- **Wait Conditions**: Specify conditions to wait for before considering the page loaded.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "Class Usage",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of the arun method, containing properties like extracted_content that are mentioned in the document.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document discusses using the result of arun calls, which would be instances of CrawlResult, establishing a connection between the method and its return type.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding Session-Based Crawling\n\nSession-based crawling allows you to maintain a persistent browser session across multiple requests. This is crucial when:\n\n1. The content changes dynamically without URL changes\n2. You need to interact with the page (e.g., clicking buttons) between requests\n3. The site requires authentication or maintains state across pages\n\nCrawl4AI's `AsyncWebCrawler` class supports session-based crawling through the `session_id` parameter and related methods.\n\n## Basic Concepts\n\nBefore diving into examples, let's review some key concepts:\n\n- **Session ID**: A unique identifier for a browsing session. Use the same `session_id` across multiple `arun` calls to maintain state.\n- **JavaScript Execution**: Use the `js_code` parameter to execute JavaScript on the page, such as clicking a \"Load More\" button.\n- **CSS Selectors**: Use these to target specific elements for extraction or interaction.\n- **Extraction Strategy**: Define how to extract structured data from the page.\n- **Wait Conditions**: Specify conditions to wait for before considering the page loaded.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface for session-based crawling through abstract methods like crawl() and crawl_many() that implement the documented session maintenance and page interaction capabilities.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Understanding Session-Based Crawling\n\nSession-based crawling allows you to maintain a persistent browser session across multiple requests. This is crucial when:\n\n1. The content changes dynamically without URL changes\n2. You need to interact with the page (e.g., clicking buttons) between requests\n3. The site requires authentication or maintains state across pages\n\nCrawl4AI's `AsyncWebCrawler` class supports session-based crawling through the `session_id` parameter and related methods.\n\n## Basic Concepts\n\nBefore diving into examples, let's review some key concepts:\n\n- **Session ID**: A unique identifier for a browsing session. Use the same `session_id` across multiple `arun` calls to maintain state.\n- **JavaScript Execution**: Use the `js_code` parameter to execute JavaScript on the page, such as clicking a \"Load More\" button.\n- **CSS Selectors**: Use these to target specific elements for extraction or interaction.\n- **Extraction Strategy**: Define how to extract structured data from the page.\n- **Wait Conditions**: Specify conditions to wait for before considering the page loaded.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements session-based crawling through its sessions dictionary and associated methods like kill_session(), which maintain browser contexts and pages across multiple requests as described in the documentation.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Explanation of the Schema\n\nThe schema defines how to extract the data:\n\n- `name`: A descriptive name for the extraction task.\n- `baseSelector`: The CSS selector for the repeating elements (in this case, table rows).\n- `fields`: An array of fields to extract from each element:\n  - `name`: The name to give the extracted data.\n  - `selector`: The CSS selector to find the specific data within the base element.\n  - `type`: The type of data to extract (usually \"text\" for textual content).\n\n## Advantages of JsonCssExtractionStrategy\n\n1. **Speed**: CSS selectors are fast to execute, making this method efficient for large datasets.\n2. **Precision**: You can target exactly the elements you need.\n3. **Structured Output**: The result is already structured as JSON, ready for further processing.\n4. **No External Dependencies**: Unlike LLM-based strategies, this doesn't require any API calls to external services.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The JsonCssExtractionStrategy class is directly mentioned and explained in the text as a method for extracting structured data from web pages using CSS selectors.",
      "predicted_trace_chain": "css.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document describes the JsonCssExtractionStrategy, which is a specific implementation of the ExtractionStrategy abstract base class.",
      "ground_truth_relationship": "The code implements the documented schema structure by using BeautifulSoup's select() method to extract data according to the baseSelector and fields defined in the schema configuration.",
      "ground_truth_trace_chain": "css.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Explanation of the Schema\n\nThe schema defines how to extract the data:\n\n- `name`: A descriptive name for the extraction task.\n- `baseSelector`: The CSS selector for the repeating elements (in this case, table rows).\n- `fields`: An array of fields to extract from each element:\n  - `name`: The name to give the extracted data.\n  - `selector`: The CSS selector to find the specific data within the base element.\n  - `type`: The type of data to extract (usually \"text\" for textual content).\n\n## Advantages of JsonCssExtractionStrategy\n\n1. **Speed**: CSS selectors are fast to execute, making this method efficient for large datasets.\n2. **Precision**: You can target exactly the elements you need.\n3. **Structured Output**: The result is already structured as JSON, ready for further processing.\n4. **No External Dependencies**: Unlike LLM-based strategies, this doesn't require any API calls to external services.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 7,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "ExtractionStrategy is the base class for JsonCssExtractionStrategy, which is the main focus of the documentation.",
      "predicted_trace_chain": "css.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "ExtractionStrategy is the abstract base class that JsonCssExtractionStrategy inherits from, providing the foundation for all extraction strategies.",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the abstract foundation that enables different extraction methods like JsonCssExtractionStrategy to implement specific extraction logic while sharing common parallel processing capabilities through its run() method.",
      "ground_truth_trace_chain": "css.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Explanation of the Schema\n\nThe schema defines how to extract the data:\n\n- `name`: A descriptive name for the extraction task.\n- `baseSelector`: The CSS selector for the repeating elements (in this case, table rows).\n- `fields`: An array of fields to extract from each element:\n  - `name`: The name to give the extracted data.\n  - `selector`: The CSS selector to find the specific data within the base element.\n  - `type`: The type of data to extract (usually \"text\" for textual content).\n\n## Advantages of JsonCssExtractionStrategy\n\n1. **Speed**: CSS selectors are fast to execute, making this method efficient for large datasets.\n2. **Precision**: You can target exactly the elements you need.\n3. **Structured Output**: The result is already structured as JSON, ready for further processing.\n4. **No External Dependencies**: Unlike LLM-based strategies, this doesn't require any API calls to external services.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly mentioned and used in the example code to perform the web crawling and extraction process.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document shows how to use AsyncWebCrawler with JsonCssExtractionStrategy to extract data from web pages.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Explanation of the Schema\n\nThe schema defines how to extract the data:\n\n- `name`: A descriptive name for the extraction task.\n- `baseSelector`: The CSS selector for the repeating elements (in this case, table rows).\n- `fields`: An array of fields to extract from each element:\n  - `name`: The name to give the extracted data.\n  - `selector`: The CSS selector to find the specific data within the base element.\n  - `type`: The type of data to extract (usually \"text\" for textual content).\n\n## Advantages of JsonCssExtractionStrategy\n\n1. **Speed**: CSS selectors are fast to execute, making this method efficient for large datasets.\n2. **Precision**: You can target exactly the elements you need.\n3. **Structured Output**: The result is already structured as JSON, ready for further processing.\n4. **No External Dependencies**: Unlike LLM-based strategies, this doesn't require any API calls to external services.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in the example code to perform the crawling and extraction process.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document demonstrates how to use the arun() method of AsyncWebCrawler to execute the crawling process with the JsonCssExtractionStrategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Explanation of the Schema\n\nThe schema defines how to extract the data:\n\n- `name`: A descriptive name for the extraction task.\n- `baseSelector`: The CSS selector for the repeating elements (in this case, table rows).\n- `fields`: An array of fields to extract from each element:\n  - `name`: The name to give the extracted data.\n  - `selector`: The CSS selector to find the specific data within the base element.\n  - `type`: The type of data to extract (usually \"text\" for textual content).\n\n## Advantages of JsonCssExtractionStrategy\n\n1. **Speed**: CSS selectors are fast to execute, making this method efficient for large datasets.\n2. **Precision**: You can target exactly the elements you need.\n3. **Structured Output**: The result is already structured as JSON, ready for further processing.\n4. **No External Dependencies**: Unlike LLM-based strategies, this doesn't require any API calls to external services.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "output",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of the arun() method, containing the extracted content and success status.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult object, which is used to access the extracted content and success status of the crawling operation.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Explanation of the Schema\n\nThe schema defines how to extract the data:\n\n- `name`: A descriptive name for the extraction task.\n- `baseSelector`: The CSS selector for the repeating elements (in this case, table rows).\n- `fields`: An array of fields to extract from each element:\n  - `name`: The name to give the extracted data.\n  - `selector`: The CSS selector to find the specific data within the base element.\n  - `type`: The type of data to extract (usually \"text\" for textual content).\n\n## Advantages of JsonCssExtractionStrategy\n\n1. **Speed**: CSS selectors are fast to execute, making this method efficient for large datasets.\n2. **Precision**: You can target exactly the elements you need.\n3. **Structured Output**: The result is already structured as JSON, ready for further processing.\n4. **No External Dependencies**: Unlike LLM-based strategies, this doesn't require any API calls to external services.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is explicitly used in the example code to access the extracted data.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "After the crawling process, the extracted_content attribute of the CrawlResult is accessed to retrieve the structured data extracted by JsonCssExtractionStrategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Explanation of the Schema\n\nThe schema defines how to extract the data:\n\n- `name`: A descriptive name for the extraction task.\n- `baseSelector`: The CSS selector for the repeating elements (in this case, table rows).\n- `fields`: An array of fields to extract from each element:\n  - `name`: The name to give the extracted data.\n  - `selector`: The CSS selector to find the specific data within the base element.\n  - `type`: The type of data to extract (usually \"text\" for textual content).\n\n## Advantages of JsonCssExtractionStrategy\n\n1. **Speed**: CSS selectors are fast to execute, making this method efficient for large datasets.\n2. **Precision**: You can target exactly the elements you need.\n3. **Structured Output**: The result is already structured as JSON, ready for further processing.\n4. **No External Dependencies**: Unlike LLM-based strategies, this doesn't require any API calls to external services.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The success attribute of CrawlResult is explicitly used in the example code to check if the crawling process was successful.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "After the crawling process, the success attribute of the CrawlResult is checked to ensure the operation was successful before processing the extracted content.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Manual Anti-Bot Options\n\nWhile Magic Mode is recommended, you can also configure individual anti-detection features:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    simulate_user=True,        # Simulate human behavior\n    override_navigator=True    # Mask automation signals\n)\n```\n\nNote: When `magic=True` is used, you don't need to set these individual options.\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example, as it is the class that provides the arun method being called.",
      "predicted_trace_chain": "magic-mode.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document describes usage of the arun method, which is provided by the AsyncWebCrawler class. The trace goes through AsyncWebCrawler to reach its arun method.",
      "ground_truth_relationship": "The documentation discusses manual anti-bot options like 'simulate_user' and 'override_navigator' which are passed as kwargs to the AsyncWebCrawler's arun() method and forwarded to the crawler_strategy's constructor.",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Manual Anti-Bot Options\n\nWhile Magic Mode is recommended, you can also configure individual anti-detection features:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    simulate_user=True,        # Simulate human behavior\n    override_navigator=True    # Mask automation signals\n)\n```\n\nNote: When `magic=True` is used, you don't need to set these individual options.\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method is explicitly used in the code example to demonstrate how to configure anti-bot features.",
      "predicted_trace_chain": "magic-mode.md -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly shows usage of the arun() method, so the trace is direct from the document to the method.",
      "ground_truth_relationship": "The arun() method accepts keyword arguments like simulate_user and override_navigator which enable fine-grained control over anti-bot features as documented in the Manual Anti-Bot Options section.",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Manual Anti-Bot Options\n\nWhile Magic Mode is recommended, you can also configure individual anti-detection features:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    simulate_user=True,        # Simulate human behavior\n    override_navigator=True    # Mask automation signals\n)\n```\n\nNote: When `magic=True` is used, you don't need to set these individual options.\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The AsyncPlaywrightCrawlerStrategy likely implements the anti-bot features mentioned in the document, such as simulating user behavior and overriding navigator properties.",
      "predicted_trace_chain": "magic-mode.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The document describes features that are likely implemented in the AsyncPlaywrightCrawlerStrategy, which is used by AsyncWebCrawler to perform the actual crawling.",
      "ground_truth_relationship": "The code implements manual anti-bot options through parameters like simulate_user and override_navigator in the crawl method, which inject scripts to override navigator properties and simulate user interactions when these flags are set to true.",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Manual Anti-Bot Options\n\nWhile Magic Mode is recommended, you can also configure individual anti-detection features:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    simulate_user=True,        # Simulate human behavior\n    override_navigator=True    # Mask automation signals\n)\n```\n\nNote: When `magic=True` is used, you don't need to set these individual options.\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy class defines the abstract interface for implementing the documented anti-bot features through abstract methods like crawl() that accept kwargs parameters where options like simulate_user and override_navigator can be passed.",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Manual Anti-Bot Options\n\nWhile Magic Mode is recommended, you can also configure individual anti-detection features:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    simulate_user=True,        # Simulate human behavior\n    override_navigator=True    # Mask automation signals\n)\n```\n\nNote: When `magic=True` is used, you don't need to set these individual options.\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class captures all the crawling outcomes including success/failure status and extracted content, which provides the return structure for the anti-bot crawling operations documented in the manual configuration options.",
      "ground_truth_trace_chain": "magic-mode.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Example: Extracting Cryptocurrency Prices from Coinbase\n\nLet's look at an example that extracts cryptocurrency prices from the Coinbase explore page.\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_structured_data_using_css_extractor():\n    print(\"\\n--- Using JsonCssExtractionStrategy for Fast Structured Output ---\")\n    \n    # Define the extraction schema\n    schema = {\n        \"name\": \"Coinbase Crypto Prices\",\n        \"baseSelector\": \".cds-tableRow-t45thuk\",\n        \"fields\": [\n            {\n                \"name\": \"crypto\",\n                \"selector\": \"td:nth-child(1) h2\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"symbol\",\n                \"selector\": \"td:nth-child(1) p\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"price\",\n                \"selector\": \"td:nth-child(2)\",\n                \"type\": \"text\",\n            }\n        ],\n    }\n\n    # Create the extraction strategy\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    # Use the AsyncWebCrawler with the extraction strategy\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.coinbase.com/explore\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        # Parse the extracted content\n        crypto_prices = json.loads(result.extracted_content)\n        print(f\"Successfully extracted {len(crypto_prices)} cryptocurrency prices\")\n        print(json.dumps(crypto_prices[0], indent=2))\n\n    return crypto_prices\n\n# Run the async function\nasyncio.run(extract_structured_data_using_css_extractor())",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly imported and used in the example code to create a crawler instance for extracting cryptocurrency prices from Coinbase.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly imports and uses the AsyncWebCrawler class, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler code implements the cryptocurrency price extraction example by providing the core crawling functionality used in the arun() method to fetch and process the Coinbase webpage according to the specified JsonCssExtractionStrategy schema.",
      "ground_truth_trace_chain": "css.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Extracting Cryptocurrency Prices from Coinbase\n\nLet's look at an example that extracts cryptocurrency prices from the Coinbase explore page.\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_structured_data_using_css_extractor():\n    print(\"\\n--- Using JsonCssExtractionStrategy for Fast Structured Output ---\")\n    \n    # Define the extraction schema\n    schema = {\n        \"name\": \"Coinbase Crypto Prices\",\n        \"baseSelector\": \".cds-tableRow-t45thuk\",\n        \"fields\": [\n            {\n                \"name\": \"crypto\",\n                \"selector\": \"td:nth-child(1) h2\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"symbol\",\n                \"selector\": \"td:nth-child(1) p\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"price\",\n                \"selector\": \"td:nth-child(2)\",\n                \"type\": \"text\",\n            }\n        ],\n    }\n\n    # Create the extraction strategy\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    # Use the AsyncWebCrawler with the extraction strategy\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.coinbase.com/explore\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        # Parse the extracted content\n        crypto_prices = json.loads(result.extracted_content)\n        print(f\"Successfully extracted {len(crypto_prices)} cryptocurrency prices\")\n        print(json.dumps(crypto_prices[0], indent=2))\n\n    return crypto_prices\n\n# Run the async function\nasyncio.run(extract_structured_data_using_css_extractor())",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly imported and used in the example code to define the extraction strategy for cryptocurrency prices.",
      "predicted_trace_chain": "css.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly imports and uses the JsonCssExtractionStrategy class, so there are no intermediate steps.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class processes a schema-defined structure to extract cryptocurrency data from Coinbase's HTML using CSS selectors, where the example code demonstrates creating a schema with baseSelector for table rows and field selectors for crypto name, symbol, and price.",
      "ground_truth_trace_chain": "css.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Extracting Cryptocurrency Prices from Coinbase\n\nLet's look at an example that extracts cryptocurrency prices from the Coinbase explore page.\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_structured_data_using_css_extractor():\n    print(\"\\n--- Using JsonCssExtractionStrategy for Fast Structured Output ---\")\n    \n    # Define the extraction schema\n    schema = {\n        \"name\": \"Coinbase Crypto Prices\",\n        \"baseSelector\": \".cds-tableRow-t45thuk\",\n        \"fields\": [\n            {\n                \"name\": \"crypto\",\n                \"selector\": \"td:nth-child(1) h2\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"symbol\",\n                \"selector\": \"td:nth-child(1) p\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"price\",\n                \"selector\": \"td:nth-child(2)\",\n                \"type\": \"text\",\n            }\n        ],\n    }\n\n    # Create the extraction strategy\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    # Use the AsyncWebCrawler with the extraction strategy\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.coinbase.com/explore\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        # Parse the extracted content\n        crypto_prices = json.loads(result.extracted_content)\n        print(f\"Successfully extracted {len(crypto_prices)} cryptocurrency prices\")\n        print(json.dumps(crypto_prices[0], indent=2))\n\n    return crypto_prices\n\n# Run the async function\nasyncio.run(extract_structured_data_using_css_extractor())",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the example code to perform the web crawling and extraction process.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler, which provides the arun() method. The intermediate step of AsyncWebCrawler is necessary as it's the class that contains the arun() method.",
      "ground_truth_relationship": "The arun() method implements the core crawling functionality demonstrated in the documentation example by handling the URL request to Coinbase, applying the specified JsonCssExtractionStrategy, and returning structured cryptocurrency price data through CrawlResult.",
      "ground_truth_trace_chain": "css.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Extracting Cryptocurrency Prices from Coinbase\n\nLet's look at an example that extracts cryptocurrency prices from the Coinbase explore page.\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_structured_data_using_css_extractor():\n    print(\"\\n--- Using JsonCssExtractionStrategy for Fast Structured Output ---\")\n    \n    # Define the extraction schema\n    schema = {\n        \"name\": \"Coinbase Crypto Prices\",\n        \"baseSelector\": \".cds-tableRow-t45thuk\",\n        \"fields\": [\n            {\n                \"name\": \"crypto\",\n                \"selector\": \"td:nth-child(1) h2\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"symbol\",\n                \"selector\": \"td:nth-child(1) p\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"price\",\n                \"selector\": \"td:nth-child(2)\",\n                \"type\": \"text\",\n            }\n        ],\n    }\n\n    # Create the extraction strategy\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    # Use the AsyncWebCrawler with the extraction strategy\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.coinbase.com/explore\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        # Parse the extracted content\n        crypto_prices = json.loads(result.extracted_content)\n        print(f\"Successfully extracted {len(crypto_prices)} cryptocurrency prices\")\n        print(json.dumps(crypto_prices[0], indent=2))\n\n    return crypto_prices\n\n# Run the async function\nasyncio.run(extract_structured_data_using_css_extractor())",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The CrawlResult class is implicitly used in the example code. The 'result' variable returned by crawler.arun() is an instance of CrawlResult, as evidenced by accessing its 'success' and 'extracted_content' attributes.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler's arun() method, which returns a CrawlResult. The intermediate steps are necessary to show how the CrawlResult is obtained from the crawling process.",
      "ground_truth_relationship": "The CrawlResult class stores the extracted cryptocurrency data from Coinbase in its extracted_content field, which is used in the example code to verify successful extraction and parse the crypto prices into a structured format.",
      "ground_truth_trace_chain": "css.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Extracting Cryptocurrency Prices from Coinbase\n\nLet's look at an example that extracts cryptocurrency prices from the Coinbase explore page.\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_structured_data_using_css_extractor():\n    print(\"\\n--- Using JsonCssExtractionStrategy for Fast Structured Output ---\")\n    \n    # Define the extraction schema\n    schema = {\n        \"name\": \"Coinbase Crypto Prices\",\n        \"baseSelector\": \".cds-tableRow-t45thuk\",\n        \"fields\": [\n            {\n                \"name\": \"crypto\",\n                \"selector\": \"td:nth-child(1) h2\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"symbol\",\n                \"selector\": \"td:nth-child(1) p\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"price\",\n                \"selector\": \"td:nth-child(2)\",\n                \"type\": \"text\",\n            }\n        ],\n    }\n\n    # Create the extraction strategy\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    # Use the AsyncWebCrawler with the extraction strategy\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.coinbase.com/explore\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        # Parse the extracted content\n        crypto_prices = json.loads(result.extracted_content)\n        print(f\"Successfully extracted {len(crypto_prices)} cryptocurrency prices\")\n        print(json.dumps(crypto_prices[0], indent=2))\n\n    return crypto_prices\n\n# Run the async function\nasyncio.run(extract_structured_data_using_css_extractor())",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is explicitly used in the example code to access the extracted cryptocurrency price data.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler's arun() method, which returns a CrawlResult. The CrawlResult contains the extracted_content attribute. This chain shows how the extracted content is accessed from the crawling result.",
      "ground_truth_relationship": "The extracted_content property stores the scraped cryptocurrency data in string format that gets parsed into JSON containing name, symbol, and price fields from Coinbase's webpage.",
      "ground_truth_trace_chain": "css.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Extracting Cryptocurrency Prices from Coinbase\n\nLet's look at an example that extracts cryptocurrency prices from the Coinbase explore page.\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_structured_data_using_css_extractor():\n    print(\"\\n--- Using JsonCssExtractionStrategy for Fast Structured Output ---\")\n    \n    # Define the extraction schema\n    schema = {\n        \"name\": \"Coinbase Crypto Prices\",\n        \"baseSelector\": \".cds-tableRow-t45thuk\",\n        \"fields\": [\n            {\n                \"name\": \"crypto\",\n                \"selector\": \"td:nth-child(1) h2\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"symbol\",\n                \"selector\": \"td:nth-child(1) p\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"price\",\n                \"selector\": \"td:nth-child(2)\",\n                \"type\": \"text\",\n            }\n        ],\n    }\n\n    # Create the extraction strategy\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    # Use the AsyncWebCrawler with the extraction strategy\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.coinbase.com/explore\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        # Parse the extracted content\n        crypto_prices = json.loads(result.extracted_content)\n        print(f\"Successfully extracted {len(crypto_prices)} cryptocurrency prices\")\n        print(json.dumps(crypto_prices[0], indent=2))\n\n    return crypto_prices\n\n# Run the async function\nasyncio.run(extract_structured_data_using_css_extractor())",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The success attribute of CrawlResult is explicitly used in the example code to check if the crawling operation was successful.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler's arun() method, which returns a CrawlResult. The CrawlResult contains the success attribute. This chain shows how the success status is checked from the crawling result.",
      "ground_truth_relationship": "The CrawlResult.success boolean property is used in the example code to verify that the cryptocurrency price crawl operation completed successfully before proceeding with data extraction.",
      "ground_truth_trace_chain": "css.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Extracting Cryptocurrency Prices from Coinbase\n\nLet's look at an example that extracts cryptocurrency prices from the Coinbase explore page.\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_structured_data_using_css_extractor():\n    print(\"\\n--- Using JsonCssExtractionStrategy for Fast Structured Output ---\")\n    \n    # Define the extraction schema\n    schema = {\n        \"name\": \"Coinbase Crypto Prices\",\n        \"baseSelector\": \".cds-tableRow-t45thuk\",\n        \"fields\": [\n            {\n                \"name\": \"crypto\",\n                \"selector\": \"td:nth-child(1) h2\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"symbol\",\n                \"selector\": \"td:nth-child(1) p\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"price\",\n                \"selector\": \"td:nth-child(2)\",\n                \"type\": \"text\",\n            }\n        ],\n    }\n\n    # Create the extraction strategy\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    # Use the AsyncWebCrawler with the extraction strategy\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.coinbase.com/explore\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        # Parse the extracted content\n        crypto_prices = json.loads(result.extracted_content)\n        print(f\"Successfully extracted {len(crypto_prices)} cryptocurrency prices\")\n        print(json.dumps(crypto_prices[0], indent=2))\n\n    return crypto_prices\n\n# Run the async function\nasyncio.run(extract_structured_data_using_css_extractor())",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 6,
      "artifact_title": "ChunkingStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "ChunkingStrategy is the base class for JsonCssExtractionStrategy, which is explicitly used in the example. While not directly mentioned, it's part of the inheritance hierarchy.",
      "predicted_trace_chain": "css.md -> JsonCssExtractionStrategy -> ChunkingStrategy",
      "predicted_trace_chain_explanation": "The document uses JsonCssExtractionStrategy, which inherits from ChunkingStrategy. The intermediate step of JsonCssExtractionStrategy is necessary to show the inheritance relationship.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Extracting Cryptocurrency Prices from Coinbase\n\nLet's look at an example that extracts cryptocurrency prices from the Coinbase explore page.\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_structured_data_using_css_extractor():\n    print(\"\\n--- Using JsonCssExtractionStrategy for Fast Structured Output ---\")\n    \n    # Define the extraction schema\n    schema = {\n        \"name\": \"Coinbase Crypto Prices\",\n        \"baseSelector\": \".cds-tableRow-t45thuk\",\n        \"fields\": [\n            {\n                \"name\": \"crypto\",\n                \"selector\": \"td:nth-child(1) h2\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"symbol\",\n                \"selector\": \"td:nth-child(1) p\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"price\",\n                \"selector\": \"td:nth-child(2)\",\n                \"type\": \"text\",\n            }\n        ],\n    }\n\n    # Create the extraction strategy\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    # Use the AsyncWebCrawler with the extraction strategy\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.coinbase.com/explore\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        # Parse the extracted content\n        crypto_prices = json.loads(result.extracted_content)\n        print(f\"Successfully extracted {len(crypto_prices)} cryptocurrency prices\")\n        print(json.dumps(crypto_prices[0], indent=2))\n\n    return crypto_prices\n\n# Run the async function\nasyncio.run(extract_structured_data_using_css_extractor())",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 24,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "ExtractionStrategy is the base class for JsonCssExtractionStrategy, which is explicitly used in the example. While not directly mentioned, it's part of the inheritance hierarchy.",
      "predicted_trace_chain": "css.md -> JsonCssExtractionStrategy -> ExtractionStrategy",
      "predicted_trace_chain_explanation": "The document uses JsonCssExtractionStrategy, which inherits from ExtractionStrategy. The intermediate step of JsonCssExtractionStrategy is necessary to show the inheritance relationship.",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the core functionality shown in the Coinbase example by defining abstract extract() and run() methods that concrete strategies like JsonCssExtractionStrategy inherit to implement specific data extraction patterns.",
      "ground_truth_trace_chain": "css.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Extracting Cryptocurrency Prices from Coinbase\n\nLet's look at an example that extracts cryptocurrency prices from the Coinbase explore page.\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_structured_data_using_css_extractor():\n    print(\"\\n--- Using JsonCssExtractionStrategy for Fast Structured Output ---\")\n    \n    # Define the extraction schema\n    schema = {\n        \"name\": \"Coinbase Crypto Prices\",\n        \"baseSelector\": \".cds-tableRow-t45thuk\",\n        \"fields\": [\n            {\n                \"name\": \"crypto\",\n                \"selector\": \"td:nth-child(1) h2\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"symbol\",\n                \"selector\": \"td:nth-child(1) p\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"price\",\n                \"selector\": \"td:nth-child(2)\",\n                \"type\": \"text\",\n            }\n        ],\n    }\n\n    # Create the extraction strategy\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    # Use the AsyncWebCrawler with the extraction strategy\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.coinbase.com/explore\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        # Parse the extracted content\n        crypto_prices = json.loads(result.extracted_content)\n        print(f\"Successfully extracted {len(crypto_prices)} cryptocurrency prices\")\n        print(json.dumps(crypto_prices[0], indent=2))\n\n    return crypto_prices\n\n# Run the async function\nasyncio.run(extract_structured_data_using_css_extractor())",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods that enable the cryptocurrency price extraction example by providing essential crawling operations like crawl(), crawl_many(), and screenshot capabilities.",
      "ground_truth_trace_chain": "css.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Example: Extracting Cryptocurrency Prices from Coinbase\n\nLet's look at an example that extracts cryptocurrency prices from the Coinbase explore page.\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_structured_data_using_css_extractor():\n    print(\"\\n--- Using JsonCssExtractionStrategy for Fast Structured Output ---\")\n    \n    # Define the extraction schema\n    schema = {\n        \"name\": \"Coinbase Crypto Prices\",\n        \"baseSelector\": \".cds-tableRow-t45thuk\",\n        \"fields\": [\n            {\n                \"name\": \"crypto\",\n                \"selector\": \"td:nth-child(1) h2\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"symbol\",\n                \"selector\": \"td:nth-child(1) p\",\n                \"type\": \"text\",\n            },\n            {\n                \"name\": \"price\",\n                \"selector\": \"td:nth-child(2)\",\n                \"type\": \"text\",\n            }\n        ],\n    }\n\n    # Create the extraction strategy\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    # Use the AsyncWebCrawler with the extraction strategy\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.coinbase.com/explore\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        # Parse the extracted content\n        crypto_prices = json.loads(result.extracted_content)\n        print(f\"Successfully extracted {len(crypto_prices)} cryptocurrency prices\")\n        print(json.dumps(crypto_prices[0], indent=2))\n\n    return crypto_prices\n\n# Run the async function\nasyncio.run(extract_structured_data_using_css_extractor())",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy implements the browser automation logic needed to extract cryptocurrency prices from Coinbase's explore page as shown in the documentation example, handling page navigation, DOM manipulation, and data extraction through Playwright's API.",
      "ground_truth_trace_chain": "css.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Strategy Selection Guide\n\nChoose your strategy based on these factors:\n\n1. **Content Structure**\n   - Well-structured HTML \u2192 Use CSS Strategy\n   - Natural language text \u2192 Use LLM Strategy\n   - Mixed/Complex content \u2192 Use Cosine Strategy\n\n2. **Performance Requirements**\n   - Fastest: CSS Strategy\n   - Moderate: Cosine Strategy\n   - Variable: LLM Strategy (depends on provider)\n\n3. **Accuracy Needs**\n   - Highest structure accuracy: CSS Strategy\n   - Best semantic understanding: LLM Strategy\n   - Best content relevance: Cosine Strategy",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The CosineStrategy is explicitly mentioned in the documentation as one of the available extraction strategies. It is described as using 'similarity-based clustering to identify and extract relevant content sections'.",
      "predicted_trace_chain": "overview.md -> ExtractionStrategy -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document mentions CosineStrategy as a concrete implementation of an extraction strategy. ExtractionStrategy is the base class for all extraction strategies, so CosineStrategy would inherit from it.",
      "ground_truth_relationship": "The CosineStrategy class directly implements the document's 'Mixed/Complex content' recommendation by using cosine similarity and hierarchical clustering to process and analyze text content with moderate performance characteristics.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Strategy Selection Guide\n\nChoose your strategy based on these factors:\n\n1. **Content Structure**\n   - Well-structured HTML \u2192 Use CSS Strategy\n   - Natural language text \u2192 Use LLM Strategy\n   - Mixed/Complex content \u2192 Use Cosine Strategy\n\n2. **Performance Requirements**\n   - Fastest: CSS Strategy\n   - Moderate: Cosine Strategy\n   - Variable: LLM Strategy (depends on provider)\n\n3. **Accuracy Needs**\n   - Highest structure accuracy: CSS Strategy\n   - Best semantic understanding: LLM Strategy\n   - Best content relevance: Cosine Strategy",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The JsonCssExtractionStrategy is explicitly mentioned in the documentation as one of the available extraction strategies. It is described as extracting 'data using CSS selectors' and being 'fast, reliable, and perfect for consistently structured pages'.",
      "predicted_trace_chain": "overview.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document mentions JsonCssExtractionStrategy as a concrete implementation of an extraction strategy. ExtractionStrategy is the base class for all extraction strategies, so JsonCssExtractionStrategy would inherit from it.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class directly implements the CSS Strategy mentioned in the documentation by using CSS selectors to efficiently parse well-structured HTML content as recommended in the strategy selection guide.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Strategy Selection Guide\n\nChoose your strategy based on these factors:\n\n1. **Content Structure**\n   - Well-structured HTML \u2192 Use CSS Strategy\n   - Natural language text \u2192 Use LLM Strategy\n   - Mixed/Complex content \u2192 Use Cosine Strategy\n\n2. **Performance Requirements**\n   - Fastest: CSS Strategy\n   - Moderate: Cosine Strategy\n   - Variable: LLM Strategy (depends on provider)\n\n3. **Accuracy Needs**\n   - Highest structure accuracy: CSS Strategy\n   - Best semantic understanding: LLM Strategy\n   - Best content relevance: Cosine Strategy",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 24,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The LLMExtractionStrategy is explicitly mentioned in the documentation as one of the available extraction strategies. It is described as using 'Language Models to extract structured data from web content' and being 'highly flexible and can understand content semantically'.",
      "predicted_trace_chain": "overview.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document mentions LLMExtractionStrategy as a concrete implementation of an extraction strategy. ExtractionStrategy is the base class for all extraction strategies, so LLMExtractionStrategy would inherit from it.",
      "ground_truth_relationship": "The LLMExtractionStrategy class implements the LLM Strategy option described in the documentation, specifically handling natural language text processing with configurable performance based on the provider and offering semantic understanding through its extract() method.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Strategy Selection Guide\n\nChoose your strategy based on these factors:\n\n1. **Content Structure**\n   - Well-structured HTML \u2192 Use CSS Strategy\n   - Natural language text \u2192 Use LLM Strategy\n   - Mixed/Complex content \u2192 Use Cosine Strategy\n\n2. **Performance Requirements**\n   - Fastest: CSS Strategy\n   - Moderate: Cosine Strategy\n   - Variable: LLM Strategy (depends on provider)\n\n3. **Accuracy Needs**\n   - Highest structure accuracy: CSS Strategy\n   - Best semantic understanding: LLM Strategy\n   - Best content relevance: Cosine Strategy",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 21,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "While not explicitly mentioned in the given text snippet, ExtractionStrategy is implicitly referenced as the base class for all the mentioned extraction strategies (CosineStrategy, JsonCssExtractionStrategy, and LLMExtractionStrategy).",
      "predicted_trace_chain": "overview.md -> ExtractionStrategy",
      "predicted_trace_chain_explanation": "The document discusses various extraction strategies, which all would inherit from the ExtractionStrategy base class.",
      "ground_truth_relationship": "The ExtractionStrategy abstract class provides the technical foundation for implementing the three distinct strategies (CSS, LLM, and Cosine) outlined in the strategy selection guide through its abstract extract method and parallel processing capabilities.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Identity Management\n\nControl how your crawler appears to websites:\n\n```python\n# Custom user agent\nasync with AsyncWebCrawler(\n    user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Custom headers\nheaders = {\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cache-Control\": \"no-cache\"\n}\nasync with AsyncWebCrawler(headers=headers) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code examples to demonstrate how to set custom user agents and headers for identity management.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of AsyncWebCrawler for configuring browser identity.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements identity management through its arun method which accepts user_agent and **kwargs parameters that allow customization of crawler headers and user agent strings as demonstrated in the documentation examples.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Identity Management\n\nControl how your crawler appears to websites:\n\n```python\n# Custom user agent\nasync with AsyncWebCrawler(\n    user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Custom headers\nheaders = {\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cache-Control\": \"no-cache\"\n}\nasync with AsyncWebCrawler(headers=headers) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method invocation",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code examples to perform the crawling operation with the specified configurations.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows how to use the AsyncWebCrawler class, which leads to the invocation of its arun() method for actual crawling.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method implements custom identity management by accepting user_agent and **kwargs parameters which allow modification of crawler headers as shown in the documentation examples.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Identity Management\n\nControl how your crawler appears to websites:\n\n```python\n# Custom user agent\nasync with AsyncWebCrawler(\n    user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Custom headers\nheaders = {\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cache-Control\": \"no-cache\"\n}\nasync with AsyncWebCrawler(headers=headers) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementation",
      "relationship_explanation": "While not explicitly mentioned, AsyncPlaywrightCrawlerStrategy is the likely implementation of the crawler strategy used by AsyncWebCrawler, handling the user agent and header configurations.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The AsyncWebCrawler uses a crawler strategy, which is implemented by AsyncPlaywrightCrawlerStrategy to handle browser configurations.",
      "ground_truth_relationship": "The code implements identity management by allowing custom user agents and headers to be passed through the AsyncPlaywrightCrawlerStrategy class constructor and applied to browser contexts using set_custom_headers() and update_user_agent() methods.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Identity Management\n\nControl how your crawler appears to websites:\n\n```python\n# Custom user agent\nasync with AsyncWebCrawler(\n    user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Custom headers\nheaders = {\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cache-Control\": \"no-cache\"\n}\nasync with AsyncWebCrawler(headers=headers) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 3,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_relationship": "implicit",
      "relationship_type": "potential usage",
      "relationship_explanation": "While not directly mentioned, the set_hook() method might be used internally to set up custom behaviors for user agent and header management.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_trace_chain_explanation": "The identity management features might utilize hooks, which would be set using the set_hook() method of the underlying strategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Identity Management\n\nControl how your crawler appears to websites:\n\n```python\n# Custom user agent\nasync with AsyncWebCrawler(\n    user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Custom headers\nheaders = {\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cache-Control\": \"no-cache\"\n}\nasync with AsyncWebCrawler(headers=headers) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the interface for implementing crawler identity management through methods like update_user_agent() which enables the documented functionality of customizing how the crawler appears to websites.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Identity Management\n\nControl how your crawler appears to websites:\n\n```python\n# Custom user agent\nasync with AsyncWebCrawler(\n    user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Custom headers\nheaders = {\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cache-Control\": \"no-cache\"\n}\nasync with AsyncWebCrawler(headers=headers) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class stores crawled webpage data including response_headers and metadata fields that directly receive the custom identity information (user agents and headers) described in the documentation.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Complex Interactions Example\n\nHere's an example of handling a dynamic page with multiple interactions:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler() as crawler:\n        # Initial page load\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Handle cookie consent\n            js_code=\"document.querySelector('.cookie-accept')?.click();\",\n            wait_for=\"css:.main-content\"\n        )\n\n        # Load more content\n        session_id = \"dynamic_session\"  # Keep session for multiple interactions\n        \n        for page in range(3):  # Load 3 pages of content\n            result = await crawler.arun(\n                url=\"https://example.com\",\n                session_id=session_id,\n                js_code=[\n                    # Scroll to bottom\n                    \"window.scrollTo(0, document.body.scrollHeight);\",\n                    # Store current item count\n                    \"window.previousCount = document.querySelectorAll('.item').length;\",\n                    # Click load more\n                    \"document.querySelector('.load-more')?.click();\"\n                ],\n                # Wait for new items\n                wait_for=\"\"\"() => {\n                    const currentCount = document.querySelectorAll('.item').length;\n                    return currentCount > window.previousCount;\n                }\"\"\",\n                # Only execute JS without reloading page\n                js_only=True if page > 0 else False\n            )\n            \n            # Process content after each load\n            print(f\"Page {page + 1} items:\", len(result.cleaned_html))\n            \n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to create a crawler instance for handling dynamic content.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented complex page interactions through its arun method, which supports session management, JavaScript execution, and dynamic content loading through parameters like session_id, js_code, and wait_for as shown in the example.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complex Interactions Example\n\nHere's an example of handling a dynamic page with multiple interactions:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler() as crawler:\n        # Initial page load\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Handle cookie consent\n            js_code=\"document.querySelector('.cookie-accept')?.click();\",\n            wait_for=\"css:.main-content\"\n        )\n\n        # Load more content\n        session_id = \"dynamic_session\"  # Keep session for multiple interactions\n        \n        for page in range(3):  # Load 3 pages of content\n            result = await crawler.arun(\n                url=\"https://example.com\",\n                session_id=session_id,\n                js_code=[\n                    # Scroll to bottom\n                    \"window.scrollTo(0, document.body.scrollHeight);\",\n                    # Store current item count\n                    \"window.previousCount = document.querySelectorAll('.item').length;\",\n                    # Click load more\n                    \"document.querySelector('.load-more')?.click();\"\n                ],\n                # Wait for new items\n                wait_for=\"\"\"() => {\n                    const currentCount = document.querySelectorAll('.item').length;\n                    return currentCount > window.previousCount;\n                }\"\"\",\n                # Only execute JS without reloading page\n                js_only=True if page > 0 else False\n            )\n            \n            # Process content after each load\n            print(f\"Page {page + 1} items:\", len(result.cleaned_html))\n            \n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method invocation",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called multiple times in the example to perform crawling operations with various parameters.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler, which contains the arun() method being invoked.",
      "ground_truth_relationship": "The arun() method implements the documented dynamic page crawling by accepting parameters for URL, JavaScript code execution, session management, and wait conditions, which enables the complex interactions shown in the example like handling cookie consent and infinite scroll pagination.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complex Interactions Example\n\nHere's an example of handling a dynamic page with multiple interactions:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler() as crawler:\n        # Initial page load\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Handle cookie consent\n            js_code=\"document.querySelector('.cookie-accept')?.click();\",\n            wait_for=\"css:.main-content\"\n        )\n\n        # Load more content\n        session_id = \"dynamic_session\"  # Keep session for multiple interactions\n        \n        for page in range(3):  # Load 3 pages of content\n            result = await crawler.arun(\n                url=\"https://example.com\",\n                session_id=session_id,\n                js_code=[\n                    # Scroll to bottom\n                    \"window.scrollTo(0, document.body.scrollHeight);\",\n                    # Store current item count\n                    \"window.previousCount = document.querySelectorAll('.item').length;\",\n                    # Click load more\n                    \"document.querySelector('.load-more')?.click();\"\n                ],\n                # Wait for new items\n                wait_for=\"\"\"() => {\n                    const currentCount = document.querySelectorAll('.item').length;\n                    return currentCount > window.previousCount;\n                }\"\"\",\n                # Only execute JS without reloading page\n                js_only=True if page > 0 else False\n            )\n            \n            # Process content after each load\n            print(f\"Page {page + 1} items:\", len(result.cleaned_html))\n            \n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 2,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_relationship": "explicit",
      "relationship_type": "method invocation",
      "relationship_explanation": "The kill_session() method is explicitly called at the end of the example to clean up the session.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler, which uses a crawler strategy (implicitly AsyncPlaywrightCrawlerStrategy), which contains the kill_session() method being called.",
      "ground_truth_relationship": "The kill_session method is used at the end of the complex interaction example to clean up browser resources by closing the page and context objects associated with a specific session_id, preventing memory leaks during multi-page dynamic content crawling.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complex Interactions Example\n\nHere's an example of handling a dynamic page with multiple interactions:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler() as crawler:\n        # Initial page load\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Handle cookie consent\n            js_code=\"document.querySelector('.cookie-accept')?.click();\",\n            wait_for=\"css:.main-content\"\n        )\n\n        # Load more content\n        session_id = \"dynamic_session\"  # Keep session for multiple interactions\n        \n        for page in range(3):  # Load 3 pages of content\n            result = await crawler.arun(\n                url=\"https://example.com\",\n                session_id=session_id,\n                js_code=[\n                    # Scroll to bottom\n                    \"window.scrollTo(0, document.body.scrollHeight);\",\n                    # Store current item count\n                    \"window.previousCount = document.querySelectorAll('.item').length;\",\n                    # Click load more\n                    \"document.querySelector('.load-more')?.click();\"\n                ],\n                # Wait for new items\n                wait_for=\"\"\"() => {\n                    const currentCount = document.querySelectorAll('.item').length;\n                    return currentCount > window.previousCount;\n                }\"\"\",\n                # Only execute JS without reloading page\n                js_only=True if page > 0 else False\n            )\n            \n            # Process content after each load\n            print(f\"Page {page + 1} items:\", len(result.cleaned_html))\n            \n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as evidenced by accessing the cleaned_html attribute of the result.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows usage of arun(), which returns a CrawlResult object, as implied by accessing its attributes.",
      "ground_truth_relationship": "The CrawlResult class defines the data structure that stores and organizes the crawled content, headers, and metadata returned by each crawler.arun() call in the documented dynamic content crawling example.",
      "ground_truth_trace_chain": "page-interaction.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complex Interactions Example\n\nHere's an example of handling a dynamic page with multiple interactions:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler() as crawler:\n        # Initial page load\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Handle cookie consent\n            js_code=\"document.querySelector('.cookie-accept')?.click();\",\n            wait_for=\"css:.main-content\"\n        )\n\n        # Load more content\n        session_id = \"dynamic_session\"  # Keep session for multiple interactions\n        \n        for page in range(3):  # Load 3 pages of content\n            result = await crawler.arun(\n                url=\"https://example.com\",\n                session_id=session_id,\n                js_code=[\n                    # Scroll to bottom\n                    \"window.scrollTo(0, document.body.scrollHeight);\",\n                    # Store current item count\n                    \"window.previousCount = document.querySelectorAll('.item').length;\",\n                    # Click load more\n                    \"document.querySelector('.load-more')?.click();\"\n                ],\n                # Wait for new items\n                wait_for=\"\"\"() => {\n                    const currentCount = document.querySelectorAll('.item').length;\n                    return currentCount > window.previousCount;\n                }\"\"\",\n                # Only execute JS without reloading page\n                js_only=True if page > 0 else False\n            )\n            \n            # Process content after each load\n            print(f\"Page {page + 1} items:\", len(result.cleaned_html))\n            \n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 9,
      "artifact_title": "CrawlResult.cleaned_html",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The cleaned_html attribute of CrawlResult is implicitly used in the example when printing the number of items after each load.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.cleaned_html",
      "predicted_trace_chain_explanation": "The document shows usage of arun(), which returns a CrawlResult, from which the cleaned_html attribute is accessed.",
      "ground_truth_relationship": "The cleaned_html attribute stores the processed HTML content after each dynamic page load iteration as shown in the example where it's used to track the number of loaded items.",
      "ground_truth_trace_chain": "page-interaction.md -> CrawlResult.cleaned_html",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complex Interactions Example\n\nHere's an example of handling a dynamic page with multiple interactions:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler() as crawler:\n        # Initial page load\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Handle cookie consent\n            js_code=\"document.querySelector('.cookie-accept')?.click();\",\n            wait_for=\"css:.main-content\"\n        )\n\n        # Load more content\n        session_id = \"dynamic_session\"  # Keep session for multiple interactions\n        \n        for page in range(3):  # Load 3 pages of content\n            result = await crawler.arun(\n                url=\"https://example.com\",\n                session_id=session_id,\n                js_code=[\n                    # Scroll to bottom\n                    \"window.scrollTo(0, document.body.scrollHeight);\",\n                    # Store current item count\n                    \"window.previousCount = document.querySelectorAll('.item').length;\",\n                    # Click load more\n                    \"document.querySelector('.load-more')?.click();\"\n                ],\n                # Wait for new items\n                wait_for=\"\"\"() => {\n                    const currentCount = document.querySelectorAll('.item').length;\n                    return currentCount > window.previousCount;\n                }\"\"\",\n                # Only execute JS without reloading page\n                js_only=True if page > 0 else False\n            )\n            \n            # Process content after each load\n            print(f\"Page {page + 1} items:\", len(result.cleaned_html))\n            \n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the essential interface methods used by the documented complex interaction example, particularly through its crawl method that enables the dynamic page interactions shown in the crawl_dynamic_content function.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Complex Interactions Example\n\nHere's an example of handling a dynamic page with multiple interactions:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler() as crawler:\n        # Initial page load\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Handle cookie consent\n            js_code=\"document.querySelector('.cookie-accept')?.click();\",\n            wait_for=\"css:.main-content\"\n        )\n\n        # Load more content\n        session_id = \"dynamic_session\"  # Keep session for multiple interactions\n        \n        for page in range(3):  # Load 3 pages of content\n            result = await crawler.arun(\n                url=\"https://example.com\",\n                session_id=session_id,\n                js_code=[\n                    # Scroll to bottom\n                    \"window.scrollTo(0, document.body.scrollHeight);\",\n                    # Store current item count\n                    \"window.previousCount = document.querySelectorAll('.item').length;\",\n                    # Click load more\n                    \"document.querySelector('.load-more')?.click();\"\n                ],\n                # Wait for new items\n                wait_for=\"\"\"() => {\n                    const currentCount = document.querySelectorAll('.item').length;\n                    return currentCount > window.previousCount;\n                }\"\"\",\n                # Only execute JS without reloading page\n                js_only=True if page > 0 else False\n            )\n            \n            # Process content after each load\n            print(f\"Page {page + 1} items:\", len(result.cleaned_html))\n            \n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the complex interaction example by providing methods like crawl() and smart_wait() that handle dynamic page loading, cookie consent, session management, and JavaScript execution as shown in the documentation's crawl_dynamic_content() example.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Video and Audio Content\nThe library extracts video and audio elements with their metadata:\n\n```python\n# Process videos\nfor video in result.media[\"videos\"]:\n    print(f\"Video source: {video['src']}\")\n    print(f\"Type: {video['type']}\")\n    print(f\"Duration: {video.get('duration')}\")\n    print(f\"Thumbnail: {video.get('poster')}\")\n\n# Process audio\nfor audio in result.media[\"audios\"]:\n    print(f\"Audio source: {audio['src']}\")\n    print(f\"Type: {audio['type']}\")\n    print(f\"Duration: {audio.get('duration')}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The code snippet demonstrates how to access media elements (videos and audios) from the CrawlResult object, specifically using result.media['videos'] and result.media['audios'].",
      "predicted_trace_chain": "content-processing.md -> CrawlResult",
      "predicted_trace_chain_explanation": "The documentation directly uses the CrawlResult class to access media information, forming a direct trace.",
      "ground_truth_relationship": "The CrawlResult class stores video and audio metadata in its media dictionary field, which the documentation demonstrates how to iterate through and access using media['videos'] and media['audios'] paths.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Video and Audio Content\nThe library extracts video and audio elements with their metadata:\n\n```python\n# Process videos\nfor video in result.media[\"videos\"]:\n    print(f\"Video source: {video['src']}\")\n    print(f\"Type: {video['type']}\")\n    print(f\"Duration: {video.get('duration')}\")\n    print(f\"Thumbnail: {video.get('poster')}\")\n\n# Process audio\nfor audio in result.media[\"audios\"]:\n    print(f\"Audio source: {audio['src']}\")\n    print(f\"Type: {audio['type']}\")\n    print(f\"Duration: {audio.get('duration')}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 16,
      "artifact_title": "CrawlResult.media",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The code snippet explicitly uses the media attribute of the CrawlResult object to access video and audio information, as seen in result.media['videos'] and result.media['audios'].",
      "predicted_trace_chain": "content-processing.md -> CrawlResult -> CrawlResult.media",
      "predicted_trace_chain_explanation": "The documentation uses the CrawlResult class to access its media attribute, forming a chain from the document to the specific attribute.",
      "ground_truth_relationship": "The CrawlResult.media dictionary stores extracted video and audio elements as lists of metadata dictionaries, which are then accessed and printed in the documentation example.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult.media",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### [Cosine Strategy](cosine.md)\n\n`CosineStrategy` uses similarity-based clustering to identify and extract relevant content sections.\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Content focus\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3,                   # Similarity threshold\n    max_dist=0.2,                        # Maximum cluster distance\n    top_k=3                             # Number of top clusters to extract\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/reviews\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- Content similarity analysis\n- Topic clustering\n- Relevant content extraction\n- Pattern recognition in text",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class definition and usage",
      "relationship_explanation": "The CosineStrategy class is explicitly mentioned and described in the documentation. It is presented as an extraction strategy that uses similarity-based clustering for content analysis.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document directly mentions and describes the CosineStrategy class, so there are no intermediate steps.",
      "ground_truth_relationship": "The code implements the CosineStrategy class with configurable parameters (semantic_filter, word_count_threshold, sim_threshold, max_dist, and top_k) exactly as documented in the example code snippet, using these values to control the similarity-based clustering and content extraction process.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### [Cosine Strategy](cosine.md)\n\n`CosineStrategy` uses similarity-based clustering to identify and extract relevant content sections.\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Content focus\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3,                   # Similarity threshold\n    max_dist=0.2,                        # Maximum cluster distance\n    top_k=3                             # Number of top clusters to extract\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/reviews\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- Content similarity analysis\n- Topic clustering\n- Relevant content extraction\n- Pattern recognition in text",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage context",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the example code snippet through the 'crawler' object, which calls the 'arun' method.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document shows usage of an AsyncWebCrawler instance (crawler) which is used to run the CosineStrategy. The AsyncWebCrawler is necessary to execute the web crawling process with the specified strategy.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the cosine strategy through its arun() method, which accepts an extraction_strategy parameter that can be configured with CosineStrategy to perform similarity-based content clustering as documented.",
      "ground_truth_trace_chain": "overview.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### [Cosine Strategy](cosine.md)\n\n`CosineStrategy` uses similarity-based clustering to identify and extract relevant content sections.\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Content focus\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3,                   # Similarity threshold\n    max_dist=0.2,                        # Maximum cluster distance\n    top_k=3                             # Number of top clusters to extract\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/reviews\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- Content similarity analysis\n- Topic clustering\n- Relevant content extraction\n- Pattern recognition in text",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The 'arun' method of AsyncWebCrawler is implicitly used in the example code snippet to execute the crawling process with the CosineStrategy.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document shows usage of the 'arun' method, which is called on an AsyncWebCrawler instance to execute the crawling process. This method is necessary to apply the CosineStrategy to a specific URL.",
      "ground_truth_relationship": "The arun() method implements the main crawling logic that applies the documented CosineStrategy by accepting an extraction_strategy parameter which can be set to a CosineStrategy instance for similarity-based content clustering and extraction.",
      "ground_truth_trace_chain": "overview.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### [Cosine Strategy](cosine.md)\n\n`CosineStrategy` uses similarity-based clustering to identify and extract relevant content sections.\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Content focus\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3,                   # Similarity threshold\n    max_dist=0.2,                        # Maximum cluster distance\n    top_k=3                             # Number of top clusters to extract\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/reviews\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- Content similarity analysis\n- Topic clustering\n- Relevant content extraction\n- Pattern recognition in text",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 6,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "ExtractionStrategy is the base class for CosineStrategy, as CosineStrategy is an extraction strategy mentioned in the context of other strategies inheriting from ExtractionStrategy.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> ExtractionStrategy -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document discusses CosineStrategy in the context of extraction strategies. ExtractionStrategy is the base class that CosineStrategy likely inherits from, providing the common interface for all extraction strategies.",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundational structure and parallel processing capabilities that enable derived strategies like CosineStrategy to implement specialized content extraction methods through the abstract extract() method.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### [Cosine Strategy](cosine.md)\n\n`CosineStrategy` uses similarity-based clustering to identify and extract relevant content sections.\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Content focus\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3,                   # Similarity threshold\n    max_dist=0.2,                        # Maximum cluster distance\n    top_k=3                             # Number of top clusters to extract\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/reviews\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- Content similarity analysis\n- Topic clustering\n- Relevant content extraction\n- Pattern recognition in text",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods needed to implement concrete strategies like CosineStrategy by requiring async crawl operations, screenshot capabilities, and hook management that extraction strategies build upon.",
      "ground_truth_trace_chain": "overview.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### [Cosine Strategy](cosine.md)\n\n`CosineStrategy` uses similarity-based clustering to identify and extract relevant content sections.\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Content focus\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3,                   # Similarity threshold\n    max_dist=0.2,                        # Maximum cluster distance\n    top_k=3                             # Number of top clusters to extract\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/reviews\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- Content similarity analysis\n- Topic clustering\n- Relevant content extraction\n- Pattern recognition in text",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class stores the extracted content from the CosineStrategy in its extracted_content field along with metadata and source information needed for similarity-based clustering operations.",
      "ground_truth_trace_chain": "overview.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### [Cosine Strategy](cosine.md)\n\n`CosineStrategy` uses similarity-based clustering to identify and extract relevant content sections.\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Content focus\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3,                   # Similarity threshold\n    max_dist=0.2,                        # Maximum cluster distance\n    top_k=3                             # Number of top clusters to extract\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/reviews\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- Content similarity analysis\n- Topic clustering\n- Relevant content extraction\n- Pattern recognition in text",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class provides the underlying browser automation infrastructure needed to execute the cosine-based content extraction strategy by loading web pages and making their content available for analysis and clustering.",
      "ground_truth_trace_chain": "overview.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Anti-Detection Features\n\nEnable stealth features to avoid bot detection:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    simulate_user=True,        # Simulate human behavior\n    override_navigator=True,   # Mask automation signals\n    magic=True               # Enable all anti-detection features\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example, as evidenced by the usage of the 'arun' method on a 'crawler' object, which is likely an instance of AsyncWebCrawler.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation in browser-config.md demonstrates the usage of AsyncWebCrawler, which leads to the use of its arun() method.",
      "ground_truth_relationship": "The documentation describes anti-detection features which are implemented through optional kwargs parameters passed to the AsyncWebCrawler's constructor and arun method, which are then forwarded to the crawler_strategy for handling stealth behaviors.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Anti-Detection Features\n\nEnable stealth features to avoid bot detection:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    simulate_user=True,        # Simulate human behavior\n    override_navigator=True,   # Mask automation signals\n    magic=True               # Enable all anti-detection features\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in the code example to perform a crawl with anti-detection features.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of the arun() method, forming a direct trace.",
      "ground_truth_relationship": "The arun() method accepts various stealth-related keyword arguments (like simulate_user, override_navigator, magic) which are passed through **kwargs to the crawler_strategy.crawl() function to implement the documented anti-detection features.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Anti-Detection Features\n\nEnable stealth features to avoid bot detection:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    simulate_user=True,        # Simulate human behavior\n    override_navigator=True,   # Mask automation signals\n    magic=True               # Enable all anti-detection features\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The AsyncPlaywrightCrawlerStrategy class likely implements the anti-detection features mentioned in the documentation, such as simulating user behavior and masking automation signals.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The AsyncWebCrawler likely uses AsyncPlaywrightCrawlerStrategy to implement the browser interactions and anti-detection features described in the documentation.",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements anti-detection features through context.add_init_script() which injects JavaScript to override navigator properties, simulate plugins, and mask automation signals when override_navigator, simulate_user, or magic parameters are set to True.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Anti-Detection Features\n\nEnable stealth features to avoid bot detection:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    simulate_user=True,        # Simulate human behavior\n    override_navigator=True,   # Mask automation signals\n    magic=True               # Enable all anti-detection features\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the interface for implementing anti-detection features through methods like update_user_agent and set_hook, which enable the stealth capabilities described in the documentation.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Anti-Detection Features\n\nEnable stealth features to avoid bot detection:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    simulate_user=True,        # Simulate human behavior\n    override_navigator=True,   # Mask automation signals\n    magic=True               # Enable all anti-detection features\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class captures crawling outcomes including response_headers and status_code which are essential for verifying if anti-detection measures successfully masked the crawler's automated nature.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Rotating Proxies\n\nExample using a proxy rotation service:\n\n```python\nasync def get_next_proxy():\n    # Your proxy rotation logic here\n    return {\"server\": \"http://next.proxy.com:8080\"}\n\nasync with AsyncWebCrawler() as crawler:\n    # Update proxy for each request\n    for url in urls:\n        proxy = await get_next_proxy()\n        crawler.update_proxy(proxy)\n        result = await crawler.arun(url=url)\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate how to use rotating proxies.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler for proxy configuration.",
      "ground_truth_relationship": "The AsyncWebCrawler class shown in the code provides the foundational structure referenced in the documentation example, with arun() and __aenter__ methods that enable the async context manager pattern and proxy updating functionality through its crawler_strategy attribute.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Rotating Proxies\n\nExample using a proxy rotation service:\n\n```python\nasync def get_next_proxy():\n    # Your proxy rotation logic here\n    return {\"server\": \"http://next.proxy.com:8080\"}\n\nasync with AsyncWebCrawler() as crawler:\n    # Update proxy for each request\n    for url in urls:\n        proxy = await get_next_proxy()\n        crawler.update_proxy(proxy)\n        result = await crawler.arun(url=url)\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling operation for each URL.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which includes calling its arun() method to perform the actual crawling.",
      "ground_truth_relationship": "The arun() method in AsyncWebCrawler implements the core crawling functionality referenced in the documentation, accepting a URL parameter and supporting proxy configuration through its crawler_strategy component.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Rotating Proxies\n\nExample using a proxy rotation service:\n\n```python\nasync def get_next_proxy():\n    # Your proxy rotation logic here\n    return {\"server\": \"http://next.proxy.com:8080\"}\n\nasync with AsyncWebCrawler() as crawler:\n    # Update proxy for each request\n    for url in urls:\n        proxy = await get_next_proxy()\n        crawler.update_proxy(proxy)\n        result = await crawler.arun(url=url)\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods that enable proxy rotation functionality shown in the documentation through its update_user_agent method and abstract crawl methods.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Rotating Proxies\n\nExample using a proxy rotation service:\n\n```python\nasync def get_next_proxy():\n    # Your proxy rotation logic here\n    return {\"server\": \"http://next.proxy.com:8080\"}\n\nasync with AsyncWebCrawler() as crawler:\n    # Update proxy for each request\n    for url in urls:\n        proxy = await get_next_proxy()\n        crawler.update_proxy(proxy)\n        result = await crawler.arun(url=url)\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class stores the response data from crawler requests made through rotating proxies, with fields like success and error_message to track proxy-related issues.",
      "ground_truth_trace_chain": "proxy-security.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Rotating Proxies\n\nExample using a proxy rotation service:\n\n```python\nasync def get_next_proxy():\n    # Your proxy rotation logic here\n    return {\"server\": \"http://next.proxy.com:8080\"}\n\nasync with AsyncWebCrawler() as crawler:\n    # Update proxy for each request\n    for url in urls:\n        proxy = await get_next_proxy()\n        crawler.update_proxy(proxy)\n        result = await crawler.arun(url=url)\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements proxy support through its proxy handling in the start() method, where it creates ProxySettings objects that align with the documentation's example of rotating proxies for web crawling.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Logging and Debugging\n\nEnable verbose mode for detailed logging:\n\n```python\nasync with AsyncWebCrawler(verbose=True) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly mentioned and used in the code example for enabling verbose mode.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of AsyncWebCrawler, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The verbose parameter in the AsyncWebCrawler class enables detailed logging through conditional print statements that track crawler initialization, warmup status, and crawling progress throughout the code's execution.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Logging and Debugging\n\nEnable verbose mode for detailed logging:\n\n```python\nasync with AsyncWebCrawler(verbose=True) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is implicitly used in the code example to perform the crawl operation.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows the usage of AsyncWebCrawler, which then calls its arun() method to perform the crawl.",
      "ground_truth_relationship": "The code implements verbose logging by conditionally printing crawl timing and status information when verbose=True is set, matching the documentation's guidance for enabling detailed logging output.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Logging and Debugging\n\nEnable verbose mode for detailed logging:\n\n```python\nasync with AsyncWebCrawler(verbose=True) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The abstract AsyncCrawlerStrategy class provides the foundation for implementing verbose logging through its crawl methods, which the documentation demonstrates how to enable via the verbose parameter.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Logging and Debugging\n\nEnable verbose mode for detailed logging:\n\n```python\nasync with AsyncWebCrawler(verbose=True) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class enables detailed logging by storing diagnostic information like error_message, status_code, and response_headers that get populated when verbose mode is enabled.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Logging and Debugging\n\nEnable verbose mode for detailed logging:\n\n```python\nasync with AsyncWebCrawler(verbose=True) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements verbose logging functionality through the 'verbose' parameter in the AsyncPlaywrightCrawlerStrategy class, which when set to True prints crawling progress messages using print statements prefixed with '[LOG]'.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\nConfigure browser to handle dynamic content:\n\n```python\n# Wait for dynamic content\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"js:() => document.querySelector('.content').children.length > 10\",\n    process_iframes=True     # Process iframe content\n)\n\n# Handle lazy-loaded images\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    delay_before_return_html=2.0  # Wait for images to load\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code examples to demonstrate how to handle dynamic content.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler for configuring dynamic content handling.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements dynamic content handling through its arun method, which accepts parameters like 'wait_for', 'js_code', and 'delay_before_return_html' to control browser behavior for dynamic content processing and iframe handling as shown in the documentation examples.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\nConfigure browser to handle dynamic content:\n\n```python\n# Wait for dynamic content\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"js:() => document.querySelector('.content').children.length > 10\",\n    process_iframes=True     # Process iframe content\n)\n\n# Handle lazy-loaded images\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    delay_before_return_html=2.0  # Wait for images to load\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code examples to perform crawling with specific configurations for handling dynamic content.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows how to use the AsyncWebCrawler class, which leads to calling its arun() method for executing the crawl with dynamic content handling options.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method implements dynamic content handling by accepting custom JavaScript code and wait conditions through **kwargs, which directly supports the documented features like wait_for conditions and js_code execution for lazy-loading content.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\nConfigure browser to handle dynamic content:\n\n```python\n# Wait for dynamic content\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"js:() => document.querySelector('.content').children.length > 10\",\n    process_iframes=True     # Process iframe content\n)\n\n# Handle lazy-loaded images\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    delay_before_return_html=2.0  # Wait for images to load\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as evidenced by accessing properties like 'markdown' and 'screenshot' in the code examples.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows calling arun(), which implicitly returns a CrawlResult object, as demonstrated by accessing its properties in the examples.",
      "ground_truth_relationship": "The CrawlResult class captures and stores the results of dynamic content crawling operations, including the raw HTML, processed content, and metadata generated from the browser interactions described in the documentation.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\nConfigure browser to handle dynamic content:\n\n```python\n# Wait for dynamic content\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"js:() => document.querySelector('.content').children.length > 10\",\n    process_iframes=True     # Process iframe content\n)\n\n# Handle lazy-loaded images\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    delay_before_return_html=2.0  # Wait for images to load\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 18,
      "artifact_title": "CrawlResult.screenshot",
      "predicted_relationship": "implicit",
      "relationship_type": "property access",
      "relationship_explanation": "The screenshot property of CrawlResult is implicitly used in the code example when handling dynamic content and capturing screenshots.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.screenshot",
      "predicted_trace_chain_explanation": "The document shows calling arun(), which returns a CrawlResult, and then accessing its screenshot property for handling dynamic content with screenshots.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\nConfigure browser to handle dynamic content:\n\n```python\n# Wait for dynamic content\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"js:() => document.querySelector('.content').children.length > 10\",\n    process_iframes=True     # Process iframe content\n)\n\n# Handle lazy-loaded images\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    delay_before_return_html=2.0  # Wait for images to load\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the foundational methods needed to implement the dynamic content handling capabilities described in the documentation, including crawl() and set_hook() methods that enable JavaScript execution and custom wait conditions.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\nConfigure browser to handle dynamic content:\n\n```python\n# Wait for dynamic content\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"js:() => document.querySelector('.content').children.length > 10\",\n    process_iframes=True     # Process iframe content\n)\n\n# Handle lazy-loaded images\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    delay_before_return_html=2.0  # Wait for images to load\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements dynamic content handling through the smart_wait and crawl methods that support JavaScript execution, iframe processing, and configurable delays as documented in the example configuration snippets.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Taking Screenshots \ud83d\udcf8\n\nCapture screenshots of web pages easily:\n\n```python\nasync def capture_and_save_screenshot(url: str, output_path: str):\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            screenshot=True,\n            bypass_cache=True\n        )\n        \n        if result.success and result.screenshot:\n            import base64\n            screenshot_data = base64.b64decode(result.screenshot)\n            with open(output_path, 'wb') as f:\n                f.write(screenshot_data)\n            print(f\"Screenshot saved successfully to {output_path}\")\n        else:\n            print(\"Failed to capture screenshot\")\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate how to capture and save screenshots.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements screenshot functionality through its arun method, which accepts a 'screenshot' boolean parameter and returns the captured image data in base64 format, which is then decoded and saved in the documented capture_and_save_screenshot function.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Taking Screenshots \ud83d\udcf8\n\nCapture screenshots of web pages easily:\n\n```python\nasync def capture_and_save_screenshot(url: str, output_path: str):\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            screenshot=True,\n            bypass_cache=True\n        )\n        \n        if result.success and result.screenshot:\n            import base64\n            screenshot_data = base64.b64decode(result.screenshot)\n            with open(output_path, 'wb') as f:\n                f.write(screenshot_data)\n            print(f\"Screenshot saved successfully to {output_path}\")\n        else:\n            print(\"Failed to capture screenshot\")\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the web crawling and screenshot capture.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows the usage of AsyncWebCrawler, which then calls its arun() method to perform the crawling operation.",
      "ground_truth_relationship": "The arun() method implements screenshot capture functionality by accepting a screenshot boolean parameter and populating screenshot_data from either the cache or a new crawl which is then returned in the CrawlResult for base64 decoding and saving as shown in the documentation example.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Taking Screenshots \ud83d\udcf8\n\nCapture screenshots of web pages easily:\n\n```python\nasync def capture_and_save_screenshot(url: str, output_path: str):\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            screenshot=True,\n            bypass_cache=True\n        )\n        \n        if result.success and result.screenshot:\n            import base64\n            screenshot_data = base64.b64decode(result.screenshot)\n            with open(output_path, 'wb') as f:\n                f.write(screenshot_data)\n            print(f\"Screenshot saved successfully to {output_path}\")\n        else:\n            print(\"Failed to capture screenshot\")\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as evidenced by accessing the 'success' and 'screenshot' attributes of the result.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The documentation shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult object that is then used to access the crawl results.",
      "ground_truth_relationship": "The CrawlResult class includes a 'screenshot' field that stores base64-encoded image data, which enables the documented screenshot capture functionality to store and return webpage snapshots.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Taking Screenshots \ud83d\udcf8\n\nCapture screenshots of web pages easily:\n\n```python\nasync def capture_and_save_screenshot(url: str, output_path: str):\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            screenshot=True,\n            bypass_cache=True\n        )\n        \n        if result.success and result.screenshot:\n            import base64\n            screenshot_data = base64.b64decode(result.screenshot)\n            with open(output_path, 'wb') as f:\n                f.write(screenshot_data)\n            print(f\"Screenshot saved successfully to {output_path}\")\n        else:\n            print(\"Failed to capture screenshot\")\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 18,
      "artifact_title": "CrawlResult.screenshot",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The 'screenshot' attribute of the CrawlResult is explicitly accessed in the code example to retrieve the screenshot data.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.screenshot",
      "predicted_trace_chain_explanation": "The documentation demonstrates accessing the screenshot attribute of the CrawlResult returned by AsyncWebCrawler.arun().",
      "ground_truth_relationship": "The CrawlResult.screenshot field stores the base64-encoded screenshot data that is later decoded and saved to a file in the capture_and_save_screenshot function.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult.screenshot",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Taking Screenshots \ud83d\udcf8\n\nCapture screenshots of web pages easily:\n\n```python\nasync def capture_and_save_screenshot(url: str, output_path: str):\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            screenshot=True,\n            bypass_cache=True\n        )\n        \n        if result.success and result.screenshot:\n            import base64\n            screenshot_data = base64.b64decode(result.screenshot)\n            with open(output_path, 'wb') as f:\n                f.write(screenshot_data)\n            print(f\"Screenshot saved successfully to {output_path}\")\n        else:\n            print(\"Failed to capture screenshot\")\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The 'success' attribute of the CrawlResult is explicitly checked in the code example to determine if the screenshot capture was successful.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The documentation shows checking the success attribute of the CrawlResult returned by AsyncWebCrawler.arun() to verify the crawl operation's success.",
      "ground_truth_relationship": "The CrawlResult.success boolean property is used to verify if the screenshot capture operation completed successfully before attempting to save the screenshot data to disk.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Taking Screenshots \ud83d\udcf8\n\nCapture screenshots of web pages easily:\n\n```python\nasync def capture_and_save_screenshot(url: str, output_path: str):\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            screenshot=True,\n            bypass_cache=True\n        )\n        \n        if result.success and result.screenshot:\n            import base64\n            screenshot_data = base64.b64decode(result.screenshot)\n            with open(output_path, 'wb') as f:\n                f.write(screenshot_data)\n            print(f\"Screenshot saved successfully to {output_path}\")\n        else:\n            print(\"Failed to capture screenshot\")\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods, including take_screenshot(), that enable the screenshot capture functionality demonstrated in the documentation's capture_and_save_screenshot function.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Taking Screenshots \ud83d\udcf8\n\nCapture screenshots of web pages easily:\n\n```python\nasync def capture_and_save_screenshot(url: str, output_path: str):\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            screenshot=True,\n            bypass_cache=True\n        )\n        \n        if result.success and result.screenshot:\n            import base64\n            screenshot_data = base64.b64decode(result.screenshot)\n            with open(output_path, 'wb') as f:\n                f.write(screenshot_data)\n            print(f\"Screenshot saved successfully to {output_path}\")\n        else:\n            print(\"Failed to capture screenshot\")\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the screenshot functionality by using the take_screenshot method that captures a full-page screenshot of the webpage and returns it as a base64-encoded string, which directly corresponds to the documented screenshot capture and saving process.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Getting Started \ud83d\udee0\ufe0f\n\nFirst, let's import the necessary modules and create an instance of `AsyncWebCrawler`. We'll use an async context manager, which handles the setup and teardown of the crawler for us.\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # We'll add our crawling code here\n        pass\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class_usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly mentioned and demonstrated in the code example as the main class for creating a web crawler instance.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly references and demonstrates the usage of the AsyncWebCrawler class.",
      "ground_truth_relationship": "The code implements an AsyncWebCrawler class with async context manager methods (__aenter__ and __aexit__) that directly support the documented usage pattern of initializing and cleaning up the crawler within an async context manager block.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Getting Started \ud83d\udee0\ufe0f\n\nFirst, let's import the necessary modules and create an instance of `AsyncWebCrawler`. We'll use an async context manager, which handles the setup and teardown of the crawler for us.\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # We'll add our crawling code here\n        pass\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "method_usage",
      "relationship_explanation": "The arun() method is implicitly used in the code example within the async context manager, showing how to crawl a URL.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows the usage of AsyncWebCrawler, which leads to the use of its arun() method for crawling.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Getting Started \ud83d\udee0\ufe0f\n\nFirst, let's import the necessary modules and create an instance of `AsyncWebCrawler`. We'll use an async context manager, which handles the setup and teardown of the crawler for us.\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # We'll add our crawling code here\n        pass\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 0,
      "artifact_title": "AsyncCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base_class",
      "relationship_explanation": "AsyncCrawlerStrategy is the base class for AsyncWebCrawler, implicitly used as part of the crawler's functionality.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncCrawlerStrategy",
      "predicted_trace_chain_explanation": "The documentation uses AsyncWebCrawler, which is based on AsyncCrawlerStrategy, implying its usage.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Getting Started \ud83d\udee0\ufe0f\n\nFirst, let's import the necessary modules and create an instance of `AsyncWebCrawler`. We'll use an async context manager, which handles the setup and teardown of the crawler for us.\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # We'll add our crawling code here\n        pass\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementing_class",
      "relationship_explanation": "AsyncPlaywrightCrawlerStrategy is likely the default implementing class for AsyncWebCrawler, providing the actual crawling functionality.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The documentation uses AsyncWebCrawler, which is based on AsyncCrawlerStrategy, which is implemented by AsyncPlaywrightCrawlerStrategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Getting Started \ud83d\udee0\ufe0f\n\nFirst, let's import the necessary modules and create an instance of `AsyncWebCrawler`. We'll use an async context manager, which handles the setup and teardown of the crawler for us.\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # We'll add our crawling code here\n        pass\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return_type",
      "relationship_explanation": "CrawlResult is implicitly used as the return type of the arun() method, containing the results of the crawl operation.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The documentation shows the usage of arun(), which returns a CrawlResult object containing the crawl results.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### User Simulation \ud83c\udfad\n\nSimulate real user behavior to avoid detection:\n\n```python\nasync with AsyncWebCrawler(verbose=True, headless=True) as crawler:\n    result = await crawler.arun(\n        url=\"YOUR-URL-HERE\",\n        bypass_cache=True,\n        simulate_user=True,  # Causes random mouse movements and clicks\n        override_navigator=True  # Makes the browser appear more like a real user\n    )\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate user simulation functionality.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements user simulation through the simulate_user and override_navigator parameters in its arun method, which are passed via **kwargs to the underlying crawler_strategy for executing realistic browser behaviors.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### User Simulation \ud83c\udfad\n\nSimulate real user behavior to avoid detection:\n\n```python\nasync with AsyncWebCrawler(verbose=True, headless=True) as crawler:\n    result = await crawler.arun(\n        url=\"YOUR-URL-HERE\",\n        bypass_cache=True,\n        simulate_user=True,  # Causes random mouse movements and clicks\n        override_navigator=True  # Makes the browser appear more like a real user\n    )\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method invocation",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawl with user simulation settings.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which then calls its arun() method, forming a direct chain of invocation.",
      "ground_truth_relationship": "The documentation describes user simulation features while the arun() method implements these behaviors through the **kwargs parameter which can accept simulate_user and override_navigator flags to control browser automation behavior.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### User Simulation \ud83c\udfad\n\nSimulate real user behavior to avoid detection:\n\n```python\nasync with AsyncWebCrawler(verbose=True, headless=True) as crawler:\n    result = await crawler.arun(\n        url=\"YOUR-URL-HERE\",\n        bypass_cache=True,\n        simulate_user=True,  # Causes random mouse movements and clicks\n        override_navigator=True  # Makes the browser appear more like a real user\n    )\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods that enable user simulation features referenced in the documentation through abstract methods like set_hook and update_user_agent which are used to implement browser behavior customization.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### User Simulation \ud83c\udfad\n\nSimulate real user behavior to avoid detection:\n\n```python\nasync with AsyncWebCrawler(verbose=True, headless=True) as crawler:\n    result = await crawler.arun(\n        url=\"YOUR-URL-HERE\",\n        bypass_cache=True,\n        simulate_user=True,  # Causes random mouse movements and clicks\n        override_navigator=True  # Makes the browser appear more like a real user\n    )\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class captures and stores the results of simulated user browsing sessions, including metadata like session_id and status_code that help verify the authenticity of the simulated user interaction.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### User Simulation \ud83c\udfad\n\nSimulate real user behavior to avoid detection:\n\n```python\nasync with AsyncWebCrawler(verbose=True, headless=True) as crawler:\n    result = await crawler.arun(\n        url=\"YOUR-URL-HERE\",\n        bypass_cache=True,\n        simulate_user=True,  # Causes random mouse movements and clicks\n        override_navigator=True  # Makes the browser appear more like a real user\n    )\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements user simulation through mouse movements, clicks, and navigator property overrides when simulate_user=True or override_navigator=True are passed as parameters in the crawl method.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Standard Markdown\n\nHTML converted to clean markdown format. Great for:\n- Content analysis\n- Documentation\n- Readability\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    include_links_on_markdown=True  # Include links in markdown\n)\nprint(result.markdown)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example, as evidenced by the 'crawler.arun()' method call. This suggests that 'crawler' is an instance of AsyncWebCrawler.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document describes using the crawler, which is an instance of AsyncWebCrawler. The arun() method is then called on this instance to perform the crawl operation.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented markdown conversion functionality through its arun() method, which processes HTML content and converts it to markdown format while optionally preserving links as specified by the include_links_on_markdown parameter.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Standard Markdown\n\nHTML converted to clean markdown format. Great for:\n- Content analysis\n- Documentation\n- Readability\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    include_links_on_markdown=True  # Include links in markdown\n)\nprint(result.markdown)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method is explicitly used in the code example to perform the web crawling operation. It is called with the URL and an option to include links in the markdown output.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of the arun() method, which is the main entry point for performing a crawl operation.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method processes HTML content asynchronously and converts it to markdown format, with options to include links as shown in the documentation example through the kwargs parameter passed to aprocess_html().",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Standard Markdown\n\nHTML converted to clean markdown format. Great for:\n- Content analysis\n- Documentation\n- Readability\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    include_links_on_markdown=True  # Include links in markdown\n)\nprint(result.markdown)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method. This is evidenced by accessing the 'markdown' attribute of the result.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult object, which contains various attributes including 'markdown' that are accessed in the example.",
      "ground_truth_relationship": "The CrawlResult class includes a 'markdown' field that stores the converted HTML content as standard markdown format, which directly enables the functionality shown in the documentation example where crawler.arun() returns markdown output.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Standard Markdown\n\nHTML converted to clean markdown format. Great for:\n- Content analysis\n- Documentation\n- Readability\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    include_links_on_markdown=True  # Include links in markdown\n)\nprint(result.markdown)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The markdown attribute of the CrawlResult is explicitly accessed in the code example to print the standard markdown output of the crawled content.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "After the arun() method returns a CrawlResult, the markdown attribute is directly accessed to retrieve the standard markdown representation of the crawled content.",
      "ground_truth_relationship": "The markdown property on CrawlResult stores the HTML-to-Markdown converted text output as an optional string value that can be accessed after crawling a webpage.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Standard Markdown\n\nHTML converted to clean markdown format. Great for:\n- Content analysis\n- Documentation\n- Readability\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    include_links_on_markdown=True  # Include links in markdown\n)\nprint(result.markdown)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "AsyncCrawlerStrategy defines the abstract interface for web crawling operations that support the documented markdown conversion functionality through its crawl method which returns responses that can be formatted into markdown.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Standard Markdown\n\nHTML converted to clean markdown format. Great for:\n- Content analysis\n- Documentation\n- Readability\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    include_links_on_markdown=True  # Include links in markdown\n)\nprint(result.markdown)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements web crawling functionality that enables HTML-to-markdown conversion by fetching web content using Playwright, as demonstrated in the documentation's example code showing how to retrieve and convert webpage content to markdown format.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Features\n\n### Custom Clustering\n```python\nstrategy = CosineStrategy(\n    linkage_method='complete',  # Alternative clustering method\n    max_dist=0.4,              # Larger clusters\n    model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'  # Multilingual support\n)\n```\n\n### Content Filtering Pipeline\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"pricing plans features\",\n    word_count_threshold=15,\n    sim_threshold=0.5,\n    top_k=3\n)\n\nasync def extract_pricing_features(url: str):\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(\n            url=url,\n            extraction_strategy=strategy\n        )\n        \n        if result.success:\n            content = json.loads(result.extracted_content)\n            return {\n                'pricing_features': content,\n                'clusters': len(content),\n                'similarity_scores': [item['score'] for item in content]\n            }\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class definition and usage",
      "relationship_explanation": "The CosineStrategy class is explicitly mentioned and demonstrated in multiple code examples throughout the text. It is the main focus of the documentation, explaining its purpose, configuration, and usage for content extraction based on cosine similarity.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document directly discusses and demonstrates the CosineStrategy class, so there are no intermediate steps.",
      "ground_truth_relationship": "The CosineStrategy class implements advanced text clustering by combining semantic filtering, word count thresholds, and hierarchical clustering using cosine similarity, exactly matching the documented custom clustering and content filtering pipeline features.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Features\n\n### Custom Clustering\n```python\nstrategy = CosineStrategy(\n    linkage_method='complete',  # Alternative clustering method\n    max_dist=0.4,              # Larger clusters\n    model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'  # Multilingual support\n)\n```\n\n### Content Filtering Pipeline\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"pricing plans features\",\n    word_count_threshold=15,\n    sim_threshold=0.5,\n    top_k=3\n)\n\nasync def extract_pricing_features(url: str):\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(\n            url=url,\n            extraction_strategy=strategy\n        )\n        \n        if result.success:\n            content = json.loads(result.extracted_content)\n            return {\n                'pricing_features': content,\n                'clusters': len(content),\n                'similarity_scores': [item['score'] for item in content]\n            }\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage in examples",
      "relationship_explanation": "The AsyncWebCrawler class is used in code examples to demonstrate how to use the CosineStrategy for content extraction. It is not explicitly discussed but is essential for executing the extraction process.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document shows how to use AsyncWebCrawler to execute the extraction process using CosineStrategy. AsyncWebCrawler is necessary as the execution environment for the strategy.",
      "ground_truth_relationship": "The AsyncWebCrawler class provides the core functionality for the documented content filtering pipeline by implementing an asynchronous web crawling mechanism with customizable extraction strategies, caching, and support for clustering through its arun method.",
      "ground_truth_trace_chain": "cosine.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Features\n\n### Custom Clustering\n```python\nstrategy = CosineStrategy(\n    linkage_method='complete',  # Alternative clustering method\n    max_dist=0.4,              # Larger clusters\n    model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'  # Multilingual support\n)\n```\n\n### Content Filtering Pipeline\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"pricing plans features\",\n    word_count_threshold=15,\n    sim_threshold=0.5,\n    top_k=3\n)\n\nasync def extract_pricing_features(url: str):\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(\n            url=url,\n            extraction_strategy=strategy\n        )\n        \n        if result.success:\n            content = json.loads(result.extracted_content)\n            return {\n                'pricing_features': content,\n                'clusters': len(content),\n                'similarity_scores': [item['score'] for item in content]\n            }\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "method usage in examples",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is used in code examples to execute the crawling and extraction process using the CosineStrategy. It is not explicitly discussed but is crucial for performing the extraction.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document demonstrates using AsyncWebCrawler's arun() method to execute the extraction process. This method is necessary to apply the CosineStrategy to a specific URL.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method provides the asynchronous execution engine that processes both custom clustering configurations and content filtering parameters defined in the CosineStrategy documentation, handling the extraction pipeline while managing caching, HTML processing, and error handling.",
      "ground_truth_trace_chain": "cosine.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Features\n\n### Custom Clustering\n```python\nstrategy = CosineStrategy(\n    linkage_method='complete',  # Alternative clustering method\n    max_dist=0.4,              # Larger clusters\n    model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'  # Multilingual support\n)\n```\n\n### Content Filtering Pipeline\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"pricing plans features\",\n    word_count_threshold=15,\n    sim_threshold=0.5,\n    top_k=3\n)\n\nasync def extract_pricing_features(url: str):\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(\n            url=url,\n            extraction_strategy=strategy\n        )\n        \n        if result.success:\n            content = json.loads(result.extracted_content)\n            return {\n                'pricing_features': content,\n                'clusters': len(content),\n                'similarity_scores': [item['score'] for item in content]\n            }\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "usage in examples",
      "relationship_explanation": "The CrawlResult class is implicitly used in the code examples, as it is the return type of the AsyncWebCrawler.arun() method. It is used to access the extracted content and check for success.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows how to access the results of the extraction process, which are returned as a CrawlResult object from the arun() method.",
      "ground_truth_relationship": "The CrawlResult class serves as the data model that captures and stores the extraction results shown in the documentation examples, with its extracted_content field holding the clustered and filtered content returned by the CosineStrategy.",
      "ground_truth_trace_chain": "cosine.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Features\n\n### Custom Clustering\n```python\nstrategy = CosineStrategy(\n    linkage_method='complete',  # Alternative clustering method\n    max_dist=0.4,              # Larger clusters\n    model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'  # Multilingual support\n)\n```\n\n### Content Filtering Pipeline\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"pricing plans features\",\n    word_count_threshold=15,\n    sim_threshold=0.5,\n    top_k=3\n)\n\nasync def extract_pricing_features(url: str):\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(\n            url=url,\n            extraction_strategy=strategy\n        )\n        \n        if result.success:\n            content = json.loads(result.extracted_content)\n            return {\n                'pricing_features': content,\n                'clusters': len(content),\n                'similarity_scores': [item['score'] for item in content]\n            }\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage in examples",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is used in the code examples to access the content extracted by the CosineStrategy. It is not explicitly discussed but is used to retrieve the extraction results.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document demonstrates accessing the extracted_content attribute of the CrawlResult to retrieve the content extracted by the CosineStrategy.",
      "ground_truth_relationship": "The CrawlResult.extracted_content field stores the JSON-serialized clustering and filtering results that contain pricing features, similarity scores, and cluster information from the web crawler's execution.",
      "ground_truth_trace_chain": "cosine.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Features\n\n### Custom Clustering\n```python\nstrategy = CosineStrategy(\n    linkage_method='complete',  # Alternative clustering method\n    max_dist=0.4,              # Larger clusters\n    model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'  # Multilingual support\n)\n```\n\n### Content Filtering Pipeline\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"pricing plans features\",\n    word_count_threshold=15,\n    sim_threshold=0.5,\n    top_k=3\n)\n\nasync def extract_pricing_features(url: str):\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(\n            url=url,\n            extraction_strategy=strategy\n        )\n        \n        if result.success:\n            content = json.loads(result.extracted_content)\n            return {\n                'pricing_features': content,\n                'clusters': len(content),\n                'similarity_scores': [item['score'] for item in content]\n            }\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage in examples",
      "relationship_explanation": "The success attribute of CrawlResult is used in the code examples to check if the extraction process was successful. It is not explicitly discussed but is used in error handling examples.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows checking the success attribute of the CrawlResult to determine if the extraction process was successful before processing the results.",
      "ground_truth_relationship": "The CrawlResult.success boolean property is used in the documentation's extraction function to validate whether pricing features were successfully extracted before processing the results.",
      "ground_truth_trace_chain": "cosine.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Features\n\n### Custom Clustering\n```python\nstrategy = CosineStrategy(\n    linkage_method='complete',  # Alternative clustering method\n    max_dist=0.4,              # Larger clusters\n    model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'  # Multilingual support\n)\n```\n\n### Content Filtering Pipeline\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"pricing plans features\",\n    word_count_threshold=15,\n    sim_threshold=0.5,\n    top_k=3\n)\n\nasync def extract_pricing_features(url: str):\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(\n            url=url,\n            extraction_strategy=strategy\n        )\n        \n        if result.success:\n            content = json.loads(result.extracted_content)\n            return {\n                'pricing_features': content,\n                'clusters': len(content),\n                'similarity_scores': [item['score'] for item in content]\n            }\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 10,
      "artifact_title": "CrawlResult.error_message",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage in examples",
      "relationship_explanation": "The error_message attribute of CrawlResult is used in the code examples for error handling. It is not explicitly discussed but is used to retrieve error information when the extraction fails.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.error_message",
      "predicted_trace_chain_explanation": "The document demonstrates accessing the error_message attribute of the CrawlResult in case of extraction failure to provide error information.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Features\n\n### Custom Clustering\n```python\nstrategy = CosineStrategy(\n    linkage_method='complete',  # Alternative clustering method\n    max_dist=0.4,              # Larger clusters\n    model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'  # Multilingual support\n)\n```\n\n### Content Filtering Pipeline\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"pricing plans features\",\n    word_count_threshold=15,\n    sim_threshold=0.5,\n    top_k=3\n)\n\nasync def extract_pricing_features(url: str):\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(\n            url=url,\n            extraction_strategy=strategy\n        )\n        \n        if result.success:\n            content = json.loads(result.extracted_content)\n            return {\n                'pricing_features': content,\n                'clusters': len(content),\n                'similarity_scores': [item['score'] for item in content]\n            }\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the core infrastructure for implementing specialized content extraction strategies like the CosineStrategy shown in the documentation, enabling features such as custom clustering and content filtering through its abstract extract() method.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Features\n\n### Custom Clustering\n```python\nstrategy = CosineStrategy(\n    linkage_method='complete',  # Alternative clustering method\n    max_dist=0.4,              # Larger clusters\n    model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'  # Multilingual support\n)\n```\n\n### Content Filtering Pipeline\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"pricing plans features\",\n    word_count_threshold=15,\n    sim_threshold=0.5,\n    top_k=3\n)\n\nasync def extract_pricing_features(url: str):\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(\n            url=url,\n            extraction_strategy=strategy\n        )\n        \n        if result.success:\n            content = json.loads(result.extracted_content)\n            return {\n                'pricing_features': content,\n                'clusters': len(content),\n                'similarity_scores': [item['score'] for item in content]\n            }\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class enables advanced web content extraction by implementing browser automation features that support the documented custom clustering and content filtering pipelines through its sophisticated crawling capabilities and JavaScript execution support.",
      "ground_truth_trace_chain": "cosine.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Features\n\n### Custom Clustering\n```python\nstrategy = CosineStrategy(\n    linkage_method='complete',  # Alternative clustering method\n    max_dist=0.4,              # Larger clusters\n    model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'  # Multilingual support\n)\n```\n\n### Content Filtering Pipeline\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"pricing plans features\",\n    word_count_threshold=15,\n    sim_threshold=0.5,\n    top_k=3\n)\n\nasync def extract_pricing_features(url: str):\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(\n            url=url,\n            extraction_strategy=strategy\n        )\n        \n        if result.success:\n            content = json.loads(result.extracted_content)\n            return {\n                'pricing_features': content,\n                'clusters': len(content),\n                'similarity_scores': [item['score'] for item in content]\n            }\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods that enable the advanced features shown in the documentation, such as custom clustering and content filtering through its abstract crawl methods.",
      "ground_truth_trace_chain": "cosine.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine various browser configurations:\n\n```python\nasync def crawl_with_advanced_config(url: str):\n    async with AsyncWebCrawler(\n        # Browser setup\n        browser_type=\"chromium\",\n        headless=True,\n        verbose=True,\n        \n        # Identity\n        user_agent=\"Custom User Agent\",\n        headers={\"Accept-Language\": \"en-US\"},\n        \n        # Proxy setup\n        proxy=\"http://proxy.example.com:8080\"\n    ) as crawler:\n        result = await crawler.arun(\n            url=url,\n            # Content handling\n            process_iframes=True,\n            screenshot=True,\n            \n            # Timing\n            page_timeout=60000,\n            delay_before_return_html=2.0,\n            \n            # Anti-detection\n            magic=True,\n            simulate_user=True,\n            \n            # Dynamic content\n            js_code=[\n                \"window.scrollTo(0, document.body.scrollHeight);\",\n                \"document.querySelector('.load-more')?.click();\"\n            ],\n            wait_for=\"css:.dynamic-content\"\n        )\n        \n        return {\n            \"content\": result.markdown,\n            \"screenshot\": result.screenshot,\n            \"success\": result.success\n        }\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the comprehensive example to create a crawler instance with various configuration options.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements all the configuration options shown in the documentation example, including browser setup, identity management, proxy configuration, content handling, timing controls, and anti-detection features through its __init__ and arun methods.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine various browser configurations:\n\n```python\nasync def crawl_with_advanced_config(url: str):\n    async with AsyncWebCrawler(\n        # Browser setup\n        browser_type=\"chromium\",\n        headless=True,\n        verbose=True,\n        \n        # Identity\n        user_agent=\"Custom User Agent\",\n        headers={\"Accept-Language\": \"en-US\"},\n        \n        # Proxy setup\n        proxy=\"http://proxy.example.com:8080\"\n    ) as crawler:\n        result = await crawler.arun(\n            url=url,\n            # Content handling\n            process_iframes=True,\n            screenshot=True,\n            \n            # Timing\n            page_timeout=60000,\n            delay_before_return_html=2.0,\n            \n            # Anti-detection\n            magic=True,\n            simulate_user=True,\n            \n            # Dynamic content\n            js_code=[\n                \"window.scrollTo(0, document.body.scrollHeight);\",\n                \"document.querySelector('.load-more')?.click();\"\n            ],\n            wait_for=\"css:.dynamic-content\"\n        )\n        \n        return {\n            \"content\": result.markdown,\n            \"screenshot\": result.screenshot,\n            \"success\": result.success\n        }\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the example to perform the crawling operation with various parameters.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which contains the arun() method being called.",
      "ground_truth_relationship": "The documented example demonstrates how to use the arun() method with various configuration options, while the actual code implementation shows the core logic for processing these configurations through error handling, caching, and content extraction.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine various browser configurations:\n\n```python\nasync def crawl_with_advanced_config(url: str):\n    async with AsyncWebCrawler(\n        # Browser setup\n        browser_type=\"chromium\",\n        headless=True,\n        verbose=True,\n        \n        # Identity\n        user_agent=\"Custom User Agent\",\n        headers={\"Accept-Language\": \"en-US\"},\n        \n        # Proxy setup\n        proxy=\"http://proxy.example.com:8080\"\n    ) as crawler:\n        result = await crawler.arun(\n            url=url,\n            # Content handling\n            process_iframes=True,\n            screenshot=True,\n            \n            # Timing\n            page_timeout=60000,\n            delay_before_return_html=2.0,\n            \n            # Anti-detection\n            magic=True,\n            simulate_user=True,\n            \n            # Dynamic content\n            js_code=[\n                \"window.scrollTo(0, document.body.scrollHeight);\",\n                \"document.querySelector('.load-more')?.click();\"\n            ],\n            wait_for=\"css:.dynamic-content\"\n        )\n        \n        return {\n            \"content\": result.markdown,\n            \"screenshot\": result.screenshot,\n            \"success\": result.success\n        }\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as evidenced by accessing its attributes like markdown, screenshot, and success.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult object, allowing access to its attributes.",
      "ground_truth_relationship": "The CrawlResult class defines the structured response object that captures all possible outputs from the crawl_with_advanced_config function, including the markdown, screenshot, and success fields shown in the example's return statement.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine various browser configurations:\n\n```python\nasync def crawl_with_advanced_config(url: str):\n    async with AsyncWebCrawler(\n        # Browser setup\n        browser_type=\"chromium\",\n        headless=True,\n        verbose=True,\n        \n        # Identity\n        user_agent=\"Custom User Agent\",\n        headers={\"Accept-Language\": \"en-US\"},\n        \n        # Proxy setup\n        proxy=\"http://proxy.example.com:8080\"\n    ) as crawler:\n        result = await crawler.arun(\n            url=url,\n            # Content handling\n            process_iframes=True,\n            screenshot=True,\n            \n            # Timing\n            page_timeout=60000,\n            delay_before_return_html=2.0,\n            \n            # Anti-detection\n            magic=True,\n            simulate_user=True,\n            \n            # Dynamic content\n            js_code=[\n                \"window.scrollTo(0, document.body.scrollHeight);\",\n                \"document.querySelector('.load-more')?.click();\"\n            ],\n            wait_for=\"css:.dynamic-content\"\n        )\n        \n        return {\n            \"content\": result.markdown,\n            \"screenshot\": result.screenshot,\n            \"success\": result.success\n        }\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The markdown attribute of CrawlResult is implicitly accessed in the example when returning the crawl result.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult object, from which the markdown attribute is accessed.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine various browser configurations:\n\n```python\nasync def crawl_with_advanced_config(url: str):\n    async with AsyncWebCrawler(\n        # Browser setup\n        browser_type=\"chromium\",\n        headless=True,\n        verbose=True,\n        \n        # Identity\n        user_agent=\"Custom User Agent\",\n        headers={\"Accept-Language\": \"en-US\"},\n        \n        # Proxy setup\n        proxy=\"http://proxy.example.com:8080\"\n    ) as crawler:\n        result = await crawler.arun(\n            url=url,\n            # Content handling\n            process_iframes=True,\n            screenshot=True,\n            \n            # Timing\n            page_timeout=60000,\n            delay_before_return_html=2.0,\n            \n            # Anti-detection\n            magic=True,\n            simulate_user=True,\n            \n            # Dynamic content\n            js_code=[\n                \"window.scrollTo(0, document.body.scrollHeight);\",\n                \"document.querySelector('.load-more')?.click();\"\n            ],\n            wait_for=\"css:.dynamic-content\"\n        )\n        \n        return {\n            \"content\": result.markdown,\n            \"screenshot\": result.screenshot,\n            \"success\": result.success\n        }\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 18,
      "artifact_title": "CrawlResult.screenshot",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The screenshot attribute of CrawlResult is implicitly accessed in the example when returning the crawl result.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.screenshot",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult object, from which the screenshot attribute is accessed.",
      "ground_truth_relationship": "The CrawlResult.screenshot property stores the base64-encoded screenshot data that is requested through the screenshot=True parameter in the crawl_with_advanced_config example function.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult.screenshot",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine various browser configurations:\n\n```python\nasync def crawl_with_advanced_config(url: str):\n    async with AsyncWebCrawler(\n        # Browser setup\n        browser_type=\"chromium\",\n        headless=True,\n        verbose=True,\n        \n        # Identity\n        user_agent=\"Custom User Agent\",\n        headers={\"Accept-Language\": \"en-US\"},\n        \n        # Proxy setup\n        proxy=\"http://proxy.example.com:8080\"\n    ) as crawler:\n        result = await crawler.arun(\n            url=url,\n            # Content handling\n            process_iframes=True,\n            screenshot=True,\n            \n            # Timing\n            page_timeout=60000,\n            delay_before_return_html=2.0,\n            \n            # Anti-detection\n            magic=True,\n            simulate_user=True,\n            \n            # Dynamic content\n            js_code=[\n                \"window.scrollTo(0, document.body.scrollHeight);\",\n                \"document.querySelector('.load-more')?.click();\"\n            ],\n            wait_for=\"css:.dynamic-content\"\n        )\n        \n        return {\n            \"content\": result.markdown,\n            \"screenshot\": result.screenshot,\n            \"success\": result.success\n        }\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The success attribute of CrawlResult is implicitly accessed in the example when returning the crawl result.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult object, from which the success attribute is accessed.",
      "ground_truth_relationship": "The success boolean field in CrawlResult is returned as part of the final dictionary in the comprehensive example to indicate whether the crawling operation completed successfully.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine various browser configurations:\n\n```python\nasync def crawl_with_advanced_config(url: str):\n    async with AsyncWebCrawler(\n        # Browser setup\n        browser_type=\"chromium\",\n        headless=True,\n        verbose=True,\n        \n        # Identity\n        user_agent=\"Custom User Agent\",\n        headers={\"Accept-Language\": \"en-US\"},\n        \n        # Proxy setup\n        proxy=\"http://proxy.example.com:8080\"\n    ) as crawler:\n        result = await crawler.arun(\n            url=url,\n            # Content handling\n            process_iframes=True,\n            screenshot=True,\n            \n            # Timing\n            page_timeout=60000,\n            delay_before_return_html=2.0,\n            \n            # Anti-detection\n            magic=True,\n            simulate_user=True,\n            \n            # Dynamic content\n            js_code=[\n                \"window.scrollTo(0, document.body.scrollHeight);\",\n                \"document.querySelector('.load-more')?.click();\"\n            ],\n            wait_for=\"css:.dynamic-content\"\n        )\n        \n        return {\n            \"content\": result.markdown,\n            \"screenshot\": result.screenshot,\n            \"success\": result.success\n        }\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods that enable the comprehensive browser configurations shown in the documentation example, including crawling, screenshot capture, and user agent management.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine various browser configurations:\n\n```python\nasync def crawl_with_advanced_config(url: str):\n    async with AsyncWebCrawler(\n        # Browser setup\n        browser_type=\"chromium\",\n        headless=True,\n        verbose=True,\n        \n        # Identity\n        user_agent=\"Custom User Agent\",\n        headers={\"Accept-Language\": \"en-US\"},\n        \n        # Proxy setup\n        proxy=\"http://proxy.example.com:8080\"\n    ) as crawler:\n        result = await crawler.arun(\n            url=url,\n            # Content handling\n            process_iframes=True,\n            screenshot=True,\n            \n            # Timing\n            page_timeout=60000,\n            delay_before_return_html=2.0,\n            \n            # Anti-detection\n            magic=True,\n            simulate_user=True,\n            \n            # Dynamic content\n            js_code=[\n                \"window.scrollTo(0, document.body.scrollHeight);\",\n                \"document.querySelector('.load-more')?.click();\"\n            ],\n            wait_for=\"css:.dynamic-content\"\n        )\n        \n        return {\n            \"content\": result.markdown,\n            \"screenshot\": result.screenshot,\n            \"success\": result.success\n        }\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The example in the documentation demonstrates how to use key features implemented in the AsyncPlaywrightCrawlerStrategy class, such as browser configuration, proxy setup, content handling, and anti-detection mechanisms through a comprehensive crawl_with_advanced_config function.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Content Cleaning\n\n### Understanding Clean Content\nWhen crawling web pages, you often encounter a lot of noise - advertisements, navigation menus, footers, popups, and other irrelevant content. Crawl4AI automatically cleans this noise using several approaches:\n\n1. **Basic Cleaning**: Removes unwanted HTML elements and attributes\n2. **Content Relevance**: Identifies and preserves meaningful content blocks\n3. **Layout Analysis**: Understands page structure to identify main content areas\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Remove blocks with fewer words\n    excluded_tags=['form', 'nav'],  # Remove specific HTML tags\n    remove_overlay_elements=True    # Remove popups/modals\n)\n\n# Get clean content\nprint(result.cleaned_html)  # Cleaned HTML\nprint(result.markdown)      # Clean markdown version\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate how to perform content cleaning. The 'arun' method of this class is called to crawl a web page and apply content cleaning options.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document describes content cleaning features, which are implemented in the AsyncWebCrawler class. The arun() method is the entry point for executing these features.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented content cleaning through its arun method, which uses word_count_threshold and excluded elements (defined in WebScrappingStrategy) to remove noise and preserve meaningful content as described in the documentation.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Cleaning\n\n### Understanding Clean Content\nWhen crawling web pages, you often encounter a lot of noise - advertisements, navigation menus, footers, popups, and other irrelevant content. Crawl4AI automatically cleans this noise using several approaches:\n\n1. **Basic Cleaning**: Removes unwanted HTML elements and attributes\n2. **Content Relevance**: Identifies and preserves meaningful content blocks\n3. **Layout Analysis**: Understands page structure to identify main content areas\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Remove blocks with fewer words\n    excluded_tags=['form', 'nav'],  # Remove specific HTML tags\n    remove_overlay_elements=True    # Remove popups/modals\n)\n\n# Get clean content\nprint(result.cleaned_html)  # Cleaned HTML\nprint(result.markdown)      # Clean markdown version\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to demonstrate content cleaning. It takes parameters for word count threshold, excluded tags, and overlay element removal.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of the arun() method, which is the main interface for applying content cleaning features.",
      "ground_truth_relationship": "The arun() method implements the documented content cleaning features by accepting parameters like word_count_threshold and excluded_tags which control how text blocks are filtered and HTML elements are removed during the crawling process.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Cleaning\n\n### Understanding Clean Content\nWhen crawling web pages, you often encounter a lot of noise - advertisements, navigation menus, footers, popups, and other irrelevant content. Crawl4AI automatically cleans this noise using several approaches:\n\n1. **Basic Cleaning**: Removes unwanted HTML elements and attributes\n2. **Content Relevance**: Identifies and preserves meaningful content blocks\n3. **Layout Analysis**: Understands page structure to identify main content areas\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Remove blocks with fewer words\n    excluded_tags=['form', 'nav'],  # Remove specific HTML tags\n    remove_overlay_elements=True    # Remove popups/modals\n)\n\n# Get clean content\nprint(result.cleaned_html)  # Cleaned HTML\nprint(result.markdown)      # Clean markdown version\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method. The code example accesses properties like 'cleaned_html' and 'markdown' from this result object.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult object, which contains the cleaned content and other extracted information from the crawled web page.",
      "ground_truth_relationship": "The CrawlResult class stores the outputs of content cleaning operations through its cleaned_html, markdown, and fit_markdown fields that correspond to the different cleaning approaches described in the documentation.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Cleaning\n\n### Understanding Clean Content\nWhen crawling web pages, you often encounter a lot of noise - advertisements, navigation menus, footers, popups, and other irrelevant content. Crawl4AI automatically cleans this noise using several approaches:\n\n1. **Basic Cleaning**: Removes unwanted HTML elements and attributes\n2. **Content Relevance**: Identifies and preserves meaningful content blocks\n3. **Layout Analysis**: Understands page structure to identify main content areas\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Remove blocks with fewer words\n    excluded_tags=['form', 'nav'],  # Remove specific HTML tags\n    remove_overlay_elements=True    # Remove popups/modals\n)\n\n# Get clean content\nprint(result.cleaned_html)  # Cleaned HTML\nprint(result.markdown)      # Clean markdown version\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 9,
      "artifact_title": "CrawlResult.cleaned_html",
      "predicted_relationship": "explicit",
      "relationship_type": "output",
      "relationship_explanation": "The cleaned_html attribute of CrawlResult is explicitly mentioned in the code example as a way to access the cleaned HTML content after crawling.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.cleaned_html",
      "predicted_trace_chain_explanation": "The document shows how to access the cleaned HTML content, which is stored in the cleaned_html attribute of the CrawlResult object returned by arun().",
      "ground_truth_relationship": "The cleaned_html Optional[str] property stores the sanitized HTML output after Crawl4AI applies its content cleaning steps including basic cleaning, content relevance checks, and layout analysis.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult.cleaned_html",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Cleaning\n\n### Understanding Clean Content\nWhen crawling web pages, you often encounter a lot of noise - advertisements, navigation menus, footers, popups, and other irrelevant content. Crawl4AI automatically cleans this noise using several approaches:\n\n1. **Basic Cleaning**: Removes unwanted HTML elements and attributes\n2. **Content Relevance**: Identifies and preserves meaningful content blocks\n3. **Layout Analysis**: Understands page structure to identify main content areas\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Remove blocks with fewer words\n    excluded_tags=['form', 'nav'],  # Remove specific HTML tags\n    remove_overlay_elements=True    # Remove popups/modals\n)\n\n# Get clean content\nprint(result.cleaned_html)  # Cleaned HTML\nprint(result.markdown)      # Clean markdown version\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "output",
      "relationship_explanation": "The markdown attribute of CrawlResult is explicitly mentioned in the code example as a way to access the clean markdown version of the content after crawling.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The document demonstrates how to access the cleaned content in markdown format, which is stored in the markdown attribute of the CrawlResult object returned by arun().",
      "ground_truth_relationship": "The markdown property in CrawlResult provides a cleaned, text-based version of the crawled content after removing noise elements like ads and popups as described in the Content Cleaning documentation.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult.markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Cleaning\n\n### Understanding Clean Content\nWhen crawling web pages, you often encounter a lot of noise - advertisements, navigation menus, footers, popups, and other irrelevant content. Crawl4AI automatically cleans this noise using several approaches:\n\n1. **Basic Cleaning**: Removes unwanted HTML elements and attributes\n2. **Content Relevance**: Identifies and preserves meaningful content blocks\n3. **Layout Analysis**: Understands page structure to identify main content areas\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Remove blocks with fewer words\n    excluded_tags=['form', 'nav'],  # Remove specific HTML tags\n    remove_overlay_elements=True    # Remove popups/modals\n)\n\n# Get clean content\nprint(result.cleaned_html)  # Cleaned HTML\nprint(result.markdown)      # Clean markdown version\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface for implementing the content cleaning operations described in the documentation through abstract methods like crawl() which processes URLs and applies the cleaning configurations.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Content Cleaning\n\n### Understanding Clean Content\nWhen crawling web pages, you often encounter a lot of noise - advertisements, navigation menus, footers, popups, and other irrelevant content. Crawl4AI automatically cleans this noise using several approaches:\n\n1. **Basic Cleaning**: Removes unwanted HTML elements and attributes\n2. **Content Relevance**: Identifies and preserves meaningful content blocks\n3. **Layout Analysis**: Understands page structure to identify main content areas\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    word_count_threshold=10,        # Remove blocks with fewer words\n    excluded_tags=['form', 'nav'],  # Remove specific HTML tags\n    remove_overlay_elements=True    # Remove popups/modals\n)\n\n# Get clean content\nprint(result.cleaned_html)  # Cleaned HTML\nprint(result.markdown)      # Clean markdown version\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the content cleaning functionality through its remove_overlay_elements method, which programmatically removes unwanted HTML elements like popups, modals, and cookie notices using JavaScript selectors that match the documented cleaning approaches.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Technique 3: Using the `wait_for` Parameter Crawl4AI provides a `wait_for` parameter that allows you to specify a condition to wait for before considering the page fully loaded. This can be particularly useful for dynamic content. Here's an example: ```python async def wait_for_parameter_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"wait_for_session\" all_commits = [] js_next_page = \"\"\" const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length > 0) { window.lastCommit = commits[0].textContent.trim(); } const button = document.querySelector('a.pagination-next'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.lastCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(wait_for_parameter_crawl()) ``` This technique separates the JavaScript execution (clicking the \"next\" button) from the waiting condition, providing more flexibility and clarity in some scenarios.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate session-based crawling for dynamic content. It is instantiated and used to perform crawling operations.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly uses the AsyncWebCrawler class to demonstrate advanced crawling techniques.",
      "ground_truth_relationship": "The AsyncWebCrawler class supports the wait_for parameter through its arun method's **kwargs parameter, which gets passed to the crawler_strategy's crawl method for handling page load conditions.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 3: Using the `wait_for` Parameter Crawl4AI provides a `wait_for` parameter that allows you to specify a condition to wait for before considering the page fully loaded. This can be particularly useful for dynamic content. Here's an example: ```python async def wait_for_parameter_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"wait_for_session\" all_commits = [] js_next_page = \"\"\" const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length > 0) { window.lastCommit = commits[0].textContent.trim(); } const button = document.querySelector('a.pagination-next'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.lastCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(wait_for_parameter_crawl()) ``` This technique separates the JavaScript execution (clicking the \"next\" button) from the waiting condition, providing more flexibility and clarity in some scenarios.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in the code example to perform crawling operations. It is called with various parameters to demonstrate advanced crawling techniques.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document uses the AsyncWebCrawler class, which provides the arun() method for executing crawl operations.",
      "ground_truth_relationship": "The `arun()` method implements the documented `wait_for` parameter functionality by accepting it through its `**kwargs` argument and passing it to the crawler_strategy.crawl() method, where it's used to control page loading conditions.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 3: Using the `wait_for` Parameter Crawl4AI provides a `wait_for` parameter that allows you to specify a condition to wait for before considering the page fully loaded. This can be particularly useful for dynamic content. Here's an example: ```python async def wait_for_parameter_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"wait_for_session\" all_commits = [] js_next_page = \"\"\" const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length > 0) { window.lastCommit = commits[0].textContent.trim(); } const button = document.querySelector('a.pagination-next'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.lastCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(wait_for_parameter_crawl()) ``` This technique separates the JavaScript execution (clicking the \"next\" button) from the waiting condition, providing more flexibility and clarity in some scenarios.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 2,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The kill_session() method is explicitly mentioned and used in the code example to properly close the crawling session after the operation is complete.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler, which likely uses AsyncPlaywrightCrawlerStrategy internally, providing the kill_session() method to end sessions.",
      "ground_truth_relationship": "The kill_session method cleans up browser resources by closing the page and context objects after the wait_for-based crawling is complete, as shown in the documentation's final step where crawler.crawler_strategy.kill_session(session_id) is called.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 3: Using the `wait_for` Parameter Crawl4AI provides a `wait_for` parameter that allows you to specify a condition to wait for before considering the page fully loaded. This can be particularly useful for dynamic content. Here's an example: ```python async def wait_for_parameter_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"wait_for_session\" all_commits = [] js_next_page = \"\"\" const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length > 0) { window.lastCommit = commits[0].textContent.trim(); } const button = document.querySelector('a.pagination-next'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.lastCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(wait_for_parameter_crawl()) ``` This technique separates the JavaScript execution (clicking the \"next\" button) from the waiting condition, providing more flexibility and clarity in some scenarios.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly used in the code example to define the extraction strategy for structured data from the crawled content.",
      "predicted_trace_chain": "session-management-advanced.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly uses the JsonCssExtractionStrategy class to specify how to extract data from the crawled pages.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements the schema-based data extraction functionality used in the documentation's example by parsing HTML elements with BeautifulSoup according to the specified baseSelector and field selectors defined in the schema.",
      "ground_truth_trace_chain": "session-management-advanced.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 3: Using the `wait_for` Parameter Crawl4AI provides a `wait_for` parameter that allows you to specify a condition to wait for before considering the page fully loaded. This can be particularly useful for dynamic content. Here's an example: ```python async def wait_for_parameter_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"wait_for_session\" all_commits = [] js_next_page = \"\"\" const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length > 0) { window.lastCommit = commits[0].textContent.trim(); } const button = document.querySelector('a.pagination-next'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.lastCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(wait_for_parameter_crawl()) ``` This technique separates the JavaScript execution (clicking the \"next\" button) from the waiting condition, providing more flexibility and clarity in some scenarios.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 3,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The set_hook() method is implicitly used in the code example when setting the 'on_execution_started' hook for custom execution logic.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler, which likely uses AsyncPlaywrightCrawlerStrategy internally, providing the set_hook() method to customize crawling behavior.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 3: Using the `wait_for` Parameter Crawl4AI provides a `wait_for` parameter that allows you to specify a condition to wait for before considering the page fully loaded. This can be particularly useful for dynamic content. Here's an example: ```python async def wait_for_parameter_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"wait_for_session\" all_commits = [] js_next_page = \"\"\" const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length > 0) { window.lastCommit = commits[0].textContent.trim(); } const button = document.querySelector('a.pagination-next'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.lastCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(wait_for_parameter_crawl()) ``` This technique separates the JavaScript execution (clicking the \"next\" button) from the waiting condition, providing more flexibility and clarity in some scenarios.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The CrawlResult class is implicitly used in the code example as the return type of the arun() method, containing the extracted content and other crawl results.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler's arun() method, which returns a CrawlResult object containing the crawled data.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 3: Using the `wait_for` Parameter Crawl4AI provides a `wait_for` parameter that allows you to specify a condition to wait for before considering the page fully loaded. This can be particularly useful for dynamic content. Here's an example: ```python async def wait_for_parameter_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"wait_for_session\" all_commits = [] js_next_page = \"\"\" const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length > 0) { window.lastCommit = commits[0].textContent.trim(); } const button = document.querySelector('a.pagination-next'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.lastCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(wait_for_parameter_crawl()) ``` This technique separates the JavaScript execution (clicking the \"next\" button) from the waiting condition, providing more flexibility and clarity in some scenarios.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is implicitly used in the code example when accessing the extracted data from the crawl result.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler's arun() method, which returns a CrawlResult object, from which the extracted_content is accessed to process the crawled data.",
      "ground_truth_relationship": "The extracted_content field in CrawlResult stores the JSON-formatted commit data obtained from the page after waiting for the specified condition to be met using the wait_for parameter.",
      "ground_truth_trace_chain": "session-management-advanced.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 3: Using the `wait_for` Parameter Crawl4AI provides a `wait_for` parameter that allows you to specify a condition to wait for before considering the page fully loaded. This can be particularly useful for dynamic content. Here's an example: ```python async def wait_for_parameter_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"wait_for_session\" all_commits = [] js_next_page = \"\"\" const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length > 0) { window.lastCommit = commits[0].textContent.trim(); } const button = document.querySelector('a.pagination-next'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.lastCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(wait_for_parameter_crawl()) ``` This technique separates the JavaScript execution (clicking the \"next\" button) from the waiting condition, providing more flexibility and clarity in some scenarios.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundation for handling the extraction_strategy parameter shown in the documentation's example code, defining the abstract interface for parsing HTML content that concrete implementations like JsonCssExtractionStrategy use to extract commit information.",
      "ground_truth_trace_chain": "session-management-advanced.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Technique 3: Using the `wait_for` Parameter Crawl4AI provides a `wait_for` parameter that allows you to specify a condition to wait for before considering the page fully loaded. This can be particularly useful for dynamic content. Here's an example: ```python async def wait_for_parameter_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"wait_for_session\" all_commits = [] js_next_page = \"\"\" const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length > 0) { window.lastCommit = commits[0].textContent.trim(); } const button = document.querySelector('a.pagination-next'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.lastCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(wait_for_parameter_crawl()) ``` This technique separates the JavaScript execution (clicking the \"next\" button) from the waiting condition, providing more flexibility and clarity in some scenarios.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements the documented wait_for functionality through the smart_wait method in AsyncPlaywrightCrawlerStrategy, which evaluates either CSS selectors or JavaScript functions to determine when a page has finished loading dynamic content.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Technique 3: Using the `wait_for` Parameter Crawl4AI provides a `wait_for` parameter that allows you to specify a condition to wait for before considering the page fully loaded. This can be particularly useful for dynamic content. Here's an example: ```python async def wait_for_parameter_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"wait_for_session\" all_commits = [] js_next_page = \"\"\" const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length > 0) { window.lastCommit = commits[0].textContent.trim(); } const button = document.querySelector('a.pagination-next'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.commit-item h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.lastCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(wait_for_parameter_crawl()) ``` This technique separates the JavaScript execution (clicking the \"next\" button) from the waiting condition, providing more flexibility and clarity in some scenarios.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the foundational structure for implementing waiting behaviors through its crawl method, which the documentation's wait_for parameter utilizes to control page load completion conditions.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Timing Control\n\n### Delays and Timeouts\n\nControl timing of interactions:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    page_timeout=60000,              # Page load timeout (ms)\n    delay_before_return_html=2.0,    # Wait before capturing content\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example, as evidenced by the use of the 'crawler.arun()' method, which is likely a method of this class.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document describes using the arun() method, which is likely part of the AsyncWebCrawler class. The chain goes from the document to the class, then to the specific method being used.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements timing control through its arun method which accepts page_timeout and delay_before_return_html parameters that are passed to the underlying crawler_strategy for managing page load timeouts and content capture delays.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Timing Control\n\n### Delays and Timeouts\n\nControl timing of interactions:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    page_timeout=60000,              # Page load timeout (ms)\n    delay_before_return_html=2.0,    # Wait before capturing content\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method is explicitly used in the code example to demonstrate how to control timing of interactions with the webpage.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of the arun() method, creating a direct trace from the documentation to this method.",
      "ground_truth_relationship": "The code implements the documented timing controls through the **kwargs parameter in the arun() method, which accepts page_timeout and delay_before_return_html settings that are passed to the crawler_strategy.crawl() function.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Timing Control\n\n### Delays and Timeouts\n\nControl timing of interactions:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    page_timeout=60000,              # Page load timeout (ms)\n    delay_before_return_html=2.0,    # Wait before capturing content\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as indicated by the 'result' variable in the code example.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the arun() method being called, which returns a result. This result is likely an instance of the CrawlResult class, forming a chain from the document through the method to the return type.",
      "ground_truth_relationship": "The CrawlResult class stores the final output after applying the documented timing controls like page_timeout and delay_before_return_html during web crawling.",
      "ground_truth_trace_chain": "page-interaction.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Timing Control\n\n### Delays and Timeouts\n\nControl timing of interactions:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    page_timeout=60000,              # Page load timeout (ms)\n    delay_before_return_html=2.0,    # Wait before capturing content\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the interface that enables timing control through its crawl method's **kwargs parameter, which can accept the documented page_timeout and delay_before_return_html parameters.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Timing Control\n\n### Delays and Timeouts\n\nControl timing of interactions:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    page_timeout=60000,              # Page load timeout (ms)\n    delay_before_return_html=2.0,    # Wait before capturing content\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements timing control through parameters like page_timeout and delay_before_return_html in the crawl method of AsyncPlaywrightCrawlerStrategy, where page_timeout controls the maximum wait time for page loads and delay_before_return_html adds a pause before capturing the final HTML content.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### 2. Pattern-Based Extraction\n\nFor pages with repetitive patterns (e.g., product listings, article feeds), use JsonCssExtractionStrategy:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\nproducts = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly mentioned and demonstrated in a code example for pattern-based extraction of structured data from web pages with repetitive patterns.",
      "predicted_trace_chain": "output-formats.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly references and demonstrates the use of JsonCssExtractionStrategy, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements pattern-based web scraping by iterating through elements matching a base selector and extracting specified fields according to a schema defining CSS selectors and data types.",
      "ground_truth_trace_chain": "output-formats.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### 2. Pattern-Based Extraction\n\nFor pages with repetitive patterns (e.g., product listings, article feeds), use JsonCssExtractionStrategy:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\nproducts = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 22,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "inheritance",
      "relationship_explanation": "While not explicitly mentioned, ExtractionStrategy is the base class for JsonCssExtractionStrategy, which is used in the example.",
      "predicted_trace_chain": "output-formats.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document demonstrates use of JsonCssExtractionStrategy, which inherits from ExtractionStrategy, making this base class implicitly relevant.",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the core framework that enables pattern-based extraction through derived classes like JsonCssExtractionStrategy, which implements the schema-based extraction shown in the documentation.",
      "ground_truth_trace_chain": "output-formats.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### 2. Pattern-Based Extraction\n\nFor pages with repetitive patterns (e.g., product listings, article feeds), use JsonCssExtractionStrategy:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\nproducts = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example, as evidenced by the use of the 'crawler.arun()' method.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document shows usage of 'crawler.arun()', implying the use of AsyncWebCrawler, so no intermediate steps are needed.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements pattern-based extraction through its aprocess_html method, which specifically checks for JsonCssExtractionStrategy instances and processes them using the schema format shown in the documentation to extract structured data from repeating HTML elements.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### 2. Pattern-Based Extraction\n\nFor pages with repetitive patterns (e.g., product listings, article feeds), use JsonCssExtractionStrategy:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\nproducts = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in the code example to perform the web crawling and extraction.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly shows usage of the arun() method, which is part of the AsyncWebCrawler class.",
      "ground_truth_relationship": "The arun() method processes web pages by accepting an extraction_strategy parameter which implements the JsonCssExtractionStrategy shown in the documentation to extract structured data using CSS selectors.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### 2. Pattern-Based Extraction\n\nFor pages with repetitive patterns (e.g., product listings, article feeds), use JsonCssExtractionStrategy:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\nproducts = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The CrawlResult class is implicitly used as it's the return type of the 'crawler.arun()' method, containing the extracted_content attribute accessed in the example.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows usage of 'result.extracted_content', implying the use of CrawlResult returned by AsyncWebCrawler.arun().",
      "ground_truth_relationship": "The CrawlResult class stores the pattern-based extraction results in its extracted_content field, which the documentation shows being accessed and parsed as JSON after running the JsonCssExtractionStrategy.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### 2. Pattern-Based Extraction\n\nFor pages with repetitive patterns (e.g., product listings, article feeds), use JsonCssExtractionStrategy:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\nproducts = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is explicitly used in the code example to access the extracted structured data.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows direct usage of 'result.extracted_content', which is an attribute of the CrawlResult returned by AsyncWebCrawler.arun().",
      "ground_truth_relationship": "The extracted_content field stores the JSON-formatted results of pattern-based scraping, where each match from the baseSelector is transformed into an array of objects with the specified fields from the schema.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### 2. Pattern-Based Extraction\n\nFor pages with repetitive patterns (e.g., product listings, article feeds), use JsonCssExtractionStrategy:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\nproducts = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class provides the foundational interface methods that enable pattern-based extraction strategies like JsonCssExtractionStrategy to execute their crawling and content extraction operations through the crawl() method.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### 2. Pattern-Based Extraction\n\nFor pages with repetitive patterns (e.g., product listings, article feeds), use JsonCssExtractionStrategy:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\nproducts = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements browser automation capabilities that enable the pattern-based extraction described in the documentation by providing methods to navigate pages and interact with DOM elements using CSS selectors defined in JsonCssExtractionStrategy.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Adjust Thresholds Iteratively**\n   - Start with default values\n   - Adjust based on results\n   - Monitor clustering quality\n\n2. **Choose Appropriate Word Count Thresholds**\n   - Higher for articles (100+)\n   - Lower for reviews/comments (20+)\n   - Medium for product descriptions (50+)\n\n3. **Optimize Performance**\n   ```python\n   strategy = CosineStrategy(\n       word_count_threshold=10,  # Filter early\n       top_k=5,                 # Limit results\n       verbose=True             # Monitor performance\n   )\n   ```\n\n4. **Handle Different Content Types**\n   ```python\n   # For mixed content pages\n   strategy = CosineStrategy(\n       semantic_filter=\"product features\",\n       sim_threshold=0.4,      # More flexible matching\n       max_dist=0.3,          # Larger clusters\n       top_k=3                # Multiple relevant sections\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The text directly discusses and provides examples of using the CosineStrategy class for content extraction based on semantic similarity.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The documentation directly describes the usage and configuration of the CosineStrategy class.",
      "ground_truth_relationship": "The documentation's recommended parameter values for different content types (articles, reviews, comments) are directly implemented in the CosineStrategy class through configurable parameters like word_count_threshold, sim_threshold, and max_dist which control text filtering and clustering behavior.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Adjust Thresholds Iteratively**\n   - Start with default values\n   - Adjust based on results\n   - Monitor clustering quality\n\n2. **Choose Appropriate Word Count Thresholds**\n   - Higher for articles (100+)\n   - Lower for reviews/comments (20+)\n   - Medium for product descriptions (50+)\n\n3. **Optimize Performance**\n   ```python\n   strategy = CosineStrategy(\n       word_count_threshold=10,  # Filter early\n       top_k=5,                 # Limit results\n       verbose=True             # Monitor performance\n   )\n   ```\n\n4. **Handle Different Content Types**\n   ```python\n   # For mixed content pages\n   strategy = CosineStrategy(\n       semantic_filter=\"product features\",\n       sim_threshold=0.4,      # More flexible matching\n       max_dist=0.3,          # Larger clusters\n       top_k=3                # Multiple relevant sections\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "parameter configuration",
      "relationship_explanation": "The text provides explicit examples of configuring CosineStrategy parameters such as word_count_threshold, top_k, verbose, semantic_filter, sim_threshold, and max_dist.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The documentation directly describes the configuration options for the CosineStrategy class.",
      "ground_truth_relationship": "The documentation's recommended parameter values for different content types (articles, reviews, comments) are directly implemented in the CosineStrategy class through configurable parameters like word_count_threshold, sim_threshold, and max_dist which control text filtering and clustering behavior.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Adjust Thresholds Iteratively**\n   - Start with default values\n   - Adjust based on results\n   - Monitor clustering quality\n\n2. **Choose Appropriate Word Count Thresholds**\n   - Higher for articles (100+)\n   - Lower for reviews/comments (20+)\n   - Medium for product descriptions (50+)\n\n3. **Optimize Performance**\n   ```python\n   strategy = CosineStrategy(\n       word_count_threshold=10,  # Filter early\n       top_k=5,                 # Limit results\n       verbose=True             # Monitor performance\n   )\n   ```\n\n4. **Handle Different Content Types**\n   ```python\n   # For mixed content pages\n   strategy = CosineStrategy(\n       semantic_filter=\"product features\",\n       sim_threshold=0.4,      # More flexible matching\n       max_dist=0.3,          # Larger clusters\n       top_k=3                # Multiple relevant sections\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The text implicitly references the use of AsyncWebCrawler in the context of using CosineStrategy for extraction.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation shows how CosineStrategy is used with AsyncWebCrawler, indicating a relationship between these classes.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Adjust Thresholds Iteratively**\n   - Start with default values\n   - Adjust based on results\n   - Monitor clustering quality\n\n2. **Choose Appropriate Word Count Thresholds**\n   - Higher for articles (100+)\n   - Lower for reviews/comments (20+)\n   - Medium for product descriptions (50+)\n\n3. **Optimize Performance**\n   ```python\n   strategy = CosineStrategy(\n       word_count_threshold=10,  # Filter early\n       top_k=5,                 # Limit results\n       verbose=True             # Monitor performance\n   )\n   ```\n\n4. **Handle Different Content Types**\n   ```python\n   # For mixed content pages\n   strategy = CosineStrategy(\n       semantic_filter=\"product features\",\n       sim_threshold=0.4,      # More flexible matching\n       max_dist=0.3,          # Larger clusters\n       top_k=3                # Multiple relevant sections\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The text implicitly demonstrates the use of the arun() method of AsyncWebCrawler when applying the CosineStrategy.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows how CosineStrategy is used with AsyncWebCrawler's arun() method for content extraction.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Adjust Thresholds Iteratively**\n   - Start with default values\n   - Adjust based on results\n   - Monitor clustering quality\n\n2. **Choose Appropriate Word Count Thresholds**\n   - Higher for articles (100+)\n   - Lower for reviews/comments (20+)\n   - Medium for product descriptions (50+)\n\n3. **Optimize Performance**\n   ```python\n   strategy = CosineStrategy(\n       word_count_threshold=10,  # Filter early\n       top_k=5,                 # Limit results\n       verbose=True             # Monitor performance\n   )\n   ```\n\n4. **Handle Different Content Types**\n   ```python\n   # For mixed content pages\n   strategy = CosineStrategy(\n       semantic_filter=\"product features\",\n       sim_threshold=0.4,      # More flexible matching\n       max_dist=0.3,          # Larger clusters\n       top_k=3                # Multiple relevant sections\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The text implicitly references the CrawlResult class through the use of result.extracted_content and result.success in the examples.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The documentation shows how the result of AsyncWebCrawler.arun() is used, which implicitly refers to the CrawlResult class.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Adjust Thresholds Iteratively**\n   - Start with default values\n   - Adjust based on results\n   - Monitor clustering quality\n\n2. **Choose Appropriate Word Count Thresholds**\n   - Higher for articles (100+)\n   - Lower for reviews/comments (20+)\n   - Medium for product descriptions (50+)\n\n3. **Optimize Performance**\n   ```python\n   strategy = CosineStrategy(\n       word_count_threshold=10,  # Filter early\n       top_k=5,                 # Limit results\n       verbose=True             # Monitor performance\n   )\n   ```\n\n4. **Handle Different Content Types**\n   ```python\n   # For mixed content pages\n   strategy = CosineStrategy(\n       semantic_filter=\"product features\",\n       sim_threshold=0.4,      # More flexible matching\n       max_dist=0.3,          # Larger clusters\n       top_k=3                # Multiple relevant sections\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The text implicitly demonstrates the use of the extracted_content attribute of CrawlResult in the examples.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The documentation shows how the extracted_content attribute of CrawlResult is accessed after using CosineStrategy with AsyncWebCrawler.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Adjust Thresholds Iteratively**\n   - Start with default values\n   - Adjust based on results\n   - Monitor clustering quality\n\n2. **Choose Appropriate Word Count Thresholds**\n   - Higher for articles (100+)\n   - Lower for reviews/comments (20+)\n   - Medium for product descriptions (50+)\n\n3. **Optimize Performance**\n   ```python\n   strategy = CosineStrategy(\n       word_count_threshold=10,  # Filter early\n       top_k=5,                 # Limit results\n       verbose=True             # Monitor performance\n   )\n   ```\n\n4. **Handle Different Content Types**\n   ```python\n   # For mixed content pages\n   strategy = CosineStrategy(\n       semantic_filter=\"product features\",\n       sim_threshold=0.4,      # More flexible matching\n       max_dist=0.3,          # Larger clusters\n       top_k=3                # Multiple relevant sections\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The text implicitly demonstrates the use of the success attribute of CrawlResult in the error handling example.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The documentation shows how the success attribute of CrawlResult is checked in error handling after using CosineStrategy with AsyncWebCrawler.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Adjust Thresholds Iteratively**\n   - Start with default values\n   - Adjust based on results\n   - Monitor clustering quality\n\n2. **Choose Appropriate Word Count Thresholds**\n   - Higher for articles (100+)\n   - Lower for reviews/comments (20+)\n   - Medium for product descriptions (50+)\n\n3. **Optimize Performance**\n   ```python\n   strategy = CosineStrategy(\n       word_count_threshold=10,  # Filter early\n       top_k=5,                 # Limit results\n       verbose=True             # Monitor performance\n   )\n   ```\n\n4. **Handle Different Content Types**\n   ```python\n   # For mixed content pages\n   strategy = CosineStrategy(\n       semantic_filter=\"product features\",\n       sim_threshold=0.4,      # More flexible matching\n       max_dist=0.3,          # Larger clusters\n       top_k=3                # Multiple relevant sections\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 10,
      "artifact_title": "CrawlResult.error_message",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The text implicitly demonstrates the use of the error_message attribute of CrawlResult in the error handling example.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.error_message",
      "predicted_trace_chain_explanation": "The documentation shows how the error_message attribute of CrawlResult is accessed in error handling after using CosineStrategy with AsyncWebCrawler.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Adjust Thresholds Iteratively**\n   - Start with default values\n   - Adjust based on results\n   - Monitor clustering quality\n\n2. **Choose Appropriate Word Count Thresholds**\n   - Higher for articles (100+)\n   - Lower for reviews/comments (20+)\n   - Medium for product descriptions (50+)\n\n3. **Optimize Performance**\n   ```python\n   strategy = CosineStrategy(\n       word_count_threshold=10,  # Filter early\n       top_k=5,                 # Limit results\n       verbose=True             # Monitor performance\n   )\n   ```\n\n4. **Handle Different Content Types**\n   ```python\n   # For mixed content pages\n   strategy = CosineStrategy(\n       semantic_filter=\"product features\",\n       sim_threshold=0.4,      # More flexible matching\n       max_dist=0.3,          # Larger clusters\n       top_k=3                # Multiple relevant sections\n   )\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy class implements a flexible framework that supports the documented best practices by allowing configurable thresholds, word counts, and optimization parameters through its kwargs constructor parameter.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Error Handling\n\n```python\ntry:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        extraction_strategy=strategy\n    )\n    \n    if result.success:\n        content = json.loads(result.extracted_content)\n        if not content:\n            print(\"No relevant content found\")\n    else:\n        print(f\"Extraction failed: {result.error_message}\")\n        \nexcept Exception as e:\n    print(f\"Error during extraction: {str(e)}\")\n```\n\nThe Cosine Strategy is particularly effective when:\n- Content structure is inconsistent\n- You need semantic understanding\n- You want to find similar content blocks\n- Structure-based extraction (CSS/XPath) isn't reliable\n\nIt works well with other strategies and can be used as a pre-processing step for LLM-based extraction.",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the error handling code example to perform web crawling and content extraction.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler to perform crawling, which returns a CrawlResult object containing the extraction results and error information.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements comprehensive error handling through try-catch blocks in its arun() method, which directly corresponds to the documented error handling pattern for managing crawler execution failures and content extraction issues.",
      "ground_truth_trace_chain": "cosine.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Error Handling\n\n```python\ntry:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        extraction_strategy=strategy\n    )\n    \n    if result.success:\n        content = json.loads(result.extracted_content)\n        if not content:\n            print(\"No relevant content found\")\n    else:\n        print(f\"Extraction failed: {result.error_message}\")\n        \nexcept Exception as e:\n    print(f\"Error during extraction: {str(e)}\")\n```\n\nThe Cosine Strategy is particularly effective when:\n- Content structure is inconsistent\n- You need semantic understanding\n- You want to find similar content blocks\n- Structure-based extraction (CSS/XPath) isn't reliable\n\nIt works well with other strategies and can be used as a pre-processing step for LLM-based extraction.",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the AsyncWebCrawler.arun() method, containing properties like success, extracted_content, and error_message.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows handling of the CrawlResult object returned by AsyncWebCrawler.arun(), accessing its properties for error handling and content extraction.",
      "ground_truth_relationship": "The CrawlResult class provides essential fields like success, error_message, and extracted_content that directly support the error handling flow shown in the documentation by enabling status checking and error reporting during the crawler execution.",
      "ground_truth_trace_chain": "cosine.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Error Handling\n\n```python\ntry:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        extraction_strategy=strategy\n    )\n    \n    if result.success:\n        content = json.loads(result.extracted_content)\n        if not content:\n            print(\"No relevant content found\")\n    else:\n        print(f\"Extraction failed: {result.error_message}\")\n        \nexcept Exception as e:\n    print(f\"Error during extraction: {str(e)}\")\n```\n\nThe Cosine Strategy is particularly effective when:\n- Content structure is inconsistent\n- You need semantic understanding\n- You want to find similar content blocks\n- Structure-based extraction (CSS/XPath) isn't reliable\n\nIt works well with other strategies and can be used as a pre-processing step for LLM-based extraction.",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The extracted_content property of CrawlResult is explicitly accessed in the code example to retrieve the extracted content.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows accessing the extracted_content property of the CrawlResult object returned by AsyncWebCrawler.arun().",
      "ground_truth_relationship": "The optional extracted_content field in CrawlResult stores the semantically-matched content found by the crawler using strategies like Cosine matching, which gets parsed as JSON if extraction succeeds.",
      "ground_truth_trace_chain": "cosine.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Error Handling\n\n```python\ntry:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        extraction_strategy=strategy\n    )\n    \n    if result.success:\n        content = json.loads(result.extracted_content)\n        if not content:\n            print(\"No relevant content found\")\n    else:\n        print(f\"Extraction failed: {result.error_message}\")\n        \nexcept Exception as e:\n    print(f\"Error during extraction: {str(e)}\")\n```\n\nThe Cosine Strategy is particularly effective when:\n- Content structure is inconsistent\n- You need semantic understanding\n- You want to find similar content blocks\n- Structure-based extraction (CSS/XPath) isn't reliable\n\nIt works well with other strategies and can be used as a pre-processing step for LLM-based extraction.",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 10,
      "artifact_title": "CrawlResult.error_message",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The error_message property of CrawlResult is explicitly accessed in the code example for error handling when extraction fails.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> CrawlResult -> CrawlResult.error_message",
      "predicted_trace_chain_explanation": "The document demonstrates accessing the error_message property of the CrawlResult object when the extraction is not successful.",
      "ground_truth_relationship": "The error_message field in CrawlResult is used to store failure details when content extraction fails, as shown in the error handling documentation where it's accessed via result.error_message to provide user feedback.",
      "ground_truth_trace_chain": "cosine.md -> CrawlResult.error_message",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Error Handling\n\n```python\ntry:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        extraction_strategy=strategy\n    )\n    \n    if result.success:\n        content = json.loads(result.extracted_content)\n        if not content:\n            print(\"No relevant content found\")\n    else:\n        print(f\"Extraction failed: {result.error_message}\")\n        \nexcept Exception as e:\n    print(f\"Error during extraction: {str(e)}\")\n```\n\nThe Cosine Strategy is particularly effective when:\n- Content structure is inconsistent\n- You need semantic understanding\n- You want to find similar content blocks\n- Structure-based extraction (CSS/XPath) isn't reliable\n\nIt works well with other strategies and can be used as a pre-processing step for LLM-based extraction.",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The success property of CrawlResult is explicitly checked in the code example to determine if the extraction was successful.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows checking the success property of the CrawlResult object to determine the outcome of the extraction process.",
      "ground_truth_relationship": "The CrawlResult.success boolean property is used in the error handling code to determine if content extraction succeeded before attempting to process the results.",
      "ground_truth_trace_chain": "cosine.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Error Handling\n\n```python\ntry:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        extraction_strategy=strategy\n    )\n    \n    if result.success:\n        content = json.loads(result.extracted_content)\n        if not content:\n            print(\"No relevant content found\")\n    else:\n        print(f\"Extraction failed: {result.error_message}\")\n        \nexcept Exception as e:\n    print(f\"Error during extraction: {str(e)}\")\n```\n\nThe Cosine Strategy is particularly effective when:\n- Content structure is inconsistent\n- You need semantic understanding\n- You want to find similar content blocks\n- Structure-based extraction (CSS/XPath) isn't reliable\n\nIt works well with other strategies and can be used as a pre-processing step for LLM-based extraction.",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "CosineStrategy",
      "ground_truth_relationship": "The CosineStrategy class implements semantic-based content extraction using cosine similarity and hierarchical clustering, aligning with the documentation's description of handling inconsistent content structures and enabling semantic understanding through its filter_documents_embeddings and hierarchical_clustering methods.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Error Handling\n\n```python\ntry:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        extraction_strategy=strategy\n    )\n    \n    if result.success:\n        content = json.loads(result.extracted_content)\n        if not content:\n            print(\"No relevant content found\")\n    else:\n        print(f\"Extraction failed: {result.error_message}\")\n        \nexcept Exception as e:\n    print(f\"Error during extraction: {str(e)}\")\n```\n\nThe Cosine Strategy is particularly effective when:\n- Content structure is inconsistent\n- You need semantic understanding\n- You want to find similar content blocks\n- Structure-based extraction (CSS/XPath) isn't reliable\n\nIt works well with other strategies and can be used as a pre-processing step for LLM-based extraction.",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundational structure for implementing different content extraction methods, including the Cosine Strategy mentioned in the documentation, through its abstract extract() method and parallel processing capabilities in run().",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Error Handling\n\n```python\ntry:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        extraction_strategy=strategy\n    )\n    \n    if result.success:\n        content = json.loads(result.extracted_content)\n        if not content:\n            print(\"No relevant content found\")\n    else:\n        print(f\"Extraction failed: {result.error_message}\")\n        \nexcept Exception as e:\n    print(f\"Error during extraction: {str(e)}\")\n```\n\nThe Cosine Strategy is particularly effective when:\n- Content structure is inconsistent\n- You need semantic understanding\n- You want to find similar content blocks\n- Structure-based extraction (CSS/XPath) isn't reliable\n\nIt works well with other strategies and can be used as a pre-processing step for LLM-based extraction.",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the interface methods that enable the error-handled crawling operations shown in the documentation, particularly through its crawl method which returns AsyncCrawlResponse objects that contain success and error states.",
      "ground_truth_trace_chain": "cosine.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Error Handling\n\n```python\ntry:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        extraction_strategy=strategy\n    )\n    \n    if result.success:\n        content = json.loads(result.extracted_content)\n        if not content:\n            print(\"No relevant content found\")\n    else:\n        print(f\"Extraction failed: {result.error_message}\")\n        \nexcept Exception as e:\n    print(f\"Error during extraction: {str(e)}\")\n```\n\nThe Cosine Strategy is particularly effective when:\n- Content structure is inconsistent\n- You need semantic understanding\n- You want to find similar content blocks\n- Structure-based extraction (CSS/XPath) isn't reliable\n\nIt works well with other strategies and can be used as a pre-processing step for LLM-based extraction.",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "AsyncWebCrawler.arun()",
      "ground_truth_relationship": "The code's async_def arun() method implements comprehensive error handling through nested try-catch blocks that align with the documentation's example, returning CrawlResult objects with success/failure states and error messages for both extraction and general execution failures.",
      "ground_truth_trace_chain": "cosine.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Error Handling\n\n```python\ntry:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        extraction_strategy=strategy\n    )\n    \n    if result.success:\n        content = json.loads(result.extracted_content)\n        if not content:\n            print(\"No relevant content found\")\n    else:\n        print(f\"Extraction failed: {result.error_message}\")\n        \nexcept Exception as e:\n    print(f\"Error during extraction: {str(e)}\")\n```\n\nThe Cosine Strategy is particularly effective when:\n- Content structure is inconsistent\n- You need semantic understanding\n- You want to find similar content blocks\n- Structure-based extraction (CSS/XPath) isn't reliable\n\nIt works well with other strategies and can be used as a pre-processing step for LLM-based extraction.",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements comprehensive error handling through try-catch blocks and error messages, matching the documentation's emphasis on handling extraction failures, timeouts, and general exceptions during web crawling operations.",
      "ground_truth_trace_chain": "cosine.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\n### Load More Content\n\nHandle infinite scroll or load more buttons:\n\n```python\n# Scroll and wait pattern\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=[\n        # Scroll to bottom\n        \"window.scrollTo(0, document.body.scrollHeight);\",\n        # Click load more if exists\n        \"const loadMore = document.querySelector('.load-more'); if(loadMore) loadMore.click();\"\n    ],\n    # Wait for new content\n    wait_for=\"js:() => document.querySelectorAll('.item').length > previousCount\"\n)\n```\n\n### Form Interaction\n\nHandle forms and inputs:\n\n```python\njs_form_interaction = \"\"\"\n    // Fill form fields\n    document.querySelector('#search').value = 'search term';\n    // Submit form\n    document.querySelector('form').submit();\n\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_form_interaction,\n    wait_for=\"css:.results\"  # Wait for results to load\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code examples, as evidenced by the use of the 'crawler.arun()' method in multiple code snippets.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates usage of AsyncWebCrawler methods, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements dynamic content handling through its arun method, which accepts js_code and wait_for parameters to execute JavaScript for scrolling, form interactions, and waiting for content loads as described in the documentation.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\n### Load More Content\n\nHandle infinite scroll or load more buttons:\n\n```python\n# Scroll and wait pattern\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=[\n        # Scroll to bottom\n        \"window.scrollTo(0, document.body.scrollHeight);\",\n        # Click load more if exists\n        \"const loadMore = document.querySelector('.load-more'); if(loadMore) loadMore.click();\"\n    ],\n    # Wait for new content\n    wait_for=\"js:() => document.querySelectorAll('.item').length > previousCount\"\n)\n```\n\n### Form Interaction\n\nHandle forms and inputs:\n\n```python\njs_form_interaction = \"\"\"\n    // Fill form fields\n    document.querySelector('#search').value = 'search term';\n    // Submit form\n    document.querySelector('form').submit();\n\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_form_interaction,\n    wait_for=\"css:.results\"  # Wait for results to load\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method is explicitly used multiple times in the code examples to demonstrate various page interaction techniques, such as executing JavaScript and waiting for elements.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows usage of arun(), which is a method of AsyncWebCrawler, hence the need to go through the class to reach the method.",
      "ground_truth_relationship": "The arun() method implements dynamic content handling and form interactions by accepting js_code and wait_for parameters that allow execution of JavaScript commands for scrolling, clicking, and form manipulation while waiting for specified selectors or conditions to be met.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\n### Load More Content\n\nHandle infinite scroll or load more buttons:\n\n```python\n# Scroll and wait pattern\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=[\n        # Scroll to bottom\n        \"window.scrollTo(0, document.body.scrollHeight);\",\n        # Click load more if exists\n        \"const loadMore = document.querySelector('.load-more'); if(loadMore) loadMore.click();\"\n    ],\n    # Wait for new content\n    wait_for=\"js:() => document.querySelectorAll('.item').length > previousCount\"\n)\n```\n\n### Form Interaction\n\nHandle forms and inputs:\n\n```python\njs_form_interaction = \"\"\"\n    // Fill form fields\n    document.querySelector('#search').value = 'search term';\n    // Submit form\n    document.querySelector('form').submit();\n\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_form_interaction,\n    wait_for=\"css:.results\"  # Wait for results to load\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 2,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The kill_session() method is explicitly used in the complex interactions example to clean up the session after multiple interactions.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_trace_chain_explanation": "The document shows usage of kill_session(), which is accessed through the crawler_strategy attribute of AsyncWebCrawler, which is likely an instance of AsyncPlaywrightCrawlerStrategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\n### Load More Content\n\nHandle infinite scroll or load more buttons:\n\n```python\n# Scroll and wait pattern\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=[\n        # Scroll to bottom\n        \"window.scrollTo(0, document.body.scrollHeight);\",\n        # Click load more if exists\n        \"const loadMore = document.querySelector('.load-more'); if(loadMore) loadMore.click();\"\n    ],\n    # Wait for new content\n    wait_for=\"js:() => document.querySelectorAll('.item').length > previousCount\"\n)\n```\n\n### Form Interaction\n\nHandle forms and inputs:\n\n```python\njs_form_interaction = \"\"\"\n    // Fill form fields\n    document.querySelector('#search').value = 'search term';\n    // Submit form\n    document.querySelector('form').submit();\n\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_form_interaction,\n    wait_for=\"css:.results\"  # Wait for results to load\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "alternative",
      "relationship_explanation": "While not directly used, CosineStrategy is an alternative extraction strategy that could be used in place of JsonCssExtractionStrategy or LLMExtractionStrategy shown in the examples.",
      "predicted_trace_chain": "page-interaction.md -> ExtractionStrategy -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document mentions using extraction strategies, and CosineStrategy is a specific implementation of ExtractionStrategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\n### Load More Content\n\nHandle infinite scroll or load more buttons:\n\n```python\n# Scroll and wait pattern\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=[\n        # Scroll to bottom\n        \"window.scrollTo(0, document.body.scrollHeight);\",\n        # Click load more if exists\n        \"const loadMore = document.querySelector('.load-more'); if(loadMore) loadMore.click();\"\n    ],\n    # Wait for new content\n    wait_for=\"js:() => document.querySelectorAll('.item').length > previousCount\"\n)\n```\n\n### Form Interaction\n\nHandle forms and inputs:\n\n```python\njs_form_interaction = \"\"\"\n    // Fill form fields\n    document.querySelector('#search').value = 'search term';\n    // Submit form\n    document.querySelector('form').submit();\n\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_form_interaction,\n    wait_for=\"css:.results\"  # Wait for results to load\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "JsonCssExtractionStrategy is explicitly imported and used in an example to demonstrate structured extraction after page interaction.",
      "predicted_trace_chain": "page-interaction.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly imports and uses JsonCssExtractionStrategy, which is a specific implementation of ExtractionStrategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\n### Load More Content\n\nHandle infinite scroll or load more buttons:\n\n```python\n# Scroll and wait pattern\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=[\n        # Scroll to bottom\n        \"window.scrollTo(0, document.body.scrollHeight);\",\n        # Click load more if exists\n        \"const loadMore = document.querySelector('.load-more'); if(loadMore) loadMore.click();\"\n    ],\n    # Wait for new content\n    wait_for=\"js:() => document.querySelectorAll('.item').length > previousCount\"\n)\n```\n\n### Form Interaction\n\nHandle forms and inputs:\n\n```python\njs_form_interaction = \"\"\"\n    // Fill form fields\n    document.querySelector('#search').value = 'search term';\n    // Submit form\n    document.querySelector('form').submit();\n\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_form_interaction,\n    wait_for=\"css:.results\"  # Wait for results to load\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 24,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "LLMExtractionStrategy is explicitly imported and used in an example to demonstrate using LLM to analyze dynamic content after page interaction.",
      "predicted_trace_chain": "page-interaction.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly imports and uses LLMExtractionStrategy, which is a specific implementation of ExtractionStrategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\n### Load More Content\n\nHandle infinite scroll or load more buttons:\n\n```python\n# Scroll and wait pattern\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=[\n        # Scroll to bottom\n        \"window.scrollTo(0, document.body.scrollHeight);\",\n        # Click load more if exists\n        \"const loadMore = document.querySelector('.load-more'); if(loadMore) loadMore.click();\"\n    ],\n    # Wait for new content\n    wait_for=\"js:() => document.querySelectorAll('.item').length > previousCount\"\n)\n```\n\n### Form Interaction\n\nHandle forms and inputs:\n\n```python\njs_form_interaction = \"\"\"\n    // Fill form fields\n    document.querySelector('#search').value = 'search term';\n    // Submit form\n    document.querySelector('form').submit();\n\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_form_interaction,\n    wait_for=\"css:.results\"  # Wait for results to load\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the foundational methods like crawl() and set_hook() that enable the documented dynamic content handling and form interactions through its extensible interface.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\n### Load More Content\n\nHandle infinite scroll or load more buttons:\n\n```python\n# Scroll and wait pattern\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=[\n        # Scroll to bottom\n        \"window.scrollTo(0, document.body.scrollHeight);\",\n        # Click load more if exists\n        \"const loadMore = document.querySelector('.load-more'); if(loadMore) loadMore.click();\"\n    ],\n    # Wait for new content\n    wait_for=\"js:() => document.querySelectorAll('.item').length > previousCount\"\n)\n```\n\n### Form Interaction\n\nHandle forms and inputs:\n\n```python\njs_form_interaction = \"\"\"\n    // Fill form fields\n    document.querySelector('#search').value = 'search term';\n    // Submit form\n    document.querySelector('form').submit();\n\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_form_interaction,\n    wait_for=\"css:.results\"  # Wait for results to load\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class stores the outputs of the documented crawling operations like form submissions and infinite scrolling by capturing HTML content, success status, and extracted data in structured fields.",
      "ground_truth_trace_chain": "page-interaction.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Handling Dynamic Content\n\n### Load More Content\n\nHandle infinite scroll or load more buttons:\n\n```python\n# Scroll and wait pattern\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=[\n        # Scroll to bottom\n        \"window.scrollTo(0, document.body.scrollHeight);\",\n        # Click load more if exists\n        \"const loadMore = document.querySelector('.load-more'); if(loadMore) loadMore.click();\"\n    ],\n    # Wait for new content\n    wait_for=\"js:() => document.querySelectorAll('.item').length > previousCount\"\n)\n```\n\n### Form Interaction\n\nHandle forms and inputs:\n\n```python\njs_form_interaction = \"\"\"\n    // Fill form fields\n    document.querySelector('#search').value = 'search term';\n    // Submit form\n    document.querySelector('form').submit();\n\"\"\"\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_form_interaction,\n    wait_for=\"css:.results\"  # Wait for results to load\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements dynamic content loading through its smart_wait method which handles both scroll-to-bottom and form interaction patterns by executing JavaScript code and waiting for specified selectors or conditions as shown in the documentation examples.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Using the Advanced Schema\n\nTo use this advanced schema with AsyncWebCrawler:\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_complex_product_data():\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        product_data = json.loads(result.extracted_content)\n        print(json.dumps(product_data, indent=2))\n\nasyncio.run(extract_complex_product_data())\n```\n\nThis will produce a structured JSON output that captures the complex hierarchy of the product catalog, including nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to perform web crawling and extraction.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler for extracting complex product data.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements asynchronous web crawling functionality shown in the documentation through its arun() method, which processes URLs, handles caching, and supports the JsonCssExtractionStrategy for advanced schema extraction.",
      "ground_truth_trace_chain": "css-advanced.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Using the Advanced Schema\n\nTo use this advanced schema with AsyncWebCrawler:\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_complex_product_data():\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        product_data = json.loads(result.extracted_content)\n        print(json.dumps(product_data, indent=2))\n\nasyncio.run(extract_complex_product_data())\n```\n\nThis will produce a structured JSON output that captures the complex hierarchy of the product catalog, including nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly used in the code example to define the extraction strategy for complex product data.",
      "predicted_trace_chain": "css-advanced.md -> JsonCssExtractionStrategy -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document shows how JsonCssExtractionStrategy is created and then passed to AsyncWebCrawler, demonstrating the connection between these classes.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class processes HTML content using a schema-based approach where it selects elements with BeautifulSoup and extracts structured data according to the field definitions shown in the documentation example.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Using the Advanced Schema\n\nTo use this advanced schema with AsyncWebCrawler:\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_complex_product_data():\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        product_data = json.loads(result.extracted_content)\n        print(json.dumps(product_data, indent=2))\n\nasyncio.run(extract_complex_product_data())\n```\n\nThis will produce a structured JSON output that captures the complex hierarchy of the product catalog, including nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method invocation",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling and extraction process.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the creation of an AsyncWebCrawler instance and then demonstrates the invocation of its arun() method.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method implements the asynchronous web crawling functionality showcased in the documentation by accepting extraction strategies, handling caching, and returning structured results that enable the documented JSON data extraction workflow.",
      "ground_truth_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Using the Advanced Schema\n\nTo use this advanced schema with AsyncWebCrawler:\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_complex_product_data():\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        product_data = json.loads(result.extracted_content)\n        print(json.dumps(product_data, indent=2))\n\nasyncio.run(extract_complex_product_data())\n```\n\nThis will produce a structured JSON output that captures the complex hierarchy of the product catalog, including nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as evidenced by accessing the 'success' and 'extracted_content' attributes.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the arun() method being called, and then demonstrates accessing attributes that are part of the CrawlResult class, implying its usage.",
      "ground_truth_relationship": "The CrawlResult class defines the structure that stores the extracted_content field used in the documentation example to validate successful crawling and store the parsed JSON product data.",
      "ground_truth_trace_chain": "css-advanced.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Using the Advanced Schema\n\nTo use this advanced schema with AsyncWebCrawler:\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_complex_product_data():\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        product_data = json.loads(result.extracted_content)\n        print(json.dumps(product_data, indent=2))\n\nasyncio.run(extract_complex_product_data())\n```\n\nThis will produce a structured JSON output that captures the complex hierarchy of the product catalog, including nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The 'success' attribute of CrawlResult is explicitly accessed in the code example to check if the crawling was successful.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows the result of arun() being checked for its 'success' attribute, demonstrating the usage of this specific CrawlResult attribute.",
      "ground_truth_relationship": "The CrawlResult.success boolean property is used in the documentation example to validate that the crawling operation completed successfully before processing the extracted product data.",
      "ground_truth_trace_chain": "css-advanced.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Using the Advanced Schema\n\nTo use this advanced schema with AsyncWebCrawler:\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_complex_product_data():\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        product_data = json.loads(result.extracted_content)\n        print(json.dumps(product_data, indent=2))\n\nasyncio.run(extract_complex_product_data())\n```\n\nThis will produce a structured JSON output that captures the complex hierarchy of the product catalog, including nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The 'extracted_content' attribute of CrawlResult is explicitly accessed in the code example to retrieve the extracted data.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows the 'extracted_content' of the crawl result being accessed and parsed as JSON, demonstrating the usage of this specific CrawlResult attribute.",
      "ground_truth_relationship": "The CrawlResult.extracted_content field stores the raw extracted data as a string that must be JSON-parsed to access the structured product information shown in the documentation example.",
      "ground_truth_trace_chain": "css-advanced.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Using the Advanced Schema\n\nTo use this advanced schema with AsyncWebCrawler:\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_complex_product_data():\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        product_data = json.loads(result.extracted_content)\n        print(json.dumps(product_data, indent=2))\n\nasyncio.run(extract_complex_product_data())\n```\n\nThis will produce a structured JSON output that captures the complex hierarchy of the product catalog, including nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class provides the foundation for specialized extraction strategies like JsonCssExtractionStrategy shown in the documentation, enabling structured data extraction from HTML content through its extract() and run() methods.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Using the Advanced Schema\n\nTo use this advanced schema with AsyncWebCrawler:\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_complex_product_data():\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        product_data = json.loads(result.extracted_content)\n        print(json.dumps(product_data, indent=2))\n\nasyncio.run(extract_complex_product_data())\n```\n\nThis will produce a structured JSON output that captures the complex hierarchy of the product catalog, including nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the core functionality needed to execute the documented AsyncWebCrawler example by providing a Playwright-based web scraping engine that handles browser automation, JavaScript execution, and HTML extraction for complex web scraping tasks.",
      "ground_truth_trace_chain": "css-advanced.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Using the Advanced Schema\n\nTo use this advanced schema with AsyncWebCrawler:\n\n```python\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def extract_complex_product_data():\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\",\n            extraction_strategy=extraction_strategy,\n            bypass_cache=True,\n        )\n\n        assert result.success, \"Failed to crawl the page\"\n\n        product_data = json.loads(result.extracted_content)\n        print(json.dumps(product_data, indent=2))\n\nasyncio.run(extract_complex_product_data())\n```\n\nThis will produce a structured JSON output that captures the complex hierarchy of the product catalog, including nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods that enable the documented AsyncWebCrawler to perform web scraping operations with customizable extraction strategies.",
      "ground_truth_trace_chain": "css-advanced.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### SlidingWindowChunking\n\n`SlidingWindowChunking` uses a sliding window approach to create overlapping chunks. Each chunk has a fixed length, and the window slides by a specified step size.\n\n#### When to Use\n- Ideal for creating overlapping chunks to preserve context.\n- Useful for tasks where context from adjacent chunks is needed.\n\n#### Parameters\n- `window_size` (int, optional): Number of words in each chunk. Default is `100`.\n- `step` (int, optional): Number of words to slide the window. Default is `50`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import SlidingWindowChunking\n\nchunker = SlidingWindowChunking(window_size=10, step=5)\n\n# Sample text\ntext = \"This is a sample text. It will be split using a sliding window approach to preserve context.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 27,
      "artifact_title": "SlidingWindowChunking",
      "predicted_relationship": "explicit",
      "relationship_type": "class_definition",
      "relationship_explanation": "The SlidingWindowChunking class is explicitly mentioned and described in the documentation. It is a chunking strategy that uses a sliding window approach to create overlapping chunks of text.",
      "predicted_trace_chain": "chunking.md -> ChunkingStrategy -> SlidingWindowChunking",
      "predicted_trace_chain_explanation": "The document describes chunking strategies, which are implementations of the ChunkingStrategy abstract base class. SlidingWindowChunking is a specific implementation of this strategy.",
      "ground_truth_relationship": "The code implements the sliding window algorithm by using list slicing with window_size and step parameters to create overlapping text chunks, directly corresponding to the documentation's description of a sliding window approach for preserving context.",
      "ground_truth_trace_chain": "chunking.md -> ChunkingStrategy -> SlidingWindowChunking",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### SlidingWindowChunking\n\n`SlidingWindowChunking` uses a sliding window approach to create overlapping chunks. Each chunk has a fixed length, and the window slides by a specified step size.\n\n#### When to Use\n- Ideal for creating overlapping chunks to preserve context.\n- Useful for tasks where context from adjacent chunks is needed.\n\n#### Parameters\n- `window_size` (int, optional): Number of words in each chunk. Default is `100`.\n- `step` (int, optional): Number of words to slide the window. Default is `50`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import SlidingWindowChunking\n\nchunker = SlidingWindowChunking(window_size=10, step=5)\n\n# Sample text\ntext = \"This is a sample text. It will be split using a sliding window approach to preserve context.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 6,
      "artifact_title": "ChunkingStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base_class",
      "relationship_explanation": "While not explicitly mentioned, ChunkingStrategy is the implied base class for SlidingWindowChunking, as it is for all chunking strategies in Crawl4AI.",
      "predicted_trace_chain": "chunking.md -> ChunkingStrategy -> SlidingWindowChunking",
      "predicted_trace_chain_explanation": "The document describes chunking strategies, which are implementations of the ChunkingStrategy abstract base class. This base class is necessary to understand the context of SlidingWindowChunking.",
      "ground_truth_relationship": "The ChunkingStrategy abstract base class defines the core interface through its chunk method that SlidingWindowChunking implements to create overlapping text segments using the sliding window approach.",
      "ground_truth_trace_chain": "chunking.md -> ChunkingStrategy -> ChunkingStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### SlidingWindowChunking\n\n`SlidingWindowChunking` uses a sliding window approach to create overlapping chunks. Each chunk has a fixed length, and the window slides by a specified step size.\n\n#### When to Use\n- Ideal for creating overlapping chunks to preserve context.\n- Useful for tasks where context from adjacent chunks is needed.\n\n#### Parameters\n- `window_size` (int, optional): Number of words in each chunk. Default is `100`.\n- `step` (int, optional): Number of words to slide the window. Default is `50`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import SlidingWindowChunking\n\nchunker = SlidingWindowChunking(window_size=10, step=5)\n\n# Sample text\ntext = \"This is a sample text. It will be split using a sliding window approach to preserve context.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 27,
      "artifact_title": "SlidingWindowChunking.__init__()",
      "predicted_relationship": "explicit",
      "relationship_type": "method_definition",
      "relationship_explanation": "The __init__ method is implicitly defined through the description of parameters 'window_size' and 'step', which are described as optional parameters with default values.",
      "predicted_trace_chain": "chunking.md -> SlidingWindowChunking -> SlidingWindowChunking.__init__()",
      "predicted_trace_chain_explanation": "The document describes the parameters for SlidingWindowChunking, which are typically set in the __init__ method of a class.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### SlidingWindowChunking\n\n`SlidingWindowChunking` uses a sliding window approach to create overlapping chunks. Each chunk has a fixed length, and the window slides by a specified step size.\n\n#### When to Use\n- Ideal for creating overlapping chunks to preserve context.\n- Useful for tasks where context from adjacent chunks is needed.\n\n#### Parameters\n- `window_size` (int, optional): Number of words in each chunk. Default is `100`.\n- `step` (int, optional): Number of words to slide the window. Default is `50`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import SlidingWindowChunking\n\nchunker = SlidingWindowChunking(window_size=10, step=5)\n\n# Sample text\ntext = \"This is a sample text. It will be split using a sliding window approach to preserve context.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 27,
      "artifact_title": "SlidingWindowChunking.chunk()",
      "predicted_relationship": "explicit",
      "relationship_type": "method_usage",
      "relationship_explanation": "The chunk method is explicitly used in the example provided, demonstrating how to use SlidingWindowChunking to split text into chunks.",
      "predicted_trace_chain": "chunking.md -> SlidingWindowChunking -> SlidingWindowChunking.chunk()",
      "predicted_trace_chain_explanation": "The document provides an example of using SlidingWindowChunking, which includes calling the chunk() method to process text.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Output Formats\n\nCrawl4AI provides multiple output formats to suit different needs, from raw HTML to structured data using LLM or pattern-based extraction.\n\n## Basic Formats\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different formats\nraw_html = result.html           # Original HTML\nclean_html = result.cleaned_html # Sanitized HTML\nmarkdown = result.markdown       # Standard markdown\nfit_md = result.fit_markdown    # Most relevant content in markdown\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "explicit",
      "relationship_type": "Output Container",
      "relationship_explanation": "The CrawlResult class is explicitly mentioned in the documentation as the container for various output formats returned by the crawler. It holds attributes for different types of content extracted from the crawled webpage.",
      "predicted_trace_chain": "output-formats.md -> CrawlResult",
      "predicted_trace_chain_explanation": "The document directly references the CrawlResult class as the container for crawler output.",
      "ground_truth_relationship": "The CrawlResult class directly implements the documented output formats through its properties html, cleaned_html, markdown, and fit_markdown, which store the different content representations described in the documentation.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Output Formats\n\nCrawl4AI provides multiple output formats to suit different needs, from raw HTML to structured data using LLM or pattern-based extraction.\n\n## Basic Formats\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different formats\nraw_html = result.html           # Original HTML\nclean_html = result.cleaned_html # Sanitized HTML\nmarkdown = result.markdown       # Standard markdown\nfit_md = result.fit_markdown    # Most relevant content in markdown\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 13,
      "artifact_title": "CrawlResult.html",
      "predicted_relationship": "explicit",
      "relationship_type": "Raw HTML Output",
      "relationship_explanation": "The html attribute of CrawlResult is explicitly mentioned as providing the original, unmodified HTML from the webpage. It is demonstrated in usage examples for accessing raw HTML content.",
      "predicted_trace_chain": "output-formats.md -> CrawlResult -> CrawlResult.html",
      "predicted_trace_chain_explanation": "The document describes CrawlResult as containing various outputs, with html being one of the specific attributes mentioned for raw HTML access.",
      "ground_truth_relationship": "The code defines the 'html' property as a string type to store the raw HTML content mentioned in the documentation's Basic Formats section.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.html",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Output Formats\n\nCrawl4AI provides multiple output formats to suit different needs, from raw HTML to structured data using LLM or pattern-based extraction.\n\n## Basic Formats\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different formats\nraw_html = result.html           # Original HTML\nclean_html = result.cleaned_html # Sanitized HTML\nmarkdown = result.markdown       # Standard markdown\nfit_md = result.fit_markdown    # Most relevant content in markdown\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 9,
      "artifact_title": "CrawlResult.cleaned_html",
      "predicted_relationship": "explicit",
      "relationship_type": "Cleaned HTML Output",
      "relationship_explanation": "The cleaned_html attribute of CrawlResult is explicitly mentioned as providing sanitized HTML with unnecessary elements removed. It is demonstrated in usage examples for accessing cleaned HTML content.",
      "predicted_trace_chain": "output-formats.md -> CrawlResult -> CrawlResult.cleaned_html",
      "predicted_trace_chain_explanation": "The document describes CrawlResult as containing various outputs, with cleaned_html being one of the specific attributes mentioned for sanitized HTML access.",
      "ground_truth_relationship": "The cleaned_html property in CrawlResult stores the sanitized HTML version of the crawled webpage as an optional string value, providing access to a cleaned version of the original HTML content.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.cleaned_html",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Output Formats\n\nCrawl4AI provides multiple output formats to suit different needs, from raw HTML to structured data using LLM or pattern-based extraction.\n\n## Basic Formats\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different formats\nraw_html = result.html           # Original HTML\nclean_html = result.cleaned_html # Sanitized HTML\nmarkdown = result.markdown       # Standard markdown\nfit_md = result.fit_markdown    # Most relevant content in markdown\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "Markdown Output",
      "relationship_explanation": "The markdown attribute of CrawlResult is explicitly mentioned as providing standard markdown format converted from HTML. It is demonstrated in usage examples for accessing content in markdown format.",
      "predicted_trace_chain": "output-formats.md -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The document describes CrawlResult as containing various outputs, with markdown being one of the specific attributes mentioned for standard markdown content access.",
      "ground_truth_relationship": "The markdown field in CrawlResult stores the HTML content converted to standard markdown format as shown in the documentation example where it can be accessed via result.markdown.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Output Formats\n\nCrawl4AI provides multiple output formats to suit different needs, from raw HTML to structured data using LLM or pattern-based extraction.\n\n## Basic Formats\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different formats\nraw_html = result.html           # Original HTML\nclean_html = result.cleaned_html # Sanitized HTML\nmarkdown = result.markdown       # Standard markdown\nfit_md = result.fit_markdown    # Most relevant content in markdown\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 12,
      "artifact_title": "CrawlResult.fit_markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "Focused Markdown Output",
      "relationship_explanation": "The fit_markdown attribute of CrawlResult is explicitly mentioned as providing the most relevant content extracted and converted to markdown. It is demonstrated in usage examples for accessing focused content in markdown format.",
      "predicted_trace_chain": "output-formats.md -> CrawlResult -> CrawlResult.fit_markdown",
      "predicted_trace_chain_explanation": "The document describes CrawlResult as containing various outputs, with fit_markdown being one of the specific attributes mentioned for focused, relevant content access in markdown format.",
      "ground_truth_relationship": "The fit_markdown property stores the most relevant content extracted from a webpage in markdown format as documented in the Basic Formats section.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.fit_markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Output Formats\n\nCrawl4AI provides multiple output formats to suit different needs, from raw HTML to structured data using LLM or pattern-based extraction.\n\n## Basic Formats\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different formats\nraw_html = result.html           # Original HTML\nclean_html = result.cleaned_html # Sanitized HTML\nmarkdown = result.markdown       # Standard markdown\nfit_md = result.fit_markdown    # Most relevant content in markdown\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "Structured Data Output",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is implicitly used in the examples for LLM-based and pattern-based extraction strategies. It stores the JSON-formatted structured data extracted from the webpage.",
      "predicted_trace_chain": "output-formats.md -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document demonstrates usage of extraction strategies, which implicitly use the extracted_content attribute to store structured data results.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Output Formats\n\nCrawl4AI provides multiple output formats to suit different needs, from raw HTML to structured data using LLM or pattern-based extraction.\n\n## Basic Formats\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different formats\nraw_html = result.html           # Original HTML\nclean_html = result.cleaned_html # Sanitized HTML\nmarkdown = result.markdown       # Standard markdown\nfit_md = result.fit_markdown    # Most relevant content in markdown\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 16,
      "artifact_title": "CrawlResult.media",
      "predicted_relationship": "implicit",
      "relationship_type": "Media Content Output",
      "relationship_explanation": "The media attribute of CrawlResult is implicitly used in the comprehensive example at the end of the document. It stores information about media content extracted from the webpage.",
      "predicted_trace_chain": "output-formats.md -> CrawlResult -> CrawlResult.media",
      "predicted_trace_chain_explanation": "The document includes a comprehensive example that demonstrates accessing the media attribute, implying its use for storing media-related information from the crawled page.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Output Formats\n\nCrawl4AI provides multiple output formats to suit different needs, from raw HTML to structured data using LLM or pattern-based extraction.\n\n## Basic Formats\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different formats\nraw_html = result.html           # Original HTML\nclean_html = result.cleaned_html # Sanitized HTML\nmarkdown = result.markdown       # Standard markdown\nfit_md = result.fit_markdown    # Most relevant content in markdown\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "Crawler Implementation",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used throughout the document in code examples. It is the main class responsible for performing the web crawling and returning CrawlResult objects.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document demonstrates usage of an AsyncWebCrawler instance to perform crawling operations and obtain various output formats.",
      "ground_truth_relationship": "The code implements the documented output formats through the CrawlResult class, which returns html, cleaned_html, markdown, and fit_markdown properties corresponding exactly to the formats shown in the documentation example.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Output Formats\n\nCrawl4AI provides multiple output formats to suit different needs, from raw HTML to structured data using LLM or pattern-based extraction.\n\n## Basic Formats\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different formats\nraw_html = result.html           # Original HTML\nclean_html = result.cleaned_html # Sanitized HTML\nmarkdown = result.markdown       # Standard markdown\nfit_md = result.fit_markdown    # Most relevant content in markdown\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "Crawling Method",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in multiple code examples throughout the document. It is the primary method for initiating a crawl operation and obtaining a CrawlResult.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly demonstrates the use of the arun() method to perform crawling and obtain different output formats.",
      "ground_truth_relationship": "The arun() method implements the core crawling functionality that populates the different output formats (html, cleaned_html, markdown, fit_markdown) mentioned in the documentation through its processing and sanitization of the crawled content.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Output Formats\n\nCrawl4AI provides multiple output formats to suit different needs, from raw HTML to structured data using LLM or pattern-based extraction.\n\n## Basic Formats\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different formats\nraw_html = result.html           # Original HTML\nclean_html = result.cleaned_html # Sanitized HTML\nmarkdown = result.markdown       # Standard markdown\nfit_md = result.fit_markdown    # Most relevant content in markdown\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface that enables the crawler to fetch content in different output formats through its crawl method which returns an AsyncCrawlResponse containing the various formats mentioned in the documentation.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# Output Formats\n\nCrawl4AI provides multiple output formats to suit different needs, from raw HTML to structured data using LLM or pattern-based extraction.\n\n## Basic Formats\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different formats\nraw_html = result.html           # Original HTML\nclean_html = result.cleaned_html # Sanitized HTML\nmarkdown = result.markdown       # Standard markdown\nfit_md = result.fit_markdown    # Most relevant content in markdown\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the core crawling functionality that enables the extraction of different output formats (raw HTML, cleaned HTML, markdown) by retrieving the page content through its crawl() method and returning an AsyncCrawlResponse object containing the raw HTML which can then be transformed into other formats.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Cleaned HTML\n\nSanitized HTML with unnecessary elements removed. Automatically:\n- Removes scripts and styles\n- Cleans up formatting\n- Preserves semantic structure\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    excluded_tags=['form', 'header', 'footer'],  # Additional tags to remove\n    keep_data_attributes=False  # Remove data-* attributes\n)\nprint(result.cleaned_html)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The CrawlResult class is explicitly used in the code example to access the cleaned_html attribute.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document discusses output formats, which are accessed through the AsyncWebCrawler's arun method, which returns a CrawlResult object containing the cleaned_html.",
      "ground_truth_relationship": "The CrawlResult class stores the cleaned_html as an optional string field that contains the sanitized HTML output described in the documentation after removing scripts, styles, and user-specified excluded tags.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Cleaned HTML\n\nSanitized HTML with unnecessary elements removed. Automatically:\n- Removes scripts and styles\n- Cleans up formatting\n- Preserves semantic structure\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    excluded_tags=['form', 'header', 'footer'],  # Additional tags to remove\n    keep_data_attributes=False  # Remove data-* attributes\n)\nprint(result.cleaned_html)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 9,
      "artifact_title": "CrawlResult.cleaned_html",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The cleaned_html attribute of CrawlResult is explicitly mentioned and used in the code example to print the sanitized HTML.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> CrawlResult -> CrawlResult.cleaned_html",
      "predicted_trace_chain_explanation": "The document discusses the cleaned HTML output, which is accessed through the CrawlResult object's cleaned_html attribute after calling the AsyncWebCrawler's arun method.",
      "ground_truth_relationship": "The cleaned_html property in CrawlResult stores the sanitized HTML string after removing unwanted tags and attributes as shown in the documentation example.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.cleaned_html",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Cleaned HTML\n\nSanitized HTML with unnecessary elements removed. Automatically:\n- Removes scripts and styles\n- Cleans up formatting\n- Preserves semantic structure\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    excluded_tags=['form', 'header', 'footer'],  # Additional tags to remove\n    keep_data_attributes=False  # Remove data-* attributes\n)\nprint(result.cleaned_html)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example through the 'crawler' object, which calls the arun method.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document demonstrates usage of the AsyncWebCrawler through the 'crawler' object, which is an instance of AsyncWebCrawler used to perform the crawling operation.",
      "ground_truth_relationship": "The AsyncWebCrawler's aprocess_html method implements HTML cleaning by using a WebScrappingStrategy to remove unwanted elements and produce cleaned_html output, which directly fulfills the documentation's promise of sanitizing and removing unnecessary HTML elements while preserving structure.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Cleaned HTML\n\nSanitized HTML with unnecessary elements removed. Automatically:\n- Removes scripts and styles\n- Cleans up formatting\n- Preserves semantic structure\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    excluded_tags=['form', 'header', 'footer'],  # Additional tags to remove\n    keep_data_attributes=False  # Remove data-* attributes\n)\nprint(result.cleaned_html)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling operation.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of the arun() method to crawl a URL and obtain the cleaned HTML output, which is a key part of the AsyncWebCrawler's functionality.",
      "ground_truth_relationship": "The arun() method implements HTML cleaning by processing raw HTML through sanitization and extraction strategies, with configurable excluded tags and data attributes as shown in the documentation example.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Cleaned HTML\n\nSanitized HTML with unnecessary elements removed. Automatically:\n- Removes scripts and styles\n- Cleans up formatting\n- Preserves semantic structure\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    excluded_tags=['form', 'header', 'footer'],  # Additional tags to remove\n    keep_data_attributes=False  # Remove data-* attributes\n)\nprint(result.cleaned_html)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface for web crawlers that enable HTML cleaning through required methods like crawl() which processes URLs and returns cleaned responses as documented in the example usage.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Cleaned HTML\n\nSanitized HTML with unnecessary elements removed. Automatically:\n- Removes scripts and styles\n- Cleans up formatting\n- Preserves semantic structure\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    excluded_tags=['form', 'header', 'footer'],  # Additional tags to remove\n    keep_data_attributes=False  # Remove data-* attributes\n)\nprint(result.cleaned_html)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements HTML cleaning by removing unwanted elements through methods like remove_overlay_elements() and processes iframes while respecting the excluded_tags parameter during page content extraction.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Error Handling and Retries\n\nWhen working with external LLM APIs, it's important to handle potential errors and implement retry logic. Here's an example of how you might do this:\n\n```python\nimport asyncio\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nclass LLMExtractionError(Exception):\n    pass\n\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))\nasync def extract_with_retry(crawler, url, extraction_strategy):\n    try:\n        result = await crawler.arun(url=url, extraction_strategy=extraction_strategy, bypass_cache=True)\n        return json.loads(result.extracted_content)\n    except Exception as e:\n        raise LLMExtractionError(f\"Failed to extract content: {str(e)}\")\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        try:\n            content = await extract_with_retry(\n                crawler,\n                \"https://www.example.com\",\n                LLMExtractionStrategy(\n                    provider=\"openai/gpt-4o\",\n                    api_token=os.getenv('OPENAI_API_KEY'),\n                    instruction=\"Extract and summarize main points\"\n                )\n            )\n            print(\"Extracted content:\", content)\n        except LLMExtractionError as e:\n            print(f\"Extraction failed after retries: {e}\")\n\nasyncio.run(main())\n```\n\nThis example uses the `tenacity` library to implement a retry mechanism with exponential backoff, which can help handle temporary failures or rate limiting from the LLM API.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate error handling and retries with LLM extraction. It is instantiated and used within the main() function.",
      "predicted_trace_chain": "docs/md_v2/extraction/llm.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler for LLM extraction with error handling.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented error handling through its arun() method which wraps crawling operations in a try-except block, allowing it to work seamlessly with the documented retry decorator pattern for handling API failures.",
      "ground_truth_trace_chain": "llm.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Error Handling and Retries\n\nWhen working with external LLM APIs, it's important to handle potential errors and implement retry logic. Here's an example of how you might do this:\n\n```python\nimport asyncio\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nclass LLMExtractionError(Exception):\n    pass\n\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))\nasync def extract_with_retry(crawler, url, extraction_strategy):\n    try:\n        result = await crawler.arun(url=url, extraction_strategy=extraction_strategy, bypass_cache=True)\n        return json.loads(result.extracted_content)\n    except Exception as e:\n        raise LLMExtractionError(f\"Failed to extract content: {str(e)}\")\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        try:\n            content = await extract_with_retry(\n                crawler,\n                \"https://www.example.com\",\n                LLMExtractionStrategy(\n                    provider=\"openai/gpt-4o\",\n                    api_token=os.getenv('OPENAI_API_KEY'),\n                    instruction=\"Extract and summarize main points\"\n                )\n            )\n            print(\"Extracted content:\", content)\n        except LLMExtractionError as e:\n            print(f\"Extraction failed after retries: {e}\")\n\nasyncio.run(main())\n```\n\nThis example uses the `tenacity` library to implement a retry mechanism with exponential backoff, which can help handle temporary failures or rate limiting from the LLM API.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 24,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The LLMExtractionStrategy class is explicitly used in the code example to define the extraction strategy for the AsyncWebCrawler. It is instantiated with specific parameters within the extract_with_retry() function.",
      "predicted_trace_chain": "docs/md_v2/extraction/llm.md -> AsyncWebCrawler -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document shows LLMExtractionStrategy being used as a parameter for AsyncWebCrawler's arun method, demonstrating the connection between these classes.",
      "ground_truth_relationship": "The code implements error handling and retries through a custom LLMExtractionStrategy class that uses ThreadPoolExecutor for parallel processing and includes error handling in its extract() method, which appends error information to extracted_content when exceptions occur.",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Error Handling and Retries\n\nWhen working with external LLM APIs, it's important to handle potential errors and implement retry logic. Here's an example of how you might do this:\n\n```python\nimport asyncio\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nclass LLMExtractionError(Exception):\n    pass\n\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))\nasync def extract_with_retry(crawler, url, extraction_strategy):\n    try:\n        result = await crawler.arun(url=url, extraction_strategy=extraction_strategy, bypass_cache=True)\n        return json.loads(result.extracted_content)\n    except Exception as e:\n        raise LLMExtractionError(f\"Failed to extract content: {str(e)}\")\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        try:\n            content = await extract_with_retry(\n                crawler,\n                \"https://www.example.com\",\n                LLMExtractionStrategy(\n                    provider=\"openai/gpt-4o\",\n                    api_token=os.getenv('OPENAI_API_KEY'),\n                    instruction=\"Extract and summarize main points\"\n                )\n            )\n            print(\"Extracted content:\", content)\n        except LLMExtractionError as e:\n            print(f\"Extraction failed after retries: {e}\")\n\nasyncio.run(main())\n```\n\nThis example uses the `tenacity` library to implement a retry mechanism with exponential backoff, which can help handle temporary failures or rate limiting from the LLM API.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called within the extract_with_retry() function to perform the crawling and extraction process.",
      "predicted_trace_chain": "docs/md_v2/extraction/llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document demonstrates the usage of the arun() method as part of the AsyncWebCrawler's functionality for LLM extraction.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method implements comprehensive error handling by catching all exceptions in a try-except block and returning a CrawlResult object with error details, which aligns with the documentation's emphasis on error handling for external API interactions.",
      "ground_truth_trace_chain": "llm.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Error Handling and Retries\n\nWhen working with external LLM APIs, it's important to handle potential errors and implement retry logic. Here's an example of how you might do this:\n\n```python\nimport asyncio\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nclass LLMExtractionError(Exception):\n    pass\n\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))\nasync def extract_with_retry(crawler, url, extraction_strategy):\n    try:\n        result = await crawler.arun(url=url, extraction_strategy=extraction_strategy, bypass_cache=True)\n        return json.loads(result.extracted_content)\n    except Exception as e:\n        raise LLMExtractionError(f\"Failed to extract content: {str(e)}\")\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        try:\n            content = await extract_with_retry(\n                crawler,\n                \"https://www.example.com\",\n                LLMExtractionStrategy(\n                    provider=\"openai/gpt-4o\",\n                    api_token=os.getenv('OPENAI_API_KEY'),\n                    instruction=\"Extract and summarize main points\"\n                )\n            )\n            print(\"Extracted content:\", content)\n        except LLMExtractionError as e:\n            print(f\"Extraction failed after retries: {e}\")\n\nasyncio.run(main())\n```\n\nThis example uses the `tenacity` library to implement a retry mechanism with exponential backoff, which can help handle temporary failures or rate limiting from the LLM API.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "While not explicitly mentioned, the CrawlResult class is implicitly used as it is the expected return type of the arun() method. The extracted_content attribute of CrawlResult is accessed in the code.",
      "predicted_trace_chain": "docs/md_v2/extraction/llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the usage of extracted_content from the result of arun(), which implies the use of CrawlResult class.",
      "ground_truth_relationship": "The CrawlResult class has error handling fields like error_message and status_code that support the documented retry mechanism by storing error information when API calls fail.",
      "ground_truth_trace_chain": "llm.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Error Handling and Retries\n\nWhen working with external LLM APIs, it's important to handle potential errors and implement retry logic. Here's an example of how you might do this:\n\n```python\nimport asyncio\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nclass LLMExtractionError(Exception):\n    pass\n\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))\nasync def extract_with_retry(crawler, url, extraction_strategy):\n    try:\n        result = await crawler.arun(url=url, extraction_strategy=extraction_strategy, bypass_cache=True)\n        return json.loads(result.extracted_content)\n    except Exception as e:\n        raise LLMExtractionError(f\"Failed to extract content: {str(e)}\")\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        try:\n            content = await extract_with_retry(\n                crawler,\n                \"https://www.example.com\",\n                LLMExtractionStrategy(\n                    provider=\"openai/gpt-4o\",\n                    api_token=os.getenv('OPENAI_API_KEY'),\n                    instruction=\"Extract and summarize main points\"\n                )\n            )\n            print(\"Extracted content:\", content)\n        except LLMExtractionError as e:\n            print(f\"Extraction failed after retries: {e}\")\n\nasyncio.run(main())\n```\n\nThis example uses the `tenacity` library to implement a retry mechanism with exponential backoff, which can help handle temporary failures or rate limiting from the LLM API.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is explicitly used in the extract_with_retry() function to access the extracted data returned by the crawler.",
      "predicted_trace_chain": "docs/md_v2/extraction/llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document directly accesses the extracted_content attribute from the result of the arun() method, showing the flow of data through the classes.",
      "ground_truth_relationship": "The CrawlResult.extracted_content field stores the text data retrieved from web pages that gets processed through LLM extraction, which can be retried using the documented retry mechanism if the extraction fails.",
      "ground_truth_trace_chain": "llm.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Error Handling and Retries\n\nWhen working with external LLM APIs, it's important to handle potential errors and implement retry logic. Here's an example of how you might do this:\n\n```python\nimport asyncio\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nclass LLMExtractionError(Exception):\n    pass\n\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))\nasync def extract_with_retry(crawler, url, extraction_strategy):\n    try:\n        result = await crawler.arun(url=url, extraction_strategy=extraction_strategy, bypass_cache=True)\n        return json.loads(result.extracted_content)\n    except Exception as e:\n        raise LLMExtractionError(f\"Failed to extract content: {str(e)}\")\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        try:\n            content = await extract_with_retry(\n                crawler,\n                \"https://www.example.com\",\n                LLMExtractionStrategy(\n                    provider=\"openai/gpt-4o\",\n                    api_token=os.getenv('OPENAI_API_KEY'),\n                    instruction=\"Extract and summarize main points\"\n                )\n            )\n            print(\"Extracted content:\", content)\n        except LLMExtractionError as e:\n            print(f\"Extraction failed after retries: {e}\")\n\nasyncio.run(main())\n```\n\nThis example uses the `tenacity` library to implement a retry mechanism with exponential backoff, which can help handle temporary failures or rate limiting from the LLM API.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundational retry-compatible extraction interface that the documentation's error handling system wraps with the @retry decorator to implement resilient LLM processing.",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Error Handling and Retries\n\nWhen working with external LLM APIs, it's important to handle potential errors and implement retry logic. Here's an example of how you might do this:\n\n```python\nimport asyncio\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nclass LLMExtractionError(Exception):\n    pass\n\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))\nasync def extract_with_retry(crawler, url, extraction_strategy):\n    try:\n        result = await crawler.arun(url=url, extraction_strategy=extraction_strategy, bypass_cache=True)\n        return json.loads(result.extracted_content)\n    except Exception as e:\n        raise LLMExtractionError(f\"Failed to extract content: {str(e)}\")\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        try:\n            content = await extract_with_retry(\n                crawler,\n                \"https://www.example.com\",\n                LLMExtractionStrategy(\n                    provider=\"openai/gpt-4o\",\n                    api_token=os.getenv('OPENAI_API_KEY'),\n                    instruction=\"Extract and summarize main points\"\n                )\n            )\n            print(\"Extracted content:\", content)\n        except LLMExtractionError as e:\n            print(f\"Extraction failed after retries: {e}\")\n\nasyncio.run(main())\n```\n\nThis example uses the `tenacity` library to implement a retry mechanism with exponential backoff, which can help handle temporary failures or rate limiting from the LLM API.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements error handling through class closures and cleanup methods in the crawler strategy, complementing the documented retry mechanism by ensuring proper resource management even when errors occur during crawling operations.",
      "ground_truth_trace_chain": "llm.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Error Handling and Retries\n\nWhen working with external LLM APIs, it's important to handle potential errors and implement retry logic. Here's an example of how you might do this:\n\n```python\nimport asyncio\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nclass LLMExtractionError(Exception):\n    pass\n\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))\nasync def extract_with_retry(crawler, url, extraction_strategy):\n    try:\n        result = await crawler.arun(url=url, extraction_strategy=extraction_strategy, bypass_cache=True)\n        return json.loads(result.extracted_content)\n    except Exception as e:\n        raise LLMExtractionError(f\"Failed to extract content: {str(e)}\")\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        try:\n            content = await extract_with_retry(\n                crawler,\n                \"https://www.example.com\",\n                LLMExtractionStrategy(\n                    provider=\"openai/gpt-4o\",\n                    api_token=os.getenv('OPENAI_API_KEY'),\n                    instruction=\"Extract and summarize main points\"\n                )\n            )\n            print(\"Extracted content:\", content)\n        except LLMExtractionError as e:\n            print(f\"Extraction failed after retries: {e}\")\n\nasyncio.run(main())\n```\n\nThis example uses the `tenacity` library to implement a retry mechanism with exponential backoff, which can help handle temporary failures or rate limiting from the LLM API.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the interface that concrete crawlers must implement to work with the error handling and retry logic shown in the documentation, where specific implementations would handle the actual HTTP requests and content extraction that might need retrying.",
      "ground_truth_trace_chain": "llm.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Adding a Chunking Strategy \ud83e\udde9\n\nLet's add a chunking strategy: `RegexChunking`! This strategy splits the text based on a given regex pattern.\n\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            chunking_strategy=RegexChunking(patterns=[\"\\n\\n\"])\n        )\n        print(f\"RegexChunking result: {result.extracted_content[:200]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 26,
      "artifact_title": "RegexChunking",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The RegexChunking class is explicitly mentioned and used in the code example to demonstrate how to add a chunking strategy to the AsyncWebCrawler.",
      "predicted_trace_chain": "docs/md_v2/basic/quickstart.md -> AsyncWebCrawler -> RegexChunking",
      "predicted_trace_chain_explanation": "The documentation demonstrates how to use AsyncWebCrawler with RegexChunking as a chunking strategy. AsyncWebCrawler is necessary as it's the main class being used, and RegexChunking is the specific chunking strategy being applied.",
      "ground_truth_relationship": "The RegexChunking class implementation splits text into chunks using regex patterns supplied in its constructor, with a default pattern of '\\n\\n' that matches double newlines as shown in both the documentation example and code definition.",
      "ground_truth_trace_chain": "quickstart.md -> ChunkingStrategy -> RegexChunking",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Adding a Chunking Strategy \ud83e\udde9\n\nLet's add a chunking strategy: `RegexChunking`! This strategy splits the text based on a given regex pattern.\n\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            chunking_strategy=RegexChunking(patterns=[\"\\n\\n\"])\n        )\n        print(f\"RegexChunking result: {result.extracted_content[:200]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to create a crawler instance and perform web crawling with a chunking strategy.",
      "predicted_trace_chain": "docs/md_v2/basic/quickstart.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of AsyncWebCrawler, which is the main class for performing web crawling operations.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented RegexChunking functionality through its arun() method, which accepts a chunking_strategy parameter defaulting to RegexChunking() for splitting extracted text content.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Adding a Chunking Strategy \ud83e\udde9\n\nLet's add a chunking strategy: `RegexChunking`! This strategy splits the text based on a given regex pattern.\n\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            chunking_strategy=RegexChunking(patterns=[\"\\n\\n\"])\n        )\n        print(f\"RegexChunking result: {result.extracted_content[:200]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the web crawling operation with the specified chunking strategy.",
      "predicted_trace_chain": "docs/md_v2/basic/quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows how to use the arun() method of AsyncWebCrawler to execute the crawling process. AsyncWebCrawler is necessary as it's the class that contains the arun() method.",
      "ground_truth_relationship": "The code implements the RegexChunking strategy mentioned in the documentation by accepting a chunking_strategy parameter in the arun() method, which defaults to RegexChunking() and validates it against the ChunkingStrategy type.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Adding a Chunking Strategy \ud83e\udde9\n\nLet's add a chunking strategy: `RegexChunking`! This strategy splits the text based on a given regex pattern.\n\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            chunking_strategy=RegexChunking(patterns=[\"\\n\\n\"])\n        )\n        print(f\"RegexChunking result: {result.extracted_content[:200]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class includes an extracted_content field to store the text chunks produced by the RegexChunking strategy described in the documentation.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Adding a Chunking Strategy \ud83e\udde9\n\nLet's add a chunking strategy: `RegexChunking`! This strategy splits the text based on a given regex pattern.\n\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            chunking_strategy=RegexChunking(patterns=[\"\\n\\n\"])\n        )\n        print(f\"RegexChunking result: {result.extracted_content[:200]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "ChunkingStrategy",
      "ground_truth_relationship": "The abstract ChunkingStrategy class serves as the base interface that RegexChunking extends to implement text splitting functionality through its required chunk method.",
      "ground_truth_trace_chain": "quickstart.md -> ChunkingStrategy -> ChunkingStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Adding a Chunking Strategy \ud83e\udde9\n\nLet's add a chunking strategy: `RegexChunking`! This strategy splits the text based on a given regex pattern.\n\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            chunking_strategy=RegexChunking(patterns=[\"\\n\\n\"])\n        )\n        print(f\"RegexChunking result: {result.extracted_content[:200]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods that enable the crawler to support various strategies like RegexChunking through its abstract crawl methods and configuration options.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Adding a Chunking Strategy \ud83e\udde9\n\nLet's add a chunking strategy: `RegexChunking`! This strategy splits the text based on a given regex pattern.\n\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            chunking_strategy=RegexChunking(patterns=[\"\\n\\n\"])\n        )\n        print(f\"RegexChunking result: {result.extracted_content[:200]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "CrawlResult.extracted_content",
      "ground_truth_relationship": "The extracted_content field in CrawlResult stores the text content after it has been processed by the RegexChunking strategy which splits the content using regex patterns.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Adding a Chunking Strategy \ud83e\udde9\n\nLet's add a chunking strategy: `RegexChunking`! This strategy splits the text based on a given regex pattern.\n\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            chunking_strategy=RegexChunking(patterns=[\"\\n\\n\"])\n        )\n        print(f\"RegexChunking result: {result.extracted_content[:200]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy implements browser automation capabilities that enable the crawler to process RegexChunking by retrieving HTML content which can then be split using regex patterns as shown in the documentation.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Example 2: Extract Relevant Content\n\nIn this example, we instruct the LLM to extract only content related to technology from the NBC News business page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\n\nasync def extract_tech_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Extract only content related to technology\"\n            ),\n            bypass_cache=True,\n        )\n\n    tech_content = json.loads(result.extracted_content)\n    print(f\"Number of tech-related items extracted: {len(tech_content)}\")\n\n    with open(\".data/tech_content.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(tech_content, f, indent=2)\n\nasyncio.run(extract_tech_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to create a crawler instance for extracting tech-related content from a webpage.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the functionality shown in the documentation example by providing asynchronous web crawling capabilities with customizable extraction strategies, as demonstrated in the example's use of LLMExtractionStrategy to extract tech-related content from NBC News.",
      "ground_truth_trace_chain": "llm.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 2: Extract Relevant Content\n\nIn this example, we instruct the LLM to extract only content related to technology from the NBC News business page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\n\nasync def extract_tech_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Extract only content related to technology\"\n            ),\n            bypass_cache=True,\n        )\n\n    tech_content = json.loads(result.extracted_content)\n    print(f\"Number of tech-related items extracted: {len(tech_content)}\")\n\n    with open(\".data/tech_content.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(tech_content, f, indent=2)\n\nasyncio.run(extract_tech_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 7,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The LLMExtractionStrategy class is explicitly used in the code example to define the extraction strategy for the AsyncWebCrawler, specifically to extract tech-related content.",
      "predicted_trace_chain": "llm.md -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of LLMExtractionStrategy, so there are no intermediate steps.",
      "ground_truth_relationship": "The LLMExtractionStrategy class implements the documented content extraction functionality by processing HTML content through LLM models with specific instructions, as shown in Example 2 where it extracts only technology-related content from NBC News using GPT-4.",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 2: Extract Relevant Content\n\nIn this example, we instruct the LLM to extract only content related to technology from the NBC News business page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\n\nasync def extract_tech_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Extract only content related to technology\"\n            ),\n            bypass_cache=True,\n        )\n\n    tech_content = json.loads(result.extracted_content)\n    print(f\"Number of tech-related items extracted: {len(tech_content)}\")\n\n    with open(\".data/tech_content.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(tech_content, f, indent=2)\n\nasyncio.run(extract_tech_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method invocation",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling and extraction process.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which is necessary to access its arun() method.",
      "ground_truth_relationship": "The documentation demonstrates how to use the arun() method with LLMExtractionStrategy to filter website content based on specific criteria, while the code shows the actual implementation that handles crawling, caching, and content extraction with various strategies.",
      "ground_truth_trace_chain": "llm.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 2: Extract Relevant Content\n\nIn this example, we instruct the LLM to extract only content related to technology from the NBC News business page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\n\nasync def extract_tech_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Extract only content related to technology\"\n            ),\n            bypass_cache=True,\n        )\n\n    tech_content = json.loads(result.extracted_content)\n    print(f\"Number of tech-related items extracted: {len(tech_content)}\")\n\n    with open(\".data/tech_content.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(tech_content, f, indent=2)\n\nasyncio.run(extract_tech_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as evidenced by accessing the 'extracted_content' attribute of the result.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult object, allowing access to its attributes.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 2: Extract Relevant Content\n\nIn this example, we instruct the LLM to extract only content related to technology from the NBC News business page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\n\nasync def extract_tech_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Extract only content related to technology\"\n            ),\n            bypass_cache=True,\n        )\n\n    tech_content = json.loads(result.extracted_content)\n    print(f\"Number of tech-related items extracted: {len(tech_content)}\")\n\n    with open(\".data/tech_content.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(tech_content, f, indent=2)\n\nasyncio.run(extract_tech_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The 'extracted_content' attribute of the CrawlResult is explicitly accessed in the code example to retrieve the extracted tech-related content.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult object, allowing direct access to its extracted_content attribute.",
      "ground_truth_relationship": "The extracted_content property stores the text content filtered by LLMExtractionStrategy as shown in the example where tech-related content from NBC News is stored and later parsed as JSON.",
      "ground_truth_trace_chain": "llm.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 2: Extract Relevant Content\n\nIn this example, we instruct the LLM to extract only content related to technology from the NBC News business page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\n\nasync def extract_tech_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Extract only content related to technology\"\n            ),\n            bypass_cache=True,\n        )\n\n    tech_content = json.loads(result.extracted_content)\n    print(f\"Number of tech-related items extracted: {len(tech_content)}\")\n\n    with open(\".data/tech_content.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(tech_content, f, indent=2)\n\nasyncio.run(extract_tech_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the core framework that enables the documented example to execute custom content extraction logic through its LLMExtractionStrategy subclass, particularly shown in the example where it extracts tech-related content from NBC News.",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Example 2: Extract Relevant Content\n\nIn this example, we instruct the LLM to extract only content related to technology from the NBC News business page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\n\nasync def extract_tech_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Extract only content related to technology\"\n            ),\n            bypass_cache=True,\n        )\n\n    tech_content = json.loads(result.extracted_content)\n    print(f\"Number of tech-related items extracted: {len(tech_content)}\")\n\n    with open(\".data/tech_content.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(tech_content, f, indent=2)\n\nasyncio.run(extract_tech_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the asynchronous web crawling functionality shown in the documentation example by providing methods like crawl() that handle browser automation, HTML extraction, and custom configurations needed for the AsyncWebCrawler's arun() method.",
      "ground_truth_trace_chain": "llm.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Example 2: Extract Relevant Content\n\nIn this example, we instruct the LLM to extract only content related to technology from the NBC News business page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\n\nasync def extract_tech_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Extract only content related to technology\"\n            ),\n            bypass_cache=True,\n        )\n\n    tech_content = json.loads(result.extracted_content)\n    print(f\"Number of tech-related items extracted: {len(tech_content)}\")\n\n    with open(\".data/tech_content.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(tech_content, f, indent=2)\n\nasyncio.run(extract_tech_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core methods that enable the example's web crawling functionality, including crawl() which is used by AsyncWebCrawler to fetch and process the NBC News business page.",
      "ground_truth_trace_chain": "llm.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Basic Session Usage\n\nUse `session_id` to maintain state between requests:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    session_id = \"my_session\"\n    \n    # First request\n    result1 = await crawler.arun(\n        url=\"https://example.com/page1\",\n        session_id=session_id\n    )\n    \n    # Subsequent request using same session\n    result2 = await crawler.arun(\n        url=\"https://example.com/page2\",\n        session_id=session_id\n    )\n    \n    # Clean up when done\n    await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to create a crawler instance for session-based crawling.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler for session management.",
      "ground_truth_relationship": "The AsyncWebCrawler code implements session management through the session_id parameter in the arun method, which gets stored in the CrawlResult object and can be passed between sequential requests as demonstrated in the documentation example.",
      "ground_truth_trace_chain": "session-management.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Session Usage\n\nUse `session_id` to maintain state between requests:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    session_id = \"my_session\"\n    \n    # First request\n    result1 = await crawler.arun(\n        url=\"https://example.com/page1\",\n        session_id=session_id\n    )\n    \n    # Subsequent request using same session\n    result2 = await crawler.arun(\n        url=\"https://example.com/page2\",\n        session_id=session_id\n    )\n    \n    # Clean up when done\n    await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method_usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called multiple times in the example to perform crawling operations with session management.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which includes calling its arun() method for crawling with session management.",
      "ground_truth_relationship": "The code implements session management by accepting a session_id parameter in the arun() method's kwargs and assigning it to the crawl_result.session_id field, enabling state persistence across multiple requests as demonstrated in the documentation.",
      "ground_truth_trace_chain": "session-management.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Session Usage\n\nUse `session_id` to maintain state between requests:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    session_id = \"my_session\"\n    \n    # First request\n    result1 = await crawler.arun(\n        url=\"https://example.com/page1\",\n        session_id=session_id\n    )\n    \n    # Subsequent request using same session\n    result2 = await crawler.arun(\n        url=\"https://example.com/page2\",\n        session_id=session_id\n    )\n    \n    # Clean up when done\n    await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 2,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_relationship": "explicit",
      "relationship_type": "method_usage",
      "relationship_explanation": "The kill_session() method is explicitly called at the end of the example to clean up the session.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_trace_chain_explanation": "The document demonstrates using AsyncWebCrawler, which uses a crawler strategy (likely AsyncPlaywrightCrawlerStrategy), and then calls its kill_session() method to clean up.",
      "ground_truth_relationship": "The kill_session method implements the cleanup functionality shown in the documentation by closing both the browser page and context objects, then removing them from the session tracking dictionary when a session is no longer needed.",
      "ground_truth_trace_chain": "session-management.md -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Session Usage\n\nUse `session_id` to maintain state between requests:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    session_id = \"my_session\"\n    \n    # First request\n    result1 = await crawler.arun(\n        url=\"https://example.com/page1\",\n        session_id=session_id\n    )\n    \n    # Subsequent request using same session\n    result2 = await crawler.arun(\n        url=\"https://example.com/page2\",\n        session_id=session_id\n    )\n    \n    # Clean up when done\n    await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return_value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method calls, stored in result1 and result2 variables.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows calls to arun(), which implicitly return CrawlResult objects, as evidenced by the result1 and result2 assignments.",
      "ground_truth_relationship": "The CrawlResult class implements session tracking through its session_id field, which aligns with the documented session-based crawling functionality shown in the usage example.",
      "ground_truth_trace_chain": "session-management.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Session Usage\n\nUse `session_id` to maintain state between requests:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    session_id = \"my_session\"\n    \n    # First request\n    result1 = await crawler.arun(\n        url=\"https://example.com/page1\",\n        session_id=session_id\n    )\n    \n    # Subsequent request using same session\n    result2 = await crawler.arun(\n        url=\"https://example.com/page2\",\n        session_id=session_id\n    )\n    \n    # Clean up when done\n    await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute_usage",
      "relationship_explanation": "The success attribute of CrawlResult is implicitly used when checking the result of crawling operations in session-based crawling.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document implies the use of CrawlResult returned by arun(), which would typically involve checking its success attribute in practical usage.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Session Usage\n\nUse `session_id` to maintain state between requests:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    session_id = \"my_session\"\n    \n    # First request\n    result1 = await crawler.arun(\n        url=\"https://example.com/page1\",\n        session_id=session_id\n    )\n    \n    # Subsequent request using same session\n    result2 = await crawler.arun(\n        url=\"https://example.com/page2\",\n        session_id=session_id\n    )\n    \n    # Clean up when done\n    await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core methods that enable session-based crawling functionality shown in the documentation, including the crawl method that processes individual session-based requests.",
      "ground_truth_trace_chain": "session-management.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Basic Session Usage\n\nUse `session_id` to maintain state between requests:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    session_id = \"my_session\"\n    \n    # First request\n    result1 = await crawler.arun(\n        url=\"https://example.com/page1\",\n        session_id=session_id\n    )\n    \n    # Subsequent request using same session\n    result2 = await crawler.arun(\n        url=\"https://example.com/page2\",\n        session_id=session_id\n    )\n    \n    # Clean up when done\n    await crawler.crawler_strategy.kill_session(session_id)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements session management through the sessions dictionary in AsyncPlaywrightCrawlerStrategy, which stores browser contexts and pages mapped to session_ids as demonstrated in the documentation's session usage example.",
      "ground_truth_trace_chain": "session-management.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Timeouts and Waiting\n\nControl page loading behavior:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    page_timeout=60000,              # Page load timeout (ms)\n    delay_before_return_html=2.0,    # Wait before content capture\n    wait_for=\"css:.dynamic-content\"  # Wait for specific element\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example, as evidenced by the 'crawler.arun()' method call.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation in browser-config.md describes how to use AsyncWebCrawler, which leads to the use of its arun() method.",
      "ground_truth_relationship": "The arun() method in AsyncWebCrawler implements the documented timeout and waiting functionality through its **kwargs parameter, which accepts page_timeout, delay_before_return_html, and wait_for settings that are passed to the underlying crawler strategy.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Timeouts and Waiting\n\nControl page loading behavior:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    page_timeout=60000,              # Page load timeout (ms)\n    delay_before_return_html=2.0,    # Wait before content capture\n    wait_for=\"css:.dynamic-content\"  # Wait for specific element\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method is explicitly used in the code example to perform a crawl operation with specific timeout and waiting parameters.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of the arun() method of AsyncWebCrawler, showing how to configure timeouts and waiting behavior.",
      "ground_truth_relationship": "The code implements the documented timeout and waiting controls through the **kwargs parameter in arun(), which passes page_timeout, delay_before_return_html, and wait_for options to the crawler_strategy.crawl() method.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Timeouts and Waiting\n\nControl page loading behavior:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    page_timeout=60000,              # Page load timeout (ms)\n    delay_before_return_html=2.0,    # Wait before content capture\n    wait_for=\"css:.dynamic-content\"  # Wait for specific element\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The AsyncPlaywrightCrawlerStrategy likely implements the timeout and waiting functionality described in the documentation, as it is the default strategy used by AsyncWebCrawler.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The documentation describes features that are likely implemented in AsyncPlaywrightCrawlerStrategy, which is the default strategy used by AsyncWebCrawler.",
      "ground_truth_relationship": "The code implements the documented timeout and waiting behavior through the smart_wait method, which handles page_timeout for load control and delay_before_return_html for content capture timing, while also supporting CSS selector waiting via wait_for parameter in the crawl method.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Timeouts and Waiting\n\nControl page loading behavior:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    page_timeout=60000,              # Page load timeout (ms)\n    delay_before_return_html=2.0,    # Wait before content capture\n    wait_for=\"css:.dynamic-content\"  # Wait for specific element\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the foundation for implementing webpage crawling with timeout and waiting capabilities through its crawl method that accepts **kwargs parameter where timeout and waiting configurations can be passed.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Timeouts and Waiting\n\nControl page loading behavior:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    page_timeout=60000,              # Page load timeout (ms)\n    delay_before_return_html=2.0,    # Wait before content capture\n    wait_for=\"css:.dynamic-content\"  # Wait for specific element\n)\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class stores the final output data after applying the documented timeout and waiting configurations during web crawling, including success status, HTML content, and any error messages that may occur if timeouts are exceeded.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Domain-Based Filtering\n\nControl content based on domains:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    exclude_domains=[\"ads.com\", \"tracker.com\"],\n    exclude_social_media_domains=[\"facebook.com\", \"twitter.com\"],  # Custom social media domains to exclude\n    exclude_social_media_links=True\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example through the 'crawler' variable, which is assumed to be an instance of AsyncWebCrawler. This is evident from the usage of the 'arun' method, which is a core functionality of AsyncWebCrawler.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates usage of AsyncWebCrawler's methods, making it the only step in the chain.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements domain-based filtering through its arun method which accepts exclude_domains and exclude_social_media parameters that are passed to the underlying crawler strategy for URL filtering during web crawling.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Domain-Based Filtering\n\nControl content based on domains:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    exclude_domains=[\"ads.com\", \"tracker.com\"],\n    exclude_social_media_domains=[\"facebook.com\", \"twitter.com\"],  # Custom social media domains to exclude\n    exclude_social_media_links=True\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The 'arun' method of AsyncWebCrawler is explicitly used in the code example. It is called with various parameters to demonstrate domain-based filtering functionality.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler's arun() method. AsyncWebCrawler is necessary as the parent class containing the arun() method.",
      "ground_truth_relationship": "The arun() method's **kwargs parameter accepts domain filtering options like exclude_domains and exclude_social_media_domains documented in the example code snippet, which get passed through to the crawler_strategy.crawl() function for domain-based content control.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Domain-Based Filtering\n\nControl content based on domains:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    exclude_domains=[\"ads.com\", \"tracker.com\"],\n    exclude_social_media_domains=[\"facebook.com\", \"twitter.com\"],  # Custom social media domains to exclude\n    exclude_social_media_links=True\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "While not explicitly mentioned, the 'result' variable in the code example is implicitly an instance of CrawlResult, as it is the return type of the 'arun' method.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows usage of arun(), which returns a CrawlResult. AsyncWebCrawler and its arun() method are intermediate steps leading to the CrawlResult.",
      "ground_truth_relationship": "The CrawlResult class manages the filtered domain crawl results by storing cleaned HTML, extracted links, and associated metadata that reflect the domain-based filtering rules specified in the documentation.",
      "ground_truth_trace_chain": "content-selection.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Domain-Based Filtering\n\nControl content based on domains:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    exclude_domains=[\"ads.com\", \"tracker.com\"],\n    exclude_social_media_domains=[\"facebook.com\", \"twitter.com\"],  # Custom social media domains to exclude\n    exclude_social_media_links=True\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the foundational interface for implementing domain-based filtering through its crawl method, which accepts kwargs that can include domain exclusion parameters documented in the example.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Domain-Based Filtering\n\nControl content based on domains:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    exclude_domains=[\"ads.com\", \"tracker.com\"],\n    exclude_social_media_domains=[\"facebook.com\", \"twitter.com\"],  # Custom social media domains to exclude\n    exclude_social_media_links=True\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements domain-based filtering during crawling by accepting exclude_domains and exclude_social_media parameters which are used to control which URLs are processed during the crawling operation.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Technique 2: Integrated JavaScript Execution and Waiting Instead of using separate hooks, you can integrate the waiting logic directly into your JavaScript execution. This approach can be more concise and easier to manage for some scenarios. Here's an example: ```python async def integrated_js_and_wait_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"integrated_session\" all_commits = [] js_next_page_and_wait = \"\"\" (async () => { const getCurrentCommit = () => { const commits = document.querySelectorAll('li.commit-item h4'); return commits.length > 0 ? commits[0].textContent.trim() : null; }; const initialCommit = getCurrentCommit(); const button = document.querySelector('a.pagination-next'); if (button) button.click(); while (true) { await new Promise(resolve => setTimeout(resolve, 100)); const newCommit = getCurrentCommit(); if (newCommit && newCommit !== initialCommit) { break; } } })(); \"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page_and_wait if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(integrated_js_and_wait_crawl()) ``` This approach combines the JavaScript for clicking the \"next\" button and waiting for new content to load into a single script.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to create a web crawler instance for session-based crawling.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler for session-based crawling.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the integrated JavaScript execution described in the documentation through its arun method, which accepts js_code and extracts content using the specified extraction_strategy while managing browser sessions.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 2: Integrated JavaScript Execution and Waiting Instead of using separate hooks, you can integrate the waiting logic directly into your JavaScript execution. This approach can be more concise and easier to manage for some scenarios. Here's an example: ```python async def integrated_js_and_wait_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"integrated_session\" all_commits = [] js_next_page_and_wait = \"\"\" (async () => { const getCurrentCommit = () => { const commits = document.querySelectorAll('li.commit-item h4'); return commits.length > 0 ? commits[0].textContent.trim() : null; }; const initialCommit = getCurrentCommit(); const button = document.querySelector('a.pagination-next'); if (button) button.click(); while (true) { await new Promise(resolve => setTimeout(resolve, 100)); const newCommit = getCurrentCommit(); if (newCommit && newCommit !== initialCommit) { break; } } })(); \"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page_and_wait if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(integrated_js_and_wait_crawl()) ``` This approach combines the JavaScript for clicking the \"next\" button and waiting for new content to load into a single script.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling operation.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which includes calling its arun() method for crawling.",
      "ground_truth_relationship": "The arun() method implements the integrated JavaScript execution and waiting functionality by accepting js_code as a parameter through **kwargs which allows it to execute the documented JavaScript that handles pagination and content loading.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 2: Integrated JavaScript Execution and Waiting Instead of using separate hooks, you can integrate the waiting logic directly into your JavaScript execution. This approach can be more concise and easier to manage for some scenarios. Here's an example: ```python async def integrated_js_and_wait_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"integrated_session\" all_commits = [] js_next_page_and_wait = \"\"\" (async () => { const getCurrentCommit = () => { const commits = document.querySelectorAll('li.commit-item h4'); return commits.length > 0 ? commits[0].textContent.trim() : null; }; const initialCommit = getCurrentCommit(); const button = document.querySelector('a.pagination-next'); if (button) button.click(); while (true) { await new Promise(resolve => setTimeout(resolve, 100)); const newCommit = getCurrentCommit(); if (newCommit && newCommit !== initialCommit) { break; } } })(); \"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page_and_wait if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(integrated_js_and_wait_crawl()) ``` This approach combines the JavaScript for clicking the \"next\" button and waiting for new content to load into a single script.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 2,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The kill_session() method is explicitly called in the code example to close the crawling session.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_trace_chain_explanation": "The document demonstrates using AsyncWebCrawler, which internally uses AsyncPlaywrightCrawlerStrategy, and explicitly calls its kill_session() method.",
      "ground_truth_relationship": "The kill_session method is used at the end of the integrated crawling process to clean up browser resources by closing the page and context objects associated with the crawling session.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 2: Integrated JavaScript Execution and Waiting Instead of using separate hooks, you can integrate the waiting logic directly into your JavaScript execution. This approach can be more concise and easier to manage for some scenarios. Here's an example: ```python async def integrated_js_and_wait_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"integrated_session\" all_commits = [] js_next_page_and_wait = \"\"\" (async () => { const getCurrentCommit = () => { const commits = document.querySelectorAll('li.commit-item h4'); return commits.length > 0 ? commits[0].textContent.trim() : null; }; const initialCommit = getCurrentCommit(); const button = document.querySelector('a.pagination-next'); if (button) button.click(); while (true) { await new Promise(resolve => setTimeout(resolve, 100)); const newCommit = getCurrentCommit(); if (newCommit && newCommit !== initialCommit) { break; } } })(); \"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page_and_wait if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(integrated_js_and_wait_crawl()) ``` This approach combines the JavaScript for clicking the \"next\" button and waiting for new content to load into a single script.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly used in the code example to define the extraction strategy for crawling.",
      "predicted_trace_chain": "session-management-advanced.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of JsonCssExtractionStrategy for defining the extraction strategy.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements the structured data extraction logic that processes the HTML content according to the schema defined in the documentation's example, where it extracts commit information using the specified baseSelector and field selectors.",
      "ground_truth_trace_chain": "session-management-advanced.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 2: Integrated JavaScript Execution and Waiting Instead of using separate hooks, you can integrate the waiting logic directly into your JavaScript execution. This approach can be more concise and easier to manage for some scenarios. Here's an example: ```python async def integrated_js_and_wait_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"integrated_session\" all_commits = [] js_next_page_and_wait = \"\"\" (async () => { const getCurrentCommit = () => { const commits = document.querySelectorAll('li.commit-item h4'); return commits.length > 0 ? commits[0].textContent.trim() : null; }; const initialCommit = getCurrentCommit(); const button = document.querySelector('a.pagination-next'); if (button) button.click(); while (true) { await new Promise(resolve => setTimeout(resolve, 100)); const newCommit = getCurrentCommit(); if (newCommit && newCommit !== initialCommit) { break; } } })(); \"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page_and_wait if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(integrated_js_and_wait_crawl()) ``` This approach combines the JavaScript for clicking the \"next\" button and waiting for new content to load into a single script.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of the arun() method, as evidenced by accessing the extracted_content attribute.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the usage of arun() method, which returns a CrawlResult object, as evidenced by accessing its attributes.",
      "ground_truth_relationship": "The CrawlResult class serves as a structured container for storing the extracted commits and related metadata from the integrated JavaScript execution process described in the documentation.",
      "ground_truth_trace_chain": "session-management-advanced.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 2: Integrated JavaScript Execution and Waiting Instead of using separate hooks, you can integrate the waiting logic directly into your JavaScript execution. This approach can be more concise and easier to manage for some scenarios. Here's an example: ```python async def integrated_js_and_wait_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"integrated_session\" all_commits = [] js_next_page_and_wait = \"\"\" (async () => { const getCurrentCommit = () => { const commits = document.querySelectorAll('li.commit-item h4'); return commits.length > 0 ? commits[0].textContent.trim() : null; }; const initialCommit = getCurrentCommit(); const button = document.querySelector('a.pagination-next'); if (button) button.click(); while (true) { await new Promise(resolve => setTimeout(resolve, 100)); const newCommit = getCurrentCommit(); if (newCommit && newCommit !== initialCommit) { break; } } })(); \"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page_and_wait if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(integrated_js_and_wait_crawl()) ``` This approach combines the JavaScript for clicking the \"next\" button and waiting for new content to load into a single script.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is explicitly accessed in the code example to process the crawled data.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows the usage of arun() method, which returns a CrawlResult object, and then explicitly accesses its extracted_content attribute.",
      "ground_truth_relationship": "The CrawlResult.extracted_content property stores the JSON-formatted commit data that was extracted from the webpage using the JsonCssExtractionStrategy schema.",
      "ground_truth_trace_chain": "session-management-advanced.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 2: Integrated JavaScript Execution and Waiting Instead of using separate hooks, you can integrate the waiting logic directly into your JavaScript execution. This approach can be more concise and easier to manage for some scenarios. Here's an example: ```python async def integrated_js_and_wait_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"integrated_session\" all_commits = [] js_next_page_and_wait = \"\"\" (async () => { const getCurrentCommit = () => { const commits = document.querySelectorAll('li.commit-item h4'); return commits.length > 0 ? commits[0].textContent.trim() : null; }; const initialCommit = getCurrentCommit(); const button = document.querySelector('a.pagination-next'); if (button) button.click(); while (true) { await new Promise(resolve => setTimeout(resolve, 100)); const newCommit = getCurrentCommit(); if (newCommit && newCommit !== initialCommit) { break; } } })(); \"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page_and_wait if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(integrated_js_and_wait_crawl()) ``` This approach combines the JavaScript for clicking the \"next\" button and waiting for new content to load into a single script.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class provides the foundation for implementing the commit extraction functionality shown in the documentation through its extract method, which processes HTML content into structured data as demonstrated in the documentation's schema-based extraction example.",
      "ground_truth_trace_chain": "session-management-advanced.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Technique 2: Integrated JavaScript Execution and Waiting Instead of using separate hooks, you can integrate the waiting logic directly into your JavaScript execution. This approach can be more concise and easier to manage for some scenarios. Here's an example: ```python async def integrated_js_and_wait_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"integrated_session\" all_commits = [] js_next_page_and_wait = \"\"\" (async () => { const getCurrentCommit = () => { const commits = document.querySelectorAll('li.commit-item h4'); return commits.length > 0 ? commits[0].textContent.trim() : null; }; const initialCommit = getCurrentCommit(); const button = document.querySelector('a.pagination-next'); if (button) button.click(); while (true) { await new Promise(resolve => setTimeout(resolve, 100)); const newCommit = getCurrentCommit(); if (newCommit && newCommit !== initialCommit) { break; } } })(); \"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page_and_wait if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(integrated_js_and_wait_crawl()) ``` This approach combines the JavaScript for clicking the \"next\" button and waiting for new content to load into a single script.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the integrated JavaScript execution and waiting functionality through its csp_compliant_wait method, which wraps user-provided JavaScript in a polling loop that checks for conditions while respecting timeouts.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Technique 2: Integrated JavaScript Execution and Waiting Instead of using separate hooks, you can integrate the waiting logic directly into your JavaScript execution. This approach can be more concise and easier to manage for some scenarios. Here's an example: ```python async def integrated_js_and_wait_crawl(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/example/repo/commits/main\" session_id = \"integrated_session\" all_commits = [] js_next_page_and_wait = \"\"\" (async () => { const getCurrentCommit = () => { const commits = document.querySelectorAll('li.commit-item h4'); return commits.length > 0 ? commits[0].textContent.trim() : null; }; const initialCommit = getCurrentCommit(); const button = document.querySelector('a.pagination-next'); if (button) button.click(); while (true) { await new Promise(resolve => setTimeout(resolve, 100)); const newCommit = getCurrentCommit(); if (newCommit && newCommit !== initialCommit) { break; } } })(); \"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.commit-item\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.commit-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3): result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.commit-item\", extraction_strategy=extraction_strategy, js_code=js_next_page_and_wait if page > 0 else None, js_only=page > 0, bypass_cache=True ) commits = json.loads(result.extracted_content) all_commits.extend(commits) print(f\"Page {page + 1}: Found {len(commits)} commits\") await crawler.crawler_strategy.kill_session(session_id) print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\") asyncio.run(integrated_js_and_wait_crawl()) ``` This approach combines the JavaScript for clicking the \"next\" button and waiting for new content to load into a single script.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the foundational methods like set_hook() that enable the integrated JavaScript execution and waiting functionality described in the documentation's advanced technique.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# Browser Configuration\n\nCrawl4AI supports multiple browser engines and offers extensive configuration options for browser behavior.\n\n## Browser Types\n\nChoose from three browser engines:\n\n```python\n# Chromium (default)\nasync with AsyncWebCrawler(browser_type=\"chromium\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly mentioned and used in multiple code examples throughout the documentation snippet. It is the main class used for configuring and executing web crawling operations.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements browser type selection through its crawler_strategy parameter, which accepts different browser engines (chromium, firefox, webkit) as documented in the configuration guide.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Browser Configuration\n\nCrawl4AI supports multiple browser engines and offers extensive configuration options for browser behavior.\n\n## Browser Types\n\nChoose from three browser engines:\n\n```python\n# Chromium (default)\nasync with AsyncWebCrawler(browser_type=\"chromium\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in multiple code examples to perform crawling operations with various configurations.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler, which contains the arun() method. The method is directly called on AsyncWebCrawler instances.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method implements the browser engine selection documented in the configuration guide by accepting a browser_type parameter that determines which engine (Chromium, Firefox, or WebKit) will be used for crawling the specified URL.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Browser Configuration\n\nCrawl4AI supports multiple browser engines and offers extensive configuration options for browser behavior.\n\n## Browser Types\n\nChoose from three browser engines:\n\n```python\n# Chromium (default)\nasync with AsyncWebCrawler(browser_type=\"chromium\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "While not explicitly named, the CrawlResult class is implicitly used as it represents the return value of the arun() method, containing properties like screenshot, markdown, and success that are accessed in the examples.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler.arun(), which returns a CrawlResult object. Properties of this object are accessed in the examples.",
      "ground_truth_relationship": "The CrawlResult class defines the structured data model that stores the crawling outcomes for any of the three supported browser types (Chromium, Firefox, or WebKit) documented in the browser configuration guide.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Browser Configuration\n\nCrawl4AI supports multiple browser engines and offers extensive configuration options for browser behavior.\n\n## Browser Types\n\nChoose from three browser engines:\n\n```python\n# Chromium (default)\nasync with AsyncWebCrawler(browser_type=\"chromium\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 18,
      "artifact_title": "CrawlResult.screenshot",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The screenshot attribute of CrawlResult is explicitly mentioned and used in the documentation when discussing screenshot capabilities.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.screenshot",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler.arun(), which returns a CrawlResult object. The screenshot attribute of this object is directly accessed in the examples.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Browser Configuration\n\nCrawl4AI supports multiple browser engines and offers extensive configuration options for browser behavior.\n\n## Browser Types\n\nChoose from three browser engines:\n\n```python\n# Chromium (default)\nasync with AsyncWebCrawler(browser_type=\"chromium\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The markdown attribute of CrawlResult is explicitly used in the comprehensive example at the end of the documentation snippet.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler.arun(), which returns a CrawlResult object. The markdown attribute of this object is directly accessed in the comprehensive example.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Browser Configuration\n\nCrawl4AI supports multiple browser engines and offers extensive configuration options for browser behavior.\n\n## Browser Types\n\nChoose from three browser engines:\n\n```python\n# Chromium (default)\nasync with AsyncWebCrawler(browser_type=\"chromium\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The success attribute of CrawlResult is explicitly used in the comprehensive example at the end of the documentation snippet.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler.arun(), which returns a CrawlResult object. The success attribute of this object is directly accessed in the comprehensive example.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Browser Configuration\n\nCrawl4AI supports multiple browser engines and offers extensive configuration options for browser behavior.\n\n## Browser Types\n\nChoose from three browser engines:\n\n```python\n# Chromium (default)\nasync with AsyncWebCrawler(browser_type=\"chromium\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods that each browser type (Chromium, Firefox, WebKit) must implement to provide unified crawling functionality.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# Browser Configuration\n\nCrawl4AI supports multiple browser engines and offers extensive configuration options for browser behavior.\n\n## Browser Types\n\nChoose from three browser engines:\n\n```python\n# Chromium (default)\nasync with AsyncWebCrawler(browser_type=\"chromium\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\") as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements browser type selection through its start() method, where it uses the browser_type parameter to launch either Chromium (default), Firefox, or WebKit browsers as documented in the configuration guide.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Browser Selection \ud83c\udf10\n\nCrawl4AI supports multiple browser engines. Here's how to use different browsers:\n\n```python\n# Use Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\", verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n\n# Use WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\", verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n\n# Use Chromium (default)\nasync with AsyncWebCrawler(verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The AsyncPlaywrightCrawlerStrategy class is implicitly used to implement the browser selection functionality described in the documentation. It handles the creation and configuration of different browser types.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The document describes using AsyncWebCrawler with different browser types. AsyncWebCrawler uses AsyncPlaywrightCrawlerStrategy internally to implement this functionality.",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements browser selection through its start() method, which uses the browser_type parameter to launch either Firefox, WebKit, or Chromium (default) browsers as documented in the browser selection examples.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Browser Selection \ud83c\udf10\n\nCrawl4AI supports multiple browser engines. Here's how to use different browsers:\n\n```python\n# Use Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\", verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n\n# Use WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\", verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n\n# Use Chromium (default)\nasync with AsyncWebCrawler(verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code examples to create instances for crawling with different browser types.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler with different browser configurations.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements browser selection through its crawler_strategy parameter, which accepts a PlaywrightCrawlerStrategy instance that can be configured with different browser_type values (firefox, webkit, or chromium) as shown in the documentation examples.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Browser Selection \ud83c\udf10\n\nCrawl4AI supports multiple browser engines. Here's how to use different browsers:\n\n```python\n# Use Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\", verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n\n# Use WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\", verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n\n# Use Chromium (default)\nasync with AsyncWebCrawler(verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code examples to perform the crawling operation.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows direct usage of the arun() method on AsyncWebCrawler instances to crawl URLs with different browser types.",
      "ground_truth_relationship": "The arun() method enables browser selection through the crawler_strategy object which is initialized with the specified browser_type (firefox, webkit, or chromium) when creating the AsyncWebCrawler instance.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Browser Selection \ud83c\udf10\n\nCrawl4AI supports multiple browser engines. Here's how to use different browsers:\n\n```python\n# Use Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\", verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n\n# Use WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\", verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n\n# Use Chromium (default)\nasync with AsyncWebCrawler(verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods that each browser type (Firefox, WebKit, Chromium) must implement to support the browser selection functionality documented.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Browser Selection \ud83c\udf10\n\nCrawl4AI supports multiple browser engines. Here's how to use different browsers:\n\n```python\n# Use Firefox\nasync with AsyncWebCrawler(browser_type=\"firefox\", verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n\n# Use WebKit\nasync with AsyncWebCrawler(browser_type=\"webkit\", verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n\n# Use Chromium (default)\nasync with AsyncWebCrawler(verbose=True, headless=True) as crawler:\n    result = await crawler.arun(url=\"https://www.example.com\", bypass_cache=True)\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class is used to store and structure the crawling output data regardless of which browser engine (Firefox, WebKit, or Chromium) is used to perform the crawl.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## JavaScript Execution\n\n### Basic Execution\n\n```python\n# Single JavaScript command\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\"\n)\n\n# Multiple commands\njs_commands = [\n    \"window.scrollTo(0, document.body.scrollHeight);\",\n    \"document.querySelector('.load-more').click();\",\n    \"document.querySelector('#consent-button').click();\"\n]\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_commands\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code examples, as evidenced by the 'crawler.arun()' method calls. This class is responsible for performing the asynchronous web crawling operations described in the documentation.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document describes interactions that are implemented through the AsyncWebCrawler class, which provides the arun() method for executing crawls with various options.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements JavaScript execution through its arun method, which accepts a js_code parameter that can be either a single command or list of commands as shown in the documentation examples.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## JavaScript Execution\n\n### Basic Execution\n\n```python\n# Single JavaScript command\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\"\n)\n\n# Multiple commands\njs_commands = [\n    \"window.scrollTo(0, document.body.scrollHeight);\",\n    \"document.querySelector('.load-more').click();\",\n    \"document.querySelector('#consent-button').click();\"\n]\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_commands\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method is explicitly used in the code examples to perform web crawling operations with various parameters such as 'url', 'js_code', and others. This method is central to executing the JavaScript and handling the page interactions described in the documentation.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of the arun() method, which is the primary interface for interacting with web pages and executing JavaScript through the AsyncWebCrawler class.",
      "ground_truth_relationship": "The arun() method implements the documented JavaScript execution capability by accepting js_code as a parameter through **kwargs and forwarding it to the crawler_strategy.crawl() method for executing single or multiple JavaScript commands on the target webpage.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## JavaScript Execution\n\n### Basic Execution\n\n```python\n# Single JavaScript command\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\"\n)\n\n# Multiple commands\njs_commands = [\n    \"window.scrollTo(0, document.body.scrollHeight);\",\n    \"document.querySelector('.load-more').click();\",\n    \"document.querySelector('#consent-button').click();\"\n]\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_commands\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementation",
      "relationship_explanation": "While not explicitly mentioned, the AsyncPlaywrightCrawlerStrategy is likely the underlying implementation that handles the JavaScript execution and page interactions described in the documentation. It would be responsible for executing the 'js_code' passed to the arun() method.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The document describes JavaScript execution capabilities that are implemented by the AsyncPlaywrightCrawlerStrategy, which is the default strategy used by AsyncWebCrawler for handling browser interactions.",
      "ground_truth_relationship": "The code implements JavaScript execution by allowing both single and multiple JS commands to be passed through the js_code parameter in the crawl method, which are then executed using Playwright's page.evaluate() function.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## JavaScript Execution\n\n### Basic Execution\n\n```python\n# Single JavaScript command\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\"\n)\n\n# Multiple commands\njs_commands = [\n    \"window.scrollTo(0, document.body.scrollHeight);\",\n    \"document.querySelector('.load-more').click();\",\n    \"document.querySelector('#consent-button').click();\"\n]\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_commands\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core methods that enable JavaScript execution through its crawl() method, which the documentation demonstrates using through examples of scrolling and clicking elements.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## JavaScript Execution\n\n### Basic Execution\n\n```python\n# Single JavaScript command\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\"\n)\n\n# Multiple commands\njs_commands = [\n    \"window.scrollTo(0, document.body.scrollHeight);\",\n    \"document.querySelector('.load-more').click();\",\n    \"document.querySelector('#consent-button').click();\"\n]\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=js_commands\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult model captures and stores the outcomes of JavaScript execution commands, including the resulting HTML, success status, and any errors that may occur during the execution of the documented JS commands.",
      "ground_truth_trace_chain": "page-interaction.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the error handling example where 'crawler.arun()' is called, indicating it's the main class for performing asynchronous web crawling operations.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates usage of the AsyncWebCrawler class through its arun method, showing how to handle extraction errors.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented best practices by incorporating caching mechanisms (through async_db_manager), configurable extraction strategies, and error handling with detailed success/failure reporting in its arun() method.",
      "ground_truth_trace_chain": "overview.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in the error handling example to perform the extraction operation.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows direct usage of the arun() method, which is a part of the AsyncWebCrawler class, demonstrating how to execute an extraction strategy and handle potential errors.",
      "ground_truth_relationship": "The code implements error handling patterns shown in the documentation through try-catch blocks that return CrawlResult objects with error messages, while also incorporating the documented best practices of caching and strategy selection.",
      "ground_truth_trace_chain": "overview.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of the arun() method, as evidenced by accessing 'result.success' and 'result.error_message' in the error handling example.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document demonstrates error handling using properties of the result returned by arun(), which implies the use of the CrawlResult class to encapsulate the crawling operation's outcome.",
      "ground_truth_relationship": "The CrawlResult class captures the success/error states described in the error handling documentation through its success, error_message, and extracted_content fields that enable the demonstrated error checking pattern.",
      "ground_truth_trace_chain": "overview.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The 'success' property of CrawlResult is explicitly accessed in the error handling example to determine if the extraction was successful.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document directly accesses the 'success' property of the result returned by arun(), which is an attribute of the CrawlResult class, to check for extraction success.",
      "ground_truth_relationship": "The CrawlResult.success boolean property directly supports the error handling best practices shown in the documentation by enabling conditional verification of successful extraction operations.",
      "ground_truth_trace_chain": "overview.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 10,
      "artifact_title": "CrawlResult.error_message",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The 'error_message' property of CrawlResult is explicitly accessed in the error handling example to print the error message if extraction fails.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.error_message",
      "predicted_trace_chain_explanation": "The document directly accesses the 'error_message' property of the result returned by arun(), which is an attribute of the CrawlResult class, to display the error message in case of failure.",
      "ground_truth_relationship": "The error_message field in CrawlResult directly enables the error handling best practice shown in the documentation by providing a string description of what went wrong when result.success is False.",
      "ground_truth_trace_chain": "overview.md -> CrawlResult.error_message",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "property access",
      "relationship_explanation": "The 'extracted_content' property of CrawlResult is implicitly used in the error handling example, as it's parsed using json.loads() when the extraction is successful.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document implies the use of the 'extracted_content' property by parsing it with json.loads() when the extraction is successful, indicating this property contains the extracted data from the crawling operation.",
      "ground_truth_relationship": "The CrawlResult.extracted_content field stores the successfully crawled data as demonstrated in the documentation's error handling code sample where it's parsed as JSON after a successful extraction.",
      "ground_truth_trace_chain": "overview.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "CosineStrategy",
      "ground_truth_relationship": "The CosineStrategy class implements the documented 'Cosine for content relevance' best practice by using cosine similarity metrics in the filter_documents_embeddings method to evaluate and filter content based on semantic relevance scores.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class implements the documented 'Choose the Right Strategy' section by providing a flexible framework where different extraction methods (CSS, LLM, Cosine) can be implemented through the abstract extract() method while sharing common parallel processing functionality in run().",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "LLMExtractionStrategy",
      "ground_truth_relationship": "The code implements error handling and retry logic through ThreadPoolExecutor and try-catch blocks, directly aligning with the documentation's 'Handle Errors' section which shows error checking patterns.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "JsonCssExtractionStrategy",
      "ground_truth_relationship": "The code implements the CSS strategy mentioned in the documentation's best practices by using BeautifulSoup selectors to extract structured data according to a predefined schema.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class implements the 'Choose the Right Strategy' section of the documentation by defining core methods that each concrete strategy (CSS, LLM, Cosine) must implement for web crawling.",
      "ground_truth_trace_chain": "overview.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Choose the Right Strategy**\n   - Start with CSS for structured data\n   - Use LLM for complex interpretation\n   - Try Cosine for content relevance\n\n2. **Optimize Performance**\n   - Cache LLM results\n   - Keep CSS selectors specific\n   - Tune similarity thresholds\n\n3. **Handle Errors**\n   ```python\n   result = await crawler.arun(\n       url=\"https://example.com\",\n       extraction_strategy=strategy\n   )\n   \n   if not result.success:\n       print(f\"Extraction failed: {result.error_message}\")\n   else:\n       data = json.loads(result.extracted_content)\n   ```\n\nEach strategy has its strengths and optimal use cases. Explore the detailed documentation for each strategy to learn more about their specific features and configurations.",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the documented error handling pattern through its crawl method, which returns an AsyncCrawlResponse containing success/failure information and extracted content exactly as shown in the documentation example.",
      "ground_truth_trace_chain": "overview.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### RegexChunking\n\n`RegexChunking` splits text using regular expressions. This is ideal for creating chunks based on specific patterns like paragraphs or sentences.\n\n#### When to Use\n- Great for structured text with consistent delimiters.\n- Suitable for documents where specific patterns (e.g., double newlines, periods) indicate logical chunks.\n\n#### Parameters\n- `patterns` (list, optional): Regular expressions used to split the text. Default is to split by double newlines (`['\\n\\n']`).\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\n# Define patterns for splitting text\npatterns = [r'\\n\\n', r'\\. ']\nchunker = RegexChunking(patterns=patterns)\n\n# Sample text\ntext = \"This is a sample text. It will be split into chunks.\\n\\nThis is another paragraph.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 26,
      "artifact_title": "RegexChunking",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The RegexChunking class is explicitly mentioned and described in the documentation. It is the main subject of this section, implementing the regex-based text chunking strategy.",
      "predicted_trace_chain": "chunking.md -> ChunkingStrategy -> RegexChunking",
      "predicted_trace_chain_explanation": "The document describes RegexChunking, which is a specific implementation of the ChunkingStrategy abstract base class.",
      "ground_truth_relationship": "The RegexChunking code implements text splitting using the re.split() function iteratively over each pattern in self.patterns, which directly corresponds to the documentation's description of using regular expressions to split text based on specified patterns like paragraphs or sentences.",
      "ground_truth_trace_chain": "chunking.md -> ChunkingStrategy -> RegexChunking",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### RegexChunking\n\n`RegexChunking` splits text using regular expressions. This is ideal for creating chunks based on specific patterns like paragraphs or sentences.\n\n#### When to Use\n- Great for structured text with consistent delimiters.\n- Suitable for documents where specific patterns (e.g., double newlines, periods) indicate logical chunks.\n\n#### Parameters\n- `patterns` (list, optional): Regular expressions used to split the text. Default is to split by double newlines (`['\\n\\n']`).\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\n# Define patterns for splitting text\npatterns = [r'\\n\\n', r'\\. ']\nchunker = RegexChunking(patterns=patterns)\n\n# Sample text\ntext = \"This is a sample text. It will be split into chunks.\\n\\nThis is another paragraph.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 6,
      "artifact_title": "ChunkingStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "inheritance",
      "relationship_explanation": "While not explicitly mentioned, RegexChunking is implicitly a subclass of ChunkingStrategy, as it implements a specific chunking strategy.",
      "predicted_trace_chain": "chunking.md -> ChunkingStrategy -> RegexChunking",
      "predicted_trace_chain_explanation": "The document describes RegexChunking, which is logically derived from the ChunkingStrategy abstract base class.",
      "ground_truth_relationship": "The ChunkingStrategy abstract base class defines the foundational interface that RegexChunking must implement to perform text splitting using regular expressions through the required chunk() method.",
      "ground_truth_trace_chain": "chunking.md -> ChunkingStrategy -> ChunkingStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### RegexChunking\n\n`RegexChunking` splits text using regular expressions. This is ideal for creating chunks based on specific patterns like paragraphs or sentences.\n\n#### When to Use\n- Great for structured text with consistent delimiters.\n- Suitable for documents where specific patterns (e.g., double newlines, periods) indicate logical chunks.\n\n#### Parameters\n- `patterns` (list, optional): Regular expressions used to split the text. Default is to split by double newlines (`['\\n\\n']`).\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\n# Define patterns for splitting text\npatterns = [r'\\n\\n', r'\\. ']\nchunker = RegexChunking(patterns=patterns)\n\n# Sample text\ntext = \"This is a sample text. It will be split into chunks.\\n\\nThis is another paragraph.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 26,
      "artifact_title": "RegexChunking",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The documentation provides an example of how to use the RegexChunking class, demonstrating its initialization and the chunk method.",
      "predicted_trace_chain": "chunking.md -> RegexChunking",
      "predicted_trace_chain_explanation": "The document directly shows how to use the RegexChunking class.",
      "ground_truth_relationship": "The RegexChunking code implements text splitting using the re.split() function iteratively over each pattern in self.patterns, which directly corresponds to the documentation's description of using regular expressions to split text based on specified patterns like paragraphs or sentences.",
      "ground_truth_trace_chain": "chunking.md -> ChunkingStrategy -> RegexChunking",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### RegexChunking\n\n`RegexChunking` splits text using regular expressions. This is ideal for creating chunks based on specific patterns like paragraphs or sentences.\n\n#### When to Use\n- Great for structured text with consistent delimiters.\n- Suitable for documents where specific patterns (e.g., double newlines, periods) indicate logical chunks.\n\n#### Parameters\n- `patterns` (list, optional): Regular expressions used to split the text. Default is to split by double newlines (`['\\n\\n']`).\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import RegexChunking\n\n# Define patterns for splitting text\npatterns = [r'\\n\\n', r'\\. ']\nchunker = RegexChunking(patterns=patterns)\n\n# Sample text\ntext = \"This is a sample text. It will be split into chunks.\\n\\nThis is another paragraph.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 26,
      "artifact_title": "RegexChunking.chunk()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The chunk() method of RegexChunking is explicitly used in the example code provided in the documentation.",
      "predicted_trace_chain": "chunking.md -> RegexChunking -> RegexChunking.chunk()",
      "predicted_trace_chain_explanation": "The document shows an example of using the chunk() method, which is a part of the RegexChunking class.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Customizing LLM Provider\n\nCrawl4AI uses the `litellm` library under the hood, which allows you to use any LLM provider you want. Just pass the correct model name and API token:\n\n```python\nextraction_strategy=LLMExtractionStrategy(\n    provider=\"your_llm_provider/model_name\",\n    api_token=\"your_api_token\",\n    instruction=\"Your extraction instruction\"\n)\n```\n\nThis flexibility allows you to integrate with various LLM providers and tailor the extraction process to your specific needs.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 24,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The LLMExtractionStrategy class is explicitly mentioned and demonstrated in the code example. It is used to configure the extraction strategy for the AsyncWebCrawler.",
      "predicted_trace_chain": "docs/md_v2/extraction/llm.md -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly references and demonstrates the usage of the LLMExtractionStrategy class.",
      "ground_truth_relationship": "The code implements the documented LLM provider customization by allowing users to specify a provider and API token through the LLMExtractionStrategy class constructor, which then uses these parameters to initialize the extraction process with the specified LLM service.",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Customizing LLM Provider\n\nCrawl4AI uses the `litellm` library under the hood, which allows you to use any LLM provider you want. Just pass the correct model name and API token:\n\n```python\nextraction_strategy=LLMExtractionStrategy(\n    provider=\"your_llm_provider/model_name\",\n    api_token=\"your_api_token\",\n    instruction=\"Your extraction instruction\"\n)\n```\n\nThis flexibility allows you to integrate with various LLM providers and tailor the extraction process to your specific needs.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example. It is not directly discussed in the text, but it is used to create the crawler instance in the provided code snippet.",
      "predicted_trace_chain": "docs/md_v2/extraction/llm.md -> AsyncWebCrawler -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which is then configured with LLMExtractionStrategy. The AsyncWebCrawler is necessary to perform the web crawling operation with the specified extraction strategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Customizing LLM Provider\n\nCrawl4AI uses the `litellm` library under the hood, which allows you to use any LLM provider you want. Just pass the correct model name and API token:\n\n```python\nextraction_strategy=LLMExtractionStrategy(\n    provider=\"your_llm_provider/model_name\",\n    api_token=\"your_api_token\",\n    instruction=\"Your extraction instruction\"\n)\n```\n\nThis flexibility allows you to integrate with various LLM providers and tailor the extraction process to your specific needs.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is implicitly used in the code example. It is not directly discussed in the text, but it is used to execute the crawling operation with the specified extraction strategy.",
      "predicted_trace_chain": "docs/md_v2/extraction/llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document demonstrates the use of AsyncWebCrawler, which calls its arun() method to perform the crawling. The arun() method is configured with LLMExtractionStrategy to customize the extraction process.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Customizing LLM Provider\n\nCrawl4AI uses the `litellm` library under the hood, which allows you to use any LLM provider you want. Just pass the correct model name and API token:\n\n```python\nextraction_strategy=LLMExtractionStrategy(\n    provider=\"your_llm_provider/model_name\",\n    api_token=\"your_api_token\",\n    instruction=\"Your extraction instruction\"\n)\n```\n\nThis flexibility allows you to integrate with various LLM providers and tailor the extraction process to your specific needs.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class serves as the foundation for implementing custom LLM providers through its extensible design, which aligns with the documentation's description of using different LLM providers via the litellm library.",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# Magic Mode & Anti-Bot Protection\n\nCrawl4AI provides powerful anti-detection capabilities, with Magic Mode being the simplest and most comprehensive solution.\n\n## Magic Mode\n\nThe easiest way to bypass anti-bot protections:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        magic=True  # Enables all anti-detection features\n    )\n```\n\nMagic Mode automatically:\n- Masks browser automation signals\n- Simulates human-like behavior\n- Overrides navigator properties\n- Handles cookie consent popups\n- Manages browser fingerprinting\n- Randomizes timing patterns\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate how to enable Magic Mode and other anti-bot protection features.",
      "predicted_trace_chain": "magic-mode.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements Magic Mode's anti-bot protections through its crawler_strategy parameter which defaults to AsyncPlaywrightCrawlerStrategy, handling browser automation masking and human behavior simulation through its arun() method's **kwargs parameters.",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Magic Mode & Anti-Bot Protection\n\nCrawl4AI provides powerful anti-detection capabilities, with Magic Mode being the simplest and most comprehensive solution.\n\n## Magic Mode\n\nThe easiest way to bypass anti-bot protections:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        magic=True  # Enables all anti-detection features\n    )\n```\n\nMagic Mode automatically:\n- Masks browser automation signals\n- Simulates human-like behavior\n- Overrides navigator properties\n- Handles cookie consent popups\n- Manages browser fingerprinting\n- Randomizes timing patterns\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code examples to demonstrate how to use Magic Mode and other anti-bot protection features.",
      "predicted_trace_chain": "magic-mode.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which is necessary to access its arun() method.",
      "ground_truth_relationship": "The arun() method accepts a 'magic' parameter in its **kwargs which, when set to True, enables the anti-bot protection features described in the documentation by delegating the actual crawling behavior to the crawler_strategy object.",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Magic Mode & Anti-Bot Protection\n\nCrawl4AI provides powerful anti-detection capabilities, with Magic Mode being the simplest and most comprehensive solution.\n\n## Magic Mode\n\nThe easiest way to bypass anti-bot protections:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        magic=True  # Enables all anti-detection features\n    )\n```\n\nMagic Mode automatically:\n- Masks browser automation signals\n- Simulates human-like behavior\n- Overrides navigator properties\n- Handles cookie consent popups\n- Manages browser fingerprinting\n- Randomizes timing patterns\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interfaces needed to implement Magic Mode's anti-bot features through its abstract methods for crawling, screenshots, user agent manipulation, and custom hooks.",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# Magic Mode & Anti-Bot Protection\n\nCrawl4AI provides powerful anti-detection capabilities, with Magic Mode being the simplest and most comprehensive solution.\n\n## Magic Mode\n\nThe easiest way to bypass anti-bot protections:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        magic=True  # Enables all anti-detection features\n    )\n```\n\nMagic Mode automatically:\n- Masks browser automation signals\n- Simulates human-like behavior\n- Overrides navigator properties\n- Handles cookie consent popups\n- Manages browser fingerprinting\n- Randomizes timing patterns\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class captures the outcomes of Magic Mode anti-bot operations by storing essential crawling data including success status, cleaned HTML, metadata, and session information needed to verify successful anti-detection measures.",
      "ground_truth_trace_chain": "magic-mode.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# Magic Mode & Anti-Bot Protection\n\nCrawl4AI provides powerful anti-detection capabilities, with Magic Mode being the simplest and most comprehensive solution.\n\n## Magic Mode\n\nThe easiest way to bypass anti-bot protections:\n\n```python\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com\",\n        magic=True  # Enables all anti-detection features\n    )\n```\n\nMagic Mode automatically:\n- Masks browser automation signals\n- Simulates human-like behavior\n- Overrides navigator properties\n- Handles cookie consent popups\n- Manages browser fingerprinting\n- Randomizes timing patterns\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements Magic Mode by combining anti-bot features like stealth browser configurations, navigator property overrides, and human-like behavior simulations through the magic=True parameter in the crawl method.",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# JSON CSS Extraction Strategy with AsyncWebCrawler\n\nThe `JsonCssExtractionStrategy` is a powerful feature of Crawl4AI that allows you to extract structured data from web pages using CSS selectors. This method is particularly useful when you need to extract specific data points from a consistent HTML structure, such as tables or repeated elements. Here's how to use it with the AsyncWebCrawler.\n\n## Overview\n\nThe `JsonCssExtractionStrategy` works by defining a schema that specifies:\n1. A base CSS selector for the repeating elements\n2. Fields to extract from each element, each with its own CSS selector\n\nThis strategy is fast and efficient, as it doesn't rely on external services like LLMs for extraction.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 7,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class implementation",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly mentioned and described as a feature of Crawl4AI for extracting structured data from web pages using CSS selectors.",
      "predicted_trace_chain": "css.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document describes JsonCssExtractionStrategy, which is a specific implementation of the ExtractionStrategy abstract base class.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements the documented functionality by using BeautifulSoup to process HTML and extract data through CSS selectors defined in a schema, where baseSelector finds repeating elements and fields specify what to extract from each element.",
      "ground_truth_trace_chain": "css.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# JSON CSS Extraction Strategy with AsyncWebCrawler\n\nThe `JsonCssExtractionStrategy` is a powerful feature of Crawl4AI that allows you to extract structured data from web pages using CSS selectors. This method is particularly useful when you need to extract specific data points from a consistent HTML structure, such as tables or repeated elements. Here's how to use it with the AsyncWebCrawler.\n\n## Overview\n\nThe `JsonCssExtractionStrategy` works by defining a schema that specifies:\n1. A base CSS selector for the repeating elements\n2. Fields to extract from each element, each with its own CSS selector\n\nThis strategy is fast and efficient, as it doesn't rely on external services like LLMs for extraction.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly mentioned and used in the example code to perform web crawling with the JsonCssExtractionStrategy.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly describes how to use AsyncWebCrawler with JsonCssExtractionStrategy.",
      "ground_truth_relationship": "The AsyncWebCrawler code implements JsonCssExtractionStrategy by checking for this strategy type in the aprocess_html method and executing its run() method to extract structured data using CSS selectors from the crawled HTML content.",
      "ground_truth_trace_chain": "css.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# JSON CSS Extraction Strategy with AsyncWebCrawler\n\nThe `JsonCssExtractionStrategy` is a powerful feature of Crawl4AI that allows you to extract structured data from web pages using CSS selectors. This method is particularly useful when you need to extract specific data points from a consistent HTML structure, such as tables or repeated elements. Here's how to use it with the AsyncWebCrawler.\n\n## Overview\n\nThe `JsonCssExtractionStrategy` works by defining a schema that specifies:\n1. A base CSS selector for the repeating elements\n2. Fields to extract from each element, each with its own CSS selector\n\nThis strategy is fast and efficient, as it doesn't rely on external services like LLMs for extraction.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is used in the example code to perform the crawling operation with the specified extraction strategy.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows usage of the arun() method as part of the AsyncWebCrawler class to execute the crawling process.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# JSON CSS Extraction Strategy with AsyncWebCrawler\n\nThe `JsonCssExtractionStrategy` is a powerful feature of Crawl4AI that allows you to extract structured data from web pages using CSS selectors. This method is particularly useful when you need to extract specific data points from a consistent HTML structure, such as tables or repeated elements. Here's how to use it with the AsyncWebCrawler.\n\n## Overview\n\nThe `JsonCssExtractionStrategy` works by defining a schema that specifies:\n1. A base CSS selector for the repeating elements\n2. Fields to extract from each element, each with its own CSS selector\n\nThis strategy is fast and efficient, as it doesn't rely on external services like LLMs for extraction.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The CrawlResult class is implicitly used in the example code, as the result of the arun() method is assumed to be of this type, with properties like 'success' and 'extracted_content' being accessed.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows usage of properties from the CrawlResult class, which is returned by the arun() method of AsyncWebCrawler.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# JSON CSS Extraction Strategy with AsyncWebCrawler\n\nThe `JsonCssExtractionStrategy` is a powerful feature of Crawl4AI that allows you to extract structured data from web pages using CSS selectors. This method is particularly useful when you need to extract specific data points from a consistent HTML structure, such as tables or repeated elements. Here's how to use it with the AsyncWebCrawler.\n\n## Overview\n\nThe `JsonCssExtractionStrategy` works by defining a schema that specifies:\n1. A base CSS selector for the repeating elements\n2. Fields to extract from each element, each with its own CSS selector\n\nThis strategy is fast and efficient, as it doesn't rely on external services like LLMs for extraction.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is used in the example code to access the extracted data after crawling.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document demonstrates accessing the extracted_content attribute from the CrawlResult returned by AsyncWebCrawler.arun().",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# JSON CSS Extraction Strategy with AsyncWebCrawler\n\nThe `JsonCssExtractionStrategy` is a powerful feature of Crawl4AI that allows you to extract structured data from web pages using CSS selectors. This method is particularly useful when you need to extract specific data points from a consistent HTML structure, such as tables or repeated elements. Here's how to use it with the AsyncWebCrawler.\n\n## Overview\n\nThe `JsonCssExtractionStrategy` works by defining a schema that specifies:\n1. A base CSS selector for the repeating elements\n2. Fields to extract from each element, each with its own CSS selector\n\nThis strategy is fast and efficient, as it doesn't rely on external services like LLMs for extraction.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The success attribute of CrawlResult is used in the example code to check if the crawling operation was successful.",
      "predicted_trace_chain": "css.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows checking the success attribute of the CrawlResult returned by AsyncWebCrawler.arun() to verify successful crawling.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# JSON CSS Extraction Strategy with AsyncWebCrawler\n\nThe `JsonCssExtractionStrategy` is a powerful feature of Crawl4AI that allows you to extract structured data from web pages using CSS selectors. This method is particularly useful when you need to extract specific data points from a consistent HTML structure, such as tables or repeated elements. Here's how to use it with the AsyncWebCrawler.\n\n## Overview\n\nThe `JsonCssExtractionStrategy` works by defining a schema that specifies:\n1. A base CSS selector for the repeating elements\n2. Fields to extract from each element, each with its own CSS selector\n\nThis strategy is fast and efficient, as it doesn't rely on external services like LLMs for extraction.",
      "document_location": "docs/md_v2/extraction/css.md",
      "artifact_id": 6,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "ExtractionStrategy is the base class for JsonCssExtractionStrategy, implicitly referenced as JsonCssExtractionStrategy inherits from it.",
      "predicted_trace_chain": "css.md -> JsonCssExtractionStrategy -> ExtractionStrategy",
      "predicted_trace_chain_explanation": "The document describes JsonCssExtractionStrategy, which is a specific implementation of the ExtractionStrategy abstract base class.",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundational structure for implementing JSON CSS extraction through its abstract extract method and parallel processing run method, which aligns with the documentation's description of structured data extraction from web pages.",
      "ground_truth_trace_chain": "css.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Now, let's create a schema to extract this complex structure:\n\n```python\nschema = {\n    \"name\": \"E-commerce Product Catalog\",\n    \"baseSelector\": \"div.category\",\n    \"fields\": [\n        {\n            \"name\": \"category_name\",\n            \"selector\": \"h2.category-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"products\",\n            \"selector\": \"div.product\",\n            \"type\": \"nested_list\",\n            \"fields\": [\n                {\n                    \"name\": \"name\",\n                    \"selector\": \"h3.product-name\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"price\",\n                    \"selector\": \"p.product-price\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"details\",\n                    \"selector\": \"div.product-details\",\n                    \"type\": \"nested\",\n                    \"fields\": [\n                        {\n                            \"name\": \"brand\",\n                            \"selector\": \"span.brand\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"model\",\n                            \"selector\": \"span.model\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"features\",\n                    \"selector\": \"ul.product-features li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"feature\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"reviews\",\n                    \"selector\": \"div.review\",\n                    \"type\": \"nested_list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"reviewer\",\n                            \"selector\": \"span.reviewer\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"rating\",\n                            \"selector\": \"span.rating\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"comment\",\n                            \"selector\": \"p.review-text\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"related_products\",\n                    \"selector\": \"ul.related-products li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"name\",\n                            \"selector\": \"span.related-name\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"price\",\n                            \"selector\": \"span.related-price\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\nThis schema demonstrates several advanced features:\n\n1. **Nested Objects**: The `details` field is a nested object within each product.\n2. **Simple Lists**: The `features` field is a simple list of text items.\n3. **Nested Lists**: The `products` field is a nested list, where each item is a complex object.\n4. **Lists of Objects**: The `reviews` and `related_products` fields are lists of objects.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly mentioned and demonstrated in the documentation. It is the main focus of the advanced usage explanation, showing how to use complex schemas for extracting structured data from HTML.",
      "predicted_trace_chain": "css-advanced.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document discusses advanced usage of JsonCssExtractionStrategy, which is a specific implementation of the ExtractionStrategy abstract base class.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements the schema-based extraction by recursively parsing HTML elements using BeautifulSoup's select() method to match the CSS selectors defined in the documented schema structure.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Now, let's create a schema to extract this complex structure:\n\n```python\nschema = {\n    \"name\": \"E-commerce Product Catalog\",\n    \"baseSelector\": \"div.category\",\n    \"fields\": [\n        {\n            \"name\": \"category_name\",\n            \"selector\": \"h2.category-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"products\",\n            \"selector\": \"div.product\",\n            \"type\": \"nested_list\",\n            \"fields\": [\n                {\n                    \"name\": \"name\",\n                    \"selector\": \"h3.product-name\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"price\",\n                    \"selector\": \"p.product-price\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"details\",\n                    \"selector\": \"div.product-details\",\n                    \"type\": \"nested\",\n                    \"fields\": [\n                        {\n                            \"name\": \"brand\",\n                            \"selector\": \"span.brand\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"model\",\n                            \"selector\": \"span.model\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"features\",\n                    \"selector\": \"ul.product-features li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"feature\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"reviews\",\n                    \"selector\": \"div.review\",\n                    \"type\": \"nested_list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"reviewer\",\n                            \"selector\": \"span.reviewer\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"rating\",\n                            \"selector\": \"span.rating\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"comment\",\n                            \"selector\": \"p.review-text\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"related_products\",\n                    \"selector\": \"ul.related-products li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"name\",\n                            \"selector\": \"span.related-name\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"price\",\n                            \"selector\": \"span.related-price\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\nThis schema demonstrates several advanced features:\n\n1. **Nested Objects**: The `details` field is a nested object within each product.\n2. **Simple Lists**: The `features` field is a simple list of text items.\n3. **Nested Lists**: The `products` field is a nested list, where each item is a complex object.\n4. **Lists of Objects**: The `reviews` and `related_products` fields are lists of objects.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the example code snippet to demonstrate how to use the advanced schema with JsonCssExtractionStrategy.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly shows how to use AsyncWebCrawler with the advanced JsonCssExtractionStrategy schema.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Now, let's create a schema to extract this complex structure:\n\n```python\nschema = {\n    \"name\": \"E-commerce Product Catalog\",\n    \"baseSelector\": \"div.category\",\n    \"fields\": [\n        {\n            \"name\": \"category_name\",\n            \"selector\": \"h2.category-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"products\",\n            \"selector\": \"div.product\",\n            \"type\": \"nested_list\",\n            \"fields\": [\n                {\n                    \"name\": \"name\",\n                    \"selector\": \"h3.product-name\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"price\",\n                    \"selector\": \"p.product-price\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"details\",\n                    \"selector\": \"div.product-details\",\n                    \"type\": \"nested\",\n                    \"fields\": [\n                        {\n                            \"name\": \"brand\",\n                            \"selector\": \"span.brand\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"model\",\n                            \"selector\": \"span.model\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"features\",\n                    \"selector\": \"ul.product-features li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"feature\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"reviews\",\n                    \"selector\": \"div.review\",\n                    \"type\": \"nested_list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"reviewer\",\n                            \"selector\": \"span.reviewer\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"rating\",\n                            \"selector\": \"span.rating\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"comment\",\n                            \"selector\": \"p.review-text\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"related_products\",\n                    \"selector\": \"ul.related-products li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"name\",\n                            \"selector\": \"span.related-name\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"price\",\n                            \"selector\": \"span.related-price\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\nThis schema demonstrates several advanced features:\n\n1. **Nested Objects**: The `details` field is a nested object within each product.\n2. **Simple Lists**: The `features` field is a simple list of text items.\n3. **Nested Lists**: The `products` field is a nested list, where each item is a complex object.\n4. **Lists of Objects**: The `reviews` and `related_products` fields are lists of objects.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the example code to execute the crawling process with the advanced schema.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows how to use the arun() method of AsyncWebCrawler to perform the crawling with the advanced JsonCssExtractionStrategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Now, let's create a schema to extract this complex structure:\n\n```python\nschema = {\n    \"name\": \"E-commerce Product Catalog\",\n    \"baseSelector\": \"div.category\",\n    \"fields\": [\n        {\n            \"name\": \"category_name\",\n            \"selector\": \"h2.category-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"products\",\n            \"selector\": \"div.product\",\n            \"type\": \"nested_list\",\n            \"fields\": [\n                {\n                    \"name\": \"name\",\n                    \"selector\": \"h3.product-name\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"price\",\n                    \"selector\": \"p.product-price\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"details\",\n                    \"selector\": \"div.product-details\",\n                    \"type\": \"nested\",\n                    \"fields\": [\n                        {\n                            \"name\": \"brand\",\n                            \"selector\": \"span.brand\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"model\",\n                            \"selector\": \"span.model\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"features\",\n                    \"selector\": \"ul.product-features li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"feature\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"reviews\",\n                    \"selector\": \"div.review\",\n                    \"type\": \"nested_list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"reviewer\",\n                            \"selector\": \"span.reviewer\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"rating\",\n                            \"selector\": \"span.rating\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"comment\",\n                            \"selector\": \"p.review-text\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"related_products\",\n                    \"selector\": \"ul.related-products li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"name\",\n                            \"selector\": \"span.related-name\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"price\",\n                            \"selector\": \"span.related-price\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\nThis schema demonstrates several advanced features:\n\n1. **Nested Objects**: The `details` field is a nested object within each product.\n2. **Simple Lists**: The `features` field is a simple list of text items.\n3. **Nested Lists**: The `products` field is a nested list, where each item is a complex object.\n4. **Lists of Objects**: The `reviews` and `related_products` fields are lists of objects.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The CrawlResult class is implicitly used in the example code. The 'result' variable returned by the arun() method is an instance of CrawlResult, as evidenced by accessing its 'success' and 'extracted_content' attributes.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult object, which is then used in the example to check the success of the crawl and access the extracted content.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Now, let's create a schema to extract this complex structure:\n\n```python\nschema = {\n    \"name\": \"E-commerce Product Catalog\",\n    \"baseSelector\": \"div.category\",\n    \"fields\": [\n        {\n            \"name\": \"category_name\",\n            \"selector\": \"h2.category-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"products\",\n            \"selector\": \"div.product\",\n            \"type\": \"nested_list\",\n            \"fields\": [\n                {\n                    \"name\": \"name\",\n                    \"selector\": \"h3.product-name\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"price\",\n                    \"selector\": \"p.product-price\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"details\",\n                    \"selector\": \"div.product-details\",\n                    \"type\": \"nested\",\n                    \"fields\": [\n                        {\n                            \"name\": \"brand\",\n                            \"selector\": \"span.brand\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"model\",\n                            \"selector\": \"span.model\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"features\",\n                    \"selector\": \"ul.product-features li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"feature\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"reviews\",\n                    \"selector\": \"div.review\",\n                    \"type\": \"nested_list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"reviewer\",\n                            \"selector\": \"span.reviewer\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"rating\",\n                            \"selector\": \"span.rating\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"comment\",\n                            \"selector\": \"p.review-text\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"related_products\",\n                    \"selector\": \"ul.related-products li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"name\",\n                            \"selector\": \"span.related-name\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"price\",\n                            \"selector\": \"span.related-price\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\nThis schema demonstrates several advanced features:\n\n1. **Nested Objects**: The `details` field is a nested object within each product.\n2. **Simple Lists**: The `features` field is a simple list of text items.\n3. **Nested Lists**: The `products` field is a nested list, where each item is a complex object.\n4. **Lists of Objects**: The `reviews` and `related_products` fields are lists of objects.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is implicitly used in the example code to access the extracted data from the crawl operation.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "After the crawl operation, the example accesses the extracted_content attribute of the CrawlResult to retrieve the structured data extracted by JsonCssExtractionStrategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Now, let's create a schema to extract this complex structure:\n\n```python\nschema = {\n    \"name\": \"E-commerce Product Catalog\",\n    \"baseSelector\": \"div.category\",\n    \"fields\": [\n        {\n            \"name\": \"category_name\",\n            \"selector\": \"h2.category-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"products\",\n            \"selector\": \"div.product\",\n            \"type\": \"nested_list\",\n            \"fields\": [\n                {\n                    \"name\": \"name\",\n                    \"selector\": \"h3.product-name\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"price\",\n                    \"selector\": \"p.product-price\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"details\",\n                    \"selector\": \"div.product-details\",\n                    \"type\": \"nested\",\n                    \"fields\": [\n                        {\n                            \"name\": \"brand\",\n                            \"selector\": \"span.brand\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"model\",\n                            \"selector\": \"span.model\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"features\",\n                    \"selector\": \"ul.product-features li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"feature\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"reviews\",\n                    \"selector\": \"div.review\",\n                    \"type\": \"nested_list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"reviewer\",\n                            \"selector\": \"span.reviewer\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"rating\",\n                            \"selector\": \"span.rating\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"comment\",\n                            \"selector\": \"p.review-text\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"related_products\",\n                    \"selector\": \"ul.related-products li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"name\",\n                            \"selector\": \"span.related-name\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"price\",\n                            \"selector\": \"span.related-price\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\nThis schema demonstrates several advanced features:\n\n1. **Nested Objects**: The `details` field is a nested object within each product.\n2. **Simple Lists**: The `features` field is a simple list of text items.\n3. **Nested Lists**: The `products` field is a nested list, where each item is a complex object.\n4. **Lists of Objects**: The `reviews` and `related_products` fields are lists of objects.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The success attribute of CrawlResult is implicitly used in the example code to check if the crawl operation was successful.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The example checks the success attribute of the CrawlResult to ensure the crawl operation completed successfully before processing the extracted content.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "Now, let's create a schema to extract this complex structure:\n\n```python\nschema = {\n    \"name\": \"E-commerce Product Catalog\",\n    \"baseSelector\": \"div.category\",\n    \"fields\": [\n        {\n            \"name\": \"category_name\",\n            \"selector\": \"h2.category-name\",\n            \"type\": \"text\"\n        },\n        {\n            \"name\": \"products\",\n            \"selector\": \"div.product\",\n            \"type\": \"nested_list\",\n            \"fields\": [\n                {\n                    \"name\": \"name\",\n                    \"selector\": \"h3.product-name\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"price\",\n                    \"selector\": \"p.product-price\",\n                    \"type\": \"text\"\n                },\n                {\n                    \"name\": \"details\",\n                    \"selector\": \"div.product-details\",\n                    \"type\": \"nested\",\n                    \"fields\": [\n                        {\n                            \"name\": \"brand\",\n                            \"selector\": \"span.brand\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"model\",\n                            \"selector\": \"span.model\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"features\",\n                    \"selector\": \"ul.product-features li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"feature\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"reviews\",\n                    \"selector\": \"div.review\",\n                    \"type\": \"nested_list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"reviewer\",\n                            \"selector\": \"span.reviewer\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"rating\",\n                            \"selector\": \"span.rating\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"comment\",\n                            \"selector\": \"p.review-text\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"related_products\",\n                    \"selector\": \"ul.related-products li\",\n                    \"type\": \"list\",\n                    \"fields\": [\n                        {\n                            \"name\": \"name\",\n                            \"selector\": \"span.related-name\",\n                            \"type\": \"text\"\n                        },\n                        {\n                            \"name\": \"price\",\n                            \"selector\": \"span.related-price\",\n                            \"type\": \"text\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\nThis schema demonstrates several advanced features:\n\n1. **Nested Objects**: The `details` field is a nested object within each product.\n2. **Simple Lists**: The `features` field is a simple list of text items.\n3. **Nested Lists**: The `products` field is a nested list, where each item is a complex object.\n4. **Lists of Objects**: The `reviews` and `related_products` fields are lists of objects.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 22,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "inheritance",
      "relationship_explanation": "The ExtractionStrategy class is the base class for JsonCssExtractionStrategy, which is the main focus of the advanced usage explanation.",
      "predicted_trace_chain": "css-advanced.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "JsonCssExtractionStrategy inherits from ExtractionStrategy, providing the specific implementation for CSS-based extraction discussed in the document.",
      "ground_truth_relationship": "The ExtractionStrategy class provides the core functionality for implementing the schema-based extraction pattern shown in the documentation by defining abstract methods that process HTML content into structured data following the nested object and list patterns defined in the schema.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to use multiple output formats together:\n\n```python\nasync def crawl_content(url: str):\n    async with AsyncWebCrawler() as crawler:\n        # Extract main content with fit markdown\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=10,\n            exclude_external_links=True\n        )\n        \n        # Get structured data using LLM\n        llm_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=YourSchema.schema(),\n                instruction=\"Extract key information\"\n            )\n        )\n        \n        # Get repeated patterns (if any)\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(your_schema)\n        )\n        \n        return {\n            \"main_content\": result.fit_markdown,\n            \"structured_data\": json.loads(llm_result.extracted_content),\n            \"pattern_data\": json.loads(pattern_result.extracted_content),\n            \"media\": result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the provided code example to perform web crawling operations.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented multi-format extraction by providing an arun() method that accepts different extraction strategies and processes HTML content to return structured data, markdown content, and media elements as shown in the comprehensive example.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to use multiple output formats together:\n\n```python\nasync def crawl_content(url: str):\n    async with AsyncWebCrawler() as crawler:\n        # Extract main content with fit markdown\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=10,\n            exclude_external_links=True\n        )\n        \n        # Get structured data using LLM\n        llm_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=YourSchema.schema(),\n                instruction=\"Extract key information\"\n            )\n        )\n        \n        # Get repeated patterns (if any)\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(your_schema)\n        )\n        \n        return {\n            \"main_content\": result.fit_markdown,\n            \"structured_data\": json.loads(llm_result.extracted_content),\n            \"pattern_data\": json.loads(pattern_result.extracted_content),\n            \"media\": result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called multiple times in the code example to perform different crawling operations.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which contains the arun() method being called.",
      "ground_truth_relationship": "The documentation demonstrates three different use cases of AsyncWebCrawler.arun() by showing how it can extract content using different extraction strategies (no strategy, LLM strategy, and JSON CSS strategy) while the code shows the underlying implementation that handles these different strategies through its extraction_strategy parameter.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to use multiple output formats together:\n\n```python\nasync def crawl_content(url: str):\n    async with AsyncWebCrawler() as crawler:\n        # Extract main content with fit markdown\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=10,\n            exclude_external_links=True\n        )\n        \n        # Get structured data using LLM\n        llm_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=YourSchema.schema(),\n                instruction=\"Extract key information\"\n            )\n        )\n        \n        # Get repeated patterns (if any)\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(your_schema)\n        )\n        \n        return {\n            \"main_content\": result.fit_markdown,\n            \"structured_data\": json.loads(llm_result.extracted_content),\n            \"pattern_data\": json.loads(pattern_result.extracted_content),\n            \"media\": result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 7,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The LLMExtractionStrategy class is explicitly used in the code example as an extraction strategy for structured data extraction using LLM.",
      "predicted_trace_chain": "output-formats.md -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of LLMExtractionStrategy, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The LLMExtractionStrategy class implements the specific functionality shown in the documentation example where it processes URLs with custom providers, schemas, and instructions to extract structured data using language models as demonstrated in the 'crawler.arun' call with LLMExtractionStrategy parameters.",
      "ground_truth_trace_chain": "output-formats.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to use multiple output formats together:\n\n```python\nasync def crawl_content(url: str):\n    async with AsyncWebCrawler() as crawler:\n        # Extract main content with fit markdown\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=10,\n            exclude_external_links=True\n        )\n        \n        # Get structured data using LLM\n        llm_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=YourSchema.schema(),\n                instruction=\"Extract key information\"\n            )\n        )\n        \n        # Get repeated patterns (if any)\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(your_schema)\n        )\n        \n        return {\n            \"main_content\": result.fit_markdown,\n            \"structured_data\": json.loads(llm_result.extracted_content),\n            \"pattern_data\": json.loads(pattern_result.extracted_content),\n            \"media\": result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly used in the code example as an extraction strategy for pattern-based data extraction.",
      "predicted_trace_chain": "output-formats.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of JsonCssExtractionStrategy, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements the pattern extraction functionality shown in the documentation's example by using CSS selectors to systematically extract structured data from repeated HTML elements.",
      "ground_truth_trace_chain": "output-formats.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to use multiple output formats together:\n\n```python\nasync def crawl_content(url: str):\n    async with AsyncWebCrawler() as crawler:\n        # Extract main content with fit markdown\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=10,\n            exclude_external_links=True\n        )\n        \n        # Get structured data using LLM\n        llm_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=YourSchema.schema(),\n                instruction=\"Extract key information\"\n            )\n        )\n        \n        # Get repeated patterns (if any)\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(your_schema)\n        )\n        \n        return {\n            \"main_content\": result.fit_markdown,\n            \"structured_data\": json.loads(llm_result.extracted_content),\n            \"pattern_data\": json.loads(pattern_result.extracted_content),\n            \"media\": result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of the arun() method, as evidenced by accessing properties like fit_markdown, extracted_content, and media.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult object from which various properties are accessed.",
      "ground_truth_relationship": "The CrawlResult class defines the structure for storing all possible outputs shown in the example code, including fit_markdown, extracted_content, and media which are used to capture the main content, structured data, and pattern data respectively.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to use multiple output formats together:\n\n```python\nasync def crawl_content(url: str):\n    async with AsyncWebCrawler() as crawler:\n        # Extract main content with fit markdown\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=10,\n            exclude_external_links=True\n        )\n        \n        # Get structured data using LLM\n        llm_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=YourSchema.schema(),\n                instruction=\"Extract key information\"\n            )\n        )\n        \n        # Get repeated patterns (if any)\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(your_schema)\n        )\n        \n        return {\n            \"main_content\": result.fit_markdown,\n            \"structured_data\": json.loads(llm_result.extracted_content),\n            \"pattern_data\": json.loads(pattern_result.extracted_content),\n            \"media\": result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 12,
      "artifact_title": "CrawlResult.fit_markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The fit_markdown property of CrawlResult is explicitly accessed in the code example to retrieve the main content.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.fit_markdown",
      "predicted_trace_chain_explanation": "The document shows the arun() call returning a result, from which the fit_markdown property is accessed.",
      "ground_truth_relationship": "The fit_markdown property from CrawlResult is shown being used in the documentation example to store and access the main extracted content from a webpage within the returned dictionary's main_content field.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.fit_markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to use multiple output formats together:\n\n```python\nasync def crawl_content(url: str):\n    async with AsyncWebCrawler() as crawler:\n        # Extract main content with fit markdown\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=10,\n            exclude_external_links=True\n        )\n        \n        # Get structured data using LLM\n        llm_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=YourSchema.schema(),\n                instruction=\"Extract key information\"\n            )\n        )\n        \n        # Get repeated patterns (if any)\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(your_schema)\n        )\n        \n        return {\n            \"main_content\": result.fit_markdown,\n            \"structured_data\": json.loads(llm_result.extracted_content),\n            \"pattern_data\": json.loads(pattern_result.extracted_content),\n            \"media\": result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The extracted_content property of CrawlResult is explicitly accessed in the code example to retrieve structured data and pattern data.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows the arun() call returning a result, from which the extracted_content property is accessed.",
      "ground_truth_relationship": "The extracted_content field is used to store the crawled data in string format, which the example shows being parsed as JSON for both LLM and pattern-based extraction strategies.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to use multiple output formats together:\n\n```python\nasync def crawl_content(url: str):\n    async with AsyncWebCrawler() as crawler:\n        # Extract main content with fit markdown\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=10,\n            exclude_external_links=True\n        )\n        \n        # Get structured data using LLM\n        llm_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=YourSchema.schema(),\n                instruction=\"Extract key information\"\n            )\n        )\n        \n        # Get repeated patterns (if any)\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(your_schema)\n        )\n        \n        return {\n            \"main_content\": result.fit_markdown,\n            \"structured_data\": json.loads(llm_result.extracted_content),\n            \"pattern_data\": json.loads(pattern_result.extracted_content),\n            \"media\": result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 16,
      "artifact_title": "CrawlResult.media",
      "predicted_relationship": "explicit",
      "relationship_type": "property access",
      "relationship_explanation": "The media property of CrawlResult is explicitly accessed in the code example to retrieve media content.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.media",
      "predicted_trace_chain_explanation": "The document shows the arun() call returning a result, from which the media property is accessed.",
      "ground_truth_relationship": "The CrawlResult.media dictionary stores extracted media items which the documentation shows being returned as part of the final output in the \"media\" field of the crawl_content function's response.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.media",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to use multiple output formats together:\n\n```python\nasync def crawl_content(url: str):\n    async with AsyncWebCrawler() as crawler:\n        # Extract main content with fit markdown\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=10,\n            exclude_external_links=True\n        )\n        \n        # Get structured data using LLM\n        llm_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=YourSchema.schema(),\n                instruction=\"Extract key information\"\n            )\n        )\n        \n        # Get repeated patterns (if any)\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(your_schema)\n        )\n        \n        return {\n            \"main_content\": result.fit_markdown,\n            \"structured_data\": json.loads(llm_result.extracted_content),\n            \"pattern_data\": json.loads(pattern_result.extracted_content),\n            \"media\": result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class provides the foundation for the different extraction methods (LLMExtractionStrategy, JsonCssExtractionStrategy) demonstrated in the documentation's comprehensive example.",
      "ground_truth_trace_chain": "output-formats.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to use multiple output formats together:\n\n```python\nasync def crawl_content(url: str):\n    async with AsyncWebCrawler() as crawler:\n        # Extract main content with fit markdown\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=10,\n            exclude_external_links=True\n        )\n        \n        # Get structured data using LLM\n        llm_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=YourSchema.schema(),\n                instruction=\"Extract key information\"\n            )\n        )\n        \n        # Get repeated patterns (if any)\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(your_schema)\n        )\n        \n        return {\n            \"main_content\": result.fit_markdown,\n            \"structured_data\": json.loads(llm_result.extracted_content),\n            \"pattern_data\": json.loads(pattern_result.extracted_content),\n            \"media\": result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the core functionality shown in the documentation example by providing methods for concurrent web crawling with multiple output formats through its crawl() method, which supports various extraction strategies and configurations like LLM and pattern-based extraction.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to use multiple output formats together:\n\n```python\nasync def crawl_content(url: str):\n    async with AsyncWebCrawler() as crawler:\n        # Extract main content with fit markdown\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=10,\n            exclude_external_links=True\n        )\n        \n        # Get structured data using LLM\n        llm_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=YourSchema.schema(),\n                instruction=\"Extract key information\"\n            )\n        )\n        \n        # Get repeated patterns (if any)\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(your_schema)\n        )\n        \n        return {\n            \"main_content\": result.fit_markdown,\n            \"structured_data\": json.loads(llm_result.extracted_content),\n            \"pattern_data\": json.loads(pattern_result.extracted_content),\n            \"media\": result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods that enable the multi-format extraction capabilities demonstrated in the documentation's comprehensive example.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### TopicSegmentationChunking\n\n`TopicSegmentationChunking` employs the TextTiling algorithm to segment text into topic-based chunks. This method identifies thematic boundaries.\n\n#### When to Use\n- Perfect for long documents with distinct topics.\n- Useful when preserving topic continuity is more important than maintaining text order.\n\n#### Parameters\n- `num_keywords` (int, optional): Number of keywords for each topic segment. Default is `3`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import TopicSegmentationChunking\n\nchunker = TopicSegmentationChunking(num_keywords=3)\n\n# Sample text\ntext = \"This document contains several topics. Topic one discusses AI. Topic two covers machine learning.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 28,
      "artifact_title": "TopicSegmentationChunking",
      "predicted_relationship": "explicit",
      "relationship_type": "class implementation",
      "relationship_explanation": "The TopicSegmentationChunking class is explicitly mentioned and described in the documentation. It is stated to employ the TextTiling algorithm for segmenting text into topic-based chunks.",
      "predicted_trace_chain": "chunking.md -> ChunkingStrategy -> TopicSegmentationChunking",
      "predicted_trace_chain_explanation": "The document describes chunking strategies, which are implementations of the ChunkingStrategy abstract base class. TopicSegmentationChunking is a specific implementation of this strategy.",
      "ground_truth_relationship": "The code implements the TextTiling algorithm through NLTK's TextTilingTokenizer class while adding keyword extraction functionality based on term frequency, directly fulfilling the documentation's promise of topic-based text segmentation.",
      "ground_truth_trace_chain": "chunking.md -> ChunkingStrategy -> TopicSegmentationChunking",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### TopicSegmentationChunking\n\n`TopicSegmentationChunking` employs the TextTiling algorithm to segment text into topic-based chunks. This method identifies thematic boundaries.\n\n#### When to Use\n- Perfect for long documents with distinct topics.\n- Useful when preserving topic continuity is more important than maintaining text order.\n\n#### Parameters\n- `num_keywords` (int, optional): Number of keywords for each topic segment. Default is `3`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import TopicSegmentationChunking\n\nchunker = TopicSegmentationChunking(num_keywords=3)\n\n# Sample text\ntext = \"This document contains several topics. Topic one discusses AI. Topic two covers machine learning.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 6,
      "artifact_title": "ChunkingStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "While not explicitly mentioned, ChunkingStrategy is the implied base class for TopicSegmentationChunking, as it is a chunking strategy described in the documentation.",
      "predicted_trace_chain": "chunking.md -> ChunkingStrategy -> TopicSegmentationChunking",
      "predicted_trace_chain_explanation": "The document describes various chunking strategies, which implies the existence of a base ChunkingStrategy class that TopicSegmentationChunking would inherit from.",
      "ground_truth_relationship": "The ChunkingStrategy abstract base class defines the interface that TopicSegmentationChunking must implement through the chunk() method to perform text segmentation using the TextTiling algorithm.",
      "ground_truth_trace_chain": "chunking.md -> ChunkingStrategy -> ChunkingStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### TopicSegmentationChunking\n\n`TopicSegmentationChunking` employs the TextTiling algorithm to segment text into topic-based chunks. This method identifies thematic boundaries.\n\n#### When to Use\n- Perfect for long documents with distinct topics.\n- Useful when preserving topic continuity is more important than maintaining text order.\n\n#### Parameters\n- `num_keywords` (int, optional): Number of keywords for each topic segment. Default is `3`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import TopicSegmentationChunking\n\nchunker = TopicSegmentationChunking(num_keywords=3)\n\n# Sample text\ntext = \"This document contains several topics. Topic one discusses AI. Topic two covers machine learning.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 28,
      "artifact_title": "TopicSegmentationChunking.__init__",
      "predicted_relationship": "implicit",
      "relationship_type": "method implementation",
      "relationship_explanation": "The documentation mentions a parameter 'num_keywords' for the TopicSegmentationChunking class, implying the existence of an __init__ method that accepts this parameter.",
      "predicted_trace_chain": "chunking.md -> TopicSegmentationChunking -> TopicSegmentationChunking.__init__",
      "predicted_trace_chain_explanation": "The document describes the initialization parameter for TopicSegmentationChunking, which implies the existence of an __init__ method in the class.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### TopicSegmentationChunking\n\n`TopicSegmentationChunking` employs the TextTiling algorithm to segment text into topic-based chunks. This method identifies thematic boundaries.\n\n#### When to Use\n- Perfect for long documents with distinct topics.\n- Useful when preserving topic continuity is more important than maintaining text order.\n\n#### Parameters\n- `num_keywords` (int, optional): Number of keywords for each topic segment. Default is `3`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import TopicSegmentationChunking\n\nchunker = TopicSegmentationChunking(num_keywords=3)\n\n# Sample text\ntext = \"This document contains several topics. Topic one discusses AI. Topic two covers machine learning.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 28,
      "artifact_title": "TopicSegmentationChunking.chunk",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The 'chunk' method is explicitly used in the example provided in the documentation, demonstrating how to use TopicSegmentationChunking to segment text.",
      "predicted_trace_chain": "chunking.md -> TopicSegmentationChunking -> TopicSegmentationChunking.chunk",
      "predicted_trace_chain_explanation": "The document provides an example of using the TopicSegmentationChunking class, which explicitly shows the usage of the chunk method.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### TopicSegmentationChunking\n\n`TopicSegmentationChunking` employs the TextTiling algorithm to segment text into topic-based chunks. This method identifies thematic boundaries.\n\n#### When to Use\n- Perfect for long documents with distinct topics.\n- Useful when preserving topic continuity is more important than maintaining text order.\n\n#### Parameters\n- `num_keywords` (int, optional): Number of keywords for each topic segment. Default is `3`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import TopicSegmentationChunking\n\nchunker = TopicSegmentationChunking(num_keywords=3)\n\n# Sample text\ntext = \"This document contains several topics. Topic one discusses AI. Topic two covers machine learning.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 28,
      "artifact_title": "TopicSegmentationChunking.extract_keywords",
      "predicted_relationship": "implicit",
      "relationship_type": "method implementation",
      "relationship_explanation": "The documentation mentions that TopicSegmentationChunking can extract keywords for each topic segment, implying the existence of a method to extract these keywords.",
      "predicted_trace_chain": "chunking.md -> TopicSegmentationChunking -> TopicSegmentationChunking.extract_keywords",
      "predicted_trace_chain_explanation": "The document describes the capability of TopicSegmentationChunking to extract keywords, which implies the existence of a method to perform this extraction.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Configuration Options\n\n### Core Parameters\n\n```python\nCosineStrategy(\n    # Content Filtering\n    semantic_filter: str = None,       # Keywords/topic for content filtering\n    word_count_threshold: int = 10,    # Minimum words per cluster\n    sim_threshold: float = 0.3,        # Similarity threshold (0.0 to 1.0)\n    \n    # Clustering Parameters\n    max_dist: float = 0.2,            # Maximum distance for clustering\n    linkage_method: str = 'ward',      # Clustering linkage method\n    top_k: int = 3,                   # Number of top categories to extract\n    \n    # Model Configuration\n    model_name: str = 'sentence-transformers/all-MiniLM-L6-v2',  # Embedding model\n    \n    verbose: bool = False             # Enable logging\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class definition",
      "relationship_explanation": "The text directly defines the CosineStrategy class and its parameters, providing a detailed explanation of its configuration options.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The documentation directly describes the CosineStrategy class, so there are no intermediate steps.",
      "ground_truth_relationship": "The code implements a CosineStrategy class that exactly matches the documented configuration parameters, including semantic_filter, word_count_threshold, max_dist, linkage_method, top_k, model_name, and sim_threshold, which are all initialized in the constructor with the same default values shown in the documentation.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Configuration Options\n\n### Core Parameters\n\n```python\nCosineStrategy(\n    # Content Filtering\n    semantic_filter: str = None,       # Keywords/topic for content filtering\n    word_count_threshold: int = 10,    # Minimum words per cluster\n    sim_threshold: float = 0.3,        # Similarity threshold (0.0 to 1.0)\n    \n    # Clustering Parameters\n    max_dist: float = 0.2,            # Maximum distance for clustering\n    linkage_method: str = 'ward',      # Clustering linkage method\n    top_k: int = 3,                   # Number of top categories to extract\n    \n    # Model Configuration\n    model_name: str = 'sentence-transformers/all-MiniLM-L6-v2',  # Embedding model\n    \n    verbose: bool = False             # Enable logging\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 6,
      "artifact_title": "ChunkingStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "While not explicitly mentioned, CosineStrategy is likely a subclass of ChunkingStrategy based on its functionality of breaking down page content into chunks.",
      "predicted_trace_chain": "cosine.md -> ChunkingStrategy -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document describes CosineStrategy, which likely inherits from ChunkingStrategy as a base class for content chunking functionality.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Configuration Options\n\n### Core Parameters\n\n```python\nCosineStrategy(\n    # Content Filtering\n    semantic_filter: str = None,       # Keywords/topic for content filtering\n    word_count_threshold: int = 10,    # Minimum words per cluster\n    sim_threshold: float = 0.3,        # Similarity threshold (0.0 to 1.0)\n    \n    # Clustering Parameters\n    max_dist: float = 0.2,            # Maximum distance for clustering\n    linkage_method: str = 'ward',      # Clustering linkage method\n    top_k: int = 3,                   # Number of top categories to extract\n    \n    # Model Configuration\n    model_name: str = 'sentence-transformers/all-MiniLM-L6-v2',  # Embedding model\n    \n    verbose: bool = False             # Enable logging\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage context",
      "relationship_explanation": "The AsyncWebCrawler class is used in the example code to demonstrate how to use the CosineStrategy for web crawling and content extraction.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document shows how to use CosineStrategy with AsyncWebCrawler, illustrating the connection between these classes in the crawling process.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Configuration Options\n\n### Core Parameters\n\n```python\nCosineStrategy(\n    # Content Filtering\n    semantic_filter: str = None,       # Keywords/topic for content filtering\n    word_count_threshold: int = 10,    # Minimum words per cluster\n    sim_threshold: float = 0.3,        # Similarity threshold (0.0 to 1.0)\n    \n    # Clustering Parameters\n    max_dist: float = 0.2,            # Maximum distance for clustering\n    linkage_method: str = 'ward',      # Clustering linkage method\n    top_k: int = 3,                   # Number of top categories to extract\n    \n    # Model Configuration\n    model_name: str = 'sentence-transformers/all-MiniLM-L6-v2',  # Embedding model\n    \n    verbose: bool = False             # Enable logging\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is used in the example to demonstrate how to execute a crawl with the CosineStrategy.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document shows how to use CosineStrategy with AsyncWebCrawler's arun() method, demonstrating the flow from crawler initialization to strategy execution.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Configuration Options\n\n### Core Parameters\n\n```python\nCosineStrategy(\n    # Content Filtering\n    semantic_filter: str = None,       # Keywords/topic for content filtering\n    word_count_threshold: int = 10,    # Minimum words per cluster\n    sim_threshold: float = 0.3,        # Similarity threshold (0.0 to 1.0)\n    \n    # Clustering Parameters\n    max_dist: float = 0.2,            # Maximum distance for clustering\n    linkage_method: str = 'ward',      # Clustering linkage method\n    top_k: int = 3,                   # Number of top categories to extract\n    \n    # Model Configuration\n    model_name: str = 'sentence-transformers/all-MiniLM-L6-v2',  # Embedding model\n    \n    verbose: bool = False             # Enable logging\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class serves as a foundation for implementing configurable extraction strategies like CosineStrategy, where the documented parameters would be passed through the kwargs argument in the constructor.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Raw HTML\n\nOriginal, unmodified HTML from the webpage. Useful when you need to:\n- Preserve the exact page structure\n- Process HTML with your own tools\n- Debug page issues\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nprint(result.html)  # Complete HTML including headers, scripts, etc.\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code examples to demonstrate how to retrieve raw HTML from a webpage.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document demonstrates usage of AsyncWebCrawler, which returns a CrawlResult object containing the raw HTML.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements raw HTML retrieval through its arun() method, which returns a CrawlResult object containing the unmodified HTML in the 'html' property as documented in the code example.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Raw HTML\n\nOriginal, unmodified HTML from the webpage. Useful when you need to:\n- Preserve the exact page structure\n- Process HTML with your own tools\n- Debug page issues\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nprint(result.html)  # Complete HTML including headers, scripts, etc.\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as it is the return value of the AsyncWebCrawler.arun() method, containing the html attribute accessed in the example.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows accessing the html attribute of the result returned by AsyncWebCrawler.arun(), which is an instance of CrawlResult.",
      "ground_truth_relationship": "The CrawlResult class stores raw HTML content in its 'html' field, matching the documentation's description of preserving unmodified webpage content for analysis and debugging purposes.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Raw HTML\n\nOriginal, unmodified HTML from the webpage. Useful when you need to:\n- Preserve the exact page structure\n- Process HTML with your own tools\n- Debug page issues\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nprint(result.html)  # Complete HTML including headers, scripts, etc.\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 13,
      "artifact_title": "CrawlResult.html",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The html attribute of CrawlResult is explicitly accessed in the code example to retrieve the raw HTML content.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> CrawlResult -> CrawlResult.html",
      "predicted_trace_chain_explanation": "The document demonstrates accessing the html attribute of the CrawlResult object returned by AsyncWebCrawler.arun().",
      "ground_truth_relationship": "The CrawlResult.html property stores the complete unmodified HTML content from a crawled webpage as a string, allowing access to the raw markup for custom processing or debugging.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.html",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Raw HTML\n\nOriginal, unmodified HTML from the webpage. Useful when you need to:\n- Preserve the exact page structure\n- Process HTML with your own tools\n- Debug page issues\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nprint(result.html)  # Complete HTML including headers, scripts, etc.\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncWebCrawler.arun()",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method implements the raw HTML retrieval functionality by fetching unmodified webpage content and storing it in the CrawlResult.html property, which can be accessed as shown in the documentation example.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### [CSS-Based Extraction](css.md)\n\n`JsonCssExtractionStrategy` extracts data using CSS selectors. This is fast, reliable, and perfect for consistently structured pages.\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"image\", \"selector\": \"img\", \"type\": \"attribute\", \"attribute\": \"src\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\n\nresult = await crawler.arun(\n    url=\"https://example.com/products\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- E-commerce product listings\n- News article collections\n- Structured content pages\n- High-performance needs",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class implementation",
      "relationship_explanation": "The text directly mentions and demonstrates the usage of JsonCssExtractionStrategy class for CSS-based extraction of data using CSS selectors.",
      "predicted_trace_chain": "overview.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly references and explains the JsonCssExtractionStrategy class, forming a direct trace.",
      "ground_truth_relationship": "The code implements the documented CSS-based extraction by using BeautifulSoup's select() method to find elements matching the schema's baseSelector and extract specified fields from each matched element.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### [CSS-Based Extraction](css.md)\n\n`JsonCssExtractionStrategy` extracts data using CSS selectors. This is fast, reliable, and perfect for consistently structured pages.\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"image\", \"selector\": \"img\", \"type\": \"attribute\", \"attribute\": \"src\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\n\nresult = await crawler.arun(\n    url=\"https://example.com/products\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- E-commerce product listings\n- News article collections\n- Structured content pages\n- High-performance needs",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 7,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "JsonCssExtractionStrategy is likely a subclass of ExtractionStrategy, as it's part of the extraction strategy pattern described in the document.",
      "predicted_trace_chain": "overview.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document describes extraction strategies, implying the existence of a base ExtractionStrategy class, which is then implemented by JsonCssExtractionStrategy.",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class provides the core interface and parallel processing capabilities that JsonCssExtractionStrategy extends to implement the CSS-based extraction functionality described in the documentation.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### [CSS-Based Extraction](css.md)\n\n`JsonCssExtractionStrategy` extracts data using CSS selectors. This is fast, reliable, and perfect for consistently structured pages.\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"image\", \"selector\": \"img\", \"type\": \"attribute\", \"attribute\": \"src\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\n\nresult = await crawler.arun(\n    url=\"https://example.com/products\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- E-commerce product listings\n- News article collections\n- Structured content pages\n- High-performance needs",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage context",
      "relationship_explanation": "The code example shows the use of 'crawler.arun()', implying the use of an AsyncWebCrawler instance for executing the extraction strategy.",
      "predicted_trace_chain": "overview.md -> AsyncWebCrawler -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document demonstrates using an AsyncWebCrawler instance to execute the JsonCssExtractionStrategy, showing the relationship between these classes.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements CSS-based extraction through its aprocess_html method, which specifically checks for JsonCssExtractionStrategy instances and processes them using the documented schema format to extract structured data from HTML elements.",
      "ground_truth_trace_chain": "overview.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### [CSS-Based Extraction](css.md)\n\n`JsonCssExtractionStrategy` extracts data using CSS selectors. This is fast, reliable, and perfect for consistently structured pages.\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"image\", \"selector\": \"img\", \"type\": \"attribute\", \"attribute\": \"src\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\n\nresult = await crawler.arun(\n    url=\"https://example.com/products\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- E-commerce product listings\n- News article collections\n- Structured content pages\n- High-performance needs",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The code example demonstrates calling the arun() method on a crawler instance, which is likely an AsyncWebCrawler.",
      "predicted_trace_chain": "overview.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document shows the arun() method being used to execute the JsonCssExtractionStrategy, demonstrating how these components interact.",
      "ground_truth_relationship": "The arun() method in AsyncWebCrawler implements the core execution logic that enables the JsonCssExtractionStrategy to process web pages using CSS selectors by accepting an extraction_strategy parameter and integrating it into the crawling workflow.",
      "ground_truth_trace_chain": "overview.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### [CSS-Based Extraction](css.md)\n\n`JsonCssExtractionStrategy` extracts data using CSS selectors. This is fast, reliable, and perfect for consistently structured pages.\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"image\", \"selector\": \"img\", \"type\": \"attribute\", \"attribute\": \"src\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\n\nresult = await crawler.arun(\n    url=\"https://example.com/products\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- E-commerce product listings\n- News article collections\n- Structured content pages\n- High-performance needs",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy class provides the abstract interface that enables the documented JsonCssExtractionStrategy to execute its CSS-based data extraction through the crawl method which returns AsyncCrawlResponse objects.",
      "ground_truth_trace_chain": "overview.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### [CSS-Based Extraction](css.md)\n\n`JsonCssExtractionStrategy` extracts data using CSS selectors. This is fast, reliable, and perfect for consistently structured pages.\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"image\", \"selector\": \"img\", \"type\": \"attribute\", \"attribute\": \"src\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\n\nresult = await crawler.arun(\n    url=\"https://example.com/products\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- E-commerce product listings\n- News article collections\n- Structured content pages\n- High-performance needs",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class stores the extracted content from CSS-based extraction in its 'extracted_content' field, allowing the JsonCssExtractionStrategy to save structured data parsed from HTML elements matching the specified CSS selectors.",
      "ground_truth_trace_chain": "overview.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### [CSS-Based Extraction](css.md)\n\n`JsonCssExtractionStrategy` extracts data using CSS selectors. This is fast, reliable, and perfect for consistently structured pages.\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"Product Listing\",\n    \"baseSelector\": \".product-card\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"},\n        {\"name\": \"image\", \"selector\": \"img\", \"type\": \"attribute\", \"attribute\": \"src\"}\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\n\nresult = await crawler.arun(\n    url=\"https://example.com/products\",\n    extraction_strategy=strategy\n)\n```\n\n**Best for:**\n- E-commerce product listings\n- News article collections\n- Structured content pages\n- High-performance needs",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy implements the underlying page navigation and browser automation functionality needed to support JsonCssExtractionStrategy's CSS selector-based data extraction from web pages.",
      "ground_truth_trace_chain": "overview.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Technique 1: Custom Execution Hooks\n\nCrawl4AI allows you to set custom hooks that execute at different stages of the crawling process. This is particularly useful for handling complex loading scenarios.\n\nHere's an example that waits for new content to appear before proceeding:\n\n```python\nasync def advanced_session_crawl_with_hooks():\n    first_commit = \"\"\n\n    async def on_execution_started(page):\n        nonlocal first_commit\n        try:\n            while True:\n                await page.wait_for_selector(\"li.commit-item h4\")\n                commit = await page.query_selector(\"li.commit-item h4\")\n                commit = await commit.evaluate(\"(element) => element.textContent\")\n                commit = commit.strip()\n                if commit and commit != first_commit:\n                    first_commit = commit\n                    break\n                await asyncio.sleep(0.5)\n        except Exception as e:\n            print(f\"Warning: New content didn't appear after JavaScript execution: {e}\")\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        crawler.crawler_strategy.set_hook(\"on_execution_started\", on_execution_started)\n\n        url = \"https://github.com/example/repo/commits/main\"\n        session_id = \"commit_session\"\n        all_commits = []\n\n        js_next_page = \"\"\"\n        const button = document.querySelector('a.pagination-next');\n        if (button) button.click();\n        \"\"\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                css_selector=\"li.commit-item\",\n                js_code=js_next_page if page > 0 else None,\n                bypass_cache=True,\n                js_only=page > 0\n            )\n\n            commits = result.extracted_content.select(\"li.commit-item\")\n            all_commits.extend(commits)\n            print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n        print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\")\n\nasyncio.run(advanced_session_crawl_with_hooks())\n```\n\nThis technique uses a custom `on_execution_started` hook to ensure new content has loaded before proceeding to the next step.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to perform session-based crawling. It's instantiated and used to execute the crawling process.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler for session-based crawling.",
      "ground_truth_relationship": "The AsyncWebCrawler class provides the foundational infrastructure for implementing custom execution hooks through its crawler_strategy attribute, which can be set and accessed during crawling operations as shown in the documentation example.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 1: Custom Execution Hooks\n\nCrawl4AI allows you to set custom hooks that execute at different stages of the crawling process. This is particularly useful for handling complex loading scenarios.\n\nHere's an example that waits for new content to appear before proceeding:\n\n```python\nasync def advanced_session_crawl_with_hooks():\n    first_commit = \"\"\n\n    async def on_execution_started(page):\n        nonlocal first_commit\n        try:\n            while True:\n                await page.wait_for_selector(\"li.commit-item h4\")\n                commit = await page.query_selector(\"li.commit-item h4\")\n                commit = await commit.evaluate(\"(element) => element.textContent\")\n                commit = commit.strip()\n                if commit and commit != first_commit:\n                    first_commit = commit\n                    break\n                await asyncio.sleep(0.5)\n        except Exception as e:\n            print(f\"Warning: New content didn't appear after JavaScript execution: {e}\")\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        crawler.crawler_strategy.set_hook(\"on_execution_started\", on_execution_started)\n\n        url = \"https://github.com/example/repo/commits/main\"\n        session_id = \"commit_session\"\n        all_commits = []\n\n        js_next_page = \"\"\"\n        const button = document.querySelector('a.pagination-next');\n        if (button) button.click();\n        \"\"\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                css_selector=\"li.commit-item\",\n                js_code=js_next_page if page > 0 else None,\n                bypass_cache=True,\n                js_only=page > 0\n            )\n\n            commits = result.extracted_content.select(\"li.commit-item\")\n            all_commits.extend(commits)\n            print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n        print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\")\n\nasyncio.run(advanced_session_crawl_with_hooks())\n```\n\nThis technique uses a custom `on_execution_started` hook to ensure new content has loaded before proceeding to the next step.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling operation for each page.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which includes calling its arun() method for crawling.",
      "ground_truth_relationship": "The arun() method implements the core asynchronous crawling functionality that enables custom hooks like 'on_execution_started' to be executed during the crawling process through the crawler_strategy object.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 1: Custom Execution Hooks\n\nCrawl4AI allows you to set custom hooks that execute at different stages of the crawling process. This is particularly useful for handling complex loading scenarios.\n\nHere's an example that waits for new content to appear before proceeding:\n\n```python\nasync def advanced_session_crawl_with_hooks():\n    first_commit = \"\"\n\n    async def on_execution_started(page):\n        nonlocal first_commit\n        try:\n            while True:\n                await page.wait_for_selector(\"li.commit-item h4\")\n                commit = await page.query_selector(\"li.commit-item h4\")\n                commit = await commit.evaluate(\"(element) => element.textContent\")\n                commit = commit.strip()\n                if commit and commit != first_commit:\n                    first_commit = commit\n                    break\n                await asyncio.sleep(0.5)\n        except Exception as e:\n            print(f\"Warning: New content didn't appear after JavaScript execution: {e}\")\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        crawler.crawler_strategy.set_hook(\"on_execution_started\", on_execution_started)\n\n        url = \"https://github.com/example/repo/commits/main\"\n        session_id = \"commit_session\"\n        all_commits = []\n\n        js_next_page = \"\"\"\n        const button = document.querySelector('a.pagination-next');\n        if (button) button.click();\n        \"\"\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                css_selector=\"li.commit-item\",\n                js_code=js_next_page if page > 0 else None,\n                bypass_cache=True,\n                js_only=page > 0\n            )\n\n            commits = result.extracted_content.select(\"li.commit-item\")\n            all_commits.extend(commits)\n            print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n        print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\")\n\nasyncio.run(advanced_session_crawl_with_hooks())\n```\n\nThis technique uses a custom `on_execution_started` hook to ensure new content has loaded before proceeding to the next step.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 3,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The set_hook() method is explicitly called on the crawler_strategy to set a custom hook for the 'on_execution_started' event.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_trace_chain_explanation": "The document demonstrates setting a hook on the crawler strategy, which is accessed through the AsyncWebCrawler instance.",
      "ground_truth_relationship": "The set_hook method enables the custom hook functionality described in the documentation by storing the provided hook callback in a dictionary that gets executed at specific points in the crawling lifecycle.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncPlaywrightCrawlerStrategy.set_hook()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 1: Custom Execution Hooks\n\nCrawl4AI allows you to set custom hooks that execute at different stages of the crawling process. This is particularly useful for handling complex loading scenarios.\n\nHere's an example that waits for new content to appear before proceeding:\n\n```python\nasync def advanced_session_crawl_with_hooks():\n    first_commit = \"\"\n\n    async def on_execution_started(page):\n        nonlocal first_commit\n        try:\n            while True:\n                await page.wait_for_selector(\"li.commit-item h4\")\n                commit = await page.query_selector(\"li.commit-item h4\")\n                commit = await commit.evaluate(\"(element) => element.textContent\")\n                commit = commit.strip()\n                if commit and commit != first_commit:\n                    first_commit = commit\n                    break\n                await asyncio.sleep(0.5)\n        except Exception as e:\n            print(f\"Warning: New content didn't appear after JavaScript execution: {e}\")\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        crawler.crawler_strategy.set_hook(\"on_execution_started\", on_execution_started)\n\n        url = \"https://github.com/example/repo/commits/main\"\n        session_id = \"commit_session\"\n        all_commits = []\n\n        js_next_page = \"\"\"\n        const button = document.querySelector('a.pagination-next');\n        if (button) button.click();\n        \"\"\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                css_selector=\"li.commit-item\",\n                js_code=js_next_page if page > 0 else None,\n                bypass_cache=True,\n                js_only=page > 0\n            )\n\n            commits = result.extracted_content.select(\"li.commit-item\")\n            all_commits.extend(commits)\n            print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n        print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\")\n\nasyncio.run(advanced_session_crawl_with_hooks())\n```\n\nThis technique uses a custom `on_execution_started` hook to ensure new content has loaded before proceeding to the next step.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 2,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The kill_session() method is explicitly called at the end of the crawling process to close the session.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_trace_chain_explanation": "The document shows the usage of kill_session() to properly close the crawling session, accessed through the AsyncWebCrawler instance.",
      "ground_truth_relationship": "The kill_session method cleans up browser resources by closing the page and context objects associated with a specific session ID, as demonstrated in the documentation's crawler cleanup after commit crawling.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 1: Custom Execution Hooks\n\nCrawl4AI allows you to set custom hooks that execute at different stages of the crawling process. This is particularly useful for handling complex loading scenarios.\n\nHere's an example that waits for new content to appear before proceeding:\n\n```python\nasync def advanced_session_crawl_with_hooks():\n    first_commit = \"\"\n\n    async def on_execution_started(page):\n        nonlocal first_commit\n        try:\n            while True:\n                await page.wait_for_selector(\"li.commit-item h4\")\n                commit = await page.query_selector(\"li.commit-item h4\")\n                commit = await commit.evaluate(\"(element) => element.textContent\")\n                commit = commit.strip()\n                if commit and commit != first_commit:\n                    first_commit = commit\n                    break\n                await asyncio.sleep(0.5)\n        except Exception as e:\n            print(f\"Warning: New content didn't appear after JavaScript execution: {e}\")\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        crawler.crawler_strategy.set_hook(\"on_execution_started\", on_execution_started)\n\n        url = \"https://github.com/example/repo/commits/main\"\n        session_id = \"commit_session\"\n        all_commits = []\n\n        js_next_page = \"\"\"\n        const button = document.querySelector('a.pagination-next');\n        if (button) button.click();\n        \"\"\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                css_selector=\"li.commit-item\",\n                js_code=js_next_page if page > 0 else None,\n                bypass_cache=True,\n                js_only=page > 0\n            )\n\n            commits = result.extracted_content.select(\"li.commit-item\")\n            all_commits.extend(commits)\n            print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n        print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\")\n\nasyncio.run(advanced_session_crawl_with_hooks())\n```\n\nThis technique uses a custom `on_execution_started` hook to ensure new content has loaded before proceeding to the next step.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncPlaywrightCrawlerStrategy is implicitly used as it's the default strategy for AsyncWebCrawler. Methods like set_hook() and kill_session() are called on this strategy.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler, which by default uses AsyncPlaywrightCrawlerStrategy for its operations.",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements custom hooks through its set_hook() and execute_hook() methods, which enable execution of custom functions at specific stages of the crawling process like 'on_execution_started' as described in the documentation.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 1: Custom Execution Hooks\n\nCrawl4AI allows you to set custom hooks that execute at different stages of the crawling process. This is particularly useful for handling complex loading scenarios.\n\nHere's an example that waits for new content to appear before proceeding:\n\n```python\nasync def advanced_session_crawl_with_hooks():\n    first_commit = \"\"\n\n    async def on_execution_started(page):\n        nonlocal first_commit\n        try:\n            while True:\n                await page.wait_for_selector(\"li.commit-item h4\")\n                commit = await page.query_selector(\"li.commit-item h4\")\n                commit = await commit.evaluate(\"(element) => element.textContent\")\n                commit = commit.strip()\n                if commit and commit != first_commit:\n                    first_commit = commit\n                    break\n                await asyncio.sleep(0.5)\n        except Exception as e:\n            print(f\"Warning: New content didn't appear after JavaScript execution: {e}\")\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        crawler.crawler_strategy.set_hook(\"on_execution_started\", on_execution_started)\n\n        url = \"https://github.com/example/repo/commits/main\"\n        session_id = \"commit_session\"\n        all_commits = []\n\n        js_next_page = \"\"\"\n        const button = document.querySelector('a.pagination-next');\n        if (button) button.click();\n        \"\"\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                css_selector=\"li.commit-item\",\n                js_code=js_next_page if page > 0 else None,\n                bypass_cache=True,\n                js_only=page > 0\n            )\n\n            commits = result.extracted_content.select(\"li.commit-item\")\n            all_commits.extend(commits)\n            print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n        print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\")\n\nasyncio.run(advanced_session_crawl_with_hooks())\n```\n\nThis technique uses a custom `on_execution_started` hook to ensure new content has loaded before proceeding to the next step.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 0,
      "artifact_title": "AsyncCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "inheritance",
      "relationship_explanation": "AsyncCrawlerStrategy is the base class for AsyncPlaywrightCrawlerStrategy, which is implicitly used in this example.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncCrawlerStrategy",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler with AsyncPlaywrightCrawlerStrategy, which inherits from AsyncCrawlerStrategy.",
      "ground_truth_relationship": "The set_hook method in AsyncCrawlerStrategy enables the documented custom hook functionality by allowing users to register callback functions like on_execution_started that execute at specific crawling stages.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Technique 1: Custom Execution Hooks\n\nCrawl4AI allows you to set custom hooks that execute at different stages of the crawling process. This is particularly useful for handling complex loading scenarios.\n\nHere's an example that waits for new content to appear before proceeding:\n\n```python\nasync def advanced_session_crawl_with_hooks():\n    first_commit = \"\"\n\n    async def on_execution_started(page):\n        nonlocal first_commit\n        try:\n            while True:\n                await page.wait_for_selector(\"li.commit-item h4\")\n                commit = await page.query_selector(\"li.commit-item h4\")\n                commit = await commit.evaluate(\"(element) => element.textContent\")\n                commit = commit.strip()\n                if commit and commit != first_commit:\n                    first_commit = commit\n                    break\n                await asyncio.sleep(0.5)\n        except Exception as e:\n            print(f\"Warning: New content didn't appear after JavaScript execution: {e}\")\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        crawler.crawler_strategy.set_hook(\"on_execution_started\", on_execution_started)\n\n        url = \"https://github.com/example/repo/commits/main\"\n        session_id = \"commit_session\"\n        all_commits = []\n\n        js_next_page = \"\"\"\n        const button = document.querySelector('a.pagination-next');\n        if (button) button.click();\n        \"\"\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                css_selector=\"li.commit-item\",\n                js_code=js_next_page if page > 0 else None,\n                bypass_cache=True,\n                js_only=page > 0\n            )\n\n            commits = result.extracted_content.select(\"li.commit-item\")\n            all_commits.extend(commits)\n            print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n        print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\")\n\nasyncio.run(advanced_session_crawl_with_hooks())\n```\n\nThis technique uses a custom `on_execution_started` hook to ensure new content has loaded before proceeding to the next step.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class captures the output of custom hook executions by storing the extracted content and session state that are essential for implementing the documented commit-tracking functionality.",
      "ground_truth_trace_chain": "session-management-advanced.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Technique 1: Custom Execution Hooks\n\nCrawl4AI allows you to set custom hooks that execute at different stages of the crawling process. This is particularly useful for handling complex loading scenarios.\n\nHere's an example that waits for new content to appear before proceeding:\n\n```python\nasync def advanced_session_crawl_with_hooks():\n    first_commit = \"\"\n\n    async def on_execution_started(page):\n        nonlocal first_commit\n        try:\n            while True:\n                await page.wait_for_selector(\"li.commit-item h4\")\n                commit = await page.query_selector(\"li.commit-item h4\")\n                commit = await commit.evaluate(\"(element) => element.textContent\")\n                commit = commit.strip()\n                if commit and commit != first_commit:\n                    first_commit = commit\n                    break\n                await asyncio.sleep(0.5)\n        except Exception as e:\n            print(f\"Warning: New content didn't appear after JavaScript execution: {e}\")\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        crawler.crawler_strategy.set_hook(\"on_execution_started\", on_execution_started)\n\n        url = \"https://github.com/example/repo/commits/main\"\n        session_id = \"commit_session\"\n        all_commits = []\n\n        js_next_page = \"\"\"\n        const button = document.querySelector('a.pagination-next');\n        if (button) button.click();\n        \"\"\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                css_selector=\"li.commit-item\",\n                js_code=js_next_page if page > 0 else None,\n                bypass_cache=True,\n                js_only=page > 0\n            )\n\n            commits = result.extracted_content.select(\"li.commit-item\")\n            all_commits.extend(commits)\n            print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n        print(f\"Successfully crawled {len(all_commits)} commits across 3 pages\")\n\nasyncio.run(advanced_session_crawl_with_hooks())\n```\n\nThis technique uses a custom `on_execution_started` hook to ensure new content has loaded before proceeding to the next step.",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "CrawlResult.extracted_content",
      "ground_truth_relationship": "The extracted_content field in CrawlResult stores the scraped HTML content that the hook functions in the documentation wait for and validate before proceeding with further crawling operations.",
      "ground_truth_trace_chain": "session-management-advanced.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Basic Usage\n\nSimply provide a URL and let Crawl4AI do the magic!\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"Basic crawl result: {result.markdown[:500]}\")  # Print first 500 characters\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to create an instance for web crawling.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The documentation demonstrates the basic usage of AsyncWebCrawler's arun() method through an async context manager, which is directly implemented in the code through __aenter__ and __aexit__ methods along with the core arun() function that processes web crawling requests.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Basic Usage\n\nSimply provide a URL and let Crawl4AI do the magic!\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"Basic crawl result: {result.markdown[:500]}\")  # Print first 500 characters\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the web crawling operation.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows the usage of AsyncWebCrawler, which is necessary to access its arun() method.",
      "ground_truth_relationship": "The code implements the documented basic usage by providing an arun() method that accepts a URL parameter and handles the core web crawling functionality including HTML extraction, caching, and processing while returning a CrawlResult object containing the crawled content.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Basic Usage\n\nSimply provide a URL and let Crawl4AI do the magic!\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"Basic crawl result: {result.markdown[:500]}\")  # Print first 500 characters\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as evidenced by accessing the 'markdown' attribute of the result.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The documentation shows the usage of arun(), which returns a CrawlResult object, allowing access to its 'markdown' attribute.",
      "ground_truth_relationship": "The CrawlResult class defines the data structure that stores the crawled webpage content including markdown output shown in the basic usage example's print statement.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Basic Usage\n\nSimply provide a URL and let Crawl4AI do the magic!\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"Basic crawl result: {result.markdown[:500]}\")  # Print first 500 characters\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The 'markdown' attribute of the CrawlResult is explicitly accessed in the code example to print the first 500 characters of the crawl result.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The documentation shows the usage of arun(), which returns a CrawlResult object, allowing direct access to its 'markdown' attribute.",
      "ground_truth_relationship": "The markdown attribute in CrawlResult stores the extracted text content that gets printed in the example code's output after crawling the website.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult.markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Basic Usage\n\nSimply provide a URL and let Crawl4AI do the magic!\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"Basic crawl result: {result.markdown[:500]}\")  # Print first 500 characters\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface that enables the basic URL crawling functionality shown in the documentation through its required crawl method.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Basic Usage\n\nSimply provide a URL and let Crawl4AI do the magic!\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"Basic crawl result: {result.markdown[:500]}\")  # Print first 500 characters\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the core crawling functionality demonstrated in the documentation's basic usage example by providing the underlying browser automation and HTML extraction capabilities needed for the AsyncWebCrawler.arun() method.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Iframe Content\n\nProcess content inside iframes:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    process_iframes=True,  # Extract iframe content\n    remove_overlay_elements=True  # Remove popups/modals that might block iframes\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate how to process iframe content. The 'arun' method of this class is called with specific parameters to enable iframe processing.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document describes using AsyncWebCrawler, which leads to its 'arun' method being called to perform the crawling operation with specific parameters.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements iframe processing through its arun() method which accepts process_iframes and remove_overlay_elements parameters to control iframe content extraction and overlay handling during web crawling.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Iframe Content\n\nProcess content inside iframes:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    process_iframes=True,  # Extract iframe content\n    remove_overlay_elements=True  # Remove popups/modals that might block iframes\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The 'arun' method of AsyncWebCrawler is explicitly called in the code example with parameters 'process_iframes' and 'remove_overlay_elements' to demonstrate how to handle iframe content and remove potential obstacles.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly demonstrates calling the 'arun' method with specific parameters for iframe processing.",
      "ground_truth_relationship": "The arun() method implements iframe processing through its kwargs parameter, which accepts process_iframes and remove_overlay_elements options that are passed to the crawler_strategy.crawl() function.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Iframe Content\n\nProcess content inside iframes:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    process_iframes=True,  # Extract iframe content\n    remove_overlay_elements=True  # Remove popups/modals that might block iframes\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementation",
      "relationship_explanation": "While not explicitly mentioned, AsyncPlaywrightCrawlerStrategy is likely the underlying implementation that handles the iframe processing and overlay removal functionality demonstrated in the AsyncWebCrawler usage.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The document shows using AsyncWebCrawler, which likely uses AsyncPlaywrightCrawlerStrategy internally to implement the iframe processing and overlay removal features.",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements iframe content processing through its process_iframes method, which locates iframes, extracts their content, and replaces them with div elements containing the extracted content when process_iframes=True is passed to the crawl method.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Iframe Content\n\nProcess content inside iframes:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    process_iframes=True,  # Extract iframe content\n    remove_overlay_elements=True  # Remove popups/modals that might block iframes\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the crawl method that implements the iframe processing capabilities documented in the example through its **kwargs parameter, which can accept process_iframes and remove_overlay_elements flags.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Iframe Content\n\nProcess content inside iframes:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    process_iframes=True,  # Extract iframe content\n    remove_overlay_elements=True  # Remove popups/modals that might block iframes\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class provides fields for storing iframe-processed content through its html, cleaned_html, and extracted_content attributes which can contain the processed iframe results when process_iframes=True is set.",
      "ground_truth_trace_chain": "content-selection.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Use Fit Markdown for Articles**\n   ```python\n   # Perfect for blog posts, news articles, documentation\n   content = result.fit_markdown\n   ```\n\n2. **Handle Media Appropriately**\n   ```python\n   # Filter by relevance score\n   relevant_images = [\n       img for img in result.media[\"images\"]\n       if img['score'] > 5\n   ]\n   ```\n\n3. **Combine Link Analysis with Content**\n   ```python\n   # Get content links with context\n   content_links = [\n       link for link in result.links[\"internal\"]\n       if link['type'] == 'content'\n   ]\n   ```\n\n4. **Clean Content with Purpose**\n   ```python\n   # Customize cleaning based on your needs\n   result = await crawler.arun(\n       url=url,\n       word_count_threshold=20,      # Adjust based on content type\n       keep_data_attributes=False,   # Remove data attributes\n       process_iframes=True         # Include iframe content\n   )\n   ```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The CrawlResult class is explicitly used in the code examples to access various attributes like fit_markdown, media, and links.",
      "predicted_trace_chain": "content-processing.md -> CrawlResult",
      "predicted_trace_chain_explanation": "The document directly uses CrawlResult to demonstrate how to access crawl results.",
      "ground_truth_relationship": "The CrawlResult class implements all the key properties referenced in the best practices documentation, including fit_markdown for articles, media for image handling, links for content analysis, and cleaned_html for content processing.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Use Fit Markdown for Articles**\n   ```python\n   # Perfect for blog posts, news articles, documentation\n   content = result.fit_markdown\n   ```\n\n2. **Handle Media Appropriately**\n   ```python\n   # Filter by relevance score\n   relevant_images = [\n       img for img in result.media[\"images\"]\n       if img['score'] > 5\n   ]\n   ```\n\n3. **Combine Link Analysis with Content**\n   ```python\n   # Get content links with context\n   content_links = [\n       link for link in result.links[\"internal\"]\n       if link['type'] == 'content'\n   ]\n   ```\n\n4. **Clean Content with Purpose**\n   ```python\n   # Customize cleaning based on your needs\n   result = await crawler.arun(\n       url=url,\n       word_count_threshold=20,      # Adjust based on content type\n       keep_data_attributes=False,   # Remove data attributes\n       process_iframes=True         # Include iframe content\n   )\n   ```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 12,
      "artifact_title": "CrawlResult.fit_markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The fit_markdown attribute is explicitly mentioned and used in the best practices section to get the most relevant content.",
      "predicted_trace_chain": "content-processing.md -> CrawlResult -> CrawlResult.fit_markdown",
      "predicted_trace_chain_explanation": "The document accesses the fit_markdown attribute through the CrawlResult object.",
      "ground_truth_relationship": "The CrawlResult.fit_markdown property implements the documented Best Practice #1 by providing an optional string property that stores content formatted specifically for blog posts and articles.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult.fit_markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Use Fit Markdown for Articles**\n   ```python\n   # Perfect for blog posts, news articles, documentation\n   content = result.fit_markdown\n   ```\n\n2. **Handle Media Appropriately**\n   ```python\n   # Filter by relevance score\n   relevant_images = [\n       img for img in result.media[\"images\"]\n       if img['score'] > 5\n   ]\n   ```\n\n3. **Combine Link Analysis with Content**\n   ```python\n   # Get content links with context\n   content_links = [\n       link for link in result.links[\"internal\"]\n       if link['type'] == 'content'\n   ]\n   ```\n\n4. **Clean Content with Purpose**\n   ```python\n   # Customize cleaning based on your needs\n   result = await crawler.arun(\n       url=url,\n       word_count_threshold=20,      # Adjust based on content type\n       keep_data_attributes=False,   # Remove data attributes\n       process_iframes=True         # Include iframe content\n   )\n   ```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 16,
      "artifact_title": "CrawlResult.media",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The media attribute is explicitly used in the code example to filter relevant images based on their score.",
      "predicted_trace_chain": "content-processing.md -> CrawlResult -> CrawlResult.media",
      "predicted_trace_chain_explanation": "The document accesses the media attribute through the CrawlResult object to demonstrate media handling.",
      "ground_truth_relationship": "The CrawlResult.media dictionary property enables filtering and organizing media elements like images based on relevance scores as shown in the documentation's Best Practices section.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult.media",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Use Fit Markdown for Articles**\n   ```python\n   # Perfect for blog posts, news articles, documentation\n   content = result.fit_markdown\n   ```\n\n2. **Handle Media Appropriately**\n   ```python\n   # Filter by relevance score\n   relevant_images = [\n       img for img in result.media[\"images\"]\n       if img['score'] > 5\n   ]\n   ```\n\n3. **Combine Link Analysis with Content**\n   ```python\n   # Get content links with context\n   content_links = [\n       link for link in result.links[\"internal\"]\n       if link['type'] == 'content'\n   ]\n   ```\n\n4. **Clean Content with Purpose**\n   ```python\n   # Customize cleaning based on your needs\n   result = await crawler.arun(\n       url=url,\n       word_count_threshold=20,      # Adjust based on content type\n       keep_data_attributes=False,   # Remove data attributes\n       process_iframes=True         # Include iframe content\n   )\n   ```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 14,
      "artifact_title": "CrawlResult.links",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The links attribute is explicitly used in the code example to filter internal content links.",
      "predicted_trace_chain": "content-processing.md -> CrawlResult -> CrawlResult.links",
      "predicted_trace_chain_explanation": "The document accesses the links attribute through the CrawlResult object to demonstrate link analysis.",
      "ground_truth_relationship": "The CrawlResult.links dictionary structure enables the filtering of internal content links as shown in the best practices documentation where links are filtered by type.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult.links",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Use Fit Markdown for Articles**\n   ```python\n   # Perfect for blog posts, news articles, documentation\n   content = result.fit_markdown\n   ```\n\n2. **Handle Media Appropriately**\n   ```python\n   # Filter by relevance score\n   relevant_images = [\n       img for img in result.media[\"images\"]\n       if img['score'] > 5\n   ]\n   ```\n\n3. **Combine Link Analysis with Content**\n   ```python\n   # Get content links with context\n   content_links = [\n       link for link in result.links[\"internal\"]\n       if link['type'] == 'content'\n   ]\n   ```\n\n4. **Clean Content with Purpose**\n   ```python\n   # Customize cleaning based on your needs\n   result = await crawler.arun(\n       url=url,\n       word_count_threshold=20,      # Adjust based on content type\n       keep_data_attributes=False,   # Remove data attributes\n       process_iframes=True         # Include iframe content\n   )\n   ```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example through the 'crawler' object to perform the crawl operation.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document implicitly uses AsyncWebCrawler to demonstrate how to perform a crawl and access the results.",
      "ground_truth_relationship": "The documentation outlines best practices for using the AsyncWebCrawler class's features, specifically showing how to access fit_markdown for articles, filter media by relevance scores, process content links, and customize crawling parameters through the arun() method implementation.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Use Fit Markdown for Articles**\n   ```python\n   # Perfect for blog posts, news articles, documentation\n   content = result.fit_markdown\n   ```\n\n2. **Handle Media Appropriately**\n   ```python\n   # Filter by relevance score\n   relevant_images = [\n       img for img in result.media[\"images\"]\n       if img['score'] > 5\n   ]\n   ```\n\n3. **Combine Link Analysis with Content**\n   ```python\n   # Get content links with context\n   content_links = [\n       link for link in result.links[\"internal\"]\n       if link['type'] == 'content'\n   ]\n   ```\n\n4. **Clean Content with Purpose**\n   ```python\n   # Customize cleaning based on your needs\n   result = await crawler.arun(\n       url=url,\n       word_count_threshold=20,      # Adjust based on content type\n       keep_data_attributes=False,   # Remove data attributes\n       process_iframes=True         # Include iframe content\n   )\n   ```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method is explicitly called in the code examples to perform the crawl operation with various parameters.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document calls the arun() method on the AsyncWebCrawler object to demonstrate how to configure and execute a crawl.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method implements the documented best practices by accepting parameters like word_count_threshold to clean content, supporting media processing through screenshot capture, and handling link extraction through its processing pipeline.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Use Fit Markdown for Articles**\n   ```python\n   # Perfect for blog posts, news articles, documentation\n   content = result.fit_markdown\n   ```\n\n2. **Handle Media Appropriately**\n   ```python\n   # Filter by relevance score\n   relevant_images = [\n       img for img in result.media[\"images\"]\n       if img['score'] > 5\n   ]\n   ```\n\n3. **Combine Link Analysis with Content**\n   ```python\n   # Get content links with context\n   content_links = [\n       link for link in result.links[\"internal\"]\n       if link['type'] == 'content'\n   ]\n   ```\n\n4. **Clean Content with Purpose**\n   ```python\n   # Customize cleaning based on your needs\n   result = await crawler.arun(\n       url=url,\n       word_count_threshold=20,      # Adjust based on content type\n       keep_data_attributes=False,   # Remove data attributes\n       process_iframes=True         # Include iframe content\n   )\n   ```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods that enable the documented features like content filtering, markdown conversion, and media handling through its abstract crawl methods.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Best Practices\n\n1. **Use Fit Markdown for Articles**\n   ```python\n   # Perfect for blog posts, news articles, documentation\n   content = result.fit_markdown\n   ```\n\n2. **Handle Media Appropriately**\n   ```python\n   # Filter by relevance score\n   relevant_images = [\n       img for img in result.media[\"images\"]\n       if img['score'] > 5\n   ]\n   ```\n\n3. **Combine Link Analysis with Content**\n   ```python\n   # Get content links with context\n   content_links = [\n       link for link in result.links[\"internal\"]\n       if link['type'] == 'content'\n   ]\n   ```\n\n4. **Clean Content with Purpose**\n   ```python\n   # Customize cleaning based on your needs\n   result = await crawler.arun(\n       url=url,\n       word_count_threshold=20,      # Adjust based on content type\n       keep_data_attributes=False,   # Remove data attributes\n       process_iframes=True         # Include iframe content\n   )\n   ```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the documented best practices by providing methods for Markdown content processing, media handling with score filtering, link analysis, and customizable content cleaning through configuration parameters in its crawl method.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Content Customization\n\n### HTML to Text Options\n\nConfigure markdown conversion:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    html2text={\n        \"escape_dot\": False,\n        \"body_width\": 0,\n        \"protect_links\": True,\n        \"unicode_snob\": True\n    }\n)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example to perform the crawling operation. The 'crawler.arun()' method is called, which implies the use of an AsyncWebCrawler instance.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document describes how to use the crawler, which leads to the AsyncWebCrawler class, and then to its arun() method for executing the crawl operation.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements HTML-to-text customization through its arun() method which accepts HTML conversion parameters as keyword arguments (**kwargs) that are passed to the underlying crawler strategy.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Customization\n\n### HTML to Text Options\n\nConfigure markdown conversion:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    html2text={\n        \"escape_dot\": False,\n        \"body_width\": 0,\n        \"protect_links\": True,\n        \"unicode_snob\": True\n    }\n)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling operation with specific HTML to text options.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly shows the usage of the arun() method, which is part of the AsyncWebCrawler class.",
      "ground_truth_relationship": "The documentation shows the html2text customization options that can be passed as kwargs to the arun() method, which processes these options when crawling and converting webpage content as shown in the code's **kwargs parameter.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Customization\n\n### HTML to Text Options\n\nConfigure markdown conversion:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    html2text={\n        \"escape_dot\": False,\n        \"body_width\": 0,\n        \"protect_links\": True,\n        \"unicode_snob\": True\n    }\n)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method. The code example assigns the result to a variable, which would be an instance of CrawlResult.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult object, which is implicitly used to access the crawled data.",
      "ground_truth_relationship": "The CrawlResult class includes markdown and fit_markdown fields to store the text output from HTML conversion using the documented html2text configuration options.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Customization\n\n### HTML to Text Options\n\nConfigure markdown conversion:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    html2text={\n        \"escape_dot\": False,\n        \"body_width\": 0,\n        \"protect_links\": True,\n        \"unicode_snob\": True\n    }\n)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface used to implement HTML-to-text customization options through its crawl method, which accepts kwargs to pass configuration parameters like the html2text options shown in the documentation.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Content Customization\n\n### HTML to Text Options\n\nConfigure markdown conversion:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    html2text={\n        \"escape_dot\": False,\n        \"body_width\": 0,\n        \"protect_links\": True,\n        \"unicode_snob\": True\n    }\n)\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements HTML to text customization by accepting configuration options through its crawl method's kwargs parameter, which can be passed down from the crawler.arun() method documented in the example.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Parameter Details\n\n1. **semantic_filter**\n   - Sets the target topic or content type\n   - Use keywords relevant to your desired content\n   - Example: \"technical specifications\", \"user reviews\", \"pricing information\"\n\n2. **sim_threshold**\n   - Controls how similar content must be to be grouped together\n   - Higher values (e.g., 0.8) mean stricter matching\n   - Lower values (e.g., 0.3) allow more variation\n   ```python\n   # Strict matching\n   strategy = CosineStrategy(sim_threshold=0.8)\n   \n   # Loose matching\n   strategy = CosineStrategy(sim_threshold=0.3)\n   ```\n\n3. **word_count_threshold**\n   - Filters out short content blocks\n   - Helps eliminate noise and irrelevant content\n   ```python\n   # Only consider substantial paragraphs\n   strategy = CosineStrategy(word_count_threshold=50)\n   ```\n\n4. **top_k**\n   - Number of top content clusters to return\n   - Higher values return more diverse content\n   ```python\n   # Get top 5 most relevant content clusters\n   strategy = CosineStrategy(top_k=5)\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class definition and usage",
      "relationship_explanation": "The CosineStrategy class is explicitly mentioned and its usage is demonstrated throughout the documentation. It is the main focus of this documentation snippet, describing its parameters and configuration options.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document directly describes and demonstrates the usage of the CosineStrategy class.",
      "ground_truth_relationship": "The documentation's parameter details section directly maps to the CosineStrategy class's __init__ method parameters, where semantic_filter, sim_threshold, word_count_threshold, and top_k are initialized with their described functionalities implemented in the corresponding class methods like filter_documents_embeddings() and filter_clusters_by_word_count().",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Parameter Details\n\n1. **semantic_filter**\n   - Sets the target topic or content type\n   - Use keywords relevant to your desired content\n   - Example: \"technical specifications\", \"user reviews\", \"pricing information\"\n\n2. **sim_threshold**\n   - Controls how similar content must be to be grouped together\n   - Higher values (e.g., 0.8) mean stricter matching\n   - Lower values (e.g., 0.3) allow more variation\n   ```python\n   # Strict matching\n   strategy = CosineStrategy(sim_threshold=0.8)\n   \n   # Loose matching\n   strategy = CosineStrategy(sim_threshold=0.3)\n   ```\n\n3. **word_count_threshold**\n   - Filters out short content blocks\n   - Helps eliminate noise and irrelevant content\n   ```python\n   # Only consider substantial paragraphs\n   strategy = CosineStrategy(word_count_threshold=50)\n   ```\n\n4. **top_k**\n   - Number of top content clusters to return\n   - Higher values return more diverse content\n   ```python\n   # Get top 5 most relevant content clusters\n   strategy = CosineStrategy(top_k=5)\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "parameter definition",
      "relationship_explanation": "The documentation explicitly describes several parameters of the CosineStrategy class, including 'semantic_filter', 'sim_threshold', 'word_count_threshold', and 'top_k'. It provides details on their purpose and usage.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document directly describes the parameters of the CosineStrategy class.",
      "ground_truth_relationship": "The documentation's parameter details section directly maps to the CosineStrategy class's __init__ method parameters, where semantic_filter, sim_threshold, word_count_threshold, and top_k are initialized with their described functionalities implemented in the corresponding class methods like filter_documents_embeddings() and filter_clusters_by_word_count().",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Parameter Details\n\n1. **semantic_filter**\n   - Sets the target topic or content type\n   - Use keywords relevant to your desired content\n   - Example: \"technical specifications\", \"user reviews\", \"pricing information\"\n\n2. **sim_threshold**\n   - Controls how similar content must be to be grouped together\n   - Higher values (e.g., 0.8) mean stricter matching\n   - Lower values (e.g., 0.3) allow more variation\n   ```python\n   # Strict matching\n   strategy = CosineStrategy(sim_threshold=0.8)\n   \n   # Loose matching\n   strategy = CosineStrategy(sim_threshold=0.3)\n   ```\n\n3. **word_count_threshold**\n   - Filters out short content blocks\n   - Helps eliminate noise and irrelevant content\n   ```python\n   # Only consider substantial paragraphs\n   strategy = CosineStrategy(word_count_threshold=50)\n   ```\n\n4. **top_k**\n   - Number of top content clusters to return\n   - Higher values return more diverse content\n   ```python\n   # Get top 5 most relevant content clusters\n   strategy = CosineStrategy(top_k=5)\n   ```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 6,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "While not explicitly mentioned in this text snippet, CosineStrategy is likely a subclass of ExtractionStrategy based on its usage and context within the crawl4ai library.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> ExtractionStrategy",
      "predicted_trace_chain_explanation": "The document describes CosineStrategy, which is likely a subclass of ExtractionStrategy in the library's architecture.",
      "ground_truth_relationship": "The ExtractionStrategy class serves as a base template for implementing various content extraction configurations described in the parameter documentation, with specific settings for semantic_filter, sim_threshold, word_count_threshold, and top_k being defined in child classes.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Handling Protected Sites\n\n```python\nasync def crawl_protected_site(url: str):\n    async with AsyncWebCrawler(headless=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            magic=True,\n            remove_overlay_elements=True,  # Remove popups/modals\n            page_timeout=60000            # Increased timeout for protection checks\n        )\n        \n        return result.markdown if result.success else None\n```\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the example code snippet to create a crawler instance for handling protected sites.",
      "predicted_trace_chain": "magic-mode.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented protected site crawling functionality through its arun method, which supports the parameters shown in the example like headless mode, magic mode, overlay removal, and custom timeouts for handling protected sites.",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Handling Protected Sites\n\n```python\nasync def crawl_protected_site(url: str):\n    async with AsyncWebCrawler(headless=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            magic=True,\n            remove_overlay_elements=True,  # Remove popups/modals\n            page_timeout=60000            # Increased timeout for protection checks\n        )\n        \n        return result.markdown if result.success else None\n```\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the example code to perform the crawling operation on a protected site.",
      "predicted_trace_chain": "magic-mode.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which is necessary to access its arun() method.",
      "ground_truth_relationship": "The code implements arun() with extensive error handling, caching, and customizable parameters that enable protected site crawling features shown in the documentation example like magic mode, overlay removal, and configurable timeouts.",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Handling Protected Sites\n\n```python\nasync def crawl_protected_site(url: str):\n    async with AsyncWebCrawler(headless=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            magic=True,\n            remove_overlay_elements=True,  # Remove popups/modals\n            page_timeout=60000            # Increased timeout for protection checks\n        )\n        \n        return result.markdown if result.success else None\n```\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return type",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of the arun() method, as evidenced by accessing the 'markdown' and 'success' attributes of the result.",
      "predicted_trace_chain": "magic-mode.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult object, allowing access to its attributes.",
      "ground_truth_relationship": "The CrawlResult class defines the structure for storing crawl outcomes, with fields like markdown and success that are accessed in the crawl_protected_site function's return statement.",
      "ground_truth_trace_chain": "magic-mode.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Handling Protected Sites\n\n```python\nasync def crawl_protected_site(url: str):\n    async with AsyncWebCrawler(headless=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            magic=True,\n            remove_overlay_elements=True,  # Remove popups/modals\n            page_timeout=60000            # Increased timeout for protection checks\n        )\n        \n        return result.markdown if result.success else None\n```\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The 'markdown' attribute of the CrawlResult is explicitly accessed in the example code to return the crawled content if successful.",
      "predicted_trace_chain": "magic-mode.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult object, allowing direct access to its 'markdown' attribute.",
      "ground_truth_relationship": "The CrawlResult.markdown property stores the extracted text output from crawling protected sites as shown in the example where it's returned upon successful crawls.",
      "ground_truth_trace_chain": "magic-mode.md -> CrawlResult.markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Handling Protected Sites\n\n```python\nasync def crawl_protected_site(url: str):\n    async with AsyncWebCrawler(headless=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            magic=True,\n            remove_overlay_elements=True,  # Remove popups/modals\n            page_timeout=60000            # Increased timeout for protection checks\n        )\n        \n        return result.markdown if result.success else None\n```\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The 'success' attribute of the CrawlResult is explicitly checked in the example code to determine if the crawl was successful before returning the markdown content.",
      "predicted_trace_chain": "magic-mode.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult object, allowing direct access to its 'success' attribute.",
      "ground_truth_relationship": "The success flag directly determines whether protected site content should be returned as markdown or None in the crawling example.",
      "ground_truth_trace_chain": "magic-mode.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example: Handling Protected Sites\n\n```python\nasync def crawl_protected_site(url: str):\n    async with AsyncWebCrawler(headless=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            magic=True,\n            remove_overlay_elements=True,  # Remove popups/modals\n            page_timeout=60000            # Increased timeout for protection checks\n        )\n        \n        return result.markdown if result.success else None\n```\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the interface that enables implementations like the documented crawl_protected_site function to perform automated web crawling with customizable behavior for handling protected sites through methods like crawl() and set_hook().",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Example: Handling Protected Sites\n\n```python\nasync def crawl_protected_site(url: str):\n    async with AsyncWebCrawler(headless=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            magic=True,\n            remove_overlay_elements=True,  # Remove popups/modals\n            page_timeout=60000            # Increased timeout for protection checks\n        )\n        \n        return result.markdown if result.success else None\n```\n",
      "document_location": "docs/md_v2/advanced/magic-mode.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the protected site crawling functionality by using headless browser automation with features like popup removal and extended timeouts as shown in the documentation example.",
      "ground_truth_trace_chain": "magic-mode.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# LLM Extraction with AsyncWebCrawler\n\nCrawl4AI's AsyncWebCrawler allows you to use Language Models (LLMs) to extract structured data or relevant content from web pages asynchronously. Below are two examples demonstrating how to use `LLMExtractionStrategy` for different purposes with the AsyncWebCrawler.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "Usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly mentioned and used in the code examples provided in the documentation. It is the main class used to perform asynchronous web crawling and extraction.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly mentions and demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements asynchronous web crawling functionality with built-in LLM extraction support through its arun method, which accepts an extraction_strategy parameter for processing crawled content with language models.",
      "ground_truth_trace_chain": "llm.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# LLM Extraction with AsyncWebCrawler\n\nCrawl4AI's AsyncWebCrawler allows you to use Language Models (LLMs) to extract structured data or relevant content from web pages asynchronously. Below are two examples demonstrating how to use `LLMExtractionStrategy` for different purposes with the AsyncWebCrawler.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 7,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "Usage",
      "relationship_explanation": "The LLMExtractionStrategy class is explicitly mentioned and used in the code examples. It is used to configure the extraction strategy for the AsyncWebCrawler.",
      "predicted_trace_chain": "llm.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document mentions LLMExtractionStrategy, which is a specific implementation of the ExtractionStrategy abstract base class.",
      "ground_truth_relationship": "The code implements an asynchronous web content extraction strategy that uses LLMs to process and structure web data, directly fulfilling the documentation's description of using Language Models for structured data extraction from web pages.",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# LLM Extraction with AsyncWebCrawler\n\nCrawl4AI's AsyncWebCrawler allows you to use Language Models (LLMs) to extract structured data or relevant content from web pages asynchronously. Below are two examples demonstrating how to use `LLMExtractionStrategy` for different purposes with the AsyncWebCrawler.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 6,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "Inheritance",
      "relationship_explanation": "The ExtractionStrategy class is the base class for LLMExtractionStrategy, which is explicitly used in the examples. It's implicitly related as the parent class.",
      "predicted_trace_chain": "llm.md -> LLMExtractionStrategy -> ExtractionStrategy",
      "predicted_trace_chain_explanation": "LLMExtractionStrategy is explicitly used in the document, and it inherits from ExtractionStrategy, making ExtractionStrategy an implicit part of the traceability chain.",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class defines a foundation for using LLMs to extract structured data from web pages by implementing a parallel processing system through its extract() and run() methods",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# LLM Extraction with AsyncWebCrawler\n\nCrawl4AI's AsyncWebCrawler allows you to use Language Models (LLMs) to extract structured data or relevant content from web pages asynchronously. Below are two examples demonstrating how to use `LLMExtractionStrategy` for different purposes with the AsyncWebCrawler.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "Usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in the code examples to perform the asynchronous crawling and extraction process.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of the arun() method through the AsyncWebCrawler instance, establishing a direct traceability path.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# LLM Extraction with AsyncWebCrawler\n\nCrawl4AI's AsyncWebCrawler allows you to use Language Models (LLMs) to extract structured data or relevant content from web pages asynchronously. Below are two examples demonstrating how to use `LLMExtractionStrategy` for different purposes with the AsyncWebCrawler.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "Usage",
      "relationship_explanation": "The CrawlResult class is implicitly used as it's the return type of the arun() method, which is explicitly used in the examples. The extracted_content attribute of CrawlResult is accessed in the code.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult object, which is then used to access the extracted_content, implying the use of CrawlResult class.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# LLM Extraction with AsyncWebCrawler\n\nCrawl4AI's AsyncWebCrawler allows you to use Language Models (LLMs) to extract structured data or relevant content from web pages asynchronously. Below are two examples demonstrating how to use `LLMExtractionStrategy` for different purposes with the AsyncWebCrawler.",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "Usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is explicitly used in the code examples to access the extracted data from the crawling process.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows the usage of extracted_content attribute after calling arun(), which returns a CrawlResult object.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complete Example\n\nHere's a more comprehensive example showing common usage patterns:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Content filtering\n            word_count_threshold=10,\n            excluded_tags=['form', 'header'],\n            exclude_external_links=True,\n            \n            # Content processing\n            process_iframes=True,\n            remove_overlay_elements=True,\n            \n            # Cache control\n            bypass_cache=False  # Use cache if available\n        )\n        \n        if result.success:\n            # Print clean content\n            print(\"Content:\", result.markdown[:500])  # First 500 chars\n            \n            # Process images\n            for image in result.media[\"images\"]:\n                print(f\"Found image: {image['src']}\")\n            \n            # Process links\n            for link in result.links[\"internal\"]:\n                print(f\"Internal link: {link['href']}\")\n                \n        else:\n            print(f\"Crawl failed: {result.error_message}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the example code to create a crawler instance.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The code implements the AsyncWebCrawler class with methods like arun() that directly support all the documented functionality shown in the example, including content filtering, processing, and cache control through corresponding parameters.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complete Example\n\nHere's a more comprehensive example showing common usage patterns:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Content filtering\n            word_count_threshold=10,\n            excluded_tags=['form', 'header'],\n            exclude_external_links=True,\n            \n            # Content processing\n            process_iframes=True,\n            remove_overlay_elements=True,\n            \n            # Cache control\n            bypass_cache=False  # Use cache if available\n        )\n        \n        if result.success:\n            # Print clean content\n            print(\"Content:\", result.markdown[:500])  # First 500 chars\n            \n            # Process images\n            for image in result.media[\"images\"]:\n                print(f\"Found image: {image['src']}\")\n            \n            # Process links\n            for link in result.links[\"internal\"]:\n                print(f\"Internal link: {link['href']}\")\n                \n        else:\n            print(f\"Crawl failed: {result.error_message}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the example to perform the crawl operation.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which leads to the use of its arun() method.",
      "ground_truth_relationship": "The documented example demonstrates usage patterns of AsyncWebCrawler.arun() by showing how its various parameters like word_count_threshold, bypass_cache, and other content filtering options are implemented in the actual method definition through parameter validation, cache checking, and content processing logic.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complete Example\n\nHere's a more comprehensive example showing common usage patterns:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Content filtering\n            word_count_threshold=10,\n            excluded_tags=['form', 'header'],\n            exclude_external_links=True,\n            \n            # Content processing\n            process_iframes=True,\n            remove_overlay_elements=True,\n            \n            # Cache control\n            bypass_cache=False  # Use cache if available\n        )\n        \n        if result.success:\n            # Print clean content\n            print(\"Content:\", result.markdown[:500])  # First 500 chars\n            \n            # Process images\n            for image in result.media[\"images\"]:\n                print(f\"Found image: {image['src']}\")\n            \n            # Process links\n            for link in result.links[\"internal\"]:\n                print(f\"Internal link: {link['href']}\")\n                \n        else:\n            print(f\"Crawl failed: {result.error_message}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of the arun() method, as evident from accessing its properties in the example.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult object, leading to the implicit use of CrawlResult.",
      "ground_truth_relationship": "The CrawlResult class defines the data structure that holds all the crawling outputs shown in the example code, including the success status, markdown content, media items, and links that are accessed in the documented example's result handling section.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complete Example\n\nHere's a more comprehensive example showing common usage patterns:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Content filtering\n            word_count_threshold=10,\n            excluded_tags=['form', 'header'],\n            exclude_external_links=True,\n            \n            # Content processing\n            process_iframes=True,\n            remove_overlay_elements=True,\n            \n            # Cache control\n            bypass_cache=False  # Use cache if available\n        )\n        \n        if result.success:\n            # Print clean content\n            print(\"Content:\", result.markdown[:500])  # First 500 chars\n            \n            # Process images\n            for image in result.media[\"images\"]:\n                print(f\"Found image: {image['src']}\")\n            \n            # Process links\n            for link in result.links[\"internal\"]:\n                print(f\"Internal link: {link['href']}\")\n                \n        else:\n            print(f\"Crawl failed: {result.error_message}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 13,
      "artifact_title": "CrawlResult.html",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The html attribute of CrawlResult is implicitly used in the example when accessing result.markdown.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.html",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult, leading to the implicit use of its html attribute.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complete Example\n\nHere's a more comprehensive example showing common usage patterns:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Content filtering\n            word_count_threshold=10,\n            excluded_tags=['form', 'header'],\n            exclude_external_links=True,\n            \n            # Content processing\n            process_iframes=True,\n            remove_overlay_elements=True,\n            \n            # Cache control\n            bypass_cache=False  # Use cache if available\n        )\n        \n        if result.success:\n            # Print clean content\n            print(\"Content:\", result.markdown[:500])  # First 500 chars\n            \n            # Process images\n            for image in result.media[\"images\"]:\n                print(f\"Found image: {image['src']}\")\n            \n            # Process links\n            for link in result.links[\"internal\"]:\n                print(f\"Internal link: {link['href']}\")\n                \n        else:\n            print(f\"Crawl failed: {result.error_message}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The markdown attribute of CrawlResult is explicitly used in the example when printing the content: print(\"Content:\", result.markdown[:500]).",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult, leading to the explicit use of its markdown attribute.",
      "ground_truth_relationship": "The CrawlResult.markdown field contains the cleaned content from the web crawl which is accessed in the example code via result.markdown[:500] to display the first 500 characters of crawled content.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complete Example\n\nHere's a more comprehensive example showing common usage patterns:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Content filtering\n            word_count_threshold=10,\n            excluded_tags=['form', 'header'],\n            exclude_external_links=True,\n            \n            # Content processing\n            process_iframes=True,\n            remove_overlay_elements=True,\n            \n            # Cache control\n            bypass_cache=False  # Use cache if available\n        )\n        \n        if result.success:\n            # Print clean content\n            print(\"Content:\", result.markdown[:500])  # First 500 chars\n            \n            # Process images\n            for image in result.media[\"images\"]:\n                print(f\"Found image: {image['src']}\")\n            \n            # Process links\n            for link in result.links[\"internal\"]:\n                print(f\"Internal link: {link['href']}\")\n                \n        else:\n            print(f\"Crawl failed: {result.error_message}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 16,
      "artifact_title": "CrawlResult.media",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The media attribute of CrawlResult is explicitly used in the example when processing images: for image in result.media[\"images\"]:",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.media",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult, leading to the explicit use of its media attribute.",
      "ground_truth_relationship": "The CrawlResult.media dictionary property stores extracted media elements like images, which can then be accessed and processed as shown in the example documentation where image sources are printed using result.media['images'].",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.media",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complete Example\n\nHere's a more comprehensive example showing common usage patterns:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Content filtering\n            word_count_threshold=10,\n            excluded_tags=['form', 'header'],\n            exclude_external_links=True,\n            \n            # Content processing\n            process_iframes=True,\n            remove_overlay_elements=True,\n            \n            # Cache control\n            bypass_cache=False  # Use cache if available\n        )\n        \n        if result.success:\n            # Print clean content\n            print(\"Content:\", result.markdown[:500])  # First 500 chars\n            \n            # Process images\n            for image in result.media[\"images\"]:\n                print(f\"Found image: {image['src']}\")\n            \n            # Process links\n            for link in result.links[\"internal\"]:\n                print(f\"Internal link: {link['href']}\")\n                \n        else:\n            print(f\"Crawl failed: {result.error_message}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 14,
      "artifact_title": "CrawlResult.links",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The links attribute of CrawlResult is explicitly used in the example when processing internal links: for link in result.links[\"internal\"]:",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.links",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult, leading to the explicit use of its links attribute.",
      "ground_truth_relationship": "The CrawlResult.links dictionary attribute stores categorized links ('internal' and 'external') that were found during crawling, as demonstrated in the example where internal links are accessed via result.links['internal'].",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.links",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complete Example\n\nHere's a more comprehensive example showing common usage patterns:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Content filtering\n            word_count_threshold=10,\n            excluded_tags=['form', 'header'],\n            exclude_external_links=True,\n            \n            # Content processing\n            process_iframes=True,\n            remove_overlay_elements=True,\n            \n            # Cache control\n            bypass_cache=False  # Use cache if available\n        )\n        \n        if result.success:\n            # Print clean content\n            print(\"Content:\", result.markdown[:500])  # First 500 chars\n            \n            # Process images\n            for image in result.media[\"images\"]:\n                print(f\"Found image: {image['src']}\")\n            \n            # Process links\n            for link in result.links[\"internal\"]:\n                print(f\"Internal link: {link['href']}\")\n                \n        else:\n            print(f\"Crawl failed: {result.error_message}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The success attribute of CrawlResult is explicitly used in the example to check if the crawl was successful: if result.success:",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult, leading to the explicit use of its success attribute.",
      "ground_truth_relationship": "The success boolean property in CrawlResult is used to check if the crawl operation completed successfully before processing the extracted content, media and links from the crawled page.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complete Example\n\nHere's a more comprehensive example showing common usage patterns:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Content filtering\n            word_count_threshold=10,\n            excluded_tags=['form', 'header'],\n            exclude_external_links=True,\n            \n            # Content processing\n            process_iframes=True,\n            remove_overlay_elements=True,\n            \n            # Cache control\n            bypass_cache=False  # Use cache if available\n        )\n        \n        if result.success:\n            # Print clean content\n            print(\"Content:\", result.markdown[:500])  # First 500 chars\n            \n            # Process images\n            for image in result.media[\"images\"]:\n                print(f\"Found image: {image['src']}\")\n            \n            # Process links\n            for link in result.links[\"internal\"]:\n                print(f\"Internal link: {link['href']}\")\n                \n        else:\n            print(f\"Crawl failed: {result.error_message}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 10,
      "artifact_title": "CrawlResult.error_message",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The error_message attribute of CrawlResult is explicitly used in the example when handling a failed crawl: print(f\"Crawl failed: {result.error_message}\")",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.error_message",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult, leading to the explicit use of its error_message attribute in case of failure.",
      "ground_truth_relationship": "The error_message field in CrawlResult enables error handling in the example code by providing the failure reason when result.success is False.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.error_message",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Complete Example\n\nHere's a more comprehensive example showing common usage patterns:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Content filtering\n            word_count_threshold=10,\n            excluded_tags=['form', 'header'],\n            exclude_external_links=True,\n            \n            # Content processing\n            process_iframes=True,\n            remove_overlay_elements=True,\n            \n            # Cache control\n            bypass_cache=False  # Use cache if available\n        )\n        \n        if result.success:\n            # Print clean content\n            print(\"Content:\", result.markdown[:500])  # First 500 chars\n            \n            # Process images\n            for image in result.media[\"images\"]:\n                print(f\"Found image: {image['src']}\")\n            \n            # Process links\n            for link in result.links[\"internal\"]:\n                print(f\"Internal link: {link['href']}\")\n                \n        else:\n            print(f\"Crawl failed: {result.error_message}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods that enable the comprehensive crawling functionality demonstrated in the documentation example, including URL processing, screenshot capture, and hook management.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Complete Example\n\nHere's a more comprehensive example showing common usage patterns:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://example.com\",\n            # Content filtering\n            word_count_threshold=10,\n            excluded_tags=['form', 'header'],\n            exclude_external_links=True,\n            \n            # Content processing\n            process_iframes=True,\n            remove_overlay_elements=True,\n            \n            # Cache control\n            bypass_cache=False  # Use cache if available\n        )\n        \n        if result.success:\n            # Print clean content\n            print(\"Content:\", result.markdown[:500])  # First 500 chars\n            \n            # Process images\n            for image in result.media[\"images\"]:\n                print(f\"Found image: {image['src']}\")\n            \n            # Process links\n            for link in result.links[\"internal\"]:\n                print(f\"Internal link: {link['href']}\")\n                \n        else:\n            print(f\"Crawl failed: {result.error_message}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class directly implements all the crawler features shown in the example documentation, including content filtering, iframe processing, and cache control through its comprehensive crawl() method that handles parameters like process_iframes, bypass_cache, and excluded_tags.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Authenticated Proxy\n\nUse proxy with authentication:\n\n```python\nproxy_config = {\n    \"server\": \"http://proxy.example.com:8080\",\n    \"username\": \"user\",\n    \"password\": \"pass\"\n}\n\nasync with AsyncWebCrawler(proxy_config=proxy_config) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate how to configure and use an authenticated proxy.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class accepts a proxy_config parameter in its initialization which gets passed to the underlying AsyncPlaywrightCrawlerStrategy to enable authenticated proxy connections as demonstrated in the documentation example.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Authenticated Proxy\n\nUse proxy with authentication:\n\n```python\nproxy_config = {\n    \"server\": \"http://proxy.example.com:8080\",\n    \"username\": \"user\",\n    \"password\": \"pass\"\n}\n\nasync with AsyncWebCrawler(proxy_config=proxy_config) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling operation with the configured proxy settings.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows the usage of AsyncWebCrawler, which then leads to the use of its arun() method for actual crawling.",
      "ground_truth_relationship": "The code's arun() method implements proxy support by accepting proxy configuration through its crawler_strategy.crawl() function call, which aligns with the documentation showing how to initialize AsyncWebCrawler with proxy_config for authenticated proxy access.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Authenticated Proxy\n\nUse proxy with authentication:\n\n```python\nproxy_config = {\n    \"server\": \"http://proxy.example.com:8080\",\n    \"username\": \"user\",\n    \"password\": \"pass\"\n}\n\nasync with AsyncWebCrawler(proxy_config=proxy_config) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementation",
      "relationship_explanation": "While not explicitly mentioned, AsyncPlaywrightCrawlerStrategy is the default strategy used by AsyncWebCrawler and would handle the proxy configuration internally.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The documentation shows the use of AsyncWebCrawler, which internally uses AsyncPlaywrightCrawlerStrategy as its default crawling strategy.",
      "ground_truth_relationship": "The code implements authenticated proxy support by configuring browser_args with ProxySettings containing server, username, and password from the proxy_config dictionary during browser initialization in the start() method.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Authenticated Proxy\n\nUse proxy with authentication:\n\n```python\nproxy_config = {\n    \"server\": \"http://proxy.example.com:8080\",\n    \"username\": \"user\",\n    \"password\": \"pass\"\n}\n\nasync with AsyncWebCrawler(proxy_config=proxy_config) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface that enables proxy-authenticated web crawling through its abstract crawl methods, which the documentation demonstrates how to configure using proxy_config.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Authenticated Proxy\n\nUse proxy with authentication:\n\n```python\nproxy_config = {\n    \"server\": \"http://proxy.example.com:8080\",\n    \"username\": \"user\",\n    \"password\": \"pass\"\n}\n\nasync with AsyncWebCrawler(proxy_config=proxy_config) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class defines the structure for storing crawling results when making authenticated proxy requests, capturing details like success status, HTML content, and error messages that may occur during proxy-authenticated web requests.",
      "ground_truth_trace_chain": "proxy-security.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Pattern-Based Selection\n\nFor repeated content patterns (like product listings, news feeds):\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"News Articles\",\n    \"baseSelector\": \"article.news-item\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"headline\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"summary\", \"selector\": \".summary\", \"type\": \"text\"},\n        {\"name\": \"category\", \"selector\": \".category\", \"type\": \"text\"},\n        {\n            \"name\": \"metadata\",\n            \"type\": \"nested\",\n            \"fields\": [\n                {\"name\": \"author\", \"selector\": \".author\", \"type\": \"text\"},\n                {\"name\": \"date\", \"selector\": \".date\", \"type\": \"text\"}\n            ]\n        }\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\narticles = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly mentioned and used in the code example to define a strategy for extracting structured content from web pages using CSS selectors.",
      "predicted_trace_chain": "content-selection.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly references and demonstrates the use of JsonCssExtractionStrategy, showing how it's instantiated and used for content extraction.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements pattern-based content extraction by using a schema definition to recursively select and extract nested data from repeating HTML elements using CSS selectors.",
      "ground_truth_trace_chain": "content-selection.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Pattern-Based Selection\n\nFor repeated content patterns (like product listings, news feeds):\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"News Articles\",\n    \"baseSelector\": \"article.news-item\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"headline\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"summary\", \"selector\": \".summary\", \"type\": \"text\"},\n        {\"name\": \"category\", \"selector\": \".category\", \"type\": \"text\"},\n        {\n            \"name\": \"metadata\",\n            \"type\": \"nested\",\n            \"fields\": [\n                {\"name\": \"author\", \"selector\": \".author\", \"type\": \"text\"},\n                {\"name\": \"date\", \"selector\": \".date\", \"type\": \"text\"}\n            ]\n        }\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\narticles = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example. The 'crawler' object, which is likely an instance of AsyncWebCrawler, is used to call the 'arun' method for web crawling and content extraction.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document demonstrates using an AsyncWebCrawler instance to perform a crawl with a JsonCssExtractionStrategy, showing how these components work together in the crawling process.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements pattern-based selection through its aprocess_html method, which uses JsonCssExtractionStrategy to extract structured data according to the schema defined in the documentation.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Pattern-Based Selection\n\nFor repeated content patterns (like product listings, news feeds):\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"News Articles\",\n    \"baseSelector\": \"article.news-item\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"headline\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"summary\", \"selector\": \".summary\", \"type\": \"text\"},\n        {\"name\": \"category\", \"selector\": \".category\", \"type\": \"text\"},\n        {\n            \"name\": \"metadata\",\n            \"type\": \"nested\",\n            \"fields\": [\n                {\"name\": \"author\", \"selector\": \".author\", \"type\": \"text\"},\n                {\"name\": \"date\", \"selector\": \".date\", \"type\": \"text\"}\n            ]\n        }\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\narticles = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The 'arun' method of the AsyncWebCrawler class is explicitly used in the code example to perform the web crawling and content extraction task with the specified extraction strategy.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document shows how to use the arun() method of AsyncWebCrawler, passing it a JsonCssExtractionStrategy instance, demonstrating the flow of execution from crawl initiation to strategy application.",
      "ground_truth_relationship": "The arun() method processes the JsonCssExtractionStrategy schema by accepting an extraction_strategy parameter and applying it to crawled HTML content to extract structured data according to the defined selectors and field patterns.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Pattern-Based Selection\n\nFor repeated content patterns (like product listings, news feeds):\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"News Articles\",\n    \"baseSelector\": \"article.news-item\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"headline\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"summary\", \"selector\": \".summary\", \"type\": \"text\"},\n        {\"name\": \"category\", \"selector\": \".category\", \"type\": \"text\"},\n        {\n            \"name\": \"metadata\",\n            \"type\": \"nested\",\n            \"fields\": [\n                {\"name\": \"author\", \"selector\": \".author\", \"type\": \"text\"},\n                {\"name\": \"date\", \"selector\": \".date\", \"type\": \"text\"}\n            ]\n        }\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\narticles = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "output",
      "relationship_explanation": "The 'extracted_content' attribute of the CrawlResult class is implicitly used in the code example. The result of the crawler's 'arun' method is assumed to have this attribute, which is then parsed as JSON to obtain the extracted articles.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult, from which the extracted_content is accessed and parsed, showing the flow of data from crawling to final extraction output.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Pattern-Based Selection\n\nFor repeated content patterns (like product listings, news feeds):\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"News Articles\",\n    \"baseSelector\": \"article.news-item\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"headline\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"summary\", \"selector\": \".summary\", \"type\": \"text\"},\n        {\"name\": \"category\", \"selector\": \".category\", \"type\": \"text\"},\n        {\n            \"name\": \"metadata\",\n            \"type\": \"nested\",\n            \"fields\": [\n                {\"name\": \"author\", \"selector\": \".author\", \"type\": \"text\"},\n                {\"name\": \"date\", \"selector\": \".date\", \"type\": \"text\"}\n            ]\n        }\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\narticles = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class defines the core interface and parallel processing logic that enables pattern-based content extraction, which concrete implementations like JsonCssExtractionStrategy use to extract structured data from repeated HTML elements as shown in the documentation example.",
      "ground_truth_trace_chain": "content-selection.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Pattern-Based Selection\n\nFor repeated content patterns (like product listings, news feeds):\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"News Articles\",\n    \"baseSelector\": \"article.news-item\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"headline\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"summary\", \"selector\": \".summary\", \"type\": \"text\"},\n        {\"name\": \"category\", \"selector\": \".category\", \"type\": \"text\"},\n        {\n            \"name\": \"metadata\",\n            \"type\": \"nested\",\n            \"fields\": [\n                {\"name\": \"author\", \"selector\": \".author\", \"type\": \"text\"},\n                {\"name\": \"date\", \"selector\": \".date\", \"type\": \"text\"}\n            ]\n        }\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\narticles = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class's extracted_content field stores the JSON output from pattern-based extraction strategies like JsonCssExtractionStrategy shown in the documentation.",
      "ground_truth_trace_chain": "content-selection.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Pattern-Based Selection\n\nFor repeated content patterns (like product listings, news feeds):\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"News Articles\",\n    \"baseSelector\": \"article.news-item\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"headline\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"summary\", \"selector\": \".summary\", \"type\": \"text\"},\n        {\"name\": \"category\", \"selector\": \".category\", \"type\": \"text\"},\n        {\n            \"name\": \"metadata\",\n            \"type\": \"nested\",\n            \"fields\": [\n                {\"name\": \"author\", \"selector\": \".author\", \"type\": \"text\"},\n                {\"name\": \"date\", \"selector\": \".date\", \"type\": \"text\"}\n            ]\n        }\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\narticles = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the documented pattern-based selection by providing a flexible crawling engine that can navigate web pages and enable CSS-based extraction through its crawl method, allowing the JsonCssExtractionStrategy to perform the actual pattern matching and content extraction.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Pattern-Based Selection\n\nFor repeated content patterns (like product listings, news feeds):\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nschema = {\n    \"name\": \"News Articles\",\n    \"baseSelector\": \"article.news-item\",  # Repeated element\n    \"fields\": [\n        {\"name\": \"headline\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"summary\", \"selector\": \".summary\", \"type\": \"text\"},\n        {\"name\": \"category\", \"selector\": \".category\", \"type\": \"text\"},\n        {\n            \"name\": \"metadata\",\n            \"type\": \"nested\",\n            \"fields\": [\n                {\"name\": \"author\", \"selector\": \".author\", \"type\": \"text\"},\n                {\"name\": \"date\", \"selector\": \".date\", \"type\": \"text\"}\n            ]\n        }\n    ]\n}\n\nstrategy = JsonCssExtractionStrategy(schema)\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=strategy\n)\narticles = json.loads(result.extracted_content)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the core interface that enables pattern-based extraction by defining crawl methods that the JsonCssExtractionStrategy uses to fetch and process structured content like news articles.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine different selection methods:\n\n```python\nasync def extract_article_content(url: str):\n    # Define structured extraction\n    article_schema = {\n        \"name\": \"Article\",\n        \"baseSelector\": \"article.main\",\n        \"fields\": [\n            {\"name\": \"title\", \"selector\": \"h1\", \"type\": \"text\"},\n            {\"name\": \"content\", \"selector\": \".content\", \"type\": \"text\"}\n        ]\n    }\n    \n    # Define LLM extraction\n    class ArticleAnalysis(BaseModel):\n        key_points: List[str]\n        sentiment: str\n        category: str\n\n    async with AsyncWebCrawler() as crawler:\n        # Get structured content\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(article_schema),\n            word_count_threshold=10,\n            excluded_tags=['nav', 'footer'],\n            exclude_external_links=True\n        )\n        \n        # Get semantic analysis\n        analysis_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=ArticleAnalysis.schema(),\n                instruction=\"Analyze the article content\"\n            )\n        )\n        \n        # Combine results\n        return {\n            \"article\": json.loads(pattern_result.extracted_content),\n            \"analysis\": json.loads(analysis_result.extracted_content),\n            \"media\": pattern_result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the comprehensive example to create an asynchronous web crawler instance for extracting article content.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the core functionality shown in the documentation's comprehensive example by providing async context management and extraction methods that support both structured (JsonCssExtractionStrategy) and LLM-based content extraction through its arun method.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine different selection methods:\n\n```python\nasync def extract_article_content(url: str):\n    # Define structured extraction\n    article_schema = {\n        \"name\": \"Article\",\n        \"baseSelector\": \"article.main\",\n        \"fields\": [\n            {\"name\": \"title\", \"selector\": \"h1\", \"type\": \"text\"},\n            {\"name\": \"content\", \"selector\": \".content\", \"type\": \"text\"}\n        ]\n    }\n    \n    # Define LLM extraction\n    class ArticleAnalysis(BaseModel):\n        key_points: List[str]\n        sentiment: str\n        category: str\n\n    async with AsyncWebCrawler() as crawler:\n        # Get structured content\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(article_schema),\n            word_count_threshold=10,\n            excluded_tags=['nav', 'footer'],\n            exclude_external_links=True\n        )\n        \n        # Get semantic analysis\n        analysis_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=ArticleAnalysis.schema(),\n                instruction=\"Analyze the article content\"\n            )\n        )\n        \n        # Combine results\n        return {\n            \"article\": json.loads(pattern_result.extracted_content),\n            \"analysis\": json.loads(analysis_result.extracted_content),\n            \"media\": pattern_result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called multiple times in the example to perform different extraction tasks.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which leads to calling its arun() method for performing extractions.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method executes the core crawling functionality shown in the documentation example by accepting extraction strategies, processing URLs, and returning structured results that can be used for both pattern-based and LLM-based content extraction.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine different selection methods:\n\n```python\nasync def extract_article_content(url: str):\n    # Define structured extraction\n    article_schema = {\n        \"name\": \"Article\",\n        \"baseSelector\": \"article.main\",\n        \"fields\": [\n            {\"name\": \"title\", \"selector\": \"h1\", \"type\": \"text\"},\n            {\"name\": \"content\", \"selector\": \".content\", \"type\": \"text\"}\n        ]\n    }\n    \n    # Define LLM extraction\n    class ArticleAnalysis(BaseModel):\n        key_points: List[str]\n        sentiment: str\n        category: str\n\n    async with AsyncWebCrawler() as crawler:\n        # Get structured content\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(article_schema),\n            word_count_threshold=10,\n            excluded_tags=['nav', 'footer'],\n            exclude_external_links=True\n        )\n        \n        # Get semantic analysis\n        analysis_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=ArticleAnalysis.schema(),\n                instruction=\"Analyze the article content\"\n            )\n        )\n        \n        # Combine results\n        return {\n            \"article\": json.loads(pattern_result.extracted_content),\n            \"analysis\": json.loads(analysis_result.extracted_content),\n            \"media\": pattern_result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly used in the example to define a structured extraction strategy for article content.",
      "predicted_trace_chain": "content-selection.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of JsonCssExtractionStrategy, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements the structured extraction pattern shown in the documentation's comprehensive example by using CSS selectors to extract data according to a predefined schema structure with baseSelector and fields properties.",
      "ground_truth_trace_chain": "content-selection.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine different selection methods:\n\n```python\nasync def extract_article_content(url: str):\n    # Define structured extraction\n    article_schema = {\n        \"name\": \"Article\",\n        \"baseSelector\": \"article.main\",\n        \"fields\": [\n            {\"name\": \"title\", \"selector\": \"h1\", \"type\": \"text\"},\n            {\"name\": \"content\", \"selector\": \".content\", \"type\": \"text\"}\n        ]\n    }\n    \n    # Define LLM extraction\n    class ArticleAnalysis(BaseModel):\n        key_points: List[str]\n        sentiment: str\n        category: str\n\n    async with AsyncWebCrawler() as crawler:\n        # Get structured content\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(article_schema),\n            word_count_threshold=10,\n            excluded_tags=['nav', 'footer'],\n            exclude_external_links=True\n        )\n        \n        # Get semantic analysis\n        analysis_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=ArticleAnalysis.schema(),\n                instruction=\"Analyze the article content\"\n            )\n        )\n        \n        # Combine results\n        return {\n            \"article\": json.loads(pattern_result.extracted_content),\n            \"analysis\": json.loads(analysis_result.extracted_content),\n            \"media\": pattern_result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 24,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The LLMExtractionStrategy class is explicitly used in the example to define an extraction strategy using a language model for semantic analysis.",
      "predicted_trace_chain": "content-selection.md -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of LLMExtractionStrategy, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The LLMExtractionStrategy class implements the semantic analysis functionality shown in the documentation example, specifically handling the ArticleAnalysis extraction with custom providers, schemas, and instructions as demonstrated in the crawler.arun() call.",
      "ground_truth_trace_chain": "content-selection.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine different selection methods:\n\n```python\nasync def extract_article_content(url: str):\n    # Define structured extraction\n    article_schema = {\n        \"name\": \"Article\",\n        \"baseSelector\": \"article.main\",\n        \"fields\": [\n            {\"name\": \"title\", \"selector\": \"h1\", \"type\": \"text\"},\n            {\"name\": \"content\", \"selector\": \".content\", \"type\": \"text\"}\n        ]\n    }\n    \n    # Define LLM extraction\n    class ArticleAnalysis(BaseModel):\n        key_points: List[str]\n        sentiment: str\n        category: str\n\n    async with AsyncWebCrawler() as crawler:\n        # Get structured content\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(article_schema),\n            word_count_threshold=10,\n            excluded_tags=['nav', 'footer'],\n            exclude_external_links=True\n        )\n        \n        # Get semantic analysis\n        analysis_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=ArticleAnalysis.schema(),\n                instruction=\"Analyze the article content\"\n            )\n        )\n        \n        # Combine results\n        return {\n            \"article\": json.loads(pattern_result.extracted_content),\n            \"analysis\": json.loads(analysis_result.extracted_content),\n            \"media\": pattern_result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 7,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "ExtractionStrategy is the base class for both JsonCssExtractionStrategy and LLMExtractionStrategy, which are explicitly used in the example.",
      "predicted_trace_chain": "content-selection.md -> JsonCssExtractionStrategy -> ExtractionStrategy",
      "predicted_trace_chain_explanation": "The document uses JsonCssExtractionStrategy, which inherits from ExtractionStrategy, implying its relevance.",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class defines the core interface and parallel processing functionality that enables both the JsonCssExtractionStrategy and LLMExtractionStrategy implementations shown in the documentation example.",
      "ground_truth_trace_chain": "content-selection.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine different selection methods:\n\n```python\nasync def extract_article_content(url: str):\n    # Define structured extraction\n    article_schema = {\n        \"name\": \"Article\",\n        \"baseSelector\": \"article.main\",\n        \"fields\": [\n            {\"name\": \"title\", \"selector\": \"h1\", \"type\": \"text\"},\n            {\"name\": \"content\", \"selector\": \".content\", \"type\": \"text\"}\n        ]\n    }\n    \n    # Define LLM extraction\n    class ArticleAnalysis(BaseModel):\n        key_points: List[str]\n        sentiment: str\n        category: str\n\n    async with AsyncWebCrawler() as crawler:\n        # Get structured content\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(article_schema),\n            word_count_threshold=10,\n            excluded_tags=['nav', 'footer'],\n            exclude_external_links=True\n        )\n        \n        # Get semantic analysis\n        analysis_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=ArticleAnalysis.schema(),\n                instruction=\"Analyze the article content\"\n            )\n        )\n        \n        # Combine results\n        return {\n            \"article\": json.loads(pattern_result.extracted_content),\n            \"analysis\": json.loads(analysis_result.extracted_content),\n            \"media\": pattern_result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return type",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of the arun() method, as evidenced by accessing properties like extracted_content and media in the example.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows usage of arun() method, which returns a CrawlResult object, as properties of this object are accessed in the code.",
      "ground_truth_relationship": "The CrawlResult class serves as the structured output container for the extract_article_content function, storing both the pattern-based extraction results (extracted_content) and media assets referenced in the documentation example.",
      "ground_truth_trace_chain": "content-selection.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine different selection methods:\n\n```python\nasync def extract_article_content(url: str):\n    # Define structured extraction\n    article_schema = {\n        \"name\": \"Article\",\n        \"baseSelector\": \"article.main\",\n        \"fields\": [\n            {\"name\": \"title\", \"selector\": \"h1\", \"type\": \"text\"},\n            {\"name\": \"content\", \"selector\": \".content\", \"type\": \"text\"}\n        ]\n    }\n    \n    # Define LLM extraction\n    class ArticleAnalysis(BaseModel):\n        key_points: List[str]\n        sentiment: str\n        category: str\n\n    async with AsyncWebCrawler() as crawler:\n        # Get structured content\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(article_schema),\n            word_count_threshold=10,\n            excluded_tags=['nav', 'footer'],\n            exclude_external_links=True\n        )\n        \n        # Get semantic analysis\n        analysis_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=ArticleAnalysis.schema(),\n                instruction=\"Analyze the article content\"\n            )\n        )\n        \n        # Combine results\n        return {\n            \"article\": json.loads(pattern_result.extracted_content),\n            \"analysis\": json.loads(analysis_result.extracted_content),\n            \"media\": pattern_result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "CrawlResult.media",
      "ground_truth_relationship": "The CrawlResult.media property is used to store media assets collected during crawling, which is shown being returned as part of the combined results in the comprehensive example's extract_article_content function.",
      "ground_truth_trace_chain": "content-selection.md -> CrawlResult.media",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine different selection methods:\n\n```python\nasync def extract_article_content(url: str):\n    # Define structured extraction\n    article_schema = {\n        \"name\": \"Article\",\n        \"baseSelector\": \"article.main\",\n        \"fields\": [\n            {\"name\": \"title\", \"selector\": \"h1\", \"type\": \"text\"},\n            {\"name\": \"content\", \"selector\": \".content\", \"type\": \"text\"}\n        ]\n    }\n    \n    # Define LLM extraction\n    class ArticleAnalysis(BaseModel):\n        key_points: List[str]\n        sentiment: str\n        category: str\n\n    async with AsyncWebCrawler() as crawler:\n        # Get structured content\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(article_schema),\n            word_count_threshold=10,\n            excluded_tags=['nav', 'footer'],\n            exclude_external_links=True\n        )\n        \n        # Get semantic analysis\n        analysis_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=ArticleAnalysis.schema(),\n                instruction=\"Analyze the article content\"\n            )\n        )\n        \n        # Combine results\n        return {\n            \"article\": json.loads(pattern_result.extracted_content),\n            \"analysis\": json.loads(analysis_result.extracted_content),\n            \"media\": pattern_result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the asynchronous web crawling functionality that enables the comprehensive example's pattern-based and LLM-based content extraction by providing browser automation capabilities and page manipulation methods.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine different selection methods:\n\n```python\nasync def extract_article_content(url: str):\n    # Define structured extraction\n    article_schema = {\n        \"name\": \"Article\",\n        \"baseSelector\": \"article.main\",\n        \"fields\": [\n            {\"name\": \"title\", \"selector\": \"h1\", \"type\": \"text\"},\n            {\"name\": \"content\", \"selector\": \".content\", \"type\": \"text\"}\n        ]\n    }\n    \n    # Define LLM extraction\n    class ArticleAnalysis(BaseModel):\n        key_points: List[str]\n        sentiment: str\n        category: str\n\n    async with AsyncWebCrawler() as crawler:\n        # Get structured content\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(article_schema),\n            word_count_threshold=10,\n            excluded_tags=['nav', 'footer'],\n            exclude_external_links=True\n        )\n        \n        # Get semantic analysis\n        analysis_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=ArticleAnalysis.schema(),\n                instruction=\"Analyze the article content\"\n            )\n        )\n        \n        # Combine results\n        return {\n            \"article\": json.loads(pattern_result.extracted_content),\n            \"analysis\": json.loads(analysis_result.extracted_content),\n            \"media\": pattern_result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "CrawlResult.extracted_content",
      "ground_truth_relationship": "The CrawlResult.extracted_content field stores serialized JSON content from both pattern-based and LLM-based extraction strategies as demonstrated in the comprehensive example where it's accessed via pattern_result.extracted_content and analysis_result.extracted_content.",
      "ground_truth_trace_chain": "content-selection.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Comprehensive Example\n\nHere's how to combine different selection methods:\n\n```python\nasync def extract_article_content(url: str):\n    # Define structured extraction\n    article_schema = {\n        \"name\": \"Article\",\n        \"baseSelector\": \"article.main\",\n        \"fields\": [\n            {\"name\": \"title\", \"selector\": \"h1\", \"type\": \"text\"},\n            {\"name\": \"content\", \"selector\": \".content\", \"type\": \"text\"}\n        ]\n    }\n    \n    # Define LLM extraction\n    class ArticleAnalysis(BaseModel):\n        key_points: List[str]\n        sentiment: str\n        category: str\n\n    async with AsyncWebCrawler() as crawler:\n        # Get structured content\n        pattern_result = await crawler.arun(\n            url=url,\n            extraction_strategy=JsonCssExtractionStrategy(article_schema),\n            word_count_threshold=10,\n            excluded_tags=['nav', 'footer'],\n            exclude_external_links=True\n        )\n        \n        # Get semantic analysis\n        analysis_result = await crawler.arun(\n            url=url,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"ollama/nemotron\",\n                schema=ArticleAnalysis.schema(),\n                instruction=\"Analyze the article content\"\n            )\n        )\n        \n        # Combine results\n        return {\n            \"article\": json.loads(pattern_result.extracted_content),\n            \"analysis\": json.loads(analysis_result.extracted_content),\n            \"media\": pattern_result.media\n        }\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core methods that enable the comprehensive example's combined extraction functionality, including crawl() and crawl_many() which are used by the extract_article_content() function to perform both structured and LLM-based extractions.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Proxy Configuration\n\nUse proxies for enhanced access:\n\n```python\n# Simple proxy\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Proxy with authentication\nproxy_config = {\n    \"server\": \"http://proxy.example.com:8080\",\n    \"username\": \"user\",\n    \"password\": \"pass\"\n}\nasync with AsyncWebCrawler(proxy_config=proxy_config) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code examples to demonstrate proxy configuration. It is the main class through which proxy settings are applied.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of AsyncWebCrawler for proxy configuration.",
      "ground_truth_relationship": "The AsyncWebCrawler class accepts proxy configuration through its constructor's **kwargs parameter, which gets passed to the AsyncPlaywrightCrawlerStrategy for handling HTTP proxy settings during web crawling operations.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Proxy Configuration\n\nUse proxies for enhanced access:\n\n```python\n# Simple proxy\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Proxy with authentication\nproxy_config = {\n    \"server\": \"http://proxy.example.com:8080\",\n    \"username\": \"user\",\n    \"password\": \"pass\"\n}\nasync with AsyncWebCrawler(proxy_config=proxy_config) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the examples to perform the crawling operation with the configured proxy settings.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows how to use AsyncWebCrawler, which then involves calling its arun() method to perform the crawl.",
      "ground_truth_relationship": "The arun() method accepts proxy configurations through its underlying crawler_strategy.crawl() call, enabling the proxy usage patterns shown in the documentation for both simple and authenticated proxies.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Proxy Configuration\n\nUse proxies for enhanced access:\n\n```python\n# Simple proxy\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Proxy with authentication\nproxy_config = {\n    \"server\": \"http://proxy.example.com:8080\",\n    \"username\": \"user\",\n    \"password\": \"pass\"\n}\nasync with AsyncWebCrawler(proxy_config=proxy_config) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementation",
      "relationship_explanation": "While not explicitly mentioned, AsyncPlaywrightCrawlerStrategy is the likely implementation of the crawler strategy used by AsyncWebCrawler, handling the actual proxy configuration internally.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The documentation shows usage of AsyncWebCrawler, which internally uses AsyncPlaywrightCrawlerStrategy to implement the crawling functionality, including proxy handling.",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements proxy support through its browser_args configuration, where it creates ProxySettings objects using either a simple proxy string or a proxy_config dictionary containing server, username, and password as shown in the documentation.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Proxy Configuration\n\nUse proxies for enhanced access:\n\n```python\n# Simple proxy\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Proxy with authentication\nproxy_config = {\n    \"server\": \"http://proxy.example.com:8080\",\n    \"username\": \"user\",\n    \"password\": \"pass\"\n}\nasync with AsyncWebCrawler(proxy_config=proxy_config) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the interface that enables proxy-based crawling functionality through its abstract crawl methods, which the documentation demonstrates how to configure with both simple and authenticated proxy settings.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Proxy Configuration\n\nUse proxies for enhanced access:\n\n```python\n# Simple proxy\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Proxy with authentication\nproxy_config = {\n    \"server\": \"http://proxy.example.com:8080\",\n    \"username\": \"user\",\n    \"password\": \"pass\"\n}\nasync with AsyncWebCrawler(proxy_config=proxy_config) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class provides fields to store the crawling output including proxy-related data like response_headers and status_code which are essential for tracking proxy communication results shown in the proxy configuration documentation.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Using with Extraction Strategies\n\nCombine page interaction with structured extraction:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy, LLMExtractionStrategy\n\n# Pattern-based extraction after interaction\nschema = {\n    \"name\": \"Dynamic Items\",\n    \"baseSelector\": \".item\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    wait_for=\"css:.item:nth-child(10)\",  # Wait for 10 items\n    extraction_strategy=JsonCssExtractionStrategy(schema)\n)\n\n# Or use LLM to analyze dynamic content\nclass ContentAnalysis(BaseModel):\n    topics: List[str]\n    summary: str\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"document.querySelector('.show-more').click();\",\n    wait_for=\"css:.full-content\",\n    extraction_strategy=LLMExtractionStrategy(\n        provider=\"ollama/nemotron\",\n        schema=ContentAnalysis.schema(),\n        instruction=\"Analyze the full content\"\n    )\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly used in the code example to demonstrate how to perform pattern-based extraction after page interaction.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document discusses page interaction, which is implemented by AsyncWebCrawler. The AsyncWebCrawler uses JsonCssExtractionStrategy for structured extraction of content.",
      "ground_truth_relationship": "JsonCssExtractionStrategy class implements pattern-based extraction by parsing HTML with BeautifulSoup and applying the schema's CSS selectors to extract structured data from matched elements.",
      "ground_truth_trace_chain": "page-interaction.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Using with Extraction Strategies\n\nCombine page interaction with structured extraction:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy, LLMExtractionStrategy\n\n# Pattern-based extraction after interaction\nschema = {\n    \"name\": \"Dynamic Items\",\n    \"baseSelector\": \".item\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    wait_for=\"css:.item:nth-child(10)\",  # Wait for 10 items\n    extraction_strategy=JsonCssExtractionStrategy(schema)\n)\n\n# Or use LLM to analyze dynamic content\nclass ContentAnalysis(BaseModel):\n    topics: List[str]\n    summary: str\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"document.querySelector('.show-more').click();\",\n    wait_for=\"css:.full-content\",\n    extraction_strategy=LLMExtractionStrategy(\n        provider=\"ollama/nemotron\",\n        schema=ContentAnalysis.schema(),\n        instruction=\"Analyze the full content\"\n    )\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 24,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The LLMExtractionStrategy class is explicitly used in the code example to show how to use LLM to analyze dynamic content after page interaction.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document covers page interaction techniques, which are implemented in AsyncWebCrawler. The AsyncWebCrawler then uses LLMExtractionStrategy for AI-powered content analysis.",
      "ground_truth_relationship": "The LLMExtractionStrategy code directly implements the documented functionality of analyzing dynamic content by processing HTML content through LLM models with configurable providers, schemas, and instructions as shown in the example where it processes content after waiting for '.full-content' elements.",
      "ground_truth_trace_chain": "page-interaction.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Using with Extraction Strategies\n\nCombine page interaction with structured extraction:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy, LLMExtractionStrategy\n\n# Pattern-based extraction after interaction\nschema = {\n    \"name\": \"Dynamic Items\",\n    \"baseSelector\": \".item\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    wait_for=\"css:.item:nth-child(10)\",  # Wait for 10 items\n    extraction_strategy=JsonCssExtractionStrategy(schema)\n)\n\n# Or use LLM to analyze dynamic content\nclass ContentAnalysis(BaseModel):\n    topics: List[str]\n    summary: str\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"document.querySelector('.show-more').click();\",\n    wait_for=\"css:.full-content\",\n    extraction_strategy=LLMExtractionStrategy(\n        provider=\"ollama/nemotron\",\n        schema=ContentAnalysis.schema(),\n        instruction=\"Analyze the full content\"\n    )\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code examples. The 'crawler' object used in the arun() method calls is an instance of AsyncWebCrawler.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document describes page interaction techniques that are implemented by the AsyncWebCrawler class.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented functionality by providing an arun() method that accepts extraction strategies (JsonCssExtractionStrategy or LLMExtractionStrategy) and JavaScript execution parameters to handle dynamic content extraction, as shown in the documentation examples.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Using with Extraction Strategies\n\nCombine page interaction with structured extraction:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy, LLMExtractionStrategy\n\n# Pattern-based extraction after interaction\nschema = {\n    \"name\": \"Dynamic Items\",\n    \"baseSelector\": \".item\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    wait_for=\"css:.item:nth-child(10)\",  # Wait for 10 items\n    extraction_strategy=JsonCssExtractionStrategy(schema)\n)\n\n# Or use LLM to analyze dynamic content\nclass ContentAnalysis(BaseModel):\n    topics: List[str]\n    summary: str\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"document.querySelector('.show-more').click();\",\n    wait_for=\"css:.full-content\",\n    extraction_strategy=LLMExtractionStrategy(\n        provider=\"ollama/nemotron\",\n        schema=ContentAnalysis.schema(),\n        instruction=\"Analyze the full content\"\n    )\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used multiple times in the code examples to perform various page interactions and extractions.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document discusses page interaction techniques, which are implemented in the AsyncWebCrawler class through its arun() method.",
      "ground_truth_relationship": "The arun() method implements the documented functionality by accepting extraction_strategy objects like JsonCssExtractionStrategy and LLMExtractionStrategy, along with JavaScript code and wait conditions, to perform web crawling with structured data extraction.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Using with Extraction Strategies\n\nCombine page interaction with structured extraction:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy, LLMExtractionStrategy\n\n# Pattern-based extraction after interaction\nschema = {\n    \"name\": \"Dynamic Items\",\n    \"baseSelector\": \".item\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    wait_for=\"css:.item:nth-child(10)\",  # Wait for 10 items\n    extraction_strategy=JsonCssExtractionStrategy(schema)\n)\n\n# Or use LLM to analyze dynamic content\nclass ContentAnalysis(BaseModel):\n    topics: List[str]\n    summary: str\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"document.querySelector('.show-more').click();\",\n    wait_for=\"css:.full-content\",\n    extraction_strategy=LLMExtractionStrategy(\n        provider=\"ollama/nemotron\",\n        schema=ContentAnalysis.schema(),\n        instruction=\"Analyze the full content\"\n    )\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_id": 7,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "inheritance",
      "relationship_explanation": "ExtractionStrategy is the base class for JsonCssExtractionStrategy and LLMExtractionStrategy, which are explicitly used in the code examples.",
      "predicted_trace_chain": "page-interaction.md -> AsyncWebCrawler -> ExtractionStrategy",
      "predicted_trace_chain_explanation": "The document shows usage of specific extraction strategies, which inherit from the ExtractionStrategy base class used by AsyncWebCrawler.",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundational structure for the JsonCssExtractionStrategy and LLMExtractionStrategy implementations shown in the documentation through its abstract extract() method and parallel processing run() method.",
      "ground_truth_trace_chain": "page-interaction.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Using with Extraction Strategies\n\nCombine page interaction with structured extraction:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy, LLMExtractionStrategy\n\n# Pattern-based extraction after interaction\nschema = {\n    \"name\": \"Dynamic Items\",\n    \"baseSelector\": \".item\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    wait_for=\"css:.item:nth-child(10)\",  # Wait for 10 items\n    extraction_strategy=JsonCssExtractionStrategy(schema)\n)\n\n# Or use LLM to analyze dynamic content\nclass ContentAnalysis(BaseModel):\n    topics: List[str]\n    summary: str\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"document.querySelector('.show-more').click();\",\n    wait_for=\"css:.full-content\",\n    extraction_strategy=LLMExtractionStrategy(\n        provider=\"ollama/nemotron\",\n        schema=ContentAnalysis.schema(),\n        instruction=\"Analyze the full content\"\n    )\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods that enable the documented extraction strategies to perform crawling operations with custom behaviors like waiting for elements and executing JavaScript code.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Using with Extraction Strategies\n\nCombine page interaction with structured extraction:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy, LLMExtractionStrategy\n\n# Pattern-based extraction after interaction\nschema = {\n    \"name\": \"Dynamic Items\",\n    \"baseSelector\": \".item\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    wait_for=\"css:.item:nth-child(10)\",  # Wait for 10 items\n    extraction_strategy=JsonCssExtractionStrategy(schema)\n)\n\n# Or use LLM to analyze dynamic content\nclass ContentAnalysis(BaseModel):\n    topics: List[str]\n    summary: str\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"document.querySelector('.show-more').click();\",\n    wait_for=\"css:.full-content\",\n    extraction_strategy=LLMExtractionStrategy(\n        provider=\"ollama/nemotron\",\n        schema=ContentAnalysis.schema(),\n        instruction=\"Analyze the full content\"\n    )\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class defines the data structure that holds the extraction results shown in the documentation examples, with the extracted_content field specifically storing the output from both JsonCssExtractionStrategy and LLMExtractionStrategy operations.",
      "ground_truth_trace_chain": "page-interaction.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Using with Extraction Strategies\n\nCombine page interaction with structured extraction:\n\n```python\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy, LLMExtractionStrategy\n\n# Pattern-based extraction after interaction\nschema = {\n    \"name\": \"Dynamic Items\",\n    \"baseSelector\": \".item\",\n    \"fields\": [\n        {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n        {\"name\": \"description\", \"selector\": \".desc\", \"type\": \"text\"}\n    ]\n}\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"window.scrollTo(0, document.body.scrollHeight);\",\n    wait_for=\"css:.item:nth-child(10)\",  # Wait for 10 items\n    extraction_strategy=JsonCssExtractionStrategy(schema)\n)\n\n# Or use LLM to analyze dynamic content\nclass ContentAnalysis(BaseModel):\n    topics: List[str]\n    summary: str\n\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    js_code=\"document.querySelector('.show-more').click();\",\n    wait_for=\"css:.full-content\",\n    extraction_strategy=LLMExtractionStrategy(\n        provider=\"ollama/nemotron\",\n        schema=ContentAnalysis.schema(),\n        instruction=\"Analyze the full content\"\n    )\n)\n```",
      "document_location": "docs/md_v2/basic/page-interaction.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements browser automation for executing JavaScript code and waiting for elements, which directly enables the documented extraction strategies by providing the underlying mechanism to run js_code and handle wait_for conditions during page crawling.",
      "ground_truth_trace_chain": "page-interaction.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## CSS Selectors\n\nThe simplest way to extract specific content:\n\n```python\n# Extract specific content using CSS selector\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    css_selector=\".main-article\"  # Target main article content\n)\n\n# Multiple selectors\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    css_selector=\"article h1, article .content\"  # Target heading and content\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code examples to perform web crawling operations. It is instantiated and its arun() method is called to execute crawling tasks.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements CSS selector functionality in its arun() method through the css_selector parameter, which is passed to the WebScrappingStrategy's scrap() function to target specific HTML elements as shown in the documentation examples.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## CSS Selectors\n\nThe simplest way to extract specific content:\n\n```python\n# Extract specific content using CSS selector\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    css_selector=\".main-article\"  # Target main article content\n)\n\n# Multiple selectors\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    css_selector=\"article h1, article .content\"  # Target heading and content\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code examples to perform crawling operations with specific parameters such as URL and CSS selectors.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler, which leads to its arun() method being called. The chain reflects the class-method relationship.",
      "ground_truth_relationship": "The code implements CSS selector-based content extraction through the css_selector parameter in the arun method, which is passed through to the HTML processing logic to filter and extract specific elements from the crawled webpage.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## CSS Selectors\n\nThe simplest way to extract specific content:\n\n```python\n# Extract specific content using CSS selector\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    css_selector=\".main-article\"  # Target main article content\n)\n\n# Multiple selectors\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    css_selector=\"article h1, article .content\"  # Target heading and content\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "While not explicitly mentioned, the CrawlResult class is implicitly used as the return type of the arun() method calls in the code examples.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows usage of arun(), which implicitly returns a CrawlResult. The chain reflects the method call and its return type.",
      "ground_truth_relationship": "The CrawlResult class stores the extracted content from CSS selectors in its extracted_content field, enabling the targeted content extraction functionality described in the documentation.",
      "ground_truth_trace_chain": "content-selection.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## CSS Selectors\n\nThe simplest way to extract specific content:\n\n```python\n# Extract specific content using CSS selector\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    css_selector=\".main-article\"  # Target main article content\n)\n\n# Multiple selectors\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    css_selector=\"article h1, article .content\"  # Target heading and content\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface that enables CSS selector-based content extraction through its crawl method, which is demonstrated in the documentation examples.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## CSS Selectors\n\nThe simplest way to extract specific content:\n\n```python\n# Extract specific content using CSS selector\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    css_selector=\".main-article\"  # Target main article content\n)\n\n# Multiple selectors\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    css_selector=\"article h1, article .content\"  # Target heading and content\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements CSS selector functionality through its crawl method, which uses Playwright's page.wait_for_selector() to target and extract specific content elements as described in the documentation.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Tips for Advanced Usage\n\n1. **Start Simple**: Begin with a basic schema and gradually add complexity.\n2. **Test Incrementally**: Test each part of your schema separately before combining them.\n3. **Use Chrome DevTools**: The Element Inspector is invaluable for identifying the correct selectors.\n4. **Handle Missing Data**: Use the `default` key in your field definitions to handle cases where data might be missing.\n5. **Leverage Transforms**: Use the `transform` key to clean or format extracted data (e.g., converting prices to numbers).\n6. **Consider Performance**: Very complex schemas might slow down extraction. Balance complexity with performance needs.\n\nBy mastering these advanced techniques, you can use JsonCssExtractionStrategy to extract highly structured data from even the most complex web pages, making it a powerful tool for web scraping and data analysis tasks.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The text directly mentions JsonCssExtractionStrategy as a powerful tool for web scraping and data analysis tasks, demonstrating its advanced usage for extracting structured data from complex web pages.",
      "predicted_trace_chain": "css-advanced.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly discusses the advanced usage of JsonCssExtractionStrategy, so there are no intermediate steps.",
      "ground_truth_relationship": "The code implements a CSS-based data extraction strategy that directly supports the documented tips, particularly the 'Start Simple' and 'Test Incrementally' recommendations by allowing users to define and process schemas gradually through the schema parameter.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Tips for Advanced Usage\n\n1. **Start Simple**: Begin with a basic schema and gradually add complexity.\n2. **Test Incrementally**: Test each part of your schema separately before combining them.\n3. **Use Chrome DevTools**: The Element Inspector is invaluable for identifying the correct selectors.\n4. **Handle Missing Data**: Use the `default` key in your field definitions to handle cases where data might be missing.\n5. **Leverage Transforms**: Use the `transform` key to clean or format extracted data (e.g., converting prices to numbers).\n6. **Consider Performance**: Very complex schemas might slow down extraction. Balance complexity with performance needs.\n\nBy mastering these advanced techniques, you can use JsonCssExtractionStrategy to extract highly structured data from even the most complex web pages, making it a powerful tool for web scraping and data analysis tasks.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 22,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "inheritance",
      "relationship_explanation": "While not explicitly mentioned in the text, JsonCssExtractionStrategy is a type of ExtractionStrategy, implying an inheritance relationship.",
      "predicted_trace_chain": "css-advanced.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document discusses JsonCssExtractionStrategy, which inherits from ExtractionStrategy, forming a logical chain of inheritance.",
      "ground_truth_relationship": "The ExtractionStrategy base class implements the parallel processing functionality mentioned in the 'Consider Performance' tip by using ThreadPoolExecutor to handle complex data extraction tasks efficiently.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Tips for Advanced Usage\n\n1. **Start Simple**: Begin with a basic schema and gradually add complexity.\n2. **Test Incrementally**: Test each part of your schema separately before combining them.\n3. **Use Chrome DevTools**: The Element Inspector is invaluable for identifying the correct selectors.\n4. **Handle Missing Data**: Use the `default` key in your field definitions to handle cases where data might be missing.\n5. **Leverage Transforms**: Use the `transform` key to clean or format extracted data (e.g., converting prices to numbers).\n6. **Consider Performance**: Very complex schemas might slow down extraction. Balance complexity with performance needs.\n\nBy mastering these advanced techniques, you can use JsonCssExtractionStrategy to extract highly structured data from even the most complex web pages, making it a powerful tool for web scraping and data analysis tasks.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The text includes a usage example that demonstrates how to use AsyncWebCrawler with JsonCssExtractionStrategy for extracting complex product data.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document shows how to use AsyncWebCrawler with JsonCssExtractionStrategy, illustrating the connection between these components in the crawling process.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Tips for Advanced Usage\n\n1. **Start Simple**: Begin with a basic schema and gradually add complexity.\n2. **Test Incrementally**: Test each part of your schema separately before combining them.\n3. **Use Chrome DevTools**: The Element Inspector is invaluable for identifying the correct selectors.\n4. **Handle Missing Data**: Use the `default` key in your field definitions to handle cases where data might be missing.\n5. **Leverage Transforms**: Use the `transform` key to clean or format extracted data (e.g., converting prices to numbers).\n6. **Consider Performance**: Very complex schemas might slow down extraction. Balance complexity with performance needs.\n\nBy mastering these advanced techniques, you can use JsonCssExtractionStrategy to extract highly structured data from even the most complex web pages, making it a powerful tool for web scraping and data analysis tasks.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The text includes a code example that uses the arun() method of AsyncWebCrawler to execute the crawling process with the JsonCssExtractionStrategy.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document demonstrates using AsyncWebCrawler's arun() method to perform crawling with JsonCssExtractionStrategy, showing the flow of execution from the crawler to the extraction strategy.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Tips for Advanced Usage\n\n1. **Start Simple**: Begin with a basic schema and gradually add complexity.\n2. **Test Incrementally**: Test each part of your schema separately before combining them.\n3. **Use Chrome DevTools**: The Element Inspector is invaluable for identifying the correct selectors.\n4. **Handle Missing Data**: Use the `default` key in your field definitions to handle cases where data might be missing.\n5. **Leverage Transforms**: Use the `transform` key to clean or format extracted data (e.g., converting prices to numbers).\n6. **Consider Performance**: Very complex schemas might slow down extraction. Balance complexity with performance needs.\n\nBy mastering these advanced techniques, you can use JsonCssExtractionStrategy to extract highly structured data from even the most complex web pages, making it a powerful tool for web scraping and data analysis tasks.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The text includes a code example that uses the 'result' object returned by AsyncWebCrawler.arun(), which is implicitly a CrawlResult object. It accesses the 'success' and 'extracted_content' attributes of this object.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the use of AsyncWebCrawler.arun(), which returns a CrawlResult object, demonstrating the flow from the crawling operation to the result handling.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Link Analysis\n\nCrawl4AI provides sophisticated link analysis capabilities, helping you understand the relationship between pages and identify important navigation patterns.\n\n### Link Classification\nThe library automatically categorizes links into:\n- Internal links (same domain)\n- External links (different domains)\n- Social media links\n- Navigation links\n- Content links\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Analyze internal links\nfor link in result.links[\"internal\"]:\n    print(f\"Internal: {link['href']}\")\n    print(f\"Link text: {link['text']}\")\n    print(f\"Context: {link['context']}\")  # Surrounding text\n    print(f\"Type: {link['type']}\")  # nav, content, etc.\n\n# Analyze external links\nfor link in result.links[\"external\"]:\n    print(f\"External: {link['href']}\")\n    print(f\"Domain: {link['domain']}\")\n    print(f\"Type: {link['type']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "explicit",
      "relationship_type": "result_container",
      "relationship_explanation": "The CrawlResult class is explicitly mentioned in the documentation as the container for crawled data, including links and their classifications.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document describes using AsyncWebCrawler to perform crawling, which returns a CrawlResult object containing the analyzed data.",
      "ground_truth_relationship": "The CrawlResult class implements the documented link analysis functionality by storing categorized links in its 'links' dictionary field, where each link category (internal, external, social, etc.) contains a list of dictionaries with link metadata like href, text, context, and type.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Link Analysis\n\nCrawl4AI provides sophisticated link analysis capabilities, helping you understand the relationship between pages and identify important navigation patterns.\n\n### Link Classification\nThe library automatically categorizes links into:\n- Internal links (same domain)\n- External links (different domains)\n- Social media links\n- Navigation links\n- Content links\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Analyze internal links\nfor link in result.links[\"internal\"]:\n    print(f\"Internal: {link['href']}\")\n    print(f\"Link text: {link['text']}\")\n    print(f\"Context: {link['context']}\")  # Surrounding text\n    print(f\"Type: {link['type']}\")  # nav, content, etc.\n\n# Analyze external links\nfor link in result.links[\"external\"]:\n    print(f\"External: {link['href']}\")\n    print(f\"Domain: {link['domain']}\")\n    print(f\"Type: {link['type']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 14,
      "artifact_title": "CrawlResult.links",
      "predicted_relationship": "explicit",
      "relationship_type": "data_attribute",
      "relationship_explanation": "The links attribute of CrawlResult is explicitly used in the documentation to access different types of extracted links (internal, external).",
      "predicted_trace_chain": "content-processing.md -> CrawlResult -> CrawlResult.links",
      "predicted_trace_chain_explanation": "The document shows how to access the links attribute of the CrawlResult object returned by the crawler.",
      "ground_truth_relationship": "The links property of CrawlResult stores categorized link data as a dictionary where keys indicate link types (internal, external, social, etc.) and values are lists of link details like href, text, and context.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult.links",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Link Analysis\n\nCrawl4AI provides sophisticated link analysis capabilities, helping you understand the relationship between pages and identify important navigation patterns.\n\n### Link Classification\nThe library automatically categorizes links into:\n- Internal links (same domain)\n- External links (different domains)\n- Social media links\n- Navigation links\n- Content links\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Analyze internal links\nfor link in result.links[\"internal\"]:\n    print(f\"Internal: {link['href']}\")\n    print(f\"Link text: {link['text']}\")\n    print(f\"Context: {link['context']}\")  # Surrounding text\n    print(f\"Type: {link['type']}\")  # nav, content, etc.\n\n# Analyze external links\nfor link in result.links[\"external\"]:\n    print(f\"External: {link['href']}\")\n    print(f\"Domain: {link['domain']}\")\n    print(f\"Type: {link['type']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "crawler_class",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the documentation through the 'crawler' object in the code examples.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document implies the use of AsyncWebCrawler to perform the crawling operation and obtain the CrawlResult.",
      "ground_truth_relationship": "The AsyncWebCrawler code implements the documented link analysis by processing HTML content in the aprocess_html method, which extracts and classifies links into a structured format stored in the links dictionary, as shown in the documentation's code example.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Link Analysis\n\nCrawl4AI provides sophisticated link analysis capabilities, helping you understand the relationship between pages and identify important navigation patterns.\n\n### Link Classification\nThe library automatically categorizes links into:\n- Internal links (same domain)\n- External links (different domains)\n- Social media links\n- Navigation links\n- Content links\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Analyze internal links\nfor link in result.links[\"internal\"]:\n    print(f\"Internal: {link['href']}\")\n    print(f\"Link text: {link['text']}\")\n    print(f\"Context: {link['context']}\")  # Surrounding text\n    print(f\"Type: {link['type']}\")  # nav, content, etc.\n\n# Analyze external links\nfor link in result.links[\"external\"]:\n    print(f\"External: {link['href']}\")\n    print(f\"Domain: {link['domain']}\")\n    print(f\"Type: {link['type']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method_usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in the code examples to perform crawling operations.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly shows the usage of the arun() method to crawl URLs and obtain results.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method implements the core crawling functionality that powers the link analysis features by asynchronously fetching and processing web pages, returning a CrawlResult object that contains the categorized internal and external links described in the documentation.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Link Analysis\n\nCrawl4AI provides sophisticated link analysis capabilities, helping you understand the relationship between pages and identify important navigation patterns.\n\n### Link Classification\nThe library automatically categorizes links into:\n- Internal links (same domain)\n- External links (different domains)\n- Social media links\n- Navigation links\n- Content links\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Analyze internal links\nfor link in result.links[\"internal\"]:\n    print(f\"Internal: {link['href']}\")\n    print(f\"Link text: {link['text']}\")\n    print(f\"Context: {link['context']}\")  # Surrounding text\n    print(f\"Type: {link['type']}\")  # nav, content, etc.\n\n# Analyze external links\nfor link in result.links[\"external\"]:\n    print(f\"External: {link['href']}\")\n    print(f\"Domain: {link['domain']}\")\n    print(f\"Type: {link['type']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the foundational interface methods needed to implement the link analysis capabilities described in the documentation, including the crawl method that returns AsyncCrawlResponse objects containing categorized link data.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Link Analysis\n\nCrawl4AI provides sophisticated link analysis capabilities, helping you understand the relationship between pages and identify important navigation patterns.\n\n### Link Classification\nThe library automatically categorizes links into:\n- Internal links (same domain)\n- External links (different domains)\n- Social media links\n- Navigation links\n- Content links\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Analyze internal links\nfor link in result.links[\"internal\"]:\n    print(f\"Internal: {link['href']}\")\n    print(f\"Link text: {link['text']}\")\n    print(f\"Context: {link['context']}\")  # Surrounding text\n    print(f\"Type: {link['type']}\")  # nav, content, etc.\n\n# Analyze external links\nfor link in result.links[\"external\"]:\n    print(f\"External: {link['href']}\")\n    print(f\"Domain: {link['domain']}\")\n    print(f\"Type: {link['type']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements link analysis by crawling pages asynchronously and providing methods to extract and categorize internal, external, and social media links through Playwright's DOM manipulation capabilities.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Dynamic Content with Sessions\n\nHere's a real-world example of crawling GitHub commits across multiple pages:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        url = \"https://github.com/microsoft/TypeScript/commits/main\"\n        session_id = \"typescript_commits_session\"\n        all_commits = []\n\n        # Define navigation JavaScript\n        js_next_page = \"\"\"\n        const button = document.querySelector('a[data-testid=\"pagination-next-button\"]');\n        if (button) button.click();\n        \"\"\"\n\n        # Define wait condition\n        wait_for = \"\"\"() => {\n            const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4');\n            if (commits.length === 0) return false;\n            const firstCommit = commits[0].textContent.trim();\n            return firstCommit !== window.firstCommit;\n        }\"\"\"\n        \n        # Define extraction schema\n        schema = {\n            \"name\": \"Commit Extractor\",\n            \"baseSelector\": \"li.Box-sc-g0xbh4-0\",\n            \"fields\": [\n                {\n                    \"name\": \"title\",\n                    \"selector\": \"h4.markdown-title\",\n                    \"type\": \"text\",\n                    \"transform\": \"strip\",\n                },\n            ],\n        }\n        extraction_strategy = JsonCssExtractionStrategy(schema)\n\n        # Crawl multiple pages\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                extraction_strategy=extraction_strategy,\n                js_code=js_next_page if page > 0 else None,\n                wait_for=wait_for if page > 0 else None,\n                js_only=page > 0,\n                bypass_cache=True\n            )\n\n            if result.success:\n                commits = json.loads(result.extracted_content)\n                all_commits.extend(commits)\n                print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n        return all_commits\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to create a crawler instance for crawling GitHub commits.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The AsyncWebCrawler class enables dynamic content crawling through its arun() method which supports session-based browsing, JavaScript execution, and custom extraction strategies as demonstrated in the documentation's GitHub commits crawling example.",
      "ground_truth_trace_chain": "session-management.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Dynamic Content with Sessions\n\nHere's a real-world example of crawling GitHub commits across multiple pages:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        url = \"https://github.com/microsoft/TypeScript/commits/main\"\n        session_id = \"typescript_commits_session\"\n        all_commits = []\n\n        # Define navigation JavaScript\n        js_next_page = \"\"\"\n        const button = document.querySelector('a[data-testid=\"pagination-next-button\"]');\n        if (button) button.click();\n        \"\"\"\n\n        # Define wait condition\n        wait_for = \"\"\"() => {\n            const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4');\n            if (commits.length === 0) return false;\n            const firstCommit = commits[0].textContent.trim();\n            return firstCommit !== window.firstCommit;\n        }\"\"\"\n        \n        # Define extraction schema\n        schema = {\n            \"name\": \"Commit Extractor\",\n            \"baseSelector\": \"li.Box-sc-g0xbh4-0\",\n            \"fields\": [\n                {\n                    \"name\": \"title\",\n                    \"selector\": \"h4.markdown-title\",\n                    \"type\": \"text\",\n                    \"transform\": \"strip\",\n                },\n            ],\n        }\n        extraction_strategy = JsonCssExtractionStrategy(schema)\n\n        # Crawl multiple pages\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                extraction_strategy=extraction_strategy,\n                js_code=js_next_page if page > 0 else None,\n                wait_for=wait_for if page > 0 else None,\n                js_only=page > 0,\n                bypass_cache=True\n            )\n\n            if result.success:\n                commits = json.loads(result.extracted_content)\n                all_commits.extend(commits)\n                print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n        return all_commits\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called multiple times in the code example to crawl GitHub commit pages.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which contains the arun() method being called.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method provides the core functionality for executing dynamic web crawling with session management, implementing features like bypass_cache and session_id parameters that are demonstrated in the document's GitHub commits crawling example.",
      "ground_truth_trace_chain": "session-management.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Dynamic Content with Sessions\n\nHere's a real-world example of crawling GitHub commits across multiple pages:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        url = \"https://github.com/microsoft/TypeScript/commits/main\"\n        session_id = \"typescript_commits_session\"\n        all_commits = []\n\n        # Define navigation JavaScript\n        js_next_page = \"\"\"\n        const button = document.querySelector('a[data-testid=\"pagination-next-button\"]');\n        if (button) button.click();\n        \"\"\"\n\n        # Define wait condition\n        wait_for = \"\"\"() => {\n            const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4');\n            if (commits.length === 0) return false;\n            const firstCommit = commits[0].textContent.trim();\n            return firstCommit !== window.firstCommit;\n        }\"\"\"\n        \n        # Define extraction schema\n        schema = {\n            \"name\": \"Commit Extractor\",\n            \"baseSelector\": \"li.Box-sc-g0xbh4-0\",\n            \"fields\": [\n                {\n                    \"name\": \"title\",\n                    \"selector\": \"h4.markdown-title\",\n                    \"type\": \"text\",\n                    \"transform\": \"strip\",\n                },\n            ],\n        }\n        extraction_strategy = JsonCssExtractionStrategy(schema)\n\n        # Crawl multiple pages\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                extraction_strategy=extraction_strategy,\n                js_code=js_next_page if page > 0 else None,\n                wait_for=wait_for if page > 0 else None,\n                js_only=page > 0,\n                bypass_cache=True\n            )\n\n            if result.success:\n                commits = json.loads(result.extracted_content)\n                all_commits.extend(commits)\n                print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n        return all_commits\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 2,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The kill_session() method is explicitly called at the end of the crawling process to clean up the session.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which uses AsyncPlaywrightCrawlerStrategy as its default strategy, which contains the kill_session() method being called.",
      "ground_truth_relationship": "The kill_session method cleans up browser resources by closing the page and context objects stored in the sessions dictionary, which is demonstrated in the documentation's final step of the GitHub commit crawling example.",
      "ground_truth_trace_chain": "session-management.md -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Dynamic Content with Sessions\n\nHere's a real-world example of crawling GitHub commits across multiple pages:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        url = \"https://github.com/microsoft/TypeScript/commits/main\"\n        session_id = \"typescript_commits_session\"\n        all_commits = []\n\n        # Define navigation JavaScript\n        js_next_page = \"\"\"\n        const button = document.querySelector('a[data-testid=\"pagination-next-button\"]');\n        if (button) button.click();\n        \"\"\"\n\n        # Define wait condition\n        wait_for = \"\"\"() => {\n            const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4');\n            if (commits.length === 0) return false;\n            const firstCommit = commits[0].textContent.trim();\n            return firstCommit !== window.firstCommit;\n        }\"\"\"\n        \n        # Define extraction schema\n        schema = {\n            \"name\": \"Commit Extractor\",\n            \"baseSelector\": \"li.Box-sc-g0xbh4-0\",\n            \"fields\": [\n                {\n                    \"name\": \"title\",\n                    \"selector\": \"h4.markdown-title\",\n                    \"type\": \"text\",\n                    \"transform\": \"strip\",\n                },\n            ],\n        }\n        extraction_strategy = JsonCssExtractionStrategy(schema)\n\n        # Crawl multiple pages\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                extraction_strategy=extraction_strategy,\n                js_code=js_next_page if page > 0 else None,\n                wait_for=wait_for if page > 0 else None,\n                js_only=page > 0,\n                bypass_cache=True\n            )\n\n            if result.success:\n                commits = json.loads(result.extracted_content)\n                all_commits.extend(commits)\n                print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n        return all_commits\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly instantiated with a schema to extract commit information from the GitHub pages.",
      "predicted_trace_chain": "session-management.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of JsonCssExtractionStrategy, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements the schema-based extraction logic shown in the documentation by parsing HTML elements using BeautifulSoup and applying the defined selectors to extract commit data from GitHub's pages.",
      "ground_truth_trace_chain": "session-management.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Dynamic Content with Sessions\n\nHere's a real-world example of crawling GitHub commits across multiple pages:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        url = \"https://github.com/microsoft/TypeScript/commits/main\"\n        session_id = \"typescript_commits_session\"\n        all_commits = []\n\n        # Define navigation JavaScript\n        js_next_page = \"\"\"\n        const button = document.querySelector('a[data-testid=\"pagination-next-button\"]');\n        if (button) button.click();\n        \"\"\"\n\n        # Define wait condition\n        wait_for = \"\"\"() => {\n            const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4');\n            if (commits.length === 0) return false;\n            const firstCommit = commits[0].textContent.trim();\n            return firstCommit !== window.firstCommit;\n        }\"\"\"\n        \n        # Define extraction schema\n        schema = {\n            \"name\": \"Commit Extractor\",\n            \"baseSelector\": \"li.Box-sc-g0xbh4-0\",\n            \"fields\": [\n                {\n                    \"name\": \"title\",\n                    \"selector\": \"h4.markdown-title\",\n                    \"type\": \"text\",\n                    \"transform\": \"strip\",\n                },\n            ],\n        }\n        extraction_strategy = JsonCssExtractionStrategy(schema)\n\n        # Crawl multiple pages\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                extraction_strategy=extraction_strategy,\n                js_code=js_next_page if page > 0 else None,\n                wait_for=wait_for if page > 0 else None,\n                js_only=page > 0,\n                bypass_cache=True\n            )\n\n            if result.success:\n                commits = json.loads(result.extracted_content)\n                all_commits.extend(commits)\n                print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n        return all_commits\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of the arun() method, accessed through the 'result' variable in the code example.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult object, implicitly used in the code.",
      "ground_truth_relationship": "The CrawlResult model stores the extracted commits and session data from the GitHub crawling example by providing fields like 'extracted_content' for the commit data and 'session_id' for tracking the TypeScript commits session.",
      "ground_truth_trace_chain": "session-management.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Dynamic Content with Sessions\n\nHere's a real-world example of crawling GitHub commits across multiple pages:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        url = \"https://github.com/microsoft/TypeScript/commits/main\"\n        session_id = \"typescript_commits_session\"\n        all_commits = []\n\n        # Define navigation JavaScript\n        js_next_page = \"\"\"\n        const button = document.querySelector('a[data-testid=\"pagination-next-button\"]');\n        if (button) button.click();\n        \"\"\"\n\n        # Define wait condition\n        wait_for = \"\"\"() => {\n            const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4');\n            if (commits.length === 0) return false;\n            const firstCommit = commits[0].textContent.trim();\n            return firstCommit !== window.firstCommit;\n        }\"\"\"\n        \n        # Define extraction schema\n        schema = {\n            \"name\": \"Commit Extractor\",\n            \"baseSelector\": \"li.Box-sc-g0xbh4-0\",\n            \"fields\": [\n                {\n                    \"name\": \"title\",\n                    \"selector\": \"h4.markdown-title\",\n                    \"type\": \"text\",\n                    \"transform\": \"strip\",\n                },\n            ],\n        }\n        extraction_strategy = JsonCssExtractionStrategy(schema)\n\n        # Crawl multiple pages\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                extraction_strategy=extraction_strategy,\n                js_code=js_next_page if page > 0 else None,\n                wait_for=wait_for if page > 0 else None,\n                js_only=page > 0,\n                bypass_cache=True\n            )\n\n            if result.success:\n                commits = json.loads(result.extracted_content)\n                all_commits.extend(commits)\n                print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n        return all_commits\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is implicitly used when parsing the JSON content of the crawl result.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult object, whose extracted_content attribute is accessed in the code.",
      "ground_truth_relationship": "The extracted_content field stores the scraped GitHub commit data as a JSON string, which is then parsed and accumulated into the all_commits list during the pagination process.",
      "ground_truth_trace_chain": "session-management.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Dynamic Content with Sessions\n\nHere's a real-world example of crawling GitHub commits across multiple pages:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        url = \"https://github.com/microsoft/TypeScript/commits/main\"\n        session_id = \"typescript_commits_session\"\n        all_commits = []\n\n        # Define navigation JavaScript\n        js_next_page = \"\"\"\n        const button = document.querySelector('a[data-testid=\"pagination-next-button\"]');\n        if (button) button.click();\n        \"\"\"\n\n        # Define wait condition\n        wait_for = \"\"\"() => {\n            const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4');\n            if (commits.length === 0) return false;\n            const firstCommit = commits[0].textContent.trim();\n            return firstCommit !== window.firstCommit;\n        }\"\"\"\n        \n        # Define extraction schema\n        schema = {\n            \"name\": \"Commit Extractor\",\n            \"baseSelector\": \"li.Box-sc-g0xbh4-0\",\n            \"fields\": [\n                {\n                    \"name\": \"title\",\n                    \"selector\": \"h4.markdown-title\",\n                    \"type\": \"text\",\n                    \"transform\": \"strip\",\n                },\n            ],\n        }\n        extraction_strategy = JsonCssExtractionStrategy(schema)\n\n        # Crawl multiple pages\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                extraction_strategy=extraction_strategy,\n                js_code=js_next_page if page > 0 else None,\n                wait_for=wait_for if page > 0 else None,\n                js_only=page > 0,\n                bypass_cache=True\n            )\n\n            if result.success:\n                commits = json.loads(result.extracted_content)\n                all_commits.extend(commits)\n                print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n        return all_commits\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The success attribute of CrawlResult is implicitly used in the if condition to check if the crawl was successful.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows the usage of arun(), which returns a CrawlResult object, whose success attribute is checked in the code.",
      "ground_truth_relationship": "The CrawlResult.success boolean property is used in the documentation example to verify if commit extraction was successful before appending the commits to all_commits list.",
      "ground_truth_trace_chain": "session-management.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Dynamic Content with Sessions\n\nHere's a real-world example of crawling GitHub commits across multiple pages:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        url = \"https://github.com/microsoft/TypeScript/commits/main\"\n        session_id = \"typescript_commits_session\"\n        all_commits = []\n\n        # Define navigation JavaScript\n        js_next_page = \"\"\"\n        const button = document.querySelector('a[data-testid=\"pagination-next-button\"]');\n        if (button) button.click();\n        \"\"\"\n\n        # Define wait condition\n        wait_for = \"\"\"() => {\n            const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4');\n            if (commits.length === 0) return false;\n            const firstCommit = commits[0].textContent.trim();\n            return firstCommit !== window.firstCommit;\n        }\"\"\"\n        \n        # Define extraction schema\n        schema = {\n            \"name\": \"Commit Extractor\",\n            \"baseSelector\": \"li.Box-sc-g0xbh4-0\",\n            \"fields\": [\n                {\n                    \"name\": \"title\",\n                    \"selector\": \"h4.markdown-title\",\n                    \"type\": \"text\",\n                    \"transform\": \"strip\",\n                },\n            ],\n        }\n        extraction_strategy = JsonCssExtractionStrategy(schema)\n\n        # Crawl multiple pages\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                extraction_strategy=extraction_strategy,\n                js_code=js_next_page if page > 0 else None,\n                wait_for=wait_for if page > 0 else None,\n                js_only=page > 0,\n                bypass_cache=True\n            )\n\n            if result.success:\n                commits = json.loads(result.extracted_content)\n                all_commits.extend(commits)\n                print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n        return all_commits\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundational structure that enables the JsonCssExtractionStrategy used in the documentation to extract commit information from GitHub pages through a unified interface.",
      "ground_truth_trace_chain": "session-management.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Dynamic Content with Sessions\n\nHere's a real-world example of crawling GitHub commits across multiple pages:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        url = \"https://github.com/microsoft/TypeScript/commits/main\"\n        session_id = \"typescript_commits_session\"\n        all_commits = []\n\n        # Define navigation JavaScript\n        js_next_page = \"\"\"\n        const button = document.querySelector('a[data-testid=\"pagination-next-button\"]');\n        if (button) button.click();\n        \"\"\"\n\n        # Define wait condition\n        wait_for = \"\"\"() => {\n            const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4');\n            if (commits.length === 0) return false;\n            const firstCommit = commits[0].textContent.trim();\n            return firstCommit !== window.firstCommit;\n        }\"\"\"\n        \n        # Define extraction schema\n        schema = {\n            \"name\": \"Commit Extractor\",\n            \"baseSelector\": \"li.Box-sc-g0xbh4-0\",\n            \"fields\": [\n                {\n                    \"name\": \"title\",\n                    \"selector\": \"h4.markdown-title\",\n                    \"type\": \"text\",\n                    \"transform\": \"strip\",\n                },\n            ],\n        }\n        extraction_strategy = JsonCssExtractionStrategy(schema)\n\n        # Crawl multiple pages\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                extraction_strategy=extraction_strategy,\n                js_code=js_next_page if page > 0 else None,\n                wait_for=wait_for if page > 0 else None,\n                js_only=page > 0,\n                bypass_cache=True\n            )\n\n            if result.success:\n                commits = json.loads(result.extracted_content)\n                all_commits.extend(commits)\n                print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n        return all_commits\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the session management and page navigation logic required to support the dynamic content crawling example, including handling session_id persistence and executing JavaScript for next page navigation.",
      "ground_truth_trace_chain": "session-management.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Dynamic Content with Sessions\n\nHere's a real-world example of crawling GitHub commits across multiple pages:\n\n```python\nasync def crawl_dynamic_content():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        url = \"https://github.com/microsoft/TypeScript/commits/main\"\n        session_id = \"typescript_commits_session\"\n        all_commits = []\n\n        # Define navigation JavaScript\n        js_next_page = \"\"\"\n        const button = document.querySelector('a[data-testid=\"pagination-next-button\"]');\n        if (button) button.click();\n        \"\"\"\n\n        # Define wait condition\n        wait_for = \"\"\"() => {\n            const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4');\n            if (commits.length === 0) return false;\n            const firstCommit = commits[0].textContent.trim();\n            return firstCommit !== window.firstCommit;\n        }\"\"\"\n        \n        # Define extraction schema\n        schema = {\n            \"name\": \"Commit Extractor\",\n            \"baseSelector\": \"li.Box-sc-g0xbh4-0\",\n            \"fields\": [\n                {\n                    \"name\": \"title\",\n                    \"selector\": \"h4.markdown-title\",\n                    \"type\": \"text\",\n                    \"transform\": \"strip\",\n                },\n            ],\n        }\n        extraction_strategy = JsonCssExtractionStrategy(schema)\n\n        # Crawl multiple pages\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                extraction_strategy=extraction_strategy,\n                js_code=js_next_page if page > 0 else None,\n                wait_for=wait_for if page > 0 else None,\n                js_only=page > 0,\n                bypass_cache=True\n            )\n\n            if result.success:\n                commits = json.loads(result.extracted_content)\n                all_commits.extend(commits)\n                print(f\"Page {page + 1}: Found {len(commits)} commits\")\n\n        # Clean up session\n        await crawler.crawler_strategy.kill_session(session_id)\n        return all_commits\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods that enable dynamic session-based crawling operations demonstrated in the documentation example, particularly through its crawl method which is used to navigate through GitHub's paginated commit history.",
      "ground_truth_trace_chain": "session-management.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# Advanced Usage of JsonCssExtractionStrategy\n\nWhile the basic usage of JsonCssExtractionStrategy is powerful for simple structures, its true potential shines when dealing with complex, nested HTML structures. This section will explore advanced usage scenarios, demonstrating how to extract nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly mentioned and discussed in detail throughout the text. It is the main focus of the advanced usage explanation, demonstrating how to use it for extracting complex, nested HTML structures.",
      "predicted_trace_chain": "css-advanced.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly discusses and demonstrates the usage of JsonCssExtractionStrategy, so there are no intermediate steps.",
      "ground_truth_relationship": "The code implements JsonCssExtractionStrategy class that recursively processes HTML data using BeautifulSoup and schema-based selectors, enabling the advanced nested extraction capabilities described in the documentation.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Advanced Usage of JsonCssExtractionStrategy\n\nWhile the basic usage of JsonCssExtractionStrategy is powerful for simple structures, its true potential shines when dealing with complex, nested HTML structures. This section will explore advanced usage scenarios, demonstrating how to extract nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly mentioned in the usage example. It is used to demonstrate how to apply the JsonCssExtractionStrategy for crawling and extracting data from a web page.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly shows how to use AsyncWebCrawler with JsonCssExtractionStrategy, so there are no intermediate steps.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Advanced Usage of JsonCssExtractionStrategy\n\nWhile the basic usage of JsonCssExtractionStrategy is powerful for simple structures, its true potential shines when dealing with complex, nested HTML structures. This section will explore advanced usage scenarios, demonstrating how to extract nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in the code example to perform the crawling and extraction process using the defined schema and JsonCssExtractionStrategy.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which leads to the use of its arun() method for executing the crawl.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Advanced Usage of JsonCssExtractionStrategy\n\nWhile the basic usage of JsonCssExtractionStrategy is powerful for simple structures, its true potential shines when dealing with complex, nested HTML structures. This section will explore advanced usage scenarios, demonstrating how to extract nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The CrawlResult class is implicitly used in the code example. The result of the arun() method is assumed to be a CrawlResult object, as evidenced by accessing its 'success' and 'extracted_content' attributes.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult object, leading to the implicit use of CrawlResult.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Advanced Usage of JsonCssExtractionStrategy\n\nWhile the basic usage of JsonCssExtractionStrategy is powerful for simple structures, its true potential shines when dealing with complex, nested HTML structures. This section will explore advanced usage scenarios, demonstrating how to extract nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The 'success' attribute of CrawlResult is implicitly used in the code example to check if the crawling process was successful.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult object, leading to the implicit use of its 'success' attribute.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Advanced Usage of JsonCssExtractionStrategy\n\nWhile the basic usage of JsonCssExtractionStrategy is powerful for simple structures, its true potential shines when dealing with complex, nested HTML structures. This section will explore advanced usage scenarios, demonstrating how to extract nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The 'extracted_content' attribute of CrawlResult is implicitly used in the code example to access the extracted data after the crawling process.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult object, leading to the implicit use of its 'extracted_content' attribute.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Advanced Usage of JsonCssExtractionStrategy\n\nWhile the basic usage of JsonCssExtractionStrategy is powerful for simple structures, its true potential shines when dealing with complex, nested HTML structures. This section will explore advanced usage scenarios, demonstrating how to extract nested objects, lists, and nested lists.",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 22,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "inheritance",
      "relationship_explanation": "The ExtractionStrategy class is the base class for JsonCssExtractionStrategy, which is the main focus of the document. While not explicitly mentioned, it is implicitly related as the parent class.",
      "predicted_trace_chain": "css-advanced.md -> JsonCssExtractionStrategy -> ExtractionStrategy",
      "predicted_trace_chain_explanation": "The document focuses on JsonCssExtractionStrategy, which inherits from ExtractionStrategy, establishing the implicit relationship.",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundational architecture for implementing the JsonCssExtractionStrategy mentioned in the documentation by defining abstract methods and parallel processing capabilities that enable extraction of complex nested structures.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Filtering\n\nControl what content is included or excluded:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    # Content thresholds\n    word_count_threshold=10,        # Minimum words per block\n    \n    # Tag exclusions\n    excluded_tags=['form', 'header', 'footer', 'nav'],\n    \n    # Link filtering\n    exclude_external_links=True,    # Remove external links\n    exclude_social_media_links=True,  # Remove social media links\n    \n    # Media filtering\n    exclude_external_images=True   # Remove external images\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to perform web crawling operations. It is instantiated and its 'arun' method is called to execute the crawling process.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document describes usage of AsyncWebCrawler, which leads to its 'arun' method being called to perform the actual crawling operation.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements content filtering through its arun method by accepting parameters like word_count_threshold, excluded_tags, and various exclusion flags that control what content gets included in the final crawl result.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Filtering\n\nControl what content is included or excluded:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    # Content thresholds\n    word_count_threshold=10,        # Minimum words per block\n    \n    # Tag exclusions\n    excluded_tags=['form', 'header', 'footer', 'nav'],\n    \n    # Link filtering\n    exclude_external_links=True,    # Remove external links\n    exclude_social_media_links=True,  # Remove social media links\n    \n    # Media filtering\n    exclude_external_images=True   # Remove external images\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The 'arun' method of AsyncWebCrawler is explicitly called in the code examples to perform web crawling with various content filtering options. It is used with parameters like word_count_threshold, excluded_tags, and various exclusion flags.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of the 'arun' method, which is a key method of AsyncWebCrawler for executing crawl operations.",
      "ground_truth_relationship": "The documented content filtering parameters like word_count_threshold, excluded_tags, and link filtering options are implemented as optional kwargs in the arun() method and processed during HTML extraction and processing stages of the crawler.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Filtering\n\nControl what content is included or excluded:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    # Content thresholds\n    word_count_threshold=10,        # Minimum words per block\n    \n    # Tag exclusions\n    excluded_tags=['form', 'header', 'footer', 'nav'],\n    \n    # Link filtering\n    exclude_external_links=True,    # Remove external links\n    exclude_social_media_links=True,  # Remove social media links\n    \n    # Media filtering\n    exclude_external_images=True   # Remove external images\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "While not explicitly mentioned, the CrawlResult class is implicitly used as the return type of the 'arun' method. The code examples show accessing properties like 'extracted_content' and 'media', which are likely part of the CrawlResult structure.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler.arun(), which returns a result that is likely an instance of CrawlResult, as evidenced by accessing its properties.",
      "ground_truth_relationship": "The CrawlResult class provides storage for filtered content by defining fields like cleaned_html, links, and media that hold the results after applying the documented content filtering parameters like excluded_tags and link filtering options.",
      "ground_truth_trace_chain": "content-selection.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Filtering\n\nControl what content is included or excluded:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    # Content thresholds\n    word_count_threshold=10,        # Minimum words per block\n    \n    # Tag exclusions\n    excluded_tags=['form', 'header', 'footer', 'nav'],\n    \n    # Link filtering\n    exclude_external_links=True,    # Remove external links\n    exclude_social_media_links=True,  # Remove social media links\n    \n    # Media filtering\n    exclude_external_images=True   # Remove external images\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The 'extracted_content' attribute of CrawlResult is implicitly used in the code examples. It is accessed to retrieve the extracted content after crawling, which is then parsed as JSON.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows the result of crawling being used to access the extracted_content, which is a property of CrawlResult returned by arun().",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Filtering\n\nControl what content is included or excluded:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    # Content thresholds\n    word_count_threshold=10,        # Minimum words per block\n    \n    # Tag exclusions\n    excluded_tags=['form', 'header', 'footer', 'nav'],\n    \n    # Link filtering\n    exclude_external_links=True,    # Remove external links\n    exclude_social_media_links=True,  # Remove social media links\n    \n    # Media filtering\n    exclude_external_images=True   # Remove external images\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 16,
      "artifact_title": "CrawlResult.media",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The 'media' attribute of CrawlResult is implicitly used in the code examples. It is accessed to retrieve different types of media (images, videos, audios) extracted during crawling.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.media",
      "predicted_trace_chain_explanation": "The document demonstrates accessing the media property of the crawl result, which is part of the CrawlResult structure returned by arun().",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Filtering\n\nControl what content is included or excluded:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    # Content thresholds\n    word_count_threshold=10,        # Minimum words per block\n    \n    # Tag exclusions\n    excluded_tags=['form', 'header', 'footer', 'nav'],\n    \n    # Link filtering\n    exclude_external_links=True,    # Remove external links\n    exclude_social_media_links=True,  # Remove social media links\n    \n    # Media filtering\n    exclude_external_images=True   # Remove external images\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "alternative",
      "relationship_explanation": "While not directly mentioned, the CosineStrategy is an implicit alternative to the extraction strategies demonstrated in the document. It's part of the available extraction strategies in crawl4ai.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler.arun() -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document shows usage of extraction strategies with AsyncWebCrawler.arun(). CosineStrategy is an available strategy that could be used in a similar manner, though not explicitly shown.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Filtering\n\nControl what content is included or excluded:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    # Content thresholds\n    word_count_threshold=10,        # Minimum words per block\n    \n    # Tag exclusions\n    excluded_tags=['form', 'header', 'footer', 'nav'],\n    \n    # Link filtering\n    exclude_external_links=True,    # Remove external links\n    exclude_social_media_links=True,  # Remove social media links\n    \n    # Media filtering\n    exclude_external_images=True   # Remove external images\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The JsonCssExtractionStrategy class is explicitly used in the code examples for pattern-based content selection. It is instantiated with a schema defining the structure of the content to be extracted.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler.arun() -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly demonstrates creating an instance of JsonCssExtractionStrategy and using it with AsyncWebCrawler.arun() for structured content extraction.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Filtering\n\nControl what content is included or excluded:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    # Content thresholds\n    word_count_threshold=10,        # Minimum words per block\n    \n    # Tag exclusions\n    excluded_tags=['form', 'header', 'footer', 'nav'],\n    \n    # Link filtering\n    exclude_external_links=True,    # Remove external links\n    exclude_social_media_links=True,  # Remove social media links\n    \n    # Media filtering\n    exclude_external_images=True   # Remove external images\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 24,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The LLMExtractionStrategy class is explicitly used in the code examples for LLM-based content extraction. It is instantiated with parameters specifying the LLM provider, schema, and instructions for content extraction.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler.arun() -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly shows creating an instance of LLMExtractionStrategy and using it with AsyncWebCrawler.arun() for intelligent content extraction using LLMs.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Content Filtering\n\nControl what content is included or excluded:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    # Content thresholds\n    word_count_threshold=10,        # Minimum words per block\n    \n    # Tag exclusions\n    excluded_tags=['form', 'header', 'footer', 'nav'],\n    \n    # Link filtering\n    exclude_external_links=True,    # Remove external links\n    exclude_social_media_links=True,  # Remove social media links\n    \n    # Media filtering\n    exclude_external_images=True   # Remove external images\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the interface through which the documented content filtering parameters can be passed as kwargs to the crawl method.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Content Filtering\n\nControl what content is included or excluded:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    # Content thresholds\n    word_count_threshold=10,        # Minimum words per block\n    \n    # Tag exclusions\n    excluded_tags=['form', 'header', 'footer', 'nav'],\n    \n    # Link filtering\n    exclude_external_links=True,    # Remove external links\n    exclude_social_media_links=True,  # Remove social media links\n    \n    # Media filtering\n    exclude_external_images=True   # Remove external images\n)\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements content filtering by accepting configuration parameters like excluded_tags and thresholds that control what elements are included or excluded during web page crawling.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### FixedLengthWordChunking\n\n`FixedLengthWordChunking` splits text into chunks based on a fixed number of words. This ensures each chunk has approximately the same length.\n\n#### When to Use\n- Suitable for processing large texts where uniform chunk size is important.\n- Useful when the number of words per chunk needs to be controlled.\n\n#### Parameters\n- `chunk_size` (int, optional): Number of words per chunk. Default is `100`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import FixedLengthWordChunking\n\nchunker = FixedLengthWordChunking(chunk_size=10)\n\n# Sample text\ntext = \"This is a sample text. It will be split into chunks of fixed length.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 22,
      "artifact_title": "FixedLengthWordChunking",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The FixedLengthWordChunking class is explicitly mentioned and described in the documentation. It is a chunking strategy that splits text into chunks based on a fixed number of words.",
      "predicted_trace_chain": "chunking.md -> ChunkingStrategy -> FixedLengthWordChunking",
      "predicted_trace_chain_explanation": "The document describes FixedLengthWordChunking, which is a specific implementation of the ChunkingStrategy abstract base class.",
      "ground_truth_relationship": "The code implements the documented chunking strategy by splitting input text into word tokens and using list slicing with the chunk_size parameter to create fixed-length segments joined back into strings.",
      "ground_truth_trace_chain": "chunking.md -> ChunkingStrategy -> FixedLengthWordChunking",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### FixedLengthWordChunking\n\n`FixedLengthWordChunking` splits text into chunks based on a fixed number of words. This ensures each chunk has approximately the same length.\n\n#### When to Use\n- Suitable for processing large texts where uniform chunk size is important.\n- Useful when the number of words per chunk needs to be controlled.\n\n#### Parameters\n- `chunk_size` (int, optional): Number of words per chunk. Default is `100`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import FixedLengthWordChunking\n\nchunker = FixedLengthWordChunking(chunk_size=10)\n\n# Sample text\ntext = \"This is a sample text. It will be split into chunks of fixed length.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 6,
      "artifact_title": "ChunkingStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "While not explicitly mentioned, ChunkingStrategy is the implied base class for FixedLengthWordChunking, as it is part of the chunking strategy hierarchy in Crawl4AI.",
      "predicted_trace_chain": "chunking.md -> ChunkingStrategy -> FixedLengthWordChunking",
      "predicted_trace_chain_explanation": "ChunkingStrategy is the abstract base class that FixedLengthWordChunking would inherit from, based on the pattern of other chunking strategies in Crawl4AI.",
      "ground_truth_relationship": "The abstract ChunkingStrategy class serves as the base interface that FixedLengthWordChunking implements to provide word-based text chunking functionality.",
      "ground_truth_trace_chain": "chunking.md -> ChunkingStrategy -> ChunkingStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### FixedLengthWordChunking\n\n`FixedLengthWordChunking` splits text into chunks based on a fixed number of words. This ensures each chunk has approximately the same length.\n\n#### When to Use\n- Suitable for processing large texts where uniform chunk size is important.\n- Useful when the number of words per chunk needs to be controlled.\n\n#### Parameters\n- `chunk_size` (int, optional): Number of words per chunk. Default is `100`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import FixedLengthWordChunking\n\nchunker = FixedLengthWordChunking(chunk_size=10)\n\n# Sample text\ntext = \"This is a sample text. It will be split into chunks of fixed length.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 22,
      "artifact_title": "FixedLengthWordChunking.__init__()",
      "predicted_relationship": "implicit",
      "relationship_type": "configuration",
      "relationship_explanation": "The documentation mentions a 'chunk_size' parameter, which implies the existence of an __init__ method that takes this parameter to configure the chunking strategy.",
      "predicted_trace_chain": "chunking.md -> FixedLengthWordChunking -> FixedLengthWordChunking.__init__()",
      "predicted_trace_chain_explanation": "The document describes the parameter for FixedLengthWordChunking, which would be set in the __init__ method of the class.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### FixedLengthWordChunking\n\n`FixedLengthWordChunking` splits text into chunks based on a fixed number of words. This ensures each chunk has approximately the same length.\n\n#### When to Use\n- Suitable for processing large texts where uniform chunk size is important.\n- Useful when the number of words per chunk needs to be controlled.\n\n#### Parameters\n- `chunk_size` (int, optional): Number of words per chunk. Default is `100`.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import FixedLengthWordChunking\n\nchunker = FixedLengthWordChunking(chunk_size=10)\n\n# Sample text\ntext = \"This is a sample text. It will be split into chunks of fixed length.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 22,
      "artifact_title": "FixedLengthWordChunking.chunk()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The chunk() method is explicitly used in the example provided in the documentation, demonstrating how to split text into chunks using this strategy.",
      "predicted_trace_chain": "chunking.md -> FixedLengthWordChunking -> FixedLengthWordChunking.chunk()",
      "predicted_trace_chain_explanation": "The document provides an example of using the chunk() method of FixedLengthWordChunking to process text.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "explicit",
      "relationship_type": "return type",
      "relationship_explanation": "The text explicitly states that the arun() method returns a CrawlResult object: 'The `arun()` method returns a `CrawlResult` object with several useful properties.'",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document discusses the AsyncWebCrawler's arun() method, which returns a CrawlResult object. The chain shows the flow from documentation to the crawler class to the result object.",
      "ground_truth_relationship": "The CrawlResult class defines all the properties demonstrated in the documentation example through type-annotated fields, including html, cleaned_html, markdown, fit_markdown, success, status_code, media, and links.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 13,
      "artifact_title": "CrawlResult.html",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The text explicitly shows accessing the html attribute of CrawlResult: 'print(result.html)         # Raw HTML'",
      "predicted_trace_chain": "simple-crawling.md -> CrawlResult -> CrawlResult.html",
      "predicted_trace_chain_explanation": "The document discusses the CrawlResult object, which contains the html attribute. The chain shows the flow from documentation to the result object to its specific attribute.",
      "ground_truth_relationship": "The code defines a string property 'html' that stores the raw HTML content mentioned in the documentation's overview of CrawlResult properties.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.html",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 9,
      "artifact_title": "CrawlResult.cleaned_html",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The text explicitly shows accessing the cleaned_html attribute of CrawlResult: 'print(result.cleaned_html) # Cleaned HTML'",
      "predicted_trace_chain": "simple-crawling.md -> CrawlResult -> CrawlResult.cleaned_html",
      "predicted_trace_chain_explanation": "The document discusses the CrawlResult object, which contains the cleaned_html attribute. The chain shows the flow from documentation to the result object to its specific attribute.",
      "ground_truth_relationship": "The CrawlResult class defines cleaned_html as an optional string property that stores the sanitized version of the webpage's HTML content after processing.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.cleaned_html",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The text explicitly shows accessing the markdown attribute of CrawlResult: 'print(result.markdown)     # Markdown version'",
      "predicted_trace_chain": "simple-crawling.md -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The document discusses the CrawlResult object, which contains the markdown attribute. The chain shows the flow from documentation to the result object to its specific attribute.",
      "ground_truth_relationship": "The CrawlResult class includes a markdown property that stores the converted Markdown representation of the crawled webpage content, which can be accessed through result.markdown as shown in the documentation example.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 12,
      "artifact_title": "CrawlResult.fit_markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The text explicitly shows accessing the fit_markdown attribute of CrawlResult: 'print(result.fit_markdown) # Most relevant content in markdown'",
      "predicted_trace_chain": "simple-crawling.md -> CrawlResult -> CrawlResult.fit_markdown",
      "predicted_trace_chain_explanation": "The document discusses the CrawlResult object, which contains the fit_markdown attribute. The chain shows the flow from documentation to the result object to its specific attribute.",
      "ground_truth_relationship": "The fit_markdown property in CrawlResult stores an optional string containing only the most relevant content of a crawled webpage in markdown format.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.fit_markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The text explicitly shows accessing the success attribute of CrawlResult: 'print(result.success)      # True if crawl succeeded'",
      "predicted_trace_chain": "simple-crawling.md -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document discusses the CrawlResult object, which contains the success attribute. The chain shows the flow from documentation to the result object to its specific attribute.",
      "ground_truth_relationship": "The CrawlResult.success property is implemented as a boolean field that indicates whether a web crawl operation completed successfully, as shown in the documentation's example where it can be checked via result.success.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.success",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 19,
      "artifact_title": "CrawlResult.status_code",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The text explicitly shows accessing the status_code attribute of CrawlResult: 'print(result.status_code)  # HTTP status code (e.g., 200, 404)'",
      "predicted_trace_chain": "simple-crawling.md -> CrawlResult -> CrawlResult.status_code",
      "predicted_trace_chain_explanation": "The document discusses the CrawlResult object, which contains the status_code attribute. The chain shows the flow from documentation to the result object to its specific attribute.",
      "ground_truth_relationship": "The CrawlResult's status_code property, implemented as an Optional[int], stores the HTTP status code from the web request which the documentation shows being used to verify successful crawls through print statements.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.status_code",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 16,
      "artifact_title": "CrawlResult.media",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The text explicitly shows accessing the media attribute of CrawlResult: 'print(result.media)        # Dictionary of found media (images, videos, audio)'",
      "predicted_trace_chain": "simple-crawling.md -> CrawlResult -> CrawlResult.media",
      "predicted_trace_chain_explanation": "The document discusses the CrawlResult object, which contains the media attribute. The chain shows the flow from documentation to the result object to its specific attribute.",
      "ground_truth_relationship": "The code defines an empty dictionary property 'media' that will store lists of media elements (images, videos, audio) extracted during crawling, which directly implements the media property shown in the documentation example.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.media",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 14,
      "artifact_title": "CrawlResult.links",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The text explicitly shows accessing the links attribute of CrawlResult: 'print(result.links)        # Dictionary of internal and external links'",
      "predicted_trace_chain": "simple-crawling.md -> CrawlResult -> CrawlResult.links",
      "predicted_trace_chain_explanation": "The document discusses the CrawlResult object, which contains the links attribute. The chain shows the flow from documentation to the result object to its specific attribute.",
      "ground_truth_relationship": "The code implements a dictionary property that stores both internal and external links found during crawling, which is documented as an accessible property of the CrawlResult object.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.links",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The text implicitly uses the AsyncWebCrawler class in the code example: 'async with AsyncWebCrawler() as crawler:'",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document demonstrates the usage of AsyncWebCrawler. The chain shows the direct connection from the documentation to the crawler class.",
      "ground_truth_relationship": "The `arun()` method returns a CrawlResult object containing the documented properties like html, cleaned_html, markdown, fit_markdown, success, status_code, media and links, which are populated during the web crawling and processing pipeline.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The text implicitly uses the arun() method of AsyncWebCrawler in the code example: 'result = await crawler.arun(url=\"https://example.com\")'",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document demonstrates the usage of AsyncWebCrawler's arun() method. The chain shows the flow from documentation to the crawler class to its specific method.",
      "ground_truth_relationship": "The arun() method implementation directly returns a CrawlResult object containing all the documented properties like html, cleaned_html, markdown, success, status_code, media and links by processing the crawled webpage content through various extraction and chunking strategies.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy class defines the interface that enables the asynchronous crawling functionality shown in the documentation's 'arun()' example, requiring concrete implementations to handle URL crawling and return response objects containing HTML, markdown, and media data.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Understanding the Response\n\nThe `arun()` method returns a `CrawlResult` object with several useful properties. Here's a quick overview (see [CrawlResult](../api/crawl-result.md) for complete details):\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Different content formats\nprint(result.html)         # Raw HTML\nprint(result.cleaned_html) # Cleaned HTML\nprint(result.markdown)     # Markdown version\nprint(result.fit_markdown) # Most relevant content in markdown\n\n# Check success status\nprint(result.success)      # True if crawl succeeded\nprint(result.status_code)  # HTTP status code (e.g., 200, 404)\n\n# Access extracted media and links\nprint(result.media)        # Dictionary of found media (images, videos, audio)\nprint(result.links)        # Dictionary of internal and external links\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The documented CrawlResult properties directly correspond to the HTML, status codes, media, and links that are extracted and processed by the AsyncPlaywrightCrawlerStrategy's crawl() method using Playwright's page APIs.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Hypothetical Website Example\n\nLet's consider a hypothetical e-commerce website that displays product categories, each containing multiple products. Each product has details, reviews, and related items. This complex structure will allow us to demonstrate various advanced features of JsonCssExtractionStrategy.\n\nAssume the HTML structure looks something like this:\n\n```html\n<div class=\"category\">\n  <h2 class=\"category-name\">Electronics</h2>\n  <div class=\"product\">\n    <h3 class=\"product-name\">Smartphone X</h3>\n    <p class=\"product-price\">$999</p>\n    <div class=\"product-details\">\n      <span class=\"brand\">TechCorp</span>\n      <span class=\"model\">X-2000</span>\n    </div>\n    <ul class=\"product-features\">\n      <li>5G capable</li>\n      <li>6.5\" OLED screen</li>\n      <li>128GB storage</li>\n    </ul>\n    <div class=\"product-reviews\">\n      <div class=\"review\">\n        <span class=\"reviewer\">John D.</span>\n        <span class=\"rating\">4.5</span>\n        <p class=\"review-text\">Great phone, love the camera!</p>\n      </div>\n      <div class=\"review\">\n        <span class=\"reviewer\">Jane S.</span>\n        <span class=\"rating\">5</span>\n        <p class=\"review-text\">Best smartphone I've ever owned.</p>\n      </div>\n    </div>\n    <ul class=\"related-products\">\n      <li>\n        <span class=\"related-name\">Phone Case</span>\n        <span class=\"related-price\">$29.99</span>\n      </li>\n      <li>\n        <span class=\"related-name\">Screen Protector</span>\n        <span class=\"related-price\">$9.99</span>\n      </li>\n    </ul>\n  </div>\n  <!-- More products... -->\n</div>\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class implementation",
      "relationship_explanation": "The text directly discusses and demonstrates the usage of JsonCssExtractionStrategy for extracting complex data structures from HTML.",
      "predicted_trace_chain": "css-advanced.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly discusses the JsonCssExtractionStrategy class, so there are no intermediate steps.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class uses BeautifulSoup to parse and extract structured data from HTML elements like the documented e-commerce product listings by mapping CSS selectors to desired fields in a schema.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Hypothetical Website Example\n\nLet's consider a hypothetical e-commerce website that displays product categories, each containing multiple products. Each product has details, reviews, and related items. This complex structure will allow us to demonstrate various advanced features of JsonCssExtractionStrategy.\n\nAssume the HTML structure looks something like this:\n\n```html\n<div class=\"category\">\n  <h2 class=\"category-name\">Electronics</h2>\n  <div class=\"product\">\n    <h3 class=\"product-name\">Smartphone X</h3>\n    <p class=\"product-price\">$999</p>\n    <div class=\"product-details\">\n      <span class=\"brand\">TechCorp</span>\n      <span class=\"model\">X-2000</span>\n    </div>\n    <ul class=\"product-features\">\n      <li>5G capable</li>\n      <li>6.5\" OLED screen</li>\n      <li>128GB storage</li>\n    </ul>\n    <div class=\"product-reviews\">\n      <div class=\"review\">\n        <span class=\"reviewer\">John D.</span>\n        <span class=\"rating\">4.5</span>\n        <p class=\"review-text\">Great phone, love the camera!</p>\n      </div>\n      <div class=\"review\">\n        <span class=\"reviewer\">Jane S.</span>\n        <span class=\"rating\">5</span>\n        <p class=\"review-text\">Best smartphone I've ever owned.</p>\n      </div>\n    </div>\n    <ul class=\"related-products\">\n      <li>\n        <span class=\"related-name\">Phone Case</span>\n        <span class=\"related-price\">$29.99</span>\n      </li>\n      <li>\n        <span class=\"related-name\">Screen Protector</span>\n        <span class=\"related-price\">$9.99</span>\n      </li>\n    </ul>\n  </div>\n  <!-- More products... -->\n</div>\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The text provides an example of using AsyncWebCrawler in conjunction with JsonCssExtractionStrategy to extract complex product data.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Hypothetical Website Example\n\nLet's consider a hypothetical e-commerce website that displays product categories, each containing multiple products. Each product has details, reviews, and related items. This complex structure will allow us to demonstrate various advanced features of JsonCssExtractionStrategy.\n\nAssume the HTML structure looks something like this:\n\n```html\n<div class=\"category\">\n  <h2 class=\"category-name\">Electronics</h2>\n  <div class=\"product\">\n    <h3 class=\"product-name\">Smartphone X</h3>\n    <p class=\"product-price\">$999</p>\n    <div class=\"product-details\">\n      <span class=\"brand\">TechCorp</span>\n      <span class=\"model\">X-2000</span>\n    </div>\n    <ul class=\"product-features\">\n      <li>5G capable</li>\n      <li>6.5\" OLED screen</li>\n      <li>128GB storage</li>\n    </ul>\n    <div class=\"product-reviews\">\n      <div class=\"review\">\n        <span class=\"reviewer\">John D.</span>\n        <span class=\"rating\">4.5</span>\n        <p class=\"review-text\">Great phone, love the camera!</p>\n      </div>\n      <div class=\"review\">\n        <span class=\"reviewer\">Jane S.</span>\n        <span class=\"rating\">5</span>\n        <p class=\"review-text\">Best smartphone I've ever owned.</p>\n      </div>\n    </div>\n    <ul class=\"related-products\">\n      <li>\n        <span class=\"related-name\">Phone Case</span>\n        <span class=\"related-price\">$29.99</span>\n      </li>\n      <li>\n        <span class=\"related-name\">Screen Protector</span>\n        <span class=\"related-price\">$9.99</span>\n      </li>\n    </ul>\n  </div>\n  <!-- More products... -->\n</div>\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The text shows an example of calling the arun() method of AsyncWebCrawler to perform the web crawling and extraction process.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document demonstrates the usage of AsyncWebCrawler, which leads to the use of its arun() method for performing the crawl.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Hypothetical Website Example\n\nLet's consider a hypothetical e-commerce website that displays product categories, each containing multiple products. Each product has details, reviews, and related items. This complex structure will allow us to demonstrate various advanced features of JsonCssExtractionStrategy.\n\nAssume the HTML structure looks something like this:\n\n```html\n<div class=\"category\">\n  <h2 class=\"category-name\">Electronics</h2>\n  <div class=\"product\">\n    <h3 class=\"product-name\">Smartphone X</h3>\n    <p class=\"product-price\">$999</p>\n    <div class=\"product-details\">\n      <span class=\"brand\">TechCorp</span>\n      <span class=\"model\">X-2000</span>\n    </div>\n    <ul class=\"product-features\">\n      <li>5G capable</li>\n      <li>6.5\" OLED screen</li>\n      <li>128GB storage</li>\n    </ul>\n    <div class=\"product-reviews\">\n      <div class=\"review\">\n        <span class=\"reviewer\">John D.</span>\n        <span class=\"rating\">4.5</span>\n        <p class=\"review-text\">Great phone, love the camera!</p>\n      </div>\n      <div class=\"review\">\n        <span class=\"reviewer\">Jane S.</span>\n        <span class=\"rating\">5</span>\n        <p class=\"review-text\">Best smartphone I've ever owned.</p>\n      </div>\n    </div>\n    <ul class=\"related-products\">\n      <li>\n        <span class=\"related-name\">Phone Case</span>\n        <span class=\"related-price\">$29.99</span>\n      </li>\n      <li>\n        <span class=\"related-name\">Screen Protector</span>\n        <span class=\"related-price\">$9.99</span>\n      </li>\n    </ul>\n  </div>\n  <!-- More products... -->\n</div>\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The text implicitly uses CrawlResult when checking the success of the crawl operation and accessing the extracted_content.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult, which is then used to check the success of the operation and access the extracted content.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Hypothetical Website Example\n\nLet's consider a hypothetical e-commerce website that displays product categories, each containing multiple products. Each product has details, reviews, and related items. This complex structure will allow us to demonstrate various advanced features of JsonCssExtractionStrategy.\n\nAssume the HTML structure looks something like this:\n\n```html\n<div class=\"category\">\n  <h2 class=\"category-name\">Electronics</h2>\n  <div class=\"product\">\n    <h3 class=\"product-name\">Smartphone X</h3>\n    <p class=\"product-price\">$999</p>\n    <div class=\"product-details\">\n      <span class=\"brand\">TechCorp</span>\n      <span class=\"model\">X-2000</span>\n    </div>\n    <ul class=\"product-features\">\n      <li>5G capable</li>\n      <li>6.5\" OLED screen</li>\n      <li>128GB storage</li>\n    </ul>\n    <div class=\"product-reviews\">\n      <div class=\"review\">\n        <span class=\"reviewer\">John D.</span>\n        <span class=\"rating\">4.5</span>\n        <p class=\"review-text\">Great phone, love the camera!</p>\n      </div>\n      <div class=\"review\">\n        <span class=\"reviewer\">Jane S.</span>\n        <span class=\"rating\">5</span>\n        <p class=\"review-text\">Best smartphone I've ever owned.</p>\n      </div>\n    </div>\n    <ul class=\"related-products\">\n      <li>\n        <span class=\"related-name\">Phone Case</span>\n        <span class=\"related-price\">$29.99</span>\n      </li>\n      <li>\n        <span class=\"related-name\">Screen Protector</span>\n        <span class=\"related-price\">$9.99</span>\n      </li>\n    </ul>\n  </div>\n  <!-- More products... -->\n</div>\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The text implicitly uses the success attribute of CrawlResult when asserting the success of the crawl operation.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "After the arun() method returns a CrawlResult, the code checks the success attribute to ensure the crawl was successful.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Hypothetical Website Example\n\nLet's consider a hypothetical e-commerce website that displays product categories, each containing multiple products. Each product has details, reviews, and related items. This complex structure will allow us to demonstrate various advanced features of JsonCssExtractionStrategy.\n\nAssume the HTML structure looks something like this:\n\n```html\n<div class=\"category\">\n  <h2 class=\"category-name\">Electronics</h2>\n  <div class=\"product\">\n    <h3 class=\"product-name\">Smartphone X</h3>\n    <p class=\"product-price\">$999</p>\n    <div class=\"product-details\">\n      <span class=\"brand\">TechCorp</span>\n      <span class=\"model\">X-2000</span>\n    </div>\n    <ul class=\"product-features\">\n      <li>5G capable</li>\n      <li>6.5\" OLED screen</li>\n      <li>128GB storage</li>\n    </ul>\n    <div class=\"product-reviews\">\n      <div class=\"review\">\n        <span class=\"reviewer\">John D.</span>\n        <span class=\"rating\">4.5</span>\n        <p class=\"review-text\">Great phone, love the camera!</p>\n      </div>\n      <div class=\"review\">\n        <span class=\"reviewer\">Jane S.</span>\n        <span class=\"rating\">5</span>\n        <p class=\"review-text\">Best smartphone I've ever owned.</p>\n      </div>\n    </div>\n    <ul class=\"related-products\">\n      <li>\n        <span class=\"related-name\">Phone Case</span>\n        <span class=\"related-price\">$29.99</span>\n      </li>\n      <li>\n        <span class=\"related-name\">Screen Protector</span>\n        <span class=\"related-price\">$9.99</span>\n      </li>\n    </ul>\n  </div>\n  <!-- More products... -->\n</div>\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The text implicitly uses the extracted_content attribute of CrawlResult when accessing the extracted data for JSON parsing.",
      "predicted_trace_chain": "css-advanced.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "After confirming the crawl's success, the code accesses the extracted_content attribute to retrieve and parse the extracted data.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Hypothetical Website Example\n\nLet's consider a hypothetical e-commerce website that displays product categories, each containing multiple products. Each product has details, reviews, and related items. This complex structure will allow us to demonstrate various advanced features of JsonCssExtractionStrategy.\n\nAssume the HTML structure looks something like this:\n\n```html\n<div class=\"category\">\n  <h2 class=\"category-name\">Electronics</h2>\n  <div class=\"product\">\n    <h3 class=\"product-name\">Smartphone X</h3>\n    <p class=\"product-price\">$999</p>\n    <div class=\"product-details\">\n      <span class=\"brand\">TechCorp</span>\n      <span class=\"model\">X-2000</span>\n    </div>\n    <ul class=\"product-features\">\n      <li>5G capable</li>\n      <li>6.5\" OLED screen</li>\n      <li>128GB storage</li>\n    </ul>\n    <div class=\"product-reviews\">\n      <div class=\"review\">\n        <span class=\"reviewer\">John D.</span>\n        <span class=\"rating\">4.5</span>\n        <p class=\"review-text\">Great phone, love the camera!</p>\n      </div>\n      <div class=\"review\">\n        <span class=\"reviewer\">Jane S.</span>\n        <span class=\"rating\">5</span>\n        <p class=\"review-text\">Best smartphone I've ever owned.</p>\n      </div>\n    </div>\n    <ul class=\"related-products\">\n      <li>\n        <span class=\"related-name\">Phone Case</span>\n        <span class=\"related-price\">$29.99</span>\n      </li>\n      <li>\n        <span class=\"related-name\">Screen Protector</span>\n        <span class=\"related-price\">$9.99</span>\n      </li>\n    </ul>\n  </div>\n  <!-- More products... -->\n</div>\n```",
      "document_location": "docs/md_v2/extraction/css-advanced.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy class serves as an abstract base class with methods to extract and process structured data from HTML content like the documented e-commerce website example, where complex nested elements (products, reviews, features) need to be parsed systematically.",
      "ground_truth_trace_chain": "css-advanced.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Basic Configuration\n\nCommon browser settings:\n\n```python\nasync with AsyncWebCrawler(\n    headless=True,           # Run in headless mode (no GUI)\n    verbose=True,           # Enable detailed logging\n    sleep_on_close=False    # No delay when closing browser\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate basic browser configuration settings.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented configuration options through its __init__ method, where headless, verbose, and sleep_on_close parameters are passed via kwargs to the underlying AsyncPlaywrightCrawlerStrategy.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Configuration\n\nCommon browser settings:\n\n```python\nasync with AsyncWebCrawler(\n    headless=True,           # Run in headless mode (no GUI)\n    verbose=True,           # Enable detailed logging\n    sleep_on_close=False    # No delay when closing browser\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawl operation.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows the usage of AsyncWebCrawler, which includes calling its arun() method. The class is an intermediate step to access the method.",
      "ground_truth_relationship": "The code implements an async crawler method that accepts the documented configuration parameters like headless, verbose, and sleep_on_close through its constructor while providing additional flexibility through optional parameters such as word_count_threshold, extraction_strategy, and chunking_strategy.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Configuration\n\nCommon browser settings:\n\n```python\nasync with AsyncWebCrawler(\n    headless=True,           # Run in headless mode (no GUI)\n    verbose=True,           # Enable detailed logging\n    sleep_on_close=False    # No delay when closing browser\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementing class",
      "relationship_explanation": "While not explicitly mentioned, AsyncPlaywrightCrawlerStrategy is the default implementing class for AsyncWebCrawler and would handle the browser configuration settings described.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The documentation uses AsyncWebCrawler, which internally uses AsyncPlaywrightCrawlerStrategy as its default implementation for browser interactions.",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the documented browser configuration options through its constructor parameters and start() method, specifically handling headless mode, verbose logging, and sleep_on_close functionality as shown in the example configuration.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Configuration\n\nCommon browser settings:\n\n```python\nasync with AsyncWebCrawler(\n    headless=True,           # Run in headless mode (no GUI)\n    verbose=True,           # Enable detailed logging\n    sleep_on_close=False    # No delay when closing browser\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core methods that enable the browser configuration settings shown in the documentation, including the crawl functionality used by AsyncWebCrawler's arun method.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Basic Configuration\n\nCommon browser settings:\n\n```python\nasync with AsyncWebCrawler(\n    headless=True,           # Run in headless mode (no GUI)\n    verbose=True,           # Enable detailed logging\n    sleep_on_close=False    # No delay when closing browser\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class defines the structure of the return value from the AsyncWebCrawler.arun() method shown in the configuration documentation, storing crawled data like HTML, links, and metadata from the target URL.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Use Cases\n\n### 1. Article Content Extraction\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"main article content\",\n    word_count_threshold=100,  # Longer blocks for articles\n    top_k=1                   # Usually want single main content\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/blog/post\",\n    extraction_strategy=strategy\n)\n```\n\n### 2. Product Review Analysis\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"customer reviews and ratings\",\n    word_count_threshold=20,   # Reviews can be shorter\n    top_k=10,                 # Get multiple reviews\n    sim_threshold=0.4         # Allow variety in review content\n)\n```\n\n### 3. Technical Documentation\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"technical specifications documentation\",\n    word_count_threshold=30,\n    sim_threshold=0.6,        # Stricter matching for technical content\n    max_dist=0.3             # Allow related technical sections\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The CosineStrategy class is explicitly mentioned and used in all three use cases presented in the documentation snippet. It is the primary extraction strategy being demonstrated.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of CosineStrategy, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The CosineStrategy class implements configurable text extraction through cosine similarity matching, where different use cases (article content, product reviews, technical documentation) are achieved by adjusting the semantic_filter, word_count_threshold, top_k, and sim_threshold parameters as shown in the documentation examples.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Use Cases\n\n### 1. Article Content Extraction\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"main article content\",\n    word_count_threshold=100,  # Longer blocks for articles\n    top_k=1                   # Usually want single main content\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/blog/post\",\n    extraction_strategy=strategy\n)\n```\n\n### 2. Product Review Analysis\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"customer reviews and ratings\",\n    word_count_threshold=20,   # Reviews can be shorter\n    top_k=10,                 # Get multiple reviews\n    sim_threshold=0.4         # Allow variety in review content\n)\n```\n\n### 3. Technical Documentation\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"technical specifications documentation\",\n    word_count_threshold=30,\n    sim_threshold=0.6,        # Stricter matching for technical content\n    max_dist=0.3             # Allow related technical sections\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the examples through the 'crawler' variable, which is assumed to be an instance of AsyncWebCrawler based on the context.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document implicitly uses AsyncWebCrawler through the 'crawler' variable, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented use cases through its arun() method, which accepts an extraction_strategy parameter that can be configured with different CosineStrategy settings for article content, product reviews, or technical documentation extraction as shown in the examples.",
      "ground_truth_trace_chain": "cosine.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Use Cases\n\n### 1. Article Content Extraction\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"main article content\",\n    word_count_threshold=100,  # Longer blocks for articles\n    top_k=1                   # Usually want single main content\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/blog/post\",\n    extraction_strategy=strategy\n)\n```\n\n### 2. Product Review Analysis\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"customer reviews and ratings\",\n    word_count_threshold=20,   # Reviews can be shorter\n    top_k=10,                 # Get multiple reviews\n    sim_threshold=0.4         # Allow variety in review content\n)\n```\n\n### 3. Technical Documentation\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"technical specifications documentation\",\n    word_count_threshold=30,\n    sim_threshold=0.6,        # Stricter matching for technical content\n    max_dist=0.3             # Allow related technical sections\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in all three use cases to perform the web crawling with the specified CosineStrategy.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of the arun() method, which is part of the AsyncWebCrawler class, hence the intermediate step.",
      "ground_truth_relationship": "The arun() method implements the documented use cases by accepting flexible extraction_strategy parameters that control content filtering, word count thresholds, and similarity settings as shown in the three example configurations.",
      "ground_truth_trace_chain": "cosine.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Use Cases\n\n### 1. Article Content Extraction\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"main article content\",\n    word_count_threshold=100,  # Longer blocks for articles\n    top_k=1                   # Usually want single main content\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/blog/post\",\n    extraction_strategy=strategy\n)\n```\n\n### 2. Product Review Analysis\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"customer reviews and ratings\",\n    word_count_threshold=20,   # Reviews can be shorter\n    top_k=10,                 # Get multiple reviews\n    sim_threshold=0.4         # Allow variety in review content\n)\n```\n\n### 3. Technical Documentation\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"technical specifications documentation\",\n    word_count_threshold=30,\n    sim_threshold=0.6,        # Stricter matching for technical content\n    max_dist=0.3             # Allow related technical sections\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of the arun() method, represented by the 'result' variable in the examples.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document implicitly uses CrawlResult as the return type of arun(), hence the chain through AsyncWebCrawler.arun().",
      "ground_truth_relationship": "The CrawlResult class serves as the data structure for storing various extracted content types shown in the use cases, including the extracted_content field for article content, metadata for reviews, and technical documentation content along with associated metadata like URLs and success status.",
      "ground_truth_trace_chain": "cosine.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Use Cases\n\n### 1. Article Content Extraction\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"main article content\",\n    word_count_threshold=100,  # Longer blocks for articles\n    top_k=1                   # Usually want single main content\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/blog/post\",\n    extraction_strategy=strategy\n)\n```\n\n### 2. Product Review Analysis\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"customer reviews and ratings\",\n    word_count_threshold=20,   # Reviews can be shorter\n    top_k=10,                 # Get multiple reviews\n    sim_threshold=0.4         # Allow variety in review content\n)\n```\n\n### 3. Technical Documentation\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"technical specifications documentation\",\n    word_count_threshold=30,\n    sim_threshold=0.6,        # Stricter matching for technical content\n    max_dist=0.3             # Allow related technical sections\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is implicitly used, as it would contain the content extracted by the CosineStrategy.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document implicitly uses the extracted_content attribute, which is part of the CrawlResult returned by arun(), hence the chain through both AsyncWebCrawler.arun() and CrawlResult.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Use Cases\n\n### 1. Article Content Extraction\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"main article content\",\n    word_count_threshold=100,  # Longer blocks for articles\n    top_k=1                   # Usually want single main content\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/blog/post\",\n    extraction_strategy=strategy\n)\n```\n\n### 2. Product Review Analysis\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"customer reviews and ratings\",\n    word_count_threshold=20,   # Reviews can be shorter\n    top_k=10,                 # Get multiple reviews\n    sim_threshold=0.4         # Allow variety in review content\n)\n```\n\n### 3. Technical Documentation\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"technical specifications documentation\",\n    word_count_threshold=30,\n    sim_threshold=0.6,        # Stricter matching for technical content\n    max_dist=0.3             # Allow related technical sections\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class provides the foundational structure for implementing the various content extraction strategies shown in the documentation's use cases, including article content, product reviews, and technical documentation extraction through its abstract extract() method and parallel processing run() method.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Use Cases\n\n### 1. Article Content Extraction\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"main article content\",\n    word_count_threshold=100,  # Longer blocks for articles\n    top_k=1                   # Usually want single main content\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/blog/post\",\n    extraction_strategy=strategy\n)\n```\n\n### 2. Product Review Analysis\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"customer reviews and ratings\",\n    word_count_threshold=20,   # Reviews can be shorter\n    top_k=10,                 # Get multiple reviews\n    sim_threshold=0.4         # Allow variety in review content\n)\n```\n\n### 3. Technical Documentation\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"technical specifications documentation\",\n    word_count_threshold=30,\n    sim_threshold=0.6,        # Stricter matching for technical content\n    max_dist=0.3             # Allow related technical sections\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the crawling functionality needed to support the three documented use cases (article extraction, product review analysis, and technical documentation) by providing configurable browser automation with customizable waiting conditions, content processing, and error handling.",
      "ground_truth_trace_chain": "cosine.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Use Cases\n\n### 1. Article Content Extraction\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"main article content\",\n    word_count_threshold=100,  # Longer blocks for articles\n    top_k=1                   # Usually want single main content\n)\n\nresult = await crawler.arun(\n    url=\"https://example.com/blog/post\",\n    extraction_strategy=strategy\n)\n```\n\n### 2. Product Review Analysis\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"customer reviews and ratings\",\n    word_count_threshold=20,   # Reviews can be shorter\n    top_k=10,                 # Get multiple reviews\n    sim_threshold=0.4         # Allow variety in review content\n)\n```\n\n### 3. Technical Documentation\n```python\nstrategy = CosineStrategy(\n    semantic_filter=\"technical specifications documentation\",\n    word_count_threshold=30,\n    sim_threshold=0.6,        # Stricter matching for technical content\n    max_dist=0.3             # Allow related technical sections\n)\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods that the documented CosineStrategy implementations use to perform specialized content extraction tasks like article crawling, review analysis, and technical documentation parsing.",
      "ground_truth_trace_chain": "cosine.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Media Selection\n\nSelect specific types of media:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different media types\nimages = result.media[\"images\"]  # List of image details\nvideos = result.media[\"videos\"]  # List of video details\naudios = result.media[\"audios\"]  # List of audio details\n\n# Image with metadata\nfor image in images:\n    print(f\"URL: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Relevance score: {image['score']}\")\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example, as evidenced by the 'crawler.arun()' method call. This suggests that 'crawler' is an instance of AsyncWebCrawler.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document demonstrates usage of AsyncWebCrawler, which returns a CrawlResult object containing media information.",
      "ground_truth_relationship": "The AsyncWebCrawler class processes media types through its aprocess_html method, where it scrapes and organizes images, videos, and audios into a structured media dictionary that matches the documented media selection interface.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Media Selection\n\nSelect specific types of media:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different media types\nimages = result.media[\"images\"]  # List of image details\nvideos = result.media[\"videos\"]  # List of video details\naudios = result.media[\"audios\"]  # List of audio details\n\n# Image with metadata\nfor image in images:\n    print(f\"URL: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Relevance score: {image['score']}\")\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the 'crawler.arun()' method. The code accesses properties of this result object, such as 'result.media'.",
      "predicted_trace_chain": "content-selection.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The AsyncWebCrawler's arun method returns a CrawlResult object, which is then used to access media information.",
      "ground_truth_relationship": "The CrawlResult class implements media selection through its media dictionary field that stores different media types (images, videos, audios) as documented in the usage example.",
      "ground_truth_trace_chain": "content-selection.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Media Selection\n\nSelect specific types of media:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different media types\nimages = result.media[\"images\"]  # List of image details\nvideos = result.media[\"videos\"]  # List of video details\naudios = result.media[\"audios\"]  # List of audio details\n\n# Image with metadata\nfor image in images:\n    print(f\"URL: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Relevance score: {image['score']}\")\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_id": 16,
      "artifact_title": "CrawlResult.media",
      "predicted_relationship": "explicit",
      "relationship_type": "accessed attribute",
      "relationship_explanation": "The code explicitly accesses the 'media' attribute of the CrawlResult object, as seen in 'result.media[\"images\"]', 'result.media[\"videos\"]', and 'result.media[\"audios\"]'.",
      "predicted_trace_chain": "content-selection.md -> CrawlResult -> CrawlResult.media",
      "predicted_trace_chain_explanation": "The document shows how to access the media attribute of the CrawlResult object returned by AsyncWebCrawler.arun()",
      "ground_truth_relationship": "The CrawlResult.media dictionary property stores categorized lists of media elements (images, videos, audios) that are accessed by type keys in the documented example code.",
      "ground_truth_trace_chain": "content-selection.md -> CrawlResult.media",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Media Selection\n\nSelect specific types of media:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different media types\nimages = result.media[\"images\"]  # List of image details\nvideos = result.media[\"videos\"]  # List of video details\naudios = result.media[\"audios\"]  # List of audio details\n\n# Image with metadata\nfor image in images:\n    print(f\"URL: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Relevance score: {image['score']}\")\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface that enables the media selection functionality shown in the documentation through its crawl method which returns an AsyncCrawlResponse containing the structured media data.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Media Selection\n\nSelect specific types of media:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different media types\nimages = result.media[\"images\"]  # List of image details\nvideos = result.media[\"videos\"]  # List of video details\naudios = result.media[\"audios\"]  # List of audio details\n\n# Image with metadata\nfor image in images:\n    print(f\"URL: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Relevance score: {image['score']}\")\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncWebCrawler.arun()",
      "ground_truth_relationship": "The documented media selection functionality is implemented through the arun() method which performs the web crawl and returns a CrawlResult object containing structured media data that can be accessed through the media dictionary with keys for images, videos, and audios.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Media Selection\n\nSelect specific types of media:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\n# Access different media types\nimages = result.media[\"images\"]  # List of image details\nvideos = result.media[\"videos\"]  # List of video details\naudios = result.media[\"audios\"]  # List of audio details\n\n# Image with metadata\nfor image in images:\n    print(f\"URL: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Relevance score: {image['score']}\")\n```",
      "document_location": "docs/md_v2/basic/content-selection.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class includes media processing capabilities that enable the documented functionality of extracting and organizing different media types (images, videos, audios) from crawled web pages, with methods to access their metadata and attributes.",
      "ground_truth_trace_chain": "content-selection.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Smart Link Filtering\nControl which links are included in the results:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    exclude_external_links=True,          # Remove external links\n    exclude_social_media_links=True,      # Remove social media links\n    exclude_social_media_domains=[                # Custom social media domains\n        \"facebook.com\", \"twitter.com\", \"instagram.com\"\n    ],\n    exclude_domains=[\"ads.example.com\"]   # Exclude specific domains\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate how to control link filtering in the crawling process.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements link filtering through kwargs passed to the arun method, which processes URL filtering parameters documented in the smart link filtering example to control which links are included in the crawl results.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Smart Link Filtering\nControl which links are included in the results:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    exclude_external_links=True,          # Remove external links\n    exclude_social_media_links=True,      # Remove social media links\n    exclude_social_media_domains=[                # Custom social media domains\n        \"facebook.com\", \"twitter.com\", \"instagram.com\"\n    ],\n    exclude_domains=[\"ads.example.com\"]   # Exclude specific domains\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to demonstrate link filtering options.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows a call to arun() which is a method of AsyncWebCrawler, hence the chain goes through the class to the method.",
      "ground_truth_relationship": "The arun method accepts filtering parameters through **kwargs which allows for the documented link filtering options like exclude_external_links and exclude_domains to be passed through to the crawler_strategy.crawl() method.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Smart Link Filtering\nControl which links are included in the results:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    exclude_external_links=True,          # Remove external links\n    exclude_social_media_links=True,      # Remove social media links\n    exclude_social_media_domains=[                # Custom social media domains\n        \"facebook.com\", \"twitter.com\", \"instagram.com\"\n    ],\n    exclude_domains=[\"ads.example.com\"]   # Exclude specific domains\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as it would contain the filtered links based on the specified options.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult, which would contain the filtered links, so the chain goes from the document through AsyncWebCrawler and its method to the result type.",
      "ground_truth_relationship": "The CrawlResult class stores the filtered links data structure in its 'links' dictionary field, which gets populated based on the smart filtering parameters shown in the documentation like exclude_external_links and exclude_domains.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Smart Link Filtering\nControl which links are included in the results:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    exclude_external_links=True,          # Remove external links\n    exclude_social_media_links=True,      # Remove social media links\n    exclude_social_media_domains=[                # Custom social media domains\n        \"facebook.com\", \"twitter.com\", \"instagram.com\"\n    ],\n    exclude_domains=[\"ads.example.com\"]   # Exclude specific domains\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 14,
      "artifact_title": "CrawlResult.links",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The links attribute of CrawlResult is implicitly used, as the link filtering options demonstrated would affect the content of this attribute.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.links",
      "predicted_trace_chain_explanation": "The link filtering options affect the links attribute of the CrawlResult, so the chain extends from CrawlResult to its links attribute.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Smart Link Filtering\nControl which links are included in the results:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    exclude_external_links=True,          # Remove external links\n    exclude_social_media_links=True,      # Remove social media links\n    exclude_social_media_domains=[                # Custom social media domains\n        \"facebook.com\", \"twitter.com\", \"instagram.com\"\n    ],\n    exclude_domains=[\"ads.example.com\"]   # Exclude specific domains\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the core interface for implementing the smart link filtering functionality through its crawl method that accepts kwargs, which allows passing filter parameters like exclude_external_links and exclude_domains.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Smart Link Filtering\nControl which links are included in the results:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    exclude_external_links=True,          # Remove external links\n    exclude_social_media_links=True,      # Remove social media links\n    exclude_social_media_domains=[                # Custom social media domains\n        \"facebook.com\", \"twitter.com\", \"instagram.com\"\n    ],\n    exclude_domains=[\"ads.example.com\"]   # Exclude specific domains\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The documentation describes URL filtering options that are implemented through parameters passed to the crawler's arun() method, which are then processed within the crawl() method of the AsyncPlaywrightCrawlerStrategy class to control which links are included in the crawling results.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Session Best Practices\n\n1. **Session Naming**:\n```python\n# Use descriptive session IDs\nsession_id = \"login_flow_session\"\nsession_id = \"product_catalog_session\"\n```\n\n2. **Resource Management**:\n```python\ntry:\n    # Your crawling code\n    pass\nfinally:\n    # Always clean up sessions\n    await crawler.crawler_strategy.kill_session(session_id)\n```\n\n3. **State Management**:\n```python\n# First page: login\nresult = await crawler.arun(\n    url=\"https://example.com/login\",\n    session_id=session_id,\n    js_code=\"document.querySelector('form').submit();\"\n)\n\n# Second page: verify login success\nresult = await crawler.arun(\n    url=\"https://example.com/dashboard\",\n    session_id=session_id,\n    wait_for=\"css:.user-profile\"  # Wait for authenticated content\n)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 2,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_relationship": "explicit",
      "relationship_type": "implementation",
      "relationship_explanation": "The documentation explicitly mentions using the kill_session() method to clean up sessions. This method is directly implemented in the AsyncPlaywrightCrawlerStrategy class.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_trace_chain_explanation": "The document discusses session management, which is implemented through the AsyncWebCrawler. The AsyncWebCrawler uses the AsyncPlaywrightCrawlerStrategy, which contains the kill_session() method.",
      "ground_truth_relationship": "The kill_session() method implements the documented resource management best practice by closing browser contexts and pages to prevent memory leaks when sessions are no longer needed.",
      "ground_truth_trace_chain": "session-management.md -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Session Best Practices\n\n1. **Session Naming**:\n```python\n# Use descriptive session IDs\nsession_id = \"login_flow_session\"\nsession_id = \"product_catalog_session\"\n```\n\n2. **Resource Management**:\n```python\ntry:\n    # Your crawling code\n    pass\nfinally:\n    # Always clean up sessions\n    await crawler.crawler_strategy.kill_session(session_id)\n```\n\n3. **State Management**:\n```python\n# First page: login\nresult = await crawler.arun(\n    url=\"https://example.com/login\",\n    session_id=session_id,\n    js_code=\"document.querySelector('form').submit();\"\n)\n\n# Second page: verify login success\nresult = await crawler.arun(\n    url=\"https://example.com/dashboard\",\n    session_id=session_id,\n    wait_for=\"css:.user-profile\"  # Wait for authenticated content\n)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The documentation provides examples of using the AsyncWebCrawler class to perform crawling operations with session management, though it's not explicitly discussed.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates usage of AsyncWebCrawler for session-based crawling tasks.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements session management through its 'arun' method, which accepts a 'session_id' parameter that enables maintaining state across multiple page visits as demonstrated in the documentation's state management example.",
      "ground_truth_trace_chain": "session-management.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Session Best Practices\n\n1. **Session Naming**:\n```python\n# Use descriptive session IDs\nsession_id = \"login_flow_session\"\nsession_id = \"product_catalog_session\"\n```\n\n2. **Resource Management**:\n```python\ntry:\n    # Your crawling code\n    pass\nfinally:\n    # Always clean up sessions\n    await crawler.crawler_strategy.kill_session(session_id)\n```\n\n3. **State Management**:\n```python\n# First page: login\nresult = await crawler.arun(\n    url=\"https://example.com/login\",\n    session_id=session_id,\n    js_code=\"document.querySelector('form').submit();\"\n)\n\n# Second page: verify login success\nresult = await crawler.arun(\n    url=\"https://example.com/dashboard\",\n    session_id=session_id,\n    wait_for=\"css:.user-profile\"  # Wait for authenticated content\n)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The documentation explicitly shows examples of using the arun() method of AsyncWebCrawler to perform crawling operations with session management.",
      "predicted_trace_chain": "session-management.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document demonstrates usage of the arun() method, which is a key method of the AsyncWebCrawler class for performing crawling operations.",
      "ground_truth_relationship": "The arun() method stores session_id from kwargs which enables stateful crawling across multiple requests as shown in the documentation's state management examples.",
      "ground_truth_trace_chain": "session-management.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Session Best Practices\n\n1. **Session Naming**:\n```python\n# Use descriptive session IDs\nsession_id = \"login_flow_session\"\nsession_id = \"product_catalog_session\"\n```\n\n2. **Resource Management**:\n```python\ntry:\n    # Your crawling code\n    pass\nfinally:\n    # Always clean up sessions\n    await crawler.crawler_strategy.kill_session(session_id)\n```\n\n3. **State Management**:\n```python\n# First page: login\nresult = await crawler.arun(\n    url=\"https://example.com/login\",\n    session_id=session_id,\n    js_code=\"document.querySelector('form').submit();\"\n)\n\n# Second page: verify login success\nresult = await crawler.arun(\n    url=\"https://example.com/dashboard\",\n    session_id=session_id,\n    wait_for=\"css:.user-profile\"  # Wait for authenticated content\n)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class serves as the foundation for implementing the session management patterns shown in the documentation by defining core methods like crawl() and crawl_many() that handle the session-based navigation and resource cleanup.",
      "ground_truth_trace_chain": "session-management.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Session Best Practices\n\n1. **Session Naming**:\n```python\n# Use descriptive session IDs\nsession_id = \"login_flow_session\"\nsession_id = \"product_catalog_session\"\n```\n\n2. **Resource Management**:\n```python\ntry:\n    # Your crawling code\n    pass\nfinally:\n    # Always clean up sessions\n    await crawler.crawler_strategy.kill_session(session_id)\n```\n\n3. **State Management**:\n```python\n# First page: login\nresult = await crawler.arun(\n    url=\"https://example.com/login\",\n    session_id=session_id,\n    js_code=\"document.querySelector('form').submit();\"\n)\n\n# Second page: verify login success\nresult = await crawler.arun(\n    url=\"https://example.com/dashboard\",\n    session_id=session_id,\n    wait_for=\"css:.user-profile\"  # Wait for authenticated content\n)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class captures and stores session-specific data like session_id and status_code that are essential for implementing the documented session management practices including state tracking across page navigations.",
      "ground_truth_trace_chain": "session-management.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Session Best Practices\n\n1. **Session Naming**:\n```python\n# Use descriptive session IDs\nsession_id = \"login_flow_session\"\nsession_id = \"product_catalog_session\"\n```\n\n2. **Resource Management**:\n```python\ntry:\n    # Your crawling code\n    pass\nfinally:\n    # Always clean up sessions\n    await crawler.crawler_strategy.kill_session(session_id)\n```\n\n3. **State Management**:\n```python\n# First page: login\nresult = await crawler.arun(\n    url=\"https://example.com/login\",\n    session_id=session_id,\n    js_code=\"document.querySelector('form').submit();\"\n)\n\n# Second page: verify login success\nresult = await crawler.arun(\n    url=\"https://example.com/dashboard\",\n    session_id=session_id,\n    wait_for=\"css:.user-profile\"  # Wait for authenticated content\n)\n```",
      "document_location": "docs/md_v2/advanced/session-management.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements session management through its sessions dictionary and kill_session method, directly supporting the documented session best practices for naming, resource cleanup, and state management across multiple page requests.",
      "ground_truth_trace_chain": "session-management.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Basic Proxy Setup\n\nSimple proxy configuration:\n\n```python\n# Using proxy URL\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Using SOCKS proxy\nasync with AsyncWebCrawler(\n    proxy=\"socks5://proxy.example.com:1080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code examples to demonstrate how to configure proxy settings.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly showcases the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements proxy support through its crawler_strategy parameter, which accepts proxy configurations as shown in the documentation's HTTP and SOCKS5 proxy examples during initialization.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Proxy Setup\n\nSimple proxy configuration:\n\n```python\n# Using proxy URL\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Using SOCKS proxy\nasync with AsyncWebCrawler(\n    proxy=\"socks5://proxy.example.com:1080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method invocation",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code examples to perform the crawling operation.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which then calls its arun() method to perform the crawl.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method implements the core crawling functionality referenced in the proxy setup documentation by accepting and utilizing proxy configurations through its crawler_strategy component.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Proxy Setup\n\nSimple proxy configuration:\n\n```python\n# Using proxy URL\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Using SOCKS proxy\nasync with AsyncWebCrawler(\n    proxy=\"socks5://proxy.example.com:1080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementation",
      "relationship_explanation": "AsyncPlaywrightCrawlerStrategy is the default implementation of AsyncCrawlerStrategy used by AsyncWebCrawler. It handles the actual proxy configuration.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler, which internally uses AsyncPlaywrightCrawlerStrategy for crawling operations including proxy handling.",
      "ground_truth_relationship": "The code implements proxy support by accepting proxy URLs in both HTTP and SOCKS formats through the 'proxy' parameter in the AsyncPlaywrightCrawlerStrategy class, which is then configured in the browser launch arguments using Playwright's ProxySettings.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Proxy Setup\n\nSimple proxy configuration:\n\n```python\n# Using proxy URL\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Using SOCKS proxy\nasync with AsyncWebCrawler(\n    proxy=\"socks5://proxy.example.com:1080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 0,
      "artifact_title": "AsyncCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "interface",
      "relationship_explanation": "AsyncCrawlerStrategy is the abstract base class that defines the interface implemented by AsyncPlaywrightCrawlerStrategy, which is used by AsyncWebCrawler for crawling operations.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncCrawlerStrategy",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler, which uses AsyncPlaywrightCrawlerStrategy, which in turn implements the AsyncCrawlerStrategy interface.",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods needed to implement proxy-based web crawling, which the documentation shows how to configure through the proxy parameter.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Proxy Setup\n\nSimple proxy configuration:\n\n```python\n# Using proxy URL\nasync with AsyncWebCrawler(\n    proxy=\"http://proxy.example.com:8080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n\n# Using SOCKS proxy\nasync with AsyncWebCrawler(\n    proxy=\"socks5://proxy.example.com:1080\"\n) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class defines the data structure that stores the results of proxy-enabled web crawling operations shown in the documentation, including the crawled URL, HTML content, and various optional fields for metadata and error handling.",
      "ground_truth_trace_chain": "proxy-security.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Understanding Parameters \ud83e\udde0\n\nBy default, Crawl4AI caches the results of your crawls. This means that subsequent crawls of the same URL will be much faster! Let's see this in action.\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # First crawl (caches the result)\n        result1 = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"First crawl result: {result1.markdown[:100]}...\")\n\n        # Force to crawl again\n        result2 = await crawler.arun(url=\"https://www.nbcnews.com/business\", bypass_cache=True)\n        print(f\"Second crawl result: {result2.markdown[:100]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate caching behavior. It is instantiated and used within an async context manager.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly uses the AsyncWebCrawler class, so there are no intermediate steps.",
      "ground_truth_relationship": "The code implements caching functionality through the AsyncWebCrawler class which uses async_db_manager to store and retrieve crawl results, while providing a bypass_cache parameter in the arun method that controls whether to use cached results as demonstrated in the documentation example.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Understanding Parameters \ud83e\udde0\n\nBy default, Crawl4AI caches the results of your crawls. This means that subsequent crawls of the same URL will be much faster! Let's see this in action.\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # First crawl (caches the result)\n        result1 = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"First crawl result: {result1.markdown[:100]}...\")\n\n        # Force to crawl again\n        result2 = await crawler.arun(url=\"https://www.nbcnews.com/business\", bypass_cache=True)\n        print(f\"Second crawl result: {result2.markdown[:100]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method_call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called twice in the example to demonstrate caching behavior. It is called with different parameters to show the effect of bypass_cache.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation uses the AsyncWebCrawler class, which contains the arun() method, forming a direct chain.",
      "ground_truth_relationship": "The code implements caching by checking for cached content using async_db_manager.aget_cached_url(url) when bypass_cache is False, while the documentation demonstrates this functionality through example code showing two crawls - one that uses cache and another that bypasses it.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Understanding Parameters \ud83e\udde0\n\nBy default, Crawl4AI caches the results of your crawls. This means that subsequent crawls of the same URL will be much faster! Let's see this in action.\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # First crawl (caches the result)\n        result1 = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"First crawl result: {result1.markdown[:100]}...\")\n\n        # Force to crawl again\n        result2 = await crawler.arun(url=\"https://www.nbcnews.com/business\", bypass_cache=True)\n        print(f\"Second crawl result: {result2.markdown[:100]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return_value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method. The example accesses the 'markdown' attribute of the result, which is a property of CrawlResult.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The documentation calls arun(), which returns a CrawlResult object, forming a chain from the AsyncWebCrawler to the CrawlResult.",
      "ground_truth_relationship": "The CrawlResult class contains key fields like 'markdown' and 'success' that store the cached crawl results mentioned in the documentation example's demonstration of caching behavior.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Understanding Parameters \ud83e\udde0\n\nBy default, Crawl4AI caches the results of your crawls. This means that subsequent crawls of the same URL will be much faster! Let's see this in action.\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # First crawl (caches the result)\n        result1 = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"First crawl result: {result1.markdown[:100]}...\")\n\n        # Force to crawl again\n        result2 = await crawler.arun(url=\"https://www.nbcnews.com/business\", bypass_cache=True)\n        print(f\"Second crawl result: {result2.markdown[:100]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute_access",
      "relationship_explanation": "The 'markdown' attribute of the CrawlResult is explicitly accessed in the example to print part of the crawl result.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The documentation shows the use of AsyncWebCrawler.arun(), which returns a CrawlResult, from which the markdown attribute is accessed.",
      "ground_truth_relationship": "The CrawlResult.markdown property stores the crawled webpage content in markdown format, which is demonstrated in the documentation example where it's accessed to print the first 100 characters of each crawl result.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult.markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Understanding Parameters \ud83e\udde0\n\nBy default, Crawl4AI caches the results of your crawls. This means that subsequent crawls of the same URL will be much faster! Let's see this in action.\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # First crawl (caches the result)\n        result1 = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"First crawl result: {result1.markdown[:100]}...\")\n\n        # Force to crawl again\n        result2 = await crawler.arun(url=\"https://www.nbcnews.com/business\", bypass_cache=True)\n        print(f\"Second crawl result: {result2.markdown[:100]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core crawling methods that enable the caching functionality demonstrated in the documentation through its crawl method, which concrete implementations can use to handle cached and non-cached requests.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Understanding Parameters \ud83e\udde0\n\nBy default, Crawl4AI caches the results of your crawls. This means that subsequent crawls of the same URL will be much faster! Let's see this in action.\n\n```python\nasync def main():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        # First crawl (caches the result)\n        result1 = await crawler.arun(url=\"https://www.nbcnews.com/business\")\n        print(f\"First crawl result: {result1.markdown[:100]}...\")\n\n        # Force to crawl again\n        result2 = await crawler.arun(url=\"https://www.nbcnews.com/business\", bypass_cache=True)\n        print(f\"Second crawl result: {result2.markdown[:100]}...\")\n\nasyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements caching through the use_cached_html parameter, which when true stores HTML content in a local file and retrieves it on subsequent requests, matching the documentation's description of caching crawl results for faster subsequent crawls.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining JS Execution with LLM Extraction\n\nThis example demonstrates how to combine JavaScript execution with LLM extraction to handle dynamic content:\n\n```python\nasync def extract_dynamic_content():\n    js_code = \"\"\"\n    const loadMoreButton = Array.from(document.querySelectorAll('button')).find(button => button.textContent.includes('Load More'));\n    if (loadMoreButton) {\n        loadMoreButton.click();\n        await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \"\"\"\n\n    wait_for = \"\"\"\n    () => {\n        const articles = document.querySelectorAll('article.tease-card');\n        return articles.length > 10;\n    }\n    \"\"\"\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            js_code=js_code,\n            wait_for=wait_for,\n            css_selector=\"article.tease-card\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Summarize each article, focusing on technology-related content\"\n            ),\n            bypass_cache=True,\n        )\n\n    summaries = json.loads(result.extracted_content)\n    print(f\"Number of summarized articles: {len(summaries)}\")\n\n    with open(\".data/tech_summaries.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(summaries, f, indent=2)\n\nasyncio.run(extract_dynamic_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to perform web crawling and content extraction.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented dynamic content extraction functionality through its arun method, which accepts js_code and wait_for parameters to execute JavaScript on web pages and coordinates with extraction strategies for content processing.",
      "ground_truth_trace_chain": "llm.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining JS Execution with LLM Extraction\n\nThis example demonstrates how to combine JavaScript execution with LLM extraction to handle dynamic content:\n\n```python\nasync def extract_dynamic_content():\n    js_code = \"\"\"\n    const loadMoreButton = Array.from(document.querySelectorAll('button')).find(button => button.textContent.includes('Load More'));\n    if (loadMoreButton) {\n        loadMoreButton.click();\n        await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \"\"\"\n\n    wait_for = \"\"\"\n    () => {\n        const articles = document.querySelectorAll('article.tease-card');\n        return articles.length > 10;\n    }\n    \"\"\"\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            js_code=js_code,\n            wait_for=wait_for,\n            css_selector=\"article.tease-card\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Summarize each article, focusing on technology-related content\"\n            ),\n            bypass_cache=True,\n        )\n\n    summaries = json.loads(result.extracted_content)\n    print(f\"Number of summarized articles: {len(summaries)}\")\n\n    with open(\".data/tech_summaries.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(summaries, f, indent=2)\n\nasyncio.run(extract_dynamic_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 7,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The LLMExtractionStrategy class is explicitly used in the code example to define the extraction strategy for the crawler.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document shows LLMExtractionStrategy being used as a parameter for AsyncWebCrawler's arun method, demonstrating the connection between these classes.",
      "ground_truth_relationship": "The code implements the LLMExtractionStrategy class that enables the functionality shown in the documentation's example of extracting dynamic content from web pages using LLM-based extraction with customizable providers, API tokens, and instructions.",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining JS Execution with LLM Extraction\n\nThis example demonstrates how to combine JavaScript execution with LLM extraction to handle dynamic content:\n\n```python\nasync def extract_dynamic_content():\n    js_code = \"\"\"\n    const loadMoreButton = Array.from(document.querySelectorAll('button')).find(button => button.textContent.includes('Load More'));\n    if (loadMoreButton) {\n        loadMoreButton.click();\n        await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \"\"\"\n\n    wait_for = \"\"\"\n    () => {\n        const articles = document.querySelectorAll('article.tease-card');\n        return articles.length > 10;\n    }\n    \"\"\"\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            js_code=js_code,\n            wait_for=wait_for,\n            css_selector=\"article.tease-card\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Summarize each article, focusing on technology-related content\"\n            ),\n            bypass_cache=True,\n        )\n\n    summaries = json.loads(result.extracted_content)\n    print(f\"Number of summarized articles: {len(summaries)}\")\n\n    with open(\".data/tech_summaries.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(summaries, f, indent=2)\n\nasyncio.run(extract_dynamic_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling and extraction process.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document demonstrates the direct usage of the arun() method on an AsyncWebCrawler instance.",
      "ground_truth_relationship": "The documented example showcases how the AsyncWebCrawler.arun() method handles dynamic web content by accepting optional parameters like js_code, wait_for, and css_selector that allow JavaScript execution and selective content extraction through the LLMExtractionStrategy.",
      "ground_truth_trace_chain": "llm.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining JS Execution with LLM Extraction\n\nThis example demonstrates how to combine JavaScript execution with LLM extraction to handle dynamic content:\n\n```python\nasync def extract_dynamic_content():\n    js_code = \"\"\"\n    const loadMoreButton = Array.from(document.querySelectorAll('button')).find(button => button.textContent.includes('Load More'));\n    if (loadMoreButton) {\n        loadMoreButton.click();\n        await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \"\"\"\n\n    wait_for = \"\"\"\n    () => {\n        const articles = document.querySelectorAll('article.tease-card');\n        return articles.length > 10;\n    }\n    \"\"\"\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            js_code=js_code,\n            wait_for=wait_for,\n            css_selector=\"article.tease-card\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Summarize each article, focusing on technology-related content\"\n            ),\n            bypass_cache=True,\n        )\n\n    summaries = json.loads(result.extracted_content)\n    print(f\"Number of summarized articles: {len(summaries)}\")\n\n    with open(\".data/tech_summaries.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(summaries, f, indent=2)\n\nasyncio.run(extract_dynamic_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as evidenced by accessing the 'extracted_content' attribute of the result.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the result of arun() being used to access 'extracted_content', implying that CrawlResult is the return type of arun().",
      "ground_truth_relationship": "The CrawlResult class stores the extracted_content field which holds the LLM-processed article summaries demonstrated in the documentation example where technology-focused content is extracted from NBC News articles.",
      "ground_truth_trace_chain": "llm.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining JS Execution with LLM Extraction\n\nThis example demonstrates how to combine JavaScript execution with LLM extraction to handle dynamic content:\n\n```python\nasync def extract_dynamic_content():\n    js_code = \"\"\"\n    const loadMoreButton = Array.from(document.querySelectorAll('button')).find(button => button.textContent.includes('Load More'));\n    if (loadMoreButton) {\n        loadMoreButton.click();\n        await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \"\"\"\n\n    wait_for = \"\"\"\n    () => {\n        const articles = document.querySelectorAll('article.tease-card');\n        return articles.length > 10;\n    }\n    \"\"\"\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            js_code=js_code,\n            wait_for=wait_for,\n            css_selector=\"article.tease-card\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Summarize each article, focusing on technology-related content\"\n            ),\n            bypass_cache=True,\n        )\n\n    summaries = json.loads(result.extracted_content)\n    print(f\"Number of summarized articles: {len(summaries)}\")\n\n    with open(\".data/tech_summaries.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(summaries, f, indent=2)\n\nasyncio.run(extract_dynamic_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is implicitly used in the code example when accessing the extraction results.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document demonstrates accessing the 'extracted_content' attribute of the result returned by arun(), showing the connection to this specific CrawlResult attribute.",
      "ground_truth_relationship": "The extracted_content field stores the LLM-processed article summaries that are later parsed as JSON in the example documentation, serving as the bridge between raw crawled data and structured output.",
      "ground_truth_trace_chain": "llm.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining JS Execution with LLM Extraction\n\nThis example demonstrates how to combine JavaScript execution with LLM extraction to handle dynamic content:\n\n```python\nasync def extract_dynamic_content():\n    js_code = \"\"\"\n    const loadMoreButton = Array.from(document.querySelectorAll('button')).find(button => button.textContent.includes('Load More'));\n    if (loadMoreButton) {\n        loadMoreButton.click();\n        await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \"\"\"\n\n    wait_for = \"\"\"\n    () => {\n        const articles = document.querySelectorAll('article.tease-card');\n        return articles.length > 10;\n    }\n    \"\"\"\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            js_code=js_code,\n            wait_for=wait_for,\n            css_selector=\"article.tease-card\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Summarize each article, focusing on technology-related content\"\n            ),\n            bypass_cache=True,\n        )\n\n    summaries = json.loads(result.extracted_content)\n    print(f\"Number of summarized articles: {len(summaries)}\")\n\n    with open(\".data/tech_summaries.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(summaries, f, indent=2)\n\nasyncio.run(extract_dynamic_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundation for implementing different content extraction methods, including the LLMExtractionStrategy shown in the documentation example that uses GPT-4 to summarize articles.",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining JS Execution with LLM Extraction\n\nThis example demonstrates how to combine JavaScript execution with LLM extraction to handle dynamic content:\n\n```python\nasync def extract_dynamic_content():\n    js_code = \"\"\"\n    const loadMoreButton = Array.from(document.querySelectorAll('button')).find(button => button.textContent.includes('Load More'));\n    if (loadMoreButton) {\n        loadMoreButton.click();\n        await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \"\"\"\n\n    wait_for = \"\"\"\n    () => {\n        const articles = document.querySelectorAll('article.tease-card');\n        return articles.length > 10;\n    }\n    \"\"\"\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            js_code=js_code,\n            wait_for=wait_for,\n            css_selector=\"article.tease-card\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Summarize each article, focusing on technology-related content\"\n            ),\n            bypass_cache=True,\n        )\n\n    summaries = json.loads(result.extracted_content)\n    print(f\"Number of summarized articles: {len(summaries)}\")\n\n    with open(\".data/tech_summaries.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(summaries, f, indent=2)\n\nasyncio.run(extract_dynamic_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements the dynamic content extraction capabilities described in the documentation through its js_code execution and smart_wait methods, which handle JavaScript interaction and waiting for elements to load on the page.",
      "ground_truth_trace_chain": "llm.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Advanced Usage: Combining JS Execution with LLM Extraction\n\nThis example demonstrates how to combine JavaScript execution with LLM extraction to handle dynamic content:\n\n```python\nasync def extract_dynamic_content():\n    js_code = \"\"\"\n    const loadMoreButton = Array.from(document.querySelectorAll('button')).find(button => button.textContent.includes('Load More'));\n    if (loadMoreButton) {\n        loadMoreButton.click();\n        await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \"\"\"\n\n    wait_for = \"\"\"\n    () => {\n        const articles = document.querySelectorAll('article.tease-card');\n        return articles.length > 10;\n    }\n    \"\"\"\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=\"https://www.nbcnews.com/business\",\n            js_code=js_code,\n            wait_for=wait_for,\n            css_selector=\"article.tease-card\",\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                instruction=\"Summarize each article, focusing on technology-related content\"\n            ),\n            bypass_cache=True,\n        )\n\n    summaries = json.loads(result.extracted_content)\n    print(f\"Number of summarized articles: {len(summaries)}\")\n\n    with open(\".data/tech_summaries.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(summaries, f, indent=2)\n\nasyncio.run(extract_dynamic_content())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core interface methods that enable the advanced dynamic content extraction capabilities demonstrated in the documentation, particularly the crawl method that's essential for executing JavaScript and handling LLM extraction.",
      "ground_truth_trace_chain": "llm.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Combining Strategies\n\nYou can combine strategies for more powerful extraction:\n\n```python\n# First use CSS strategy for initial structure\ncss_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=css_strategy\n)\n\n# Then use LLM for semantic analysis\nllm_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=llm_strategy\n)\n```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to perform web crawling operations. It is used to execute the arun method for different extraction strategies.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The AsyncWebCrawler class supports combining strategies through its 'arun' method which accepts different extraction_strategy parameters, allowing sequential application of CSS and LLM strategies as shown in the documentation.",
      "ground_truth_trace_chain": "overview.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Combining Strategies\n\nYou can combine strategies for more powerful extraction:\n\n```python\n# First use CSS strategy for initial structure\ncss_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=css_strategy\n)\n\n# Then use LLM for semantic analysis\nllm_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=llm_strategy\n)\n```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method invocation",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code examples to perform crawling operations with different extraction strategies.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of arun() method, which is a part of the AsyncWebCrawler class, hence the intermediate step through AsyncWebCrawler.",
      "ground_truth_relationship": "The arun() method implements the documented combining strategies pattern by accepting an extraction_strategy parameter that allows different strategies to be passed in sequentially as shown in the documentation example.",
      "ground_truth_trace_chain": "overview.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Combining Strategies\n\nYou can combine strategies for more powerful extraction:\n\n```python\n# First use CSS strategy for initial structure\ncss_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=css_strategy\n)\n\n# Then use LLM for semantic analysis\nllm_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=llm_strategy\n)\n```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "strategy usage",
      "relationship_explanation": "The CosineStrategy is implicitly referenced as one of the extraction strategies that can be combined with others, although not directly used in the provided code snippet.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document mentions combining strategies, which implies the use of CosineStrategy through the AsyncWebCrawler's arun() method, hence the chain through AsyncWebCrawler and its arun() method.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Combining Strategies\n\nYou can combine strategies for more powerful extraction:\n\n```python\n# First use CSS strategy for initial structure\ncss_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=css_strategy\n)\n\n# Then use LLM for semantic analysis\nllm_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=llm_strategy\n)\n```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "strategy usage",
      "relationship_explanation": "The JsonCssExtractionStrategy is implicitly referenced as the CSS strategy that can be combined with other strategies, although not directly used in the provided code snippet.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document mentions using CSS strategy first, which implies the use of JsonCssExtractionStrategy through the AsyncWebCrawler's arun() method, hence the chain through AsyncWebCrawler and its arun() method.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements one part of the documented combination approach by using CSS selectors to extract structured data from HTML, which can then be combined with other strategies like LLM processing.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Combining Strategies\n\nYou can combine strategies for more powerful extraction:\n\n```python\n# First use CSS strategy for initial structure\ncss_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=css_strategy\n)\n\n# Then use LLM for semantic analysis\nllm_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=llm_strategy\n)\n```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_id": 24,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "strategy usage",
      "relationship_explanation": "The LLMExtractionStrategy is implicitly referenced as the LLM strategy that can be combined with other strategies, although not directly used in the provided code snippet.",
      "predicted_trace_chain": "docs/md_v2/extraction/overview.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> LLMExtractionStrategy",
      "predicted_trace_chain_explanation": "The document mentions using LLM for semantic analysis, which implies the use of LLMExtractionStrategy through the AsyncWebCrawler's arun() method, hence the chain through AsyncWebCrawler and its arun() method.",
      "ground_truth_relationship": "The LLMExtractionStrategy class enables the documented functionality of combined crawling strategies by providing a specialized extraction method that can process content after initial CSS-based extraction, using LLM models for semantic analysis through its extract() and run() methods.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Combining Strategies\n\nYou can combine strategies for more powerful extraction:\n\n```python\n# First use CSS strategy for initial structure\ncss_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=css_strategy\n)\n\n# Then use LLM for semantic analysis\nllm_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=llm_strategy\n)\n```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class provides the foundational structure for implementing different extraction strategies that can be combined sequentially as shown in the documentation through its abstract extract() method and parallel processing run() method.",
      "ground_truth_trace_chain": "overview.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Combining Strategies\n\nYou can combine strategies for more powerful extraction:\n\n```python\n# First use CSS strategy for initial structure\ncss_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=css_strategy\n)\n\n# Then use LLM for semantic analysis\nllm_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=llm_strategy\n)\n```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class enables storage of multiple extraction results by providing fields like extracted_content and metadata that can hold output from different strategies like CSS and LLM approaches shown in the documentation.",
      "ground_truth_trace_chain": "overview.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Combining Strategies\n\nYou can combine strategies for more powerful extraction:\n\n```python\n# First use CSS strategy for initial structure\ncss_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=css_strategy\n)\n\n# Then use LLM for semantic analysis\nllm_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=llm_strategy\n)\n```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class enables sequential execution of different extraction strategies through its crawl method, which returns AsyncCrawlResponse objects that can be used as input for subsequent extraction operations as shown in the documentation example.",
      "ground_truth_trace_chain": "overview.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Combining Strategies\n\nYou can combine strategies for more powerful extraction:\n\n```python\n# First use CSS strategy for initial structure\ncss_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=css_strategy\n)\n\n# Then use LLM for semantic analysis\nllm_result = await crawler.arun(\n    url=\"https://example.com\",\n    extraction_strategy=llm_strategy\n)\n```",
      "document_location": "docs/md_v2/extraction/overview.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class provides the foundational interface that allows different crawling strategies (like CSS and LLM) to be implemented and combined as shown in the documentation.",
      "ground_truth_trace_chain": "overview.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Metadata Extraction\n\nCrawl4AI automatically extracts and processes page metadata, providing valuable information about the content:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nmetadata = result.metadata\nprint(f\"Title: {metadata['title']}\")\nprint(f\"Description: {metadata['description']}\")\nprint(f\"Keywords: {metadata['keywords']}\")\nprint(f\"Author: {metadata['author']}\")\nprint(f\"Published Date: {metadata['published_date']}\")\nprint(f\"Modified Date: {metadata['modified_date']}\")\nprint(f\"Language: {metadata['language']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example to create a crawler instance and perform the crawling operation.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document uses AsyncWebCrawler to perform the crawl, which returns a CrawlResult containing the metadata.",
      "ground_truth_relationship": "The AsyncWebCrawler class processes webpage metadata through its aprocess_html method which extracts metadata into a dictionary stored in the CrawlResult object, exactly matching the documented metadata fields like title, description, and language that can be accessed as shown in the example.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Metadata Extraction\n\nCrawl4AI automatically extracts and processes page metadata, providing valuable information about the content:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nmetadata = result.metadata\nprint(f\"Title: {metadata['title']}\")\nprint(f\"Description: {metadata['description']}\")\nprint(f\"Keywords: {metadata['keywords']}\")\nprint(f\"Author: {metadata['author']}\")\nprint(f\"Published Date: {metadata['published_date']}\")\nprint(f\"Modified Date: {metadata['modified_date']}\")\nprint(f\"Language: {metadata['language']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the crawler.arun() method, containing the metadata information.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The AsyncWebCrawler's arun method returns a CrawlResult object, which contains the metadata accessed in the example.",
      "ground_truth_relationship": "The metadata extraction documented in the example is implemented through the metadata field in the CrawlResult class which stores the extracted page metadata as an optional dictionary.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Metadata Extraction\n\nCrawl4AI automatically extracts and processes page metadata, providing valuable information about the content:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nmetadata = result.metadata\nprint(f\"Title: {metadata['title']}\")\nprint(f\"Description: {metadata['description']}\")\nprint(f\"Keywords: {metadata['keywords']}\")\nprint(f\"Author: {metadata['author']}\")\nprint(f\"Published Date: {metadata['published_date']}\")\nprint(f\"Modified Date: {metadata['modified_date']}\")\nprint(f\"Language: {metadata['language']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 17,
      "artifact_title": "CrawlResult.metadata",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The metadata attribute of CrawlResult is explicitly accessed in the code example to retrieve various metadata fields.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> CrawlResult -> CrawlResult.metadata",
      "predicted_trace_chain_explanation": "The document shows how to access the metadata attribute of the CrawlResult returned by AsyncWebCrawler.",
      "ground_truth_relationship": "The metadata property of CrawlResult stores extracted page metadata as an optional dictionary containing fields like title, description, keywords, author, and dates as documented in the usage example.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult.metadata",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Metadata Extraction\n\nCrawl4AI automatically extracts and processes page metadata, providing valuable information about the content:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nmetadata = result.metadata\nprint(f\"Title: {metadata['title']}\")\nprint(f\"Description: {metadata['description']}\")\nprint(f\"Keywords: {metadata['keywords']}\")\nprint(f\"Author: {metadata['author']}\")\nprint(f\"Published Date: {metadata['published_date']}\")\nprint(f\"Modified Date: {metadata['modified_date']}\")\nprint(f\"Language: {metadata['language']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface for implementing metadata extraction through its crawl method, which returns AsyncCrawlResponse objects containing the metadata fields shown in the documentation example.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Metadata Extraction\n\nCrawl4AI automatically extracts and processes page metadata, providing valuable information about the content:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nmetadata = result.metadata\nprint(f\"Title: {metadata['title']}\")\nprint(f\"Description: {metadata['description']}\")\nprint(f\"Keywords: {metadata['keywords']}\")\nprint(f\"Author: {metadata['author']}\")\nprint(f\"Published Date: {metadata['published_date']}\")\nprint(f\"Modified Date: {metadata['modified_date']}\")\nprint(f\"Language: {metadata['language']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncWebCrawler.arun()",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method processes webpage content and returns a CrawlResult object containing metadata fields like title, description, and language that can be accessed through the .metadata property as shown in the documentation example.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Metadata Extraction\n\nCrawl4AI automatically extracts and processes page metadata, providing valuable information about the content:\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nmetadata = result.metadata\nprint(f\"Title: {metadata['title']}\")\nprint(f\"Description: {metadata['description']}\")\nprint(f\"Keywords: {metadata['keywords']}\")\nprint(f\"Author: {metadata['author']}\")\nprint(f\"Published Date: {metadata['published_date']}\")\nprint(f\"Modified Date: {metadata['modified_date']}\")\nprint(f\"Language: {metadata['language']}\")\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class extracts metadata from web pages by navigating to URLs and accessing page content through Playwright's browser automation, which enables the metadata extraction functionality documented in the example code snippet.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Custom Headers\n\nAdd security-related headers:\n\n```python\nheaders = {\n    \"X-Forwarded-For\": \"203.0.113.195\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cache-Control\": \"no-cache\",\n    \"Pragma\": \"no-cache\"\n}\n\nasync with AsyncWebCrawler(headers=headers) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate how to set custom headers for the web crawler.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The documentation directly shows how to use AsyncWebCrawler with custom headers, forming a direct trace.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements custom header support through its constructor's **kwargs parameter, which gets passed to the AsyncPlaywrightCrawlerStrategy to configure HTTP headers like X-Forwarded-For and Cache-Control as shown in the documentation example.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Custom Headers\n\nAdd security-related headers:\n\n```python\nheaders = {\n    \"X-Forwarded-For\": \"203.0.113.195\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cache-Control\": \"no-cache\",\n    \"Pragma\": \"no-cache\"\n}\n\nasync with AsyncWebCrawler(headers=headers) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method invocation",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling operation with the specified URL.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows the usage of AsyncWebCrawler, which leads to the invocation of its arun() method to perform the actual crawling.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method accepts custom headers through its crawler_strategy component, allowing users to set security-related headers like X-Forwarded-For and Cache-Control as shown in the documentation.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Custom Headers\n\nAdd security-related headers:\n\n```python\nheaders = {\n    \"X-Forwarded-For\": \"203.0.113.195\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cache-Control\": \"no-cache\",\n    \"Pragma\": \"no-cache\"\n}\n\nasync with AsyncWebCrawler(headers=headers) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 1,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "implementation",
      "relationship_explanation": "While not explicitly mentioned, AsyncPlaywrightCrawlerStrategy is the default implementation of AsyncCrawlerStrategy used by AsyncWebCrawler. It would handle the custom headers set in the example.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy",
      "predicted_trace_chain_explanation": "The AsyncWebCrawler uses AsyncPlaywrightCrawlerStrategy internally to perform the actual crawling operations, including handling custom headers.",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements custom header functionality through its set_custom_headers method and context.set_extra_http_headers, allowing headers like X-Forwarded-For and Cache-Control to be set as shown in the documentation.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Custom Headers\n\nAdd security-related headers:\n\n```python\nheaders = {\n    \"X-Forwarded-For\": \"203.0.113.195\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cache-Control\": \"no-cache\",\n    \"Pragma\": \"no-cache\"\n}\n\nasync with AsyncWebCrawler(headers=headers) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_id": 0,
      "artifact_title": "AsyncCrawlerStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "interface",
      "relationship_explanation": "AsyncCrawlerStrategy is the base class for AsyncPlaywrightCrawlerStrategy, which is implicitly used when creating an AsyncWebCrawler instance.",
      "predicted_trace_chain": "proxy-security.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncCrawlerStrategy",
      "predicted_trace_chain_explanation": "AsyncWebCrawler uses AsyncPlaywrightCrawlerStrategy, which implements the AsyncCrawlerStrategy interface, forming the complete chain of dependencies.",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines core crawler methods that enable custom header manipulation shown in the documentation through its crawl and update_user_agent methods.",
      "ground_truth_trace_chain": "proxy-security.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Custom Headers\n\nAdd security-related headers:\n\n```python\nheaders = {\n    \"X-Forwarded-For\": \"203.0.113.195\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cache-Control\": \"no-cache\",\n    \"Pragma\": \"no-cache\"\n}\n\nasync with AsyncWebCrawler(headers=headers) as crawler:\n    result = await crawler.arun(url=\"https://example.com\")\n```",
      "document_location": "docs/md_v2/advanced/proxy-security.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class stores response_headers as an optional dictionary field to capture the custom headers used in HTTP requests like those shown in the documentation example.",
      "ground_truth_trace_chain": "proxy-security.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Example 1: Extract Structured Data\n\nIn this example, we use the `LLMExtractionStrategy` to extract structured data (model names and their fees) from the OpenAI pricing page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\nfrom pydantic import BaseModel, Field\n\nclass OpenAIModelFee(BaseModel):\n    model_name: str = Field(..., description=\"Name of the OpenAI model.\")\n    input_fee: str = Field(..., description=\"Fee for input token for the OpenAI model.\")\n    output_fee: str = Field(..., description=\"Fee for output token for the OpenAI model.\")\n\nasync def extract_openai_fees():\n    url = 'https://openai.com/api/pricing/'\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=1,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\", # Or use ollama like provider=\"ollama/nemotron\"\n                api_token=os.getenv('OPENAI_API_KEY'),\n                schema=OpenAIModelFee.model_json_schema(),\n                extraction_type=\"schema\",\n                instruction=\"From the crawled content, extract all mentioned model names along with their \"\n                            \"fees for input and output tokens. Make sure not to miss anything in the entire content. \"\n                            'One extracted model JSON format should look like this: '\n                            '{ \"model_name\": \"GPT-4\", \"input_fee\": \"US$10.00 / 1M tokens\", \"output_fee\": \"US$30.00 / 1M tokens\" }'\n            ),\n            bypass_cache=True,\n        )\n\n    model_fees = json.loads(result.extracted_content)\n    print(f\"Number of models extracted: {len(model_fees)}\")\n\n    with open(\".data/openai_fees.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(model_fees, f, indent=2)\n\nasyncio.run(extract_openai_fees())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the example code to create a crawler instance for extracting structured data from a webpage.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation in llm.md demonstrates the usage of AsyncWebCrawler, which is then used to call its arun() method for crawling and extraction.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the web crawling functionality demonstrated in the documentation by providing asynchronous methods to crawl URLs, process HTML content, and extract structured data using strategies like LLMExtractionStrategy.",
      "ground_truth_trace_chain": "llm.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 1: Extract Structured Data\n\nIn this example, we use the `LLMExtractionStrategy` to extract structured data (model names and their fees) from the OpenAI pricing page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\nfrom pydantic import BaseModel, Field\n\nclass OpenAIModelFee(BaseModel):\n    model_name: str = Field(..., description=\"Name of the OpenAI model.\")\n    input_fee: str = Field(..., description=\"Fee for input token for the OpenAI model.\")\n    output_fee: str = Field(..., description=\"Fee for output token for the OpenAI model.\")\n\nasync def extract_openai_fees():\n    url = 'https://openai.com/api/pricing/'\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=1,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\", # Or use ollama like provider=\"ollama/nemotron\"\n                api_token=os.getenv('OPENAI_API_KEY'),\n                schema=OpenAIModelFee.model_json_schema(),\n                extraction_type=\"schema\",\n                instruction=\"From the crawled content, extract all mentioned model names along with their \"\n                            \"fees for input and output tokens. Make sure not to miss anything in the entire content. \"\n                            'One extracted model JSON format should look like this: '\n                            '{ \"model_name\": \"GPT-4\", \"input_fee\": \"US$10.00 / 1M tokens\", \"output_fee\": \"US$30.00 / 1M tokens\" }'\n            ),\n            bypass_cache=True,\n        )\n\n    model_fees = json.loads(result.extracted_content)\n    print(f\"Number of models extracted: {len(model_fees)}\")\n\n    with open(\".data/openai_fees.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(model_fees, f, indent=2)\n\nasyncio.run(extract_openai_fees())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the example to perform the crawling and extraction process.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation shows how to use AsyncWebCrawler, which leads to calling its arun() method for the actual crawling operation.",
      "ground_truth_relationship": "The example documentation shows a specific usage of AsyncWebCrawler.arun() to extract OpenAI model pricing data, where the code processes the URL with an LLMExtractionStrategy instance and handles caching, HTML processing, and error management to return a CrawlResult.",
      "ground_truth_trace_chain": "llm.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 1: Extract Structured Data\n\nIn this example, we use the `LLMExtractionStrategy` to extract structured data (model names and their fees) from the OpenAI pricing page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\nfrom pydantic import BaseModel, Field\n\nclass OpenAIModelFee(BaseModel):\n    model_name: str = Field(..., description=\"Name of the OpenAI model.\")\n    input_fee: str = Field(..., description=\"Fee for input token for the OpenAI model.\")\n    output_fee: str = Field(..., description=\"Fee for output token for the OpenAI model.\")\n\nasync def extract_openai_fees():\n    url = 'https://openai.com/api/pricing/'\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=1,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\", # Or use ollama like provider=\"ollama/nemotron\"\n                api_token=os.getenv('OPENAI_API_KEY'),\n                schema=OpenAIModelFee.model_json_schema(),\n                extraction_type=\"schema\",\n                instruction=\"From the crawled content, extract all mentioned model names along with their \"\n                            \"fees for input and output tokens. Make sure not to miss anything in the entire content. \"\n                            'One extracted model JSON format should look like this: '\n                            '{ \"model_name\": \"GPT-4\", \"input_fee\": \"US$10.00 / 1M tokens\", \"output_fee\": \"US$30.00 / 1M tokens\" }'\n            ),\n            bypass_cache=True,\n        )\n\n    model_fees = json.loads(result.extracted_content)\n    print(f\"Number of models extracted: {len(model_fees)}\")\n\n    with open(\".data/openai_fees.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(model_fees, f, indent=2)\n\nasyncio.run(extract_openai_fees())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 7,
      "artifact_title": "LLMExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The LLMExtractionStrategy class is explicitly used in the example to define the extraction strategy for the crawler.",
      "predicted_trace_chain": "llm.md -> LLMExtractionStrategy -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The documentation demonstrates creating an LLMExtractionStrategy instance, which is then passed to AsyncWebCrawler.arun() as a parameter for defining the extraction behavior.",
      "ground_truth_relationship": "The LLMExtractionStrategy class implements the structured data extraction functionality demonstrated in the documentation by using provider-based LLM models to parse HTML content according to a predefined Pydantic schema, as shown in the OpenAIModelFee example.",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> LLMExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 1: Extract Structured Data\n\nIn this example, we use the `LLMExtractionStrategy` to extract structured data (model names and their fees) from the OpenAI pricing page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\nfrom pydantic import BaseModel, Field\n\nclass OpenAIModelFee(BaseModel):\n    model_name: str = Field(..., description=\"Name of the OpenAI model.\")\n    input_fee: str = Field(..., description=\"Fee for input token for the OpenAI model.\")\n    output_fee: str = Field(..., description=\"Fee for output token for the OpenAI model.\")\n\nasync def extract_openai_fees():\n    url = 'https://openai.com/api/pricing/'\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=1,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\", # Or use ollama like provider=\"ollama/nemotron\"\n                api_token=os.getenv('OPENAI_API_KEY'),\n                schema=OpenAIModelFee.model_json_schema(),\n                extraction_type=\"schema\",\n                instruction=\"From the crawled content, extract all mentioned model names along with their \"\n                            \"fees for input and output tokens. Make sure not to miss anything in the entire content. \"\n                            'One extracted model JSON format should look like this: '\n                            '{ \"model_name\": \"GPT-4\", \"input_fee\": \"US$10.00 / 1M tokens\", \"output_fee\": \"US$30.00 / 1M tokens\" }'\n            ),\n            bypass_cache=True,\n        )\n\n    model_fees = json.loads(result.extracted_content)\n    print(f\"Number of models extracted: {len(model_fees)}\")\n\n    with open(\".data/openai_fees.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(model_fees, f, indent=2)\n\nasyncio.run(extract_openai_fees())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return value of the arun() method, as evidenced by accessing the 'extracted_content' attribute of the result.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The documentation shows the usage of AsyncWebCrawler.arun(), which returns a CrawlResult object, from which the extracted_content is accessed.",
      "ground_truth_relationship": "The CrawlResult class defines the structure that holds the extraction results shown in the documentation example, particularly storing the extracted OpenAI model fees in the extracted_content field.",
      "ground_truth_trace_chain": "llm.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 1: Extract Structured Data\n\nIn this example, we use the `LLMExtractionStrategy` to extract structured data (model names and their fees) from the OpenAI pricing page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\nfrom pydantic import BaseModel, Field\n\nclass OpenAIModelFee(BaseModel):\n    model_name: str = Field(..., description=\"Name of the OpenAI model.\")\n    input_fee: str = Field(..., description=\"Fee for input token for the OpenAI model.\")\n    output_fee: str = Field(..., description=\"Fee for output token for the OpenAI model.\")\n\nasync def extract_openai_fees():\n    url = 'https://openai.com/api/pricing/'\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=1,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\", # Or use ollama like provider=\"ollama/nemotron\"\n                api_token=os.getenv('OPENAI_API_KEY'),\n                schema=OpenAIModelFee.model_json_schema(),\n                extraction_type=\"schema\",\n                instruction=\"From the crawled content, extract all mentioned model names along with their \"\n                            \"fees for input and output tokens. Make sure not to miss anything in the entire content. \"\n                            'One extracted model JSON format should look like this: '\n                            '{ \"model_name\": \"GPT-4\", \"input_fee\": \"US$10.00 / 1M tokens\", \"output_fee\": \"US$30.00 / 1M tokens\" }'\n            ),\n            bypass_cache=True,\n        )\n\n    model_fees = json.loads(result.extracted_content)\n    print(f\"Number of models extracted: {len(model_fees)}\")\n\n    with open(\".data/openai_fees.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(model_fees, f, indent=2)\n\nasyncio.run(extract_openai_fees())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute access",
      "relationship_explanation": "The 'extracted_content' attribute of the CrawlResult is explicitly accessed in the example to retrieve the extracted data.",
      "predicted_trace_chain": "llm.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The documentation shows the result of AsyncWebCrawler.arun() being used to access the extracted_content attribute of the CrawlResult.",
      "ground_truth_relationship": "The extracted_content property stores the LLM-extracted structured data (model fees) as a JSON string which is then parsed and saved to a file in the example documentation.",
      "ground_truth_trace_chain": "llm.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 1: Extract Structured Data\n\nIn this example, we use the `LLMExtractionStrategy` to extract structured data (model names and their fees) from the OpenAI pricing page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\nfrom pydantic import BaseModel, Field\n\nclass OpenAIModelFee(BaseModel):\n    model_name: str = Field(..., description=\"Name of the OpenAI model.\")\n    input_fee: str = Field(..., description=\"Fee for input token for the OpenAI model.\")\n    output_fee: str = Field(..., description=\"Fee for output token for the OpenAI model.\")\n\nasync def extract_openai_fees():\n    url = 'https://openai.com/api/pricing/'\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=1,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\", # Or use ollama like provider=\"ollama/nemotron\"\n                api_token=os.getenv('OPENAI_API_KEY'),\n                schema=OpenAIModelFee.model_json_schema(),\n                extraction_type=\"schema\",\n                instruction=\"From the crawled content, extract all mentioned model names along with their \"\n                            \"fees for input and output tokens. Make sure not to miss anything in the entire content. \"\n                            'One extracted model JSON format should look like this: '\n                            '{ \"model_name\": \"GPT-4\", \"input_fee\": \"US$10.00 / 1M tokens\", \"output_fee\": \"US$30.00 / 1M tokens\" }'\n            ),\n            bypass_cache=True,\n        )\n\n    model_fees = json.loads(result.extracted_content)\n    print(f\"Number of models extracted: {len(model_fees)}\")\n\n    with open(\".data/openai_fees.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(model_fees, f, indent=2)\n\nasyncio.run(extract_openai_fees())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class defines the core interface and parallel processing logic that enables concrete implementations like LLMExtractionStrategy to extract structured data from web content, as demonstrated in the documentation example with OpenAI model fees.",
      "ground_truth_trace_chain": "llm.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Example 1: Extract Structured Data\n\nIn this example, we use the `LLMExtractionStrategy` to extract structured data (model names and their fees) from the OpenAI pricing page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\nfrom pydantic import BaseModel, Field\n\nclass OpenAIModelFee(BaseModel):\n    model_name: str = Field(..., description=\"Name of the OpenAI model.\")\n    input_fee: str = Field(..., description=\"Fee for input token for the OpenAI model.\")\n    output_fee: str = Field(..., description=\"Fee for output token for the OpenAI model.\")\n\nasync def extract_openai_fees():\n    url = 'https://openai.com/api/pricing/'\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=1,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\", # Or use ollama like provider=\"ollama/nemotron\"\n                api_token=os.getenv('OPENAI_API_KEY'),\n                schema=OpenAIModelFee.model_json_schema(),\n                extraction_type=\"schema\",\n                instruction=\"From the crawled content, extract all mentioned model names along with their \"\n                            \"fees for input and output tokens. Make sure not to miss anything in the entire content. \"\n                            'One extracted model JSON format should look like this: '\n                            '{ \"model_name\": \"GPT-4\", \"input_fee\": \"US$10.00 / 1M tokens\", \"output_fee\": \"US$30.00 / 1M tokens\" }'\n            ),\n            bypass_cache=True,\n        )\n\n    model_fees = json.loads(result.extracted_content)\n    print(f\"Number of models extracted: {len(model_fees)}\")\n\n    with open(\".data/openai_fees.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(model_fees, f, indent=2)\n\nasyncio.run(extract_openai_fees())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class provides the core web crawling functionality that enables the extraction example to fetch and process web content from the OpenAI pricing page before applying the LLMExtractionStrategy for data extraction.",
      "ground_truth_trace_chain": "llm.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Example 1: Extract Structured Data\n\nIn this example, we use the `LLMExtractionStrategy` to extract structured data (model names and their fees) from the OpenAI pricing page.\n\n```python\nimport os\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\nfrom pydantic import BaseModel, Field\n\nclass OpenAIModelFee(BaseModel):\n    model_name: str = Field(..., description=\"Name of the OpenAI model.\")\n    input_fee: str = Field(..., description=\"Fee for input token for the OpenAI model.\")\n    output_fee: str = Field(..., description=\"Fee for output token for the OpenAI model.\")\n\nasync def extract_openai_fees():\n    url = 'https://openai.com/api/pricing/'\n\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        result = await crawler.arun(\n            url=url,\n            word_count_threshold=1,\n            extraction_strategy=LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\", # Or use ollama like provider=\"ollama/nemotron\"\n                api_token=os.getenv('OPENAI_API_KEY'),\n                schema=OpenAIModelFee.model_json_schema(),\n                extraction_type=\"schema\",\n                instruction=\"From the crawled content, extract all mentioned model names along with their \"\n                            \"fees for input and output tokens. Make sure not to miss anything in the entire content. \"\n                            'One extracted model JSON format should look like this: '\n                            '{ \"model_name\": \"GPT-4\", \"input_fee\": \"US$10.00 / 1M tokens\", \"output_fee\": \"US$30.00 / 1M tokens\" }'\n            ),\n            bypass_cache=True,\n        )\n\n    model_fees = json.loads(result.extracted_content)\n    print(f\"Number of models extracted: {len(model_fees)}\")\n\n    with open(\".data/openai_fees.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(model_fees, f, indent=2)\n\nasyncio.run(extract_openai_fees())\n```",
      "document_location": "docs/md_v2/extraction/llm.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy class defines the abstract interface that enables the asynchronous web crawling functionality shown in the documentation example, where AsyncWebCrawler uses this interface to fetch OpenAI pricing data.",
      "ground_truth_trace_chain": "llm.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\nHere's the simplest way to crawl a webpage:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=\"https://example.com\")\n        print(result.markdown)  # Print clean markdown content\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly imported and used in the code example to create a crawler instance.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so there are no intermediate steps.",
      "ground_truth_relationship": "The code implements an AsyncWebCrawler class with an arun method that enables asynchronous web crawling exactly as shown in the basic usage documentation, including the async context manager pattern using __aenter__ and __aexit__ methods.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\nHere's the simplest way to crawl a webpage:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=\"https://example.com\")\n        print(result.markdown)  # Print clean markdown content\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to crawl a webpage.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which is necessary to access its arun() method.",
      "ground_truth_relationship": "The code implements the documented basic usage example by providing an async method 'arun()' that accepts a URL parameter and handles web crawling, content extraction, and caching logic to return a CrawlResult object containing the crawled content.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\nHere's the simplest way to crawl a webpage:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=\"https://example.com\")\n        print(result.markdown)  # Print clean markdown content\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value usage",
      "relationship_explanation": "While not explicitly named, the CrawlResult is implicitly used as the return value of the arun() method, as evidenced by accessing the 'markdown' attribute.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler's arun() method, which returns a CrawlResult object.",
      "ground_truth_relationship": "The CrawlResult class defines all possible return values from the crawler.arun() method shown in the documentation, including the markdown property that's used in the example print statement.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\nHere's the simplest way to crawl a webpage:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=\"https://example.com\")\n        print(result.markdown)  # Print clean markdown content\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_id": 15,
      "artifact_title": "CrawlResult.markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The markdown attribute of the CrawlResult is explicitly accessed in the code example to print the clean markdown content.",
      "predicted_trace_chain": "simple-crawling.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.markdown",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler's arun() method, which returns a CrawlResult object, from which the markdown attribute is accessed.",
      "ground_truth_relationship": "The CrawlResult.markdown field stores the cleaned webpage content returned by AsyncWebCrawler.arun() which can be accessed as shown in the basic usage example.",
      "ground_truth_trace_chain": "simple-crawling.md -> CrawlResult.markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\nHere's the simplest way to crawl a webpage:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=\"https://example.com\")\n        print(result.markdown)  # Print clean markdown content\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods used by the AsyncWebCrawler shown in the basic usage documentation, where crawl() is the underlying method powering the arun() functionality.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\nHere's the simplest way to crawl a webpage:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(url=\"https://example.com\")\n        print(result.markdown)  # Print clean markdown content\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
      "document_location": "docs/md_v2/basic/simple-crawling.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class provides the core implementation for the documented AsyncWebCrawler usage example by managing browser automation, page navigation, and content extraction through the crawl() method that processes the URL parameter shown in the basic usage documentation.",
      "ground_truth_trace_chain": "simple-crawling.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Media Processing\n\nCrawl4AI provides comprehensive media extraction and analysis capabilities. It automatically detects and processes various types of media elements while maintaining their context and relevance.\n\n### Image Processing\nThe library handles various image scenarios, including:\n- Regular images\n- Lazy-loaded images\n- Background images\n- Responsive images\n- Image metadata and context\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nfor image in result.media[\"images\"]:\n    # Each image includes rich metadata\n    print(f\"Source: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Context: {image['context']}\")  # Surrounding text\n    print(f\"Relevance score: {image['score']}\")  # 0-10 score\n```\n\n### Handling Lazy-Loaded Content\nCrawl4aai already handles lazy loading for media elements. You can also customize the wait time for lazy-loaded content:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:img[data-src]\",  # Wait for lazy images\n    delay_before_return_html=2.0   # Additional wait time\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code examples provided. It is instantiated and its 'arun' method is called to perform web crawling operations.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document demonstrates usage of AsyncWebCrawler, which is necessary to access the arun method for crawling.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements media processing through its aprocess_html method, which extracts and processes images with metadata (src, alt, context) using WebScrappingStrategy and stores the results in the media dictionary as documented in the code examples.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Media Processing\n\nCrawl4AI provides comprehensive media extraction and analysis capabilities. It automatically detects and processes various types of media elements while maintaining their context and relevance.\n\n### Image Processing\nThe library handles various image scenarios, including:\n- Regular images\n- Lazy-loaded images\n- Background images\n- Responsive images\n- Image metadata and context\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nfor image in result.media[\"images\"]:\n    # Each image includes rich metadata\n    print(f\"Source: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Context: {image['context']}\")  # Surrounding text\n    print(f\"Relevance score: {image['score']}\")  # 0-10 score\n```\n\n### Handling Lazy-Loaded Content\nCrawl4aai already handles lazy loading for media elements. You can also customize the wait time for lazy-loaded content:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:img[data-src]\",  # Wait for lazy images\n    delay_before_return_html=2.0   # Additional wait time\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in multiple code examples to perform web crawling and content extraction.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document directly shows usage of the arun() method, which is part of the AsyncWebCrawler class.",
      "ground_truth_relationship": "The arun() method implements the core crawling functionality described in the documentation, handling both regular and lazy-loaded media content through its customizable parameters like wait_for and delay_before_return_html while supporting caching and screenshot capabilities.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Media Processing\n\nCrawl4AI provides comprehensive media extraction and analysis capabilities. It automatically detects and processes various types of media elements while maintaining their context and relevance.\n\n### Image Processing\nThe library handles various image scenarios, including:\n- Regular images\n- Lazy-loaded images\n- Background images\n- Responsive images\n- Image metadata and context\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nfor image in result.media[\"images\"]:\n    # Each image includes rich metadata\n    print(f\"Source: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Context: {image['context']}\")  # Surrounding text\n    print(f\"Relevance score: {image['score']}\")  # 0-10 score\n```\n\n### Handling Lazy-Loaded Content\nCrawl4aai already handles lazy loading for media elements. You can also customize the wait time for lazy-loaded content:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:img[data-src]\",  # Wait for lazy images\n    delay_before_return_html=2.0   # Additional wait time\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "output",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of the arun() method. Various attributes of this class (media, links) are accessed in the code examples.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult object, which is then used to access various attributes in the examples.",
      "ground_truth_relationship": "The CrawlResult class implements the media processing functionality described in the documentation through its 'media' dictionary field, which stores lists of processed media elements including images with their metadata like source, alt text, description, context, and relevance scores.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Media Processing\n\nCrawl4AI provides comprehensive media extraction and analysis capabilities. It automatically detects and processes various types of media elements while maintaining their context and relevance.\n\n### Image Processing\nThe library handles various image scenarios, including:\n- Regular images\n- Lazy-loaded images\n- Background images\n- Responsive images\n- Image metadata and context\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nfor image in result.media[\"images\"]:\n    # Each image includes rich metadata\n    print(f\"Source: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Context: {image['context']}\")  # Surrounding text\n    print(f\"Relevance score: {image['score']}\")  # 0-10 score\n```\n\n### Handling Lazy-Loaded Content\nCrawl4aai already handles lazy loading for media elements. You can also customize the wait time for lazy-loaded content:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:img[data-src]\",  # Wait for lazy images\n    delay_before_return_html=2.0   # Additional wait time\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 16,
      "artifact_title": "CrawlResult.media",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The media attribute of CrawlResult is explicitly used in the code examples to access image, video, and audio content extracted from the webpage.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.media",
      "predicted_trace_chain_explanation": "The document shows how to access the media attribute after calling arun(), which returns a CrawlResult object.",
      "ground_truth_relationship": "The CrawlResult.media dictionary property stores media-related data like images and their metadata (source, alt text, description, context, relevance score) extracted during web crawling.",
      "ground_truth_trace_chain": "content-processing.md -> CrawlResult.media",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Media Processing\n\nCrawl4AI provides comprehensive media extraction and analysis capabilities. It automatically detects and processes various types of media elements while maintaining their context and relevance.\n\n### Image Processing\nThe library handles various image scenarios, including:\n- Regular images\n- Lazy-loaded images\n- Background images\n- Responsive images\n- Image metadata and context\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nfor image in result.media[\"images\"]:\n    # Each image includes rich metadata\n    print(f\"Source: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Context: {image['context']}\")  # Surrounding text\n    print(f\"Relevance score: {image['score']}\")  # 0-10 score\n```\n\n### Handling Lazy-Loaded Content\nCrawl4aai already handles lazy loading for media elements. You can also customize the wait time for lazy-loaded content:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:img[data-src]\",  # Wait for lazy images\n    delay_before_return_html=2.0   # Additional wait time\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_id": 14,
      "artifact_title": "CrawlResult.links",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The links attribute of CrawlResult is implicitly used in the code examples to access link information extracted from the webpage.",
      "predicted_trace_chain": "content-processing.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.links",
      "predicted_trace_chain_explanation": "The document demonstrates accessing the links attribute from the CrawlResult object returned by arun().",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Media Processing\n\nCrawl4AI provides comprehensive media extraction and analysis capabilities. It automatically detects and processes various types of media elements while maintaining their context and relevance.\n\n### Image Processing\nThe library handles various image scenarios, including:\n- Regular images\n- Lazy-loaded images\n- Background images\n- Responsive images\n- Image metadata and context\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nfor image in result.media[\"images\"]:\n    # Each image includes rich metadata\n    print(f\"Source: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Context: {image['context']}\")  # Surrounding text\n    print(f\"Relevance score: {image['score']}\")  # 0-10 score\n```\n\n### Handling Lazy-Loaded Content\nCrawl4aai already handles lazy loading for media elements. You can also customize the wait time for lazy-loaded content:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:img[data-src]\",  # Wait for lazy images\n    delay_before_return_html=2.0   # Additional wait time\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class provides the core interface for implementing media crawling capabilities described in the documentation, with the crawl() method being responsible for extracting images and handling lazy-loaded content.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Media Processing\n\nCrawl4AI provides comprehensive media extraction and analysis capabilities. It automatically detects and processes various types of media elements while maintaining their context and relevance.\n\n### Image Processing\nThe library handles various image scenarios, including:\n- Regular images\n- Lazy-loaded images\n- Background images\n- Responsive images\n- Image metadata and context\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\n\nfor image in result.media[\"images\"]:\n    # Each image includes rich metadata\n    print(f\"Source: {image['src']}\")\n    print(f\"Alt text: {image['alt']}\")\n    print(f\"Description: {image['desc']}\")\n    print(f\"Context: {image['context']}\")  # Surrounding text\n    print(f\"Relevance score: {image['score']}\")  # 0-10 score\n```\n\n### Handling Lazy-Loaded Content\nCrawl4aai already handles lazy loading for media elements. You can also customize the wait time for lazy-loaded content:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    wait_for=\"css:img[data-src]\",  # Wait for lazy images\n    delay_before_return_html=2.0   # Additional wait time\n)\n```",
      "document_location": "docs/md_v2/advanced/content-processing.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements lazy-loaded image handling through its smart_wait() method, which detects and waits for lazy-loaded elements using CSS selectors or JavaScript functions as specified in the documentation's wait_for parameter.",
      "ground_truth_trace_chain": "content-processing.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### NlpSentenceChunking\n\n`NlpSentenceChunking` uses NLP models to split text into sentences, ensuring accurate sentence boundaries.\n\n#### When to Use\n- Ideal for texts where sentence boundaries are crucial.\n- Useful for creating chunks that preserve grammatical structures.\n\n#### Parameters\n- None.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import NlpSentenceChunking\n\nchunker = NlpSentenceChunking()\n\n# Sample text\ntext = \"This is a sample text. It will be split into sentences. Here's another sentence.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 25,
      "artifact_title": "NlpSentenceChunking",
      "predicted_relationship": "explicit",
      "relationship_type": "implements",
      "relationship_explanation": "The NlpSentenceChunking class is explicitly mentioned and described in the documentation. It is presented as a chunking strategy that uses NLP models to split text into sentences.",
      "predicted_trace_chain": "chunking.md -> ChunkingStrategy -> NlpSentenceChunking",
      "predicted_trace_chain_explanation": "The document describes chunking strategies, which are implementations of the ChunkingStrategy abstract base class. NlpSentenceChunking is a specific implementation of this strategy.",
      "ground_truth_relationship": "The code implements sentence chunking by using NLTK's sent_tokenize function to split text into sentences, which directly fulfills the documentation's promise of using NLP models for accurate sentence boundary detection.",
      "ground_truth_trace_chain": "chunking.md -> ChunkingStrategy -> NlpSentenceChunking",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### NlpSentenceChunking\n\n`NlpSentenceChunking` uses NLP models to split text into sentences, ensuring accurate sentence boundaries.\n\n#### When to Use\n- Ideal for texts where sentence boundaries are crucial.\n- Useful for creating chunks that preserve grammatical structures.\n\n#### Parameters\n- None.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import NlpSentenceChunking\n\nchunker = NlpSentenceChunking()\n\n# Sample text\ntext = \"This is a sample text. It will be split into sentences. Here's another sentence.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 6,
      "artifact_title": "ChunkingStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "inherits",
      "relationship_explanation": "While not explicitly mentioned, NlpSentenceChunking is described as a chunking strategy, which implies it inherits from the ChunkingStrategy abstract base class.",
      "predicted_trace_chain": "chunking.md -> ChunkingStrategy -> NlpSentenceChunking",
      "predicted_trace_chain_explanation": "The document describes chunking strategies, which are implementations of the ChunkingStrategy abstract base class. NlpSentenceChunking is a specific implementation of this strategy.",
      "ground_truth_relationship": "The abstract ChunkingStrategy class defines the base chunking interface that NlpSentenceChunking must implement through its required chunk() method, which takes text input and returns a list of sentence chunks.",
      "ground_truth_trace_chain": "chunking.md -> ChunkingStrategy -> ChunkingStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### NlpSentenceChunking\n\n`NlpSentenceChunking` uses NLP models to split text into sentences, ensuring accurate sentence boundaries.\n\n#### When to Use\n- Ideal for texts where sentence boundaries are crucial.\n- Useful for creating chunks that preserve grammatical structures.\n\n#### Parameters\n- None.\n\n#### Example\n```python\nfrom crawl4ai.chunking_strategy import NlpSentenceChunking\n\nchunker = NlpSentenceChunking()\n\n# Sample text\ntext = \"This is a sample text. It will be split into sentences. Here's another sentence.\"\n\n# Chunk the text\nchunks = chunker.chunk(text)\nprint(chunks)\n```",
      "document_location": "docs/md_v2/extraction/chunking.md",
      "artifact_id": 25,
      "artifact_title": "NlpSentenceChunking.chunk()",
      "predicted_relationship": "implicit",
      "relationship_type": "implements",
      "relationship_explanation": "The chunk() method is implicitly referenced in the example usage, where it is called on an instance of NlpSentenceChunking to split the text into chunks.",
      "predicted_trace_chain": "chunking.md -> ChunkingStrategy -> NlpSentenceChunking -> NlpSentenceChunking.chunk()",
      "predicted_trace_chain_explanation": "The document describes the NlpSentenceChunking strategy, which is an implementation of ChunkingStrategy. The chunk() method is a key part of this strategy's functionality, used to perform the actual text chunking.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Fit Markdown\n\nMost relevant content extracted and converted to markdown. Ideal for:\n- Article extraction\n- Main content focus\n- Removing boilerplate\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nprint(result.fit_markdown)  # Only the main content\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "Usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate how to access the fit_markdown attribute of the crawl result.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document describes output formats, which are accessed through the AsyncWebCrawler. The AsyncWebCrawler returns a CrawlResult object containing the fit_markdown attribute.",
      "ground_truth_relationship": "The .fit_markdown property mentioned in the documentation is implemented through the aprocess_html method which extracts and processes the result['fit_markdown'] field during web content crawling to provide cleaned, main content-focused markdown output.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Fit Markdown\n\nMost relevant content extracted and converted to markdown. Ideal for:\n- Article extraction\n- Main content focus\n- Removing boilerplate\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nprint(result.fit_markdown)  # Only the main content\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "Output",
      "relationship_explanation": "The CrawlResult class is implicitly used as it contains the fit_markdown attribute that is accessed in the code example.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document describes the fit_markdown output, which is part of the CrawlResult returned by AsyncWebCrawler's arun method.",
      "ground_truth_relationship": "The CrawlResult class implements the fit_markdown property documented in the markdown section by storing the extracted and cleaned main content as an Optional[str] field that removes boilerplate content.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Fit Markdown\n\nMost relevant content extracted and converted to markdown. Ideal for:\n- Article extraction\n- Main content focus\n- Removing boilerplate\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nprint(result.fit_markdown)  # Only the main content\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_id": 12,
      "artifact_title": "CrawlResult.fit_markdown",
      "predicted_relationship": "explicit",
      "relationship_type": "Output Attribute",
      "relationship_explanation": "The fit_markdown attribute is explicitly mentioned and accessed in the code example to demonstrate how to get the most relevant content in markdown format.",
      "predicted_trace_chain": "output-formats.md -> AsyncWebCrawler -> CrawlResult -> CrawlResult.fit_markdown",
      "predicted_trace_chain_explanation": "The document describes the fit_markdown output, which is accessed through the CrawlResult object returned by AsyncWebCrawler's arun method.",
      "ground_truth_relationship": "The fit_markdown property holds a string containing the cleaned and extracted main content from crawled web pages as markdown format, with boilerplate removed.",
      "ground_truth_trace_chain": "output-formats.md -> CrawlResult.fit_markdown",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Fit Markdown\n\nMost relevant content extracted and converted to markdown. Ideal for:\n- Article extraction\n- Main content focus\n- Removing boilerplate\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nprint(result.fit_markdown)  # Only the main content\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface for web crawling operations, including the crawl() method that enables the markdown extraction functionality described in the documentation.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Fit Markdown\n\nMost relevant content extracted and converted to markdown. Ideal for:\n- Article extraction\n- Main content focus\n- Removing boilerplate\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nprint(result.fit_markdown)  # Only the main content\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncWebCrawler.arun()",
      "ground_truth_relationship": "The code implements an async crawling method that processes HTML content and extracts markdown-formatted text through an extraction strategy, which directly supports the documented fit_markdown feature for retrieving main content from web pages.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Fit Markdown\n\nMost relevant content extracted and converted to markdown. Ideal for:\n- Article extraction\n- Main content focus\n- Removing boilerplate\n\n```python\nresult = await crawler.arun(url=\"https://example.com\")\nprint(result.fit_markdown)  # Only the main content\n```",
      "document_location": "docs/md_v2/basic/output-formats.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements web crawling functionality that enables content extraction and markdown conversion by using Playwright to navigate web pages and retrieve their HTML content, which can then be processed to extract relevant content as described in the documentation.",
      "ground_truth_trace_chain": "output-formats.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Example 1: Basic Session-Based Crawling\n\nLet's start with a basic example of session-based crawling:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def basic_session_crawl():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        session_id = \"my_session\"\n        url = \"https://example.com/dynamic-content\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                js_code=\"document.querySelector('.load-more-button').click();\" if page > 0 else None,\n                css_selector=\".content-item\",\n                bypass_cache=True\n            )\n            \n            print(f\"Page {page + 1}: Found {result.extracted_content.count('.content-item')} items\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n\nasyncio.run(basic_session_crawl())\n```\n\nThis example demonstrates:\n1. Using a consistent `session_id` across multiple `arun` calls\n2. Executing JavaScript to load more content after the first page\n3. Using a CSS selector to extract specific content\n4. Properly closing the session after crawling",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to demonstrate session-based crawling. It is instantiated and used as the main crawler object.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler for session-based crawling.",
      "ground_truth_relationship": "The documented session-based crawling example demonstrates the usage of the AsyncWebCrawler class's core methods like __aenter__, arun, and crawler_strategy.kill_session for handling persistent browser sessions with specific user interactions.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 1: Basic Session-Based Crawling\n\nLet's start with a basic example of session-based crawling:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def basic_session_crawl():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        session_id = \"my_session\"\n        url = \"https://example.com/dynamic-content\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                js_code=\"document.querySelector('.load-more-button').click();\" if page > 0 else None,\n                css_selector=\".content-item\",\n                bypass_cache=True\n            )\n            \n            print(f\"Page {page + 1}: Found {result.extracted_content.count('.content-item')} items\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n\nasyncio.run(basic_session_crawl())\n```\n\nThis example demonstrates:\n1. Using a consistent `session_id` across multiple `arun` calls\n2. Executing JavaScript to load more content after the first page\n3. Using a CSS selector to extract specific content\n4. Properly closing the session after crawling",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform crawling operations. It is used with various parameters to demonstrate session-based crawling.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which includes calling its arun() method for crawling.",
      "ground_truth_relationship": "The code implements session-based crawling through the arun() method by accepting a session_id parameter which maintains state across multiple crawl requests, exactly as demonstrated in the documentation example where a consistent session_id is used across multiple crawl operations.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 1: Basic Session-Based Crawling\n\nLet's start with a basic example of session-based crawling:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def basic_session_crawl():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        session_id = \"my_session\"\n        url = \"https://example.com/dynamic-content\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                js_code=\"document.querySelector('.load-more-button').click();\" if page > 0 else None,\n                css_selector=\".content-item\",\n                bypass_cache=True\n            )\n            \n            print(f\"Page {page + 1}: Found {result.extracted_content.count('.content-item')} items\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n\nasyncio.run(basic_session_crawl())\n```\n\nThis example demonstrates:\n1. Using a consistent `session_id` across multiple `arun` calls\n2. Executing JavaScript to load more content after the first page\n3. Using a CSS selector to extract specific content\n4. Properly closing the session after crawling",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 2,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The kill_session() method is explicitly called at the end of the crawling process to properly close the session. It's accessed through the crawler_strategy attribute of AsyncWebCrawler.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_trace_chain_explanation": "The document demonstrates using AsyncWebCrawler, which uses AsyncPlaywrightCrawlerStrategy internally, and finally calls its kill_session() method.",
      "ground_truth_relationship": "The kill_session method directly implements the session cleanup mentioned in the documentation's step 4 by closing both the page and context objects and removing the session from memory when crawling is complete.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 1: Basic Session-Based Crawling\n\nLet's start with a basic example of session-based crawling:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def basic_session_crawl():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        session_id = \"my_session\"\n        url = \"https://example.com/dynamic-content\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                js_code=\"document.querySelector('.load-more-button').click();\" if page > 0 else None,\n                css_selector=\".content-item\",\n                bypass_cache=True\n            )\n            \n            print(f\"Page {page + 1}: Found {result.extracted_content.count('.content-item')} items\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n\nasyncio.run(basic_session_crawl())\n```\n\nThis example demonstrates:\n1. Using a consistent `session_id` across multiple `arun` calls\n2. Executing JavaScript to load more content after the first page\n3. Using a CSS selector to extract specific content\n4. Properly closing the session after crawling",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 3,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_relationship": "implicit",
      "relationship_type": "related functionality",
      "relationship_explanation": "While not directly used in the basic example, the set_hook() method is mentioned in the text as a way to set custom hooks for handling complex loading scenarios in session-based crawling.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_trace_chain_explanation": "The document discusses AsyncWebCrawler, which uses AsyncPlaywrightCrawlerStrategy, and mentions the ability to set hooks, which is done through the set_hook() method.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 1: Basic Session-Based Crawling\n\nLet's start with a basic example of session-based crawling:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def basic_session_crawl():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        session_id = \"my_session\"\n        url = \"https://example.com/dynamic-content\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                js_code=\"document.querySelector('.load-more-button').click();\" if page > 0 else None,\n                css_selector=\".content-item\",\n                bypass_cache=True\n            )\n            \n            print(f\"Page {page + 1}: Found {result.extracted_content.count('.content-item')} items\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n\nasyncio.run(basic_session_crawl())\n```\n\nThis example demonstrates:\n1. Using a consistent `session_id` across multiple `arun` calls\n2. Executing JavaScript to load more content after the first page\n3. Using a CSS selector to extract specific content\n4. Properly closing the session after crawling",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "return value",
      "relationship_explanation": "While not explicitly mentioned, the CrawlResult class is implicitly used as the return type of the arun() method. The code example accesses the extracted_content attribute of the result.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows usage of AsyncWebCrawler's arun() method, which returns a CrawlResult object that is then used in the example.",
      "ground_truth_relationship": "The CrawlResult class defines the structure for storing crawling results that are referenced in the example code, particularly through the 'result' variable which captures extracted content, session IDs, and other crawl-related data.",
      "ground_truth_trace_chain": "session-management-advanced.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 1: Basic Session-Based Crawling\n\nLet's start with a basic example of session-based crawling:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def basic_session_crawl():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        session_id = \"my_session\"\n        url = \"https://example.com/dynamic-content\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                js_code=\"document.querySelector('.load-more-button').click();\" if page > 0 else None,\n                css_selector=\".content-item\",\n                bypass_cache=True\n            )\n            \n            print(f\"Page {page + 1}: Found {result.extracted_content.count('.content-item')} items\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n\nasyncio.run(basic_session_crawl())\n```\n\nThis example demonstrates:\n1. Using a consistent `session_id` across multiple `arun` calls\n2. Executing JavaScript to load more content after the first page\n3. Using a CSS selector to extract specific content\n4. Properly closing the session after crawling",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is implicitly used in the code example when counting the number of items found in each crawl iteration.",
      "predicted_trace_chain": "session-management-advanced.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document demonstrates using AsyncWebCrawler's arun() method, which returns a CrawlResult, and then accessing its extracted_content attribute.",
      "ground_truth_relationship": "The extracted_content property stores the HTML content matching the '.content-item' CSS selector as shown in the example where it's used to count found items after each crawl.",
      "ground_truth_trace_chain": "session-management-advanced.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Example 1: Basic Session-Based Crawling\n\nLet's start with a basic example of session-based crawling:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def basic_session_crawl():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        session_id = \"my_session\"\n        url = \"https://example.com/dynamic-content\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                js_code=\"document.querySelector('.load-more-button').click();\" if page > 0 else None,\n                css_selector=\".content-item\",\n                bypass_cache=True\n            )\n            \n            print(f\"Page {page + 1}: Found {result.extracted_content.count('.content-item')} items\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n\nasyncio.run(basic_session_crawl())\n```\n\nThis example demonstrates:\n1. Using a consistent `session_id` across multiple `arun` calls\n2. Executing JavaScript to load more content after the first page\n3. Using a CSS selector to extract specific content\n4. Properly closing the session after crawling",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract base class defines the core methods that enable session-based crawling functionality shown in the documentation example, with crawl() and crawl_many() methods being essential for handling both single and batch URL processing.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Example 1: Basic Session-Based Crawling\n\nLet's start with a basic example of session-based crawling:\n\n```python\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def basic_session_crawl():\n    async with AsyncWebCrawler(verbose=True) as crawler:\n        session_id = \"my_session\"\n        url = \"https://example.com/dynamic-content\"\n\n        for page in range(3):\n            result = await crawler.arun(\n                url=url,\n                session_id=session_id,\n                js_code=\"document.querySelector('.load-more-button').click();\" if page > 0 else None,\n                css_selector=\".content-item\",\n                bypass_cache=True\n            )\n            \n            print(f\"Page {page + 1}: Found {result.extracted_content.count('.content-item')} items\")\n\n        await crawler.crawler_strategy.kill_session(session_id)\n\nasyncio.run(basic_session_crawl())\n```\n\nThis example demonstrates:\n1. Using a consistent `session_id` across multiple `arun` calls\n2. Executing JavaScript to load more content after the first page\n3. Using a CSS selector to extract specific content\n4. Properly closing the session after crawling",
      "document_location": "docs/md_v2/advanced/session-management-advanced.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements session-based crawling by maintaining a sessions dictionary that maps session_ids to browser contexts and pages, allowing for stateful interactions across multiple requests as shown in the documentation example.",
      "ground_truth_trace_chain": "session-management-advanced.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "# Cosine Strategy\n\nThe Cosine Strategy in Crawl4AI uses similarity-based clustering to identify and extract relevant content sections from web pages. This strategy is particularly useful when you need to find and extract content based on semantic similarity rather than structural patterns.\n\n## How It Works\n\nThe Cosine Strategy:\n1. Breaks down page content into meaningful chunks\n2. Converts text into vector representations\n3. Calculates similarity between chunks\n4. Clusters similar content together\n5. Ranks and filters content based on relevance",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class definition",
      "relationship_explanation": "The text directly describes the CosineStrategy class, its functionality, and how to use it for content extraction based on semantic similarity.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document directly discusses the CosineStrategy class, so there's a direct trace from the documentation to the class.",
      "ground_truth_relationship": "The code implements the documented 5-step Cosine Strategy workflow through the extract() method, which breaks content into chunks (step 1), generates embeddings via get_embeddings() (step 2), performs similarity calculations in hierarchical_clustering() (step 3), groups content using cluster labels (step 4), and ranks content using filter_clusters_by_word_count() (step 5).",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Cosine Strategy\n\nThe Cosine Strategy in Crawl4AI uses similarity-based clustering to identify and extract relevant content sections from web pages. This strategy is particularly useful when you need to find and extract content based on semantic similarity rather than structural patterns.\n\n## How It Works\n\nThe Cosine Strategy:\n1. Breaks down page content into meaningful chunks\n2. Converts text into vector representations\n3. Calculates similarity between chunks\n4. Clusters similar content together\n5. Ranks and filters content based on relevance",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class instantiation",
      "relationship_explanation": "The text provides multiple examples of instantiating the CosineStrategy class with various parameters.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document shows how to create instances of CosineStrategy, forming a direct trace to the class.",
      "ground_truth_relationship": "The code implements the documented 5-step Cosine Strategy workflow through the extract() method, which breaks content into chunks (step 1), generates embeddings via get_embeddings() (step 2), performs similarity calculations in hierarchical_clustering() (step 3), groups content using cluster labels (step 4), and ranks content using filter_clusters_by_word_count() (step 5).",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Cosine Strategy\n\nThe Cosine Strategy in Crawl4AI uses similarity-based clustering to identify and extract relevant content sections from web pages. This strategy is particularly useful when you need to find and extract content based on semantic similarity rather than structural patterns.\n\n## How It Works\n\nThe Cosine Strategy:\n1. Breaks down page content into meaningful chunks\n2. Converts text into vector representations\n3. Calculates similarity between chunks\n4. Clusters similar content together\n5. Ranks and filters content based on relevance",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "method usage",
      "relationship_explanation": "While not explicitly mentioned, the usage of CosineStrategy in crawler.arun() implies that the strategy has methods for content extraction that are called internally.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document shows CosineStrategy being used with AsyncWebCrawler, implying a connection between these classes in the extraction process.",
      "ground_truth_relationship": "The code implements the documented 5-step Cosine Strategy workflow through the extract() method, which breaks content into chunks (step 1), generates embeddings via get_embeddings() (step 2), performs similarity calculations in hierarchical_clustering() (step 3), groups content using cluster labels (step 4), and ranks content using filter_clusters_by_word_count() (step 5).",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Cosine Strategy\n\nThe Cosine Strategy in Crawl4AI uses similarity-based clustering to identify and extract relevant content sections from web pages. This strategy is particularly useful when you need to find and extract content based on semantic similarity rather than structural patterns.\n\n## How It Works\n\nThe Cosine Strategy:\n1. Breaks down page content into meaningful chunks\n2. Converts text into vector representations\n3. Calculates similarity between chunks\n4. Clusters similar content together\n5. Ranks and filters content based on relevance",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is used in examples to demonstrate how to apply the CosineStrategy for content extraction.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document shows CosineStrategy being used with AsyncWebCrawler, establishing a trace from the documentation through CosineStrategy to AsyncWebCrawler.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Cosine Strategy\n\nThe Cosine Strategy in Crawl4AI uses similarity-based clustering to identify and extract relevant content sections from web pages. This strategy is particularly useful when you need to find and extract content based on semantic similarity rather than structural patterns.\n\n## How It Works\n\nThe Cosine Strategy:\n1. Breaks down page content into meaningful chunks\n2. Converts text into vector representations\n3. Calculates similarity between chunks\n4. Clusters similar content together\n5. Ranks and filters content based on relevance",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "implicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is used in examples to demonstrate how to perform extraction using CosineStrategy.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows CosineStrategy being used with AsyncWebCrawler's arun() method, establishing a trace through the class to this specific method.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Cosine Strategy\n\nThe Cosine Strategy in Crawl4AI uses similarity-based clustering to identify and extract relevant content sections from web pages. This strategy is particularly useful when you need to find and extract content based on semantic similarity rather than structural patterns.\n\n## How It Works\n\nThe Cosine Strategy:\n1. Breaks down page content into meaningful chunks\n2. Converts text into vector representations\n3. Calculates similarity between chunks\n4. Clusters similar content together\n5. Ranks and filters content based on relevance",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The CrawlResult class is implicitly used as the return type of crawler.arun(), containing fields like extracted_content and success.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document implies the use of CrawlResult through the access of its fields in the examples, tracing from the strategy through the crawling process to the result.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Cosine Strategy\n\nThe Cosine Strategy in Crawl4AI uses similarity-based clustering to identify and extract relevant content sections from web pages. This strategy is particularly useful when you need to find and extract content based on semantic similarity rather than structural patterns.\n\n## How It Works\n\nThe Cosine Strategy:\n1. Breaks down page content into meaningful chunks\n2. Converts text into vector representations\n3. Calculates similarity between chunks\n4. Clusters similar content together\n5. Ranks and filters content based on relevance",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The extracted_content attribute of CrawlResult is accessed in examples to retrieve the content extracted by CosineStrategy.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows the use of extracted_content from the crawl result, tracing from the strategy through the crawling process to this specific attribute.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Cosine Strategy\n\nThe Cosine Strategy in Crawl4AI uses similarity-based clustering to identify and extract relevant content sections from web pages. This strategy is particularly useful when you need to find and extract content based on semantic similarity rather than structural patterns.\n\n## How It Works\n\nThe Cosine Strategy:\n1. Breaks down page content into meaningful chunks\n2. Converts text into vector representations\n3. Calculates similarity between chunks\n4. Clusters similar content together\n5. Ranks and filters content based on relevance",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 20,
      "artifact_title": "CrawlResult.success",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The success attribute of CrawlResult is checked in the error handling example to determine if the extraction was successful.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.success",
      "predicted_trace_chain_explanation": "The document demonstrates checking the success attribute of the crawl result, tracing from the strategy through the crawling process to this specific attribute.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Cosine Strategy\n\nThe Cosine Strategy in Crawl4AI uses similarity-based clustering to identify and extract relevant content sections from web pages. This strategy is particularly useful when you need to find and extract content based on semantic similarity rather than structural patterns.\n\n## How It Works\n\nThe Cosine Strategy:\n1. Breaks down page content into meaningful chunks\n2. Converts text into vector representations\n3. Calculates similarity between chunks\n4. Clusters similar content together\n5. Ranks and filters content based on relevance",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 10,
      "artifact_title": "CrawlResult.error_message",
      "predicted_relationship": "implicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The error_message attribute of CrawlResult is used in the error handling example to display the error if extraction fails.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.error_message",
      "predicted_trace_chain_explanation": "The document shows accessing the error_message attribute in case of failure, tracing from the strategy through the crawling process to this specific attribute.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Cosine Strategy\n\nThe Cosine Strategy in Crawl4AI uses similarity-based clustering to identify and extract relevant content sections from web pages. This strategy is particularly useful when you need to find and extract content based on semantic similarity rather than structural patterns.\n\n## How It Works\n\nThe Cosine Strategy:\n1. Breaks down page content into meaningful chunks\n2. Converts text into vector representations\n3. Calculates similarity between chunks\n4. Clusters similar content together\n5. Ranks and filters content based on relevance",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 6,
      "artifact_title": "ChunkingStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "While not explicitly mentioned, CosineStrategy likely inherits from ChunkingStrategy as it performs content chunking, which is a core functionality of chunking strategies.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> ChunkingStrategy",
      "predicted_trace_chain_explanation": "The document describes CosineStrategy's chunking behavior, implying a relationship to the ChunkingStrategy base class.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Class",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "# Cosine Strategy\n\nThe Cosine Strategy in Crawl4AI uses similarity-based clustering to identify and extract relevant content sections from web pages. This strategy is particularly useful when you need to find and extract content based on semantic similarity rather than structural patterns.\n\n## How It Works\n\nThe Cosine Strategy:\n1. Breaks down page content into meaningful chunks\n2. Converts text into vector representations\n3. Calculates similarity between chunks\n4. Clusters similar content together\n5. Ranks and filters content based on relevance",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 21,
      "artifact_title": "ExtractionStrategy",
      "predicted_relationship": "implicit",
      "relationship_type": "base class",
      "relationship_explanation": "CosineStrategy is described as an extraction strategy, implying it likely inherits from the ExtractionStrategy base class.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy -> ExtractionStrategy",
      "predicted_trace_chain_explanation": "The document presents CosineStrategy as an extraction strategy, suggesting a relationship to the ExtractionStrategy base class.",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class provides the foundational structure for implementing the documented Cosine Strategy by defining the interface for content extraction and parallel processing through its extract() and run() methods.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Screenshot Capabilities\n\nCapture page screenshots with enhanced error handling:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    screenshot=True,                # Enable screenshot\n    screenshot_wait_for=2.0        # Wait 2 seconds before capture\n)\n\nif result.screenshot:  # Base64 encoded image\n    import base64\n    with open(\"screenshot.png\", \"wb\") as f:\n        f.write(base64.b64decode(result.screenshot))\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is implicitly used in the code example, as it's the main class for performing asynchronous web crawling operations.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> CrawlResult",
      "predicted_trace_chain_explanation": "The document describes configuration for AsyncWebCrawler, which returns a CrawlResult containing the screenshot data.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements screenshot capabilities through its arun() method, which accepts a screenshot boolean parameter and stores the captured image data in the screenshot_data variable, which is then included in the returned CrawlResult object.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Screenshot Capabilities\n\nCapture page screenshots with enhanced error handling:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    screenshot=True,                # Enable screenshot\n    screenshot_wait_for=2.0        # Wait 2 seconds before capture\n)\n\nif result.screenshot:  # Base64 encoded image\n    import base64\n    with open(\"screenshot.png\", \"wb\") as f:\n        f.write(base64.b64decode(result.screenshot))\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly used in the code example to perform the crawl operation with screenshot capabilities.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document shows how to use the arun() method, which is part of AsyncWebCrawler and returns a CrawlResult.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method implements screenshot functionality by accepting a 'screenshot' boolean parameter and storing the captured screenshot data in the screenshot_data variable, which is later included in the CrawlResult object returned to the user.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Screenshot Capabilities\n\nCapture page screenshots with enhanced error handling:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    screenshot=True,                # Enable screenshot\n    screenshot_wait_for=2.0        # Wait 2 seconds before capture\n)\n\nif result.screenshot:  # Base64 encoded image\n    import base64\n    with open(\"screenshot.png\", \"wb\") as f:\n        f.write(base64.b64decode(result.screenshot))\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "usage",
      "relationship_explanation": "The CrawlResult class is implicitly used as it's the return type of the arun() method, containing the screenshot data.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The arun() method returns a CrawlResult object, which is then used to access the screenshot data.",
      "ground_truth_relationship": "The CrawlResult class enables screenshot functionality through its screenshot field which stores the Base64-encoded image data as documented in the screenshot capabilities example.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Screenshot Capabilities\n\nCapture page screenshots with enhanced error handling:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    screenshot=True,                # Enable screenshot\n    screenshot_wait_for=2.0        # Wait 2 seconds before capture\n)\n\nif result.screenshot:  # Base64 encoded image\n    import base64\n    with open(\"screenshot.png\", \"wb\") as f:\n        f.write(base64.b64decode(result.screenshot))\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_id": 18,
      "artifact_title": "CrawlResult.screenshot",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The screenshot attribute of CrawlResult is explicitly used in the code example to access the captured screenshot data.",
      "predicted_trace_chain": "browser-config.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.screenshot",
      "predicted_trace_chain_explanation": "The document shows how to access the screenshot data from the CrawlResult object returned by arun().",
      "ground_truth_relationship": "The screenshot property in CrawlResult stores the captured webpage screenshot as a base64-encoded string that can be decoded into a PNG image file.",
      "ground_truth_trace_chain": "browser-config.md -> CrawlResult.screenshot",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Screenshot Capabilities\n\nCapture page screenshots with enhanced error handling:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    screenshot=True,                # Enable screenshot\n    screenshot_wait_for=2.0        # Wait 2 seconds before capture\n)\n\nif result.screenshot:  # Base64 encoded image\n    import base64\n    with open(\"screenshot.png\", \"wb\") as f:\n        f.write(base64.b64decode(result.screenshot))\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the take_screenshot() method that implements the documented screenshot capability, allowing derived crawler classes to capture page screenshots with customizable wait times.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Screenshot Capabilities\n\nCapture page screenshots with enhanced error handling:\n\n```python\nresult = await crawler.arun(\n    url=\"https://example.com\",\n    screenshot=True,                # Enable screenshot\n    screenshot_wait_for=2.0        # Wait 2 seconds before capture\n)\n\nif result.screenshot:  # Base64 encoded image\n    import base64\n    with open(\"screenshot.png\", \"wb\") as f:\n        f.write(base64.b64decode(result.screenshot))\n```",
      "document_location": "docs/md_v2/basic/browser-config.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements screenshot functionality through its take_screenshot method, which captures a full-page base64-encoded image and includes error handling that generates a black error image if the screenshot fails.",
      "ground_truth_trace_chain": "browser-config.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Target content type\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3                    # Similarity threshold\n)\n\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com/reviews\",\n        extraction_strategy=strategy\n    )\n    \n    content = result.extracted_content\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 7,
      "artifact_title": "CosineStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "class definition and usage",
      "relationship_explanation": "The CosineStrategy class is explicitly mentioned and used in the code example. It is the main focus of this documentation section, explaining how to use and configure it for content extraction.",
      "predicted_trace_chain": "cosine.md -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document directly introduces and explains the CosineStrategy class.",
      "ground_truth_relationship": "The code implements the CosineStrategy class with configurable parameters for semantic filtering, word count thresholds, and similarity thresholds exactly as shown in the basic usage documentation example, allowing users to create instances with custom filtering criteria for web content extraction.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> CosineStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Target content type\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3                    # Similarity threshold\n)\n\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com/reviews\",\n        extraction_strategy=strategy\n    )\n    \n    content = result.extracted_content\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "class usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to perform the web crawling operation with the CosineStrategy.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document shows how to use AsyncWebCrawler with CosineStrategy. AsyncWebCrawler is necessary to execute the crawling operation that utilizes the CosineStrategy.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements the documented functionality by providing an async context manager with arun() method that accepts URL and extraction strategy parameters, exactly matching the basic usage example shown in the documentation.",
      "ground_truth_trace_chain": "cosine.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Target content type\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3                    # Similarity threshold\n)\n\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com/reviews\",\n        extraction_strategy=strategy\n    )\n    \n    content = result.extracted_content\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method usage",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling operation with the specified extraction strategy.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler -> AsyncWebCrawler.arun() -> CosineStrategy",
      "predicted_trace_chain_explanation": "The document demonstrates using the arun() method of AsyncWebCrawler to execute the crawling with CosineStrategy. This method is necessary to initiate the crawling process.",
      "ground_truth_relationship": "The code implements an asynchronous crawling method that accepts the extraction_strategy parameter shown in the documentation example, processing the URL with configurable thresholds and returning a CrawlResult containing extracted content.",
      "ground_truth_trace_chain": "cosine.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Target content type\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3                    # Similarity threshold\n)\n\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com/reviews\",\n        extraction_strategy=strategy\n    )\n    \n    content = result.extracted_content\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 8,
      "artifact_title": "CrawlResult",
      "predicted_relationship": "implicit",
      "relationship_type": "class usage",
      "relationship_explanation": "While not explicitly named, the CrawlResult class is implicitly used as the return type of the arun() method, as evidenced by accessing the 'extracted_content' attribute of the result.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler.arun() -> CrawlResult",
      "predicted_trace_chain_explanation": "The document implicitly refers to CrawlResult when accessing the result of the arun() method. CrawlResult is the expected return type of arun(), containing the extracted content.",
      "ground_truth_relationship": "The CrawlResult class defines the structure that holds the crawling output, including the extracted_content field shown being accessed in the documentation's example code.",
      "ground_truth_trace_chain": "cosine.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Target content type\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3                    # Similarity threshold\n)\n\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com/reviews\",\n        extraction_strategy=strategy\n    )\n    \n    content = result.extracted_content\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_id": 11,
      "artifact_title": "CrawlResult.extracted_content",
      "predicted_relationship": "explicit",
      "relationship_type": "attribute usage",
      "relationship_explanation": "The 'extracted_content' attribute of the CrawlResult is explicitly accessed in the code example to retrieve the extracted content from the crawling operation.",
      "predicted_trace_chain": "cosine.md -> AsyncWebCrawler.arun() -> CrawlResult -> CrawlResult.extracted_content",
      "predicted_trace_chain_explanation": "The document shows accessing the extracted_content attribute of the crawl result. This attribute is necessary to retrieve the content extracted by the CosineStrategy.",
      "ground_truth_relationship": "The extracted_content property holds the text content gathered by the crawler after applying the specified semantic filtering and clustering strategy.",
      "ground_truth_trace_chain": "cosine.md -> CrawlResult.extracted_content",
      "traceability_granularity": "Statement-level",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Target content type\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3                    # Similarity threshold\n)\n\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com/reviews\",\n        extraction_strategy=strategy\n    )\n    \n    content = result.extracted_content\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy base class defines the core interface and parallel processing functionality shown in the documentation example, where specific strategies like CosineStrategy inherit and implement the extract method with their own parameters.",
      "ground_truth_trace_chain": "cosine.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Target content type\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3                    # Similarity threshold\n)\n\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com/reviews\",\n        extraction_strategy=strategy\n    )\n    \n    content = result.extracted_content\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The code implements an AsyncPlaywrightCrawlerStrategy class that powers the AsyncWebCrawler shown in the documentation, handling the low-level browser automation needed to execute the semantic content extraction described in the example usage.",
      "ground_truth_trace_chain": "cosine.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "## Basic Usage\n\n```python\nfrom crawl4ai.extraction_strategy import CosineStrategy\n\nstrategy = CosineStrategy(\n    semantic_filter=\"product reviews\",    # Target content type\n    word_count_threshold=10,             # Minimum words per cluster\n    sim_threshold=0.3                    # Similarity threshold\n)\n\nasync with AsyncWebCrawler() as crawler:\n    result = await crawler.arun(\n        url=\"https://example.com/reviews\",\n        extraction_strategy=strategy\n    )\n    \n    content = result.extracted_content\n```",
      "document_location": "docs/md_v2/extraction/cosine.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods that enable the documented crawler usage pattern, including the main crawl() method that processes URLs and returns responses.",
      "ground_truth_trace_chain": "cosine.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Advanced Session-Based Crawling with Dynamic Content For modern web applications with dynamic content loading, here's how to handle pagination and content updates: ```python async def crawl_dynamic_content(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/microsoft/TypeScript/commits/main\" session_id = \"typescript_commits_session\" js_next_page = \"\"\" const button = document.querySelector('a[data-testid=\"pagination-next-button\"]'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.firstCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.Box-sc-g0xbh4-0\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.markdown-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3):  # Crawl 3 pages result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.Box-sc-g0xbh4-0\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True, headless=False, ) await crawler.crawler_strategy.kill_session(session_id) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 4,
      "artifact_title": "AsyncWebCrawler",
      "predicted_relationship": "explicit",
      "relationship_type": "usage",
      "relationship_explanation": "The AsyncWebCrawler class is explicitly used in the code example to create an instance for crawling dynamic content.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "predicted_trace_chain_explanation": "The document directly demonstrates the usage of AsyncWebCrawler, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The AsyncWebCrawler class implements session-based dynamic content crawling through its arun method, which supports pagination and content updates via custom JavaScript injection (js_next_page) and wait conditions as shown in the documentation example.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Advanced Session-Based Crawling with Dynamic Content For modern web applications with dynamic content loading, here's how to handle pagination and content updates: ```python async def crawl_dynamic_content(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/microsoft/TypeScript/commits/main\" session_id = \"typescript_commits_session\" js_next_page = \"\"\" const button = document.querySelector('a[data-testid=\"pagination-next-button\"]'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.firstCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.Box-sc-g0xbh4-0\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.markdown-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3):  # Crawl 3 pages result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.Box-sc-g0xbh4-0\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True, headless=False, ) await crawler.crawler_strategy.kill_session(session_id) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 5,
      "artifact_title": "AsyncWebCrawler.arun()",
      "predicted_relationship": "explicit",
      "relationship_type": "method_call",
      "relationship_explanation": "The arun() method of AsyncWebCrawler is explicitly called in the code example to perform the crawling operation.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncWebCrawler.arun()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which leads to the call of its arun() method.",
      "ground_truth_relationship": "The AsyncWebCrawler.arun() method enables session-based dynamic crawling by accepting parameters like session_id, js_code, and wait_for that allow executing JavaScript and waiting for dynamic content updates as described in the documentation example.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncWebCrawler.arun()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Advanced Session-Based Crawling with Dynamic Content For modern web applications with dynamic content loading, here's how to handle pagination and content updates: ```python async def crawl_dynamic_content(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/microsoft/TypeScript/commits/main\" session_id = \"typescript_commits_session\" js_next_page = \"\"\" const button = document.querySelector('a[data-testid=\"pagination-next-button\"]'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.firstCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.Box-sc-g0xbh4-0\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.markdown-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3):  # Crawl 3 pages result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.Box-sc-g0xbh4-0\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True, headless=False, ) await crawler.crawler_strategy.kill_session(session_id) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 23,
      "artifact_title": "JsonCssExtractionStrategy",
      "predicted_relationship": "explicit",
      "relationship_type": "instantiation",
      "relationship_explanation": "An instance of JsonCssExtractionStrategy is explicitly created in the code example with a specific schema for content extraction.",
      "predicted_trace_chain": "quickstart.md -> JsonCssExtractionStrategy",
      "predicted_trace_chain_explanation": "The document directly demonstrates the instantiation of JsonCssExtractionStrategy, so no intermediate steps are necessary.",
      "ground_truth_relationship": "The JsonCssExtractionStrategy class implements the structured data extraction logic described in the documentation by parsing the schema's baseSelector and fields to extract commit information from GitHub's dynamic pages.",
      "ground_truth_trace_chain": "quickstart.md -> ExtractionStrategy -> JsonCssExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Advanced Session-Based Crawling with Dynamic Content For modern web applications with dynamic content loading, here's how to handle pagination and content updates: ```python async def crawl_dynamic_content(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/microsoft/TypeScript/commits/main\" session_id = \"typescript_commits_session\" js_next_page = \"\"\" const button = document.querySelector('a[data-testid=\"pagination-next-button\"]'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.firstCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.Box-sc-g0xbh4-0\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.markdown-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3):  # Crawl 3 pages result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.Box-sc-g0xbh4-0\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True, headless=False, ) await crawler.crawler_strategy.kill_session(session_id) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 2,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_relationship": "explicit",
      "relationship_type": "method_call",
      "relationship_explanation": "The kill_session() method is explicitly called on the crawler_strategy attribute of AsyncWebCrawler to end the session after crawling.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "predicted_trace_chain_explanation": "The document shows the usage of AsyncWebCrawler, which uses AsyncPlaywrightCrawlerStrategy internally, leading to the call of its kill_session() method.",
      "ground_truth_relationship": "The kill_session method cleans up browser resources by closing the Playwright page and context objects when the dynamic content crawling session is complete.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncPlaywrightCrawlerStrategy.kill_session()",
      "traceability_granularity": "Method",
      "confusion_metrics": "True Positive",
      "prediction_details": {
        "matches_ground_truth": true,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Advanced Session-Based Crawling with Dynamic Content For modern web applications with dynamic content loading, here's how to handle pagination and content updates: ```python async def crawl_dynamic_content(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/microsoft/TypeScript/commits/main\" session_id = \"typescript_commits_session\" js_next_page = \"\"\" const button = document.querySelector('a[data-testid=\"pagination-next-button\"]'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.firstCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.Box-sc-g0xbh4-0\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.markdown-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3):  # Crawl 3 pages result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.Box-sc-g0xbh4-0\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True, headless=False, ) await crawler.crawler_strategy.kill_session(session_id) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_id": 3,
      "artifact_title": "AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_relationship": "implicit",
      "relationship_type": "potential_usage",
      "relationship_explanation": "While not explicitly called in the code example, the set_hook() method could potentially be used to set up custom hooks for the crawling process, which is relevant to the advanced session-based crawling demonstrated.",
      "predicted_trace_chain": "quickstart.md -> AsyncWebCrawler -> AsyncPlaywrightCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy.set_hook()",
      "predicted_trace_chain_explanation": "The document shows advanced usage of AsyncWebCrawler, which implies the potential use of AsyncPlaywrightCrawlerStrategy and its set_hook() method for customizing the crawling process.",
      "ground_truth_relationship": null,
      "ground_truth_trace_chain": null,
      "traceability_granularity": "Method",
      "confusion_metrics": "False Positive",
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false
      }
    },
    {
      "sent_document_text": "### Advanced Session-Based Crawling with Dynamic Content For modern web applications with dynamic content loading, here's how to handle pagination and content updates: ```python async def crawl_dynamic_content(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/microsoft/TypeScript/commits/main\" session_id = \"typescript_commits_session\" js_next_page = \"\"\" const button = document.querySelector('a[data-testid=\"pagination-next-button\"]'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.firstCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.Box-sc-g0xbh4-0\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.markdown-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3):  # Crawl 3 pages result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.Box-sc-g0xbh4-0\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True, headless=False, ) await crawler.crawler_strategy.kill_session(session_id) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "ExtractionStrategy",
      "ground_truth_relationship": "The ExtractionStrategy abstract base class defines the core interface needed to support the document's dynamic content extraction example, particularly through its extract method that processes HTML blocks into structured data as shown in the documentation's schema-based extraction.",
      "ground_truth_trace_chain": "quickstart.md -> ExtractionStrategy -> ExtractionStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Advanced Session-Based Crawling with Dynamic Content For modern web applications with dynamic content loading, here's how to handle pagination and content updates: ```python async def crawl_dynamic_content(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/microsoft/TypeScript/commits/main\" session_id = \"typescript_commits_session\" js_next_page = \"\"\" const button = document.querySelector('a[data-testid=\"pagination-next-button\"]'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.firstCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.Box-sc-g0xbh4-0\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.markdown-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3):  # Crawl 3 pages result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.Box-sc-g0xbh4-0\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True, headless=False, ) await crawler.crawler_strategy.kill_session(session_id) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "CrawlResult",
      "ground_truth_relationship": "The CrawlResult class stores the scraped data and metadata from dynamic content crawling sessions, with fields like session_id and extracted_content that directly correspond to the session-based crawling approach shown in the documentation.",
      "ground_truth_trace_chain": "quickstart.md -> CrawlResult",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Advanced Session-Based Crawling with Dynamic Content For modern web applications with dynamic content loading, here's how to handle pagination and content updates: ```python async def crawl_dynamic_content(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/microsoft/TypeScript/commits/main\" session_id = \"typescript_commits_session\" js_next_page = \"\"\" const button = document.querySelector('a[data-testid=\"pagination-next-button\"]'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.firstCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.Box-sc-g0xbh4-0\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.markdown-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3):  # Crawl 3 pages result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.Box-sc-g0xbh4-0\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True, headless=False, ) await crawler.crawler_strategy.kill_session(session_id) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncPlaywrightCrawlerStrategy",
      "ground_truth_relationship": "The AsyncPlaywrightCrawlerStrategy class implements session-based crawling with dynamic content handling through its crawl() method, which supports pagination through JavaScript execution (js_code parameter) and dynamic content loading (wait_for parameter) as shown in the documentation example.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy -> AsyncPlaywrightCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    },
    {
      "sent_document_text": "### Advanced Session-Based Crawling with Dynamic Content For modern web applications with dynamic content loading, here's how to handle pagination and content updates: ```python async def crawl_dynamic_content(): async with AsyncWebCrawler(verbose=True) as crawler: url = \"https://github.com/microsoft/TypeScript/commits/main\" session_id = \"typescript_commits_session\" js_next_page = \"\"\" const button = document.querySelector('a[data-testid=\"pagination-next-button\"]'); if (button) button.click(); \"\"\" wait_for = \"\"\"() => { const commits = document.querySelectorAll('li.Box-sc-g0xbh4-0 h4'); if (commits.length === 0) return false; const firstCommit = commits[0].textContent.trim(); return firstCommit !== window.firstCommit; }\"\"\" schema = { \"name\": \"Commit Extractor\", \"baseSelector\": \"li.Box-sc-g0xbh4-0\", \"fields\": [ { \"name\": \"title\", \"selector\": \"h4.markdown-title\", \"type\": \"text\", \"transform\": \"strip\", }, ], } extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True) for page in range(3):  # Crawl 3 pages result = await crawler.arun( url=url, session_id=session_id, css_selector=\"li.Box-sc-g0xbh4-0\", extraction_strategy=extraction_strategy, js_code=js_next_page if page > 0 else None, wait_for=wait_for if page > 0 else None, js_only=page > 0, bypass_cache=True, headless=False, ) await crawler.crawler_strategy.kill_session(session_id) ```",
      "document_location": "docs/md_v2/basic/quickstart.md",
      "artifact_title": "AsyncCrawlerStrategy",
      "ground_truth_relationship": "The AsyncCrawlerStrategy abstract class defines the core interface methods needed to implement the advanced session-based crawling functionality shown in the documentation, particularly the crawl method that handles the dynamic content extraction.",
      "ground_truth_trace_chain": "quickstart.md -> AsyncCrawlerStrategy",
      "traceability_granularity": "Class",
      "confusion_metrics": "False Negative",
      "predicted_relationship": null,
      "relationship_type": null,
      "relationship_explanation": null,
      "predicted_trace_chain": null,
      "predicted_trace_chain_explanation": null,
      "prediction_details": {
        "matches_ground_truth": false,
        "relationship_match": false,
        "missed_by_llm": true
      }
    }
  ]
}