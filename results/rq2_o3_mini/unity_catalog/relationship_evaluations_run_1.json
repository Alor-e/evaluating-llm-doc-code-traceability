[
  {
    "document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.listCatalogs",
    "predicted_relationship": "The documentation snippet from 'api/Apis/CatalogsApi.md' defines the 'listCatalogs' operation with parameters (page_token, max_results) and a return type ListCatalogsResponse. The method 'CatalogService.listCatalogs' directly implements this API endpoint by being annotated with @Get and by receiving the optional parameters and returning an HttpResponse encapsulating the JSON-formatted catalog list. This shows a one-to-one correspondence between the documented operation and the service layer implementation.",
    "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - it correctly identifies the REST endpoint implementation, parameter handling, and JSON response format for listing catalogs.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.listFunctions",
    "predicted_relationship": "This method directly corresponds to the documented listFunctions API endpoint. The documentation specifies a function 'listFunctions' that returns a ListFunctionsResponse and accepts parameters such as catalog_name, schema_name, max_results, and page_token. FunctionService.listFunctions is the REST endpoint implementation that directly handles GET requests for listing functions.",
    "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures that this is a GET endpoint implementation of listFunctions that takes the documented parameters and returns function listing results. Both descriptions align on the core functionality and parameter mapping.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.listFunctions",
    "predicted_relationship": "FunctionService.listFunctions internally calls FUNCTION_REPOSITORY.listFunctions to fetch and prepare the ListFunctionsResponse. This repository method provides the underlying data and is thus an integral part of the chain that delivers the documented functionality.",
    "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description mentions a FUNCTION_REPOSITORY.listFunctions dependency that doesn't exist in the code. However, it correctly captures the core concept that the method fetches and prepares function data for the response.",
      "error_type": "incorrect_component_reference"
    }
  },
  {
    "document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.getVolume",
    "predicted_relationship": "The documentation snippet clearly describes a 'getVolume' API method that returns a VolumeInfo. The 'VolumeService.getVolume' method is annotated with @Get, accepts a fully qualified volume name as a parameter, and returns a HttpResponse with the VolumeInfo in JSON format. This explicitly corresponds to the documented functionality.",
    "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship of the GET endpoint returning volume information as JSON, matching the ground truth's main points. The omission of the optional parameter is a minor detail.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.getVolume",
    "predicted_relationship": "Although not directly mentioned in the documentation snippet, the 'VolumeRepository.getVolume' method is invoked by the 'VolumeService.getVolume' method to fetch the VolumeInfo from the database. Its role is essential in providing the underlying data retrieval needed for the API call.",
    "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description identifies that the method retrieves VolumeInfo from a database, but incorrectly specifies the invocation chain through VolumeRepository and VolumeService, which isn't mentioned in the code. It also misses the core functionality of parsing the three-level name parameter.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.deleteFunction",
    "predicted_relationship": "The documentation snippet describes the 'deleteFunction(name)' operation, detailing that it deletes a function by its fully-qualified name. The 'FunctionService.deleteFunction' method is annotated with @Delete and accepts a 'name' parameter, which directly implements this functionality as defined in the documentation.",
    "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core functionality that the code implements a DELETE endpoint for removing functions by name, which aligns with the ground truth. While it omits details about the force parameter and HTTP response, these are minor implementation details that don't change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.deleteFunction",
    "predicted_relationship": "Although not directly exposed in the API documentation, the deletion logic is implemented in the persistence layer. The FunctionService.deleteFunction method delegates the actual deletion operation to the FunctionRepository.deleteFunction method, making it an essential part of the overall deleteFunction functionality.",
    "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the deletion operation but misrepresents the architecture by suggesting a FunctionService/FunctionRepository layer that doesn't exist in the actual code. The ground truth more accurately describes the direct transaction-based database operation.",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.createFunction",
    "predicted_relationship": "The FunctionsApi documentation explicitly mentions the createFunction endpoint (POST /functions). Artifact 'FunctionService.createFunction' directly implements this endpoint by handling the HTTP POST request and invoking the creation logic via FUNCTION_REPOSITORY.",
    "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship between the code and documentation - that it implements the documented POST /functions endpoint for creating functions via the createFunction method. It mentions the key components (HTTP POST, function creation, repository) that match the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.deleteFunction",
    "predicted_relationship": "The documentation lists deleteFunction (DELETE /functions/{name}) as an endpoint. Artifact 'FunctionService.deleteFunction' maps directly to this functionality by handling the HTTP DELETE request and deleting the specified function.",
    "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented DELETE /functions/{name} endpoint for deleting functions, capturing the core relationship between the documentation and implementation",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.getFunction",
    "predicted_relationship": "According to the documentation, the getFunction endpoint (GET /functions/{name}) is provided. 'FunctionService.getFunction' directly implements this endpoint, processing the GET request and retrieving the desired function.",
    "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented GET /functions/{name} endpoint functionality. While it uses slightly different terminology (FunctionService vs repository), it captures the core relationship between the code and documentation.",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.listFunctions",
    "predicted_relationship": "The documentation defines the listFunctions endpoint (GET /functions) for listing available functions. 'FunctionService.listFunctions' implements this functionality by handling the HTTP GET request and fetching a list of functions via the repository.",
    "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that this implements a GET endpoint for listing functions via HTTP. While it omits some parameter details, the main functionality alignment is accurate.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.listVolumes",
    "predicted_relationship": "The documentation snippet describes the listVolumes endpoint with parameters catalog_name, schema_name, max_results, and page_token. This directly matches the REST endpoint method 'VolumeService.listVolumes' which is annotated with @Get and accepts these parameters (with an additional optional include_browse) and returns a JSON response containing the volumes. This is an explicit implementation of the documented API.",
    "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the main relationship - that this is a GET endpoint implementing the documented listVolumes API with matching parameters and JSON response. It also notes the additional include_browse parameter, just like the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.listVolumes",
    "predicted_relationship": "Though not directly exposed as a REST endpoint, the 'VolumeRepository.listVolumes' method performs the core business logic of retrieving volumes from the datastore, based on the catalog and schema. It is implicitly used by the 'VolumeService.listVolumes' method to fulfill the API call described in the documentation.",
    "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements a volume listing functionality based on catalog and schema, which aligns with the ground truth description. While it uses slightly different terminology (VolumeRepository vs Hibernate), the core functionality described is the same.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.deleteTable",
    "predicted_relationship": "The documentation snippet defines a REST endpoint 'deleteTable(full_name)' for deleting a table. TableService.deleteTable is annotated with @Delete(\"/{full_name}\") and accepts a 'full_name' parameter, directly matching the documented signature and HTTP behavior. This method is part of the public API that implements the documented functionality.",
    "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - a DELETE endpoint that takes a full_name parameter to delete a table. While it uses slightly different terminology (TableService vs TABLE_REPOSITORY), the fundamental API contract and behavior match the ground truth.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.deleteTable",
    "predicted_relationship": "Although not directly mentioned in the documentation snippet, TableService.deleteTable internally delegates the deletion operation to TableRepository.deleteTable to perform the actual removal of the table from the database. This makes TableRepository.deleteTable an implicit, yet necessary, component of the overall deleteTable functionality.",
    "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description incorrectly assumes delegation to TableRepository.deleteTable and makes claims about internal architecture that aren't supported by the code. However, it correctly recognizes this is about table deletion functionality.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.deleteVolume",
    "predicted_relationship": "The documentation snippet specifies a deleteVolume operation that accepts a fully qualified volume name. This directly corresponds to the HTTP DELETE endpoint implemented by the VolumeService.deleteVolume method (artifact 72), which is annotated with @Delete and takes the 'full_name' parameter.",
    "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship between the code and documentation - a DELETE endpoint that accepts a fully qualified volume name parameter for deletion. While it omits the HTTP 200 response detail, this is a minor omission that doesn't affect the main relationship understanding.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.deleteVolume",
    "predicted_relationship": "While not explicitly mentioned in the documentation text, the actual deletion logic lies in the VolumeRepository.deleteVolume method (artifact 67). This method is invoked by VolumeService.deleteVolume to carry out the deletion of the volume from persistence, forming an implicit part of the operation.",
    "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description recognizes the volume deletion functionality but incorrectly describes it as being handled by VolumeRepository and VolumeService classes, which aren't shown in the code. The core deletion concept is there but the implementation details are misrepresented.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.deleteSchema",
    "predicted_relationship": "The documentation snippet details the 'deleteSchema' operation with parameters 'full_name' and 'force'. The SchemaService.deleteSchema method is annotated with @Delete and accepts these parameters, directly mapping to the documented REST API endpoint for deleting a schema. This explicit match in parameter names and intended functionality confirms the direct implementation.",
    "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the code and documentation - that it implements a DELETE endpoint for schemas with fullName and force parameters. While it omits specifics about the HTTP 200 response, this is a minor detail that doesn't affect the main relationship.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.deleteSchema",
    "predicted_relationship": "Although not directly mentioned in the documentation snippet, SchemaRepository.deleteSchema is invoked by SchemaService.deleteSchema to carry out the actual deletion of the schema from persistence. This method is crucial in completing the deletion operation described in the API, providing backend support for the HTTP endpoint.",
    "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "incorrect",
      "justification": "The predicted description incorrectly states that SchemaRepository.deleteSchema is invoked by SchemaService.deleteSchema, which is not shown in the code or documentation. The true relationship shows direct schema deletion logic with child object cleanup.",
      "error_type": "incorrect_component_relationship"
    }
  },
  {
    "document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.getFunction",
    "predicted_relationship": "This artifact directly implements the GET endpoint for retrieving a function as described in the documentation. The documentation\u2019s signature 'FunctionInfo getFunction(name)' corresponds to this method which is annotated with @Get and accepts a parameter 'name'.",
    "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship - a GET endpoint that retrieves function information based on a name parameter and returns the function details. While it's slightly less detailed than the ground truth, it covers the essential functionality correctly.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.getFunction",
    "predicted_relationship": "FunctionService.getFunction delegates the task of retrieving the function details to this repository method. It returns a FunctionInfo object based on the fully-qualified function name, thereby fulfilling part of the documented functionality.",
    "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship - retrieving a FunctionInfo object based on a function name. While it omits implementation details like the three-part name parsing and database session handling, these are minor omissions that don't affect the fundamental relationship described.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.listSchemas",
    "predicted_relationship": "This method directly implements the core functionality of listing schemas. Its signature \u201clistSchemas(String catalogName, Optional<Integer> maxResults, Optional<String> pageToken)\u201d and its return of a ListSchemasResponse exactly match the documented API specification.",
    "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures that this is an implementation of the documented API, but misses crucial aspects of the functionality like database querying, DAO conversion, and pagination handling that are key parts of how the method works according to the ground truth.",
      "error_type": "incomplete_functionality"
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.listSchemas",
    "predicted_relationship": "This method is annotated with @Get and serves as the HTTP endpoint that exposes the listSchemas functionality. It delegates to the SchemaRepository.listSchemas method and wraps the result in an HttpResponse, directly fulfilling the documentation requirements for the API.",
    "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions capture the core functionality of a GET endpoint that retrieves a list of schemas with pagination parameters, delegating to SCHEMA_REPOSITORY",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaCli.listSchemas",
    "predicted_relationship": "Although this method is part of the CLI client, it calls the schemasApi.listSchemas operation to retrieve schemas. It sets default values (e.g. maxResults and a null page token) and converts the API response into a string, indirectly reflecting the documented API functionality.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures that this is a CLI wrapper method calling the documented listSchemas API operation, handling parameters and response formatting",
      "error_type": "none"
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.createVolume",
    "predicted_relationship": "The documentation explicitly states the 'createVolume' operation (HTTP POST /volumes). This endpoint is directly implemented by the VolumeService.createVolume method, which handles creation of a volume by delegating to the repository.",
    "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - both describe implementing a POST /volumes endpoint for creating volumes via repository delegation",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.deleteVolume",
    "predicted_relationship": "The documentation explicitly mentions the 'deleteVolume' operation (HTTP DELETE /volumes/{name}). VolumeService.deleteVolume is the corresponding method that implements this API endpoint by calling the underlying volume repository.",
    "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a DELETE endpoint for volumes that maps to the documented API operation. Both descriptions capture the core functionality of deleting a volume via the API.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.getVolume",
    "predicted_relationship": "The 'getVolume' operation, as described in the documentation (HTTP GET /volumes/{name}), is directly implemented by the VolumeService.getVolume method, which retrieves volume details from the repository.",
    "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions convey that this is an implementation of the GET /volumes/{name} endpoint that retrieves volume information by name and returns it as a response. The predicted description captures the core functionality accurately.",
      "error_type": null
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.listVolumes",
    "predicted_relationship": "The documentation describes the 'listVolumes' operation (HTTP GET /volumes) for listing volumes. VolumeService.listVolumes implements this endpoint by interfacing with the repository to fetch a list of volumes.",
    "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this is a GET endpoint for listing volumes that interfaces with the repository layer. While it omits some parameter details, the high-level functionality match is present.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.updateVolume",
    "predicted_relationship": "The 'updateVolume' operation (HTTP PATCH /volumes/{name}) is explicitly mentioned in the documentation. This endpoint is implemented by the VolumeService.updateVolume method, which processes changes to a volume.",
    "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented PATCH /volumes/{name} endpoint for updating volumes. While it omits some implementation details about parameters and return types, it captures the core relationship between the code and documentation.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.updateSchema",
    "predicted_relationship": "The documentation specifies the updateSchema method signature as 'SchemaInfo updateSchema(full_name, UpdateSchema)'. This exactly matches the method in SchemaRepository.updateSchema which takes a full name and an UpdateSchema object and returns a SchemaInfo. This method implements the core business logic for updating a schema.",
    "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the method signature and return type, but misses crucial aspects of the implementation like validation, transaction management, and property updates that are key parts of the ground truth's description",
      "error_type": "major_omission"
    }
  },
  {
    "document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaService.updateSchema",
    "predicted_relationship": "SchemaService.updateSchema is annotated with @Patch and acts as the HTTP endpoint for the updateSchema operation. It processes incoming HTTP requests with JSON payloads and delegates the schema update to SchemaRepository.updateSchema.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - a PATCH endpoint that processes schema updates via a repository, matching the documented API functionality.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.deleteCatalog",
    "predicted_relationship": "This method directly implements the deleteCatalog API operation as documented. It exposes an HTTP DELETE endpoint that accepts 'name' and 'force' as parameters and returns an HTTP response, which directly corresponds to the documented behavior of deleting a catalog.",
    "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture that this is a DELETE endpoint implementing catalog deletion functionality with name and force parameters, returning an HTTP response. The predicted description conveys the same core relationship as the ground truth.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.deleteCatalog",
    "predicted_relationship": "This repository method contains the core deletion logic that removes a catalog from persistent storage. It is invoked by CatalogService.deleteCatalog, thereby fulfilling the documented operation by ensuring the actual deletion, including validations and cascading deletion of dependent schemas when required.",
    "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship - that this is the implementation of the documented deleteCatalog operation with validation and schema deletion handling, just with less detail about specific error conditions and schema handling",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogCli.deleteCatalog",
    "predicted_relationship": "This CLI method demonstrates the usage of the deleteCatalog operation by obtaining catalog parameters from a JSON object and invoking catalogsApi.deleteCatalog. Although it is not directly the API implementation, it indirectly employs the API functionality to delete a catalog, thereby offering a command\u2010line interface to the documented operation.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteCatalog endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture that this is a CLI wrapper method for the documented deleteCatalog API operation. The predicted description correctly explains that it processes JSON parameters and invokes the API functionality.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "TableRepository.createTable",
    "predicted_relationship": "The documentation specifies a method signature 'TableInfo createTable(CreateTable)' which exactly matches the signature of the method 'TableRepository.createTable'. This method takes a CreateTable object as a parameter and returns a TableInfo, directly implementing the documented functionality.",
    "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the method signature and basic return type, but misses crucial functionality around validation, table type restrictions, storage requirements, and database transaction handling that are core to the implementation",
      "error_type": "major_omission"
    }
  },
  {
    "document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "TableService.createTable",
    "predicted_relationship": "Although this method returns an HttpResponse (wrapping the TableInfo), 'TableService.createTable' is the REST endpoint that receives the CreateTable input and delegates the actual creation to TableRepository.createTable. Its role in exposing the API makes it implicitly linked to the documented functionality.",
    "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the REST endpoint nature and delegation to TableRepository, but incorrectly implies TableService involvement and lacks key details about input validation and response wrapping that are central to the functionality.",
      "error_type": "missing_core_details_and_incorrect_service"
    }
  },
  {
    "document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.createFunction",
    "predicted_relationship": "The documentation snippet specifies the signature 'FunctionInfo createFunction(CreateFunctionRequest)' which is directly implemented by this method. It accepts a CreateFunctionRequest, processes it, and returns a FunctionInfo, exactly matching the documented API contract.",
    "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the basic API signature and return type correctly, but omits crucial functionality around database persistence, schema validation, and duplicate checking that are core aspects of the implementation according to the ground truth",
      "error_type": "significant_omission"
    }
  },
  {
    "document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "FunctionService.createFunction",
    "predicted_relationship": "This method is an HTTP endpoint (annotated with @Post) that handles incoming API requests for function creation. It delegates the creation logic to FunctionRepository.createFunction, thereby indirectly realizing the documented createFunction operation.",
    "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures that this is a POST endpoint for function creation that uses a repository for the actual creation logic and returns a response. It aligns with the ground truth's description of the core REST API functionality.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.getTable",
    "predicted_relationship": "The documentation snippet specifies a getTable operation that returns a TableInfo object using a full_name parameter. The 'TableService.getTable' method (artifact id 56) is directly annotated with @Get(\"/{full_name}\") and maps the HTTP GET request to retrieve table information. Thus, it explicitly implements the documented API endpoint, conforming to the expected behavior and HTTP headers described.",
    "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - a REST GET endpoint that retrieves table info based on a full_name parameter and returns TableInfo, matching the documented API behavior",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.getTable",
    "predicted_relationship": "The 'TableService.getTable' method delegates the core business logic of retrieving the table information to 'TableRepository.getTable' (artifact id 52). This repository method returns a TableInfo object matching the documented signature, forming an implicit part of the implementation chain of the getTable functionality.",
    "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "While the predicted description correctly identifies that the method returns a TableInfo object, it incorrectly states that the logic is delegated to TableRepository.getTable, when the code shows direct implementation with session handling and table lookup",
      "error_type": "incorrect_implementation_flow"
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.createSchema",
    "predicted_relationship": "The documentation explicitly lists the createSchema endpoint (HTTP POST /schemas) and this method directly implements that functionality by creating a schema.",
    "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this code implements the documented POST /schemas endpoint for schema creation. While it omits implementation details about the return type and CreateSchema object, these are minor details that don't affect the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.deleteSchema",
    "predicted_relationship": "The documentation explicitly describes the deleteSchema endpoint (HTTP DELETE /schemas/{full_name}). This method is responsible for deleting a schema as described.",
    "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this is a DELETE endpoint for schemas with the specified path. While it omits implementation details about the force parameter and response code, these are minor details that don't affect the fundamental relationship being described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.getSchema",
    "predicted_relationship": "The documentation explicitly lists the getSchema endpoint (HTTP GET /schemas/{full_name}) for retrieving a schema. This method provides that functionality.",
    "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented GET /schemas/{full_name} endpoint for retrieving a schema, which aligns with the ground truth's description of the relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.listSchemas",
    "predicted_relationship": "The documentation explicitly details the listSchemas endpoint (HTTP GET /schemas) used to list all schemas. This method implements that endpoint.",
    "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this method implements the documented GET /schemas endpoint for listing schemas, which matches the high-level relationship described in the ground truth. While it omits parameter details, this is not essential to the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.updateSchema",
    "predicted_relationship": "The documentation explicitly defines the updateSchema endpoint (HTTP PATCH /schemas/{full_name}) for updating a schema. This method realizes that functionality.",
    "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this code implements the PATCH endpoint for schema updates as defined in the documentation table",
      "error_type": ""
    }
  },
  {
    "document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
    "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
    "predicted_relationship": "The documentation explicitly names the endpoint method 'generateTemporaryVolumeCredentials' under the TemporaryVolumeCredentialsApi. This directly maps to the implementation provided by the method 'generateTemporaryVolumeCredentials' in the 'TemporaryVolumeCredentialsService' class, which is responsible for handling POST requests at '/temporary-volume-credentials' and generating temporary volume credentials.",
    "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship between the documentation and code - namely that it implements a POST endpoint for generating temporary volume credentials at the specified path. While it omits implementation details about S3 vs local filesystem handling, it captures the main mapping between the API documentation and code functionality.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.createVolume",
    "predicted_relationship": "The documentation snippet shows the signature 'VolumeInfo createVolume(CreateVolumeRequestContent)' as the core functionality for creating a volume. This exactly matches the method signature in VolumeRepository.createVolume, which directly implements the volume creation logic.",
    "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description identifies the basic method signature match but misses crucial functionality around validation, constraints, and persistence that are core to understanding how the code implements the documentation",
      "error_type": "major_omission"
    }
  },
  {
    "document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeService.createVolume",
    "predicted_relationship": "Although not directly referenced by the function signature shown in the documentation, VolumeService.createVolume serves as the HTTP endpoint (annotated with @Post) that receives the REST call with JSON headers. It internally calls VolumeRepository.createVolume to execute the actual creation, thereby indirectly connecting the API documentation to the implementation.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that this is an HTTP POST endpoint implementing the documented API by receiving CreateVolumeRequestContent and returning JSON volume information. While it mentions extra implementation details about VolumeRepository, it doesn't contradict the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
    "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
    "predicted_relationship": "The documentation snippet describes the API for generating temporary volume credentials by specifying a method signature with a parameter of type GenerateTemporaryVolumeCredential and a return type of GenerateTemporaryVolumeCredentialResponse. The service method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials' (artifact_id 59) explicitly implements this functionality by accepting the same parameter type and returning an HTTP response containing a GenerateTemporaryVolumeCredentialResponse. This direct match of signature and functionality demonstrates an explicit trace from the documentation to the code.",
    "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship between the documentation and code - it identifies that this is an API endpoint for generating temporary volume credentials with matching parameter and return types. While it omits implementation details about S3 vs local storage handling, these are minor details that don't affect the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.updateVolume",
    "predicted_relationship": "The documentation snippet specifies the method signature 'VolumeInfo updateVolume(name, UpdateVolumeRequestContent)' and describes the update of a volume's name or comment. VolumeRepository.updateVolume (artifact 70) directly implements this behavior by processing a fully qualified volume name and an UpdateVolumeRequestContent, performing the update in the persistence layer, and returning a VolumeInfo as documented.",
    "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship between the documentation and code implementation - updating a volume's name or comment via the updateVolume method that takes the specified parameters and returns VolumeInfo. While it omits some implementation details like validation and transaction handling, these are minor details that don't change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeService.updateVolume",
    "predicted_relationship": "VolumeService.updateVolume (artifact 75) is a REST endpoint that exposes the updateVolume operation. Although its signature returns an HttpResponse (a JSON response wrapping the VolumeInfo), it internally calls VolumeRepository.updateVolume to perform the actual update. This makes it an implicit part of the update operation as described in the documentation.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the main functionality of the endpoint - that it's a REST endpoint for updating volumes that delegates to VOLUME_REPOSITORY and returns an HTTP response containing VolumeInfo. While it provides slightly different phrasing, the core relationship and functionality matches the ground truth.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.getSchema",
    "predicted_relationship": "The documentation snippet specifies a 'getSchema' function with a parameter 'full_name' that returns a SchemaInfo object. The method 'SchemaService.getSchema' explicitly implements this functionality as it provides a REST endpoint for retrieving a schema using the full name.",
    "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - a getSchema function that retrieves schema information based on a full_name parameter. While it uses slightly different terminology (SchemaService vs SCHEMA_REPOSITORY), the fundamental functionality match is correct.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.getSchema",
    "predicted_relationship": "While not explicitly mentioned in the documentation snippet, SchemaService.getSchema internally depends on SchemaRepository.getSchema to retrieve the schema information from the datastore. This underlying repository method forms an implicit part of the overall functionality chain.",
    "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures that the method retrieves schema information, but incorrectly states it depends on SchemaRepository.getSchema when the code shows direct database session usage and DAO conversion",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.createTable",
    "predicted_relationship": "The documentation explicitly references the 'createTable' endpoint (POST /tables). This endpoint is implemented by the TableService.createTable method which processes table creation requests.",
    "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented POST /tables endpoint for table creation. While it omits some implementation details (JSON response, null check), the core relationship between the code and documentation is accurately captured.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.deleteTable",
    "predicted_relationship": "The documentation explicitly mentions the 'deleteTable' endpoint (DELETE /tables/{full_name}). This functionality is provided by the TableService.deleteTable method which handles table deletion.",
    "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the DELETE endpoint and its purpose, but incorrectly refers to 'TableService.deleteTable' when the code actually uses 'TABLE_REPOSITORY.deleteTable'. It also omits mentioning the HTTP response handling.",
      "error_type": "implementation_detail_error"
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.getTable",
    "predicted_relationship": "The documentation specifies the 'getTable' endpoint (GET /tables/{full_name}) for retrieving a table. This endpoint is implemented by the TableService.getTable method.",
    "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented GET /tables/{full_name} endpoint functionality, even though it simplifies some implementation details",
      "error_type": null
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.listTables",
    "predicted_relationship": "For listing tables, the documentation describes the 'listTables' endpoint (GET /tables). The TableService.listTables method provides this functionality.",
    "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the listTables endpoint and GET method, but fails to acknowledge that this is part of a broader API documentation showing multiple available endpoints/methods (create, delete, get, list)",
      "error_type": "incomplete_coverage"
    }
  },
  {
    "document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogService.createCatalog",
    "predicted_relationship": "The documentation snippet describes the createCatalog operation with the signature 'CatalogInfo createCatalog(CreateCatalog)'. This exactly matches the implementation in CatalogService.createCatalog, which is marked with the @Post annotation and returns a CatalogInfo by calling the repository function. The documented HTTP endpoint behavior is directly provided by this method.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship between the code and documentation - it identifies that the method implements a POST endpoint that accepts CreateCatalog input and returns CatalogInfo, matching the documented behavior.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.addCatalog",
    "predicted_relationship": "Although the documentation text does not explicitly mention internal repository operations, the implementation in CatalogService.createCatalog calls CATALOG_REPOSITORY.addCatalog(createCatalog) to perform the actual creation of a catalog. This repository method is responsible for persisting the catalog and returning the CatalogInfo, making it an implicit but necessary part of the createCatalog functionality.",
    "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description incorrectly refers to CATALOG_REPOSITORY.addCatalog() when the code shows direct database persistence using Hibernate sessions. However, it correctly captures the main purpose of creating and persisting a catalog.",
      "error_type": "implementation_details_mismatch"
    }
  },
  {
    "document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaService.createSchema",
    "predicted_relationship": "The documentation describes an HTTP API operation 'createSchema' that accepts a CreateSchema payload and returns a SchemaInfo. Although the method name isn't explicitly mentioned in the text snippet, this REST endpoint in SchemaService.createSchema is responsible for handling the HTTP POST request (with JSON content-type and accept headers) to create a schema. It maps to the documented functionality by delegating the creation request to the underlying repository layer.",
    "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that this is a POST endpoint accepting CreateSchema and returning SchemaInfo via JSON response, with the creation delegated to a repository layer.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.createSchema",
    "predicted_relationship": "SchemaRepository.createSchema is called by SchemaService.createSchema to perform the actual database insertion and business logic required to create a new schema. Its method signature 'SchemaInfo createSchema(CreateSchema)' perfectly matches the documented operation, thereby providing the core functionality for creating a schema in the specified catalog.",
    "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures that this is an implementation of schema creation functionality that matches the documented API, even though it doesn't detail all the validation and persistence steps mentioned in the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.getCatalog",
    "predicted_relationship": "The documentation snippet describes an operation named 'getCatalog' that accepts a catalog name and returns a CatalogInfo. The CatalogService.getCatalog method is the exact REST endpoint implementation that retrieves a catalog by its name, directly fulfilling this documented functionality.",
    "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture the core relationship - a GET endpoint that takes a name parameter and returns catalog information as JSON. The predicted description correctly identifies the main functionality without any significant contradictions.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogService.updateCatalog",
    "predicted_relationship": "The documentation describes an updateCatalog operation that accepts a catalog name and an UpdateCatalog object and returns a CatalogInfo in a RESTful API context. Although the text does not mention the exact class name, this behavior is implemented in the server endpoint CatalogService.updateCatalog. It accepts HTTP requests with the specified headers and delegates the update process to lower layers.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the core API functionality but incorrectly states it's implemented in 'CatalogService' when the code shows it's using 'CATALOG_REPOSITORY'",
      "error_type": "incorrect_component_identification"
    }
  },
  {
    "document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.updateCatalog",
    "predicted_relationship": "CatalogRepository.updateCatalog performs the actual persistence update for the catalog. It is invoked by CatalogService.updateCatalog after the service layer processes the HTTP request. This method accepts the same parameters (catalog name and UpdateCatalog object) and returns an updated CatalogInfo, matching the documented signature.",
    "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies that this is an update operation for catalogs, but incorrectly suggests it's a repository layer being called by a service layer, when the code actually implements the API endpoint directly. It misses the core validation and transaction management aspects.",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.listTables",
    "predicted_relationship": "The documentation snippet in 'TablesApi.md' clearly specifies a GET endpoint to list tables with parameters catalog_name, schema_name, max_results, and page_token. The 'TableService.listTables' method directly provides this API endpoint functionality by mapping the HTTP GET request (with its query parameters) to the appropriate JSON response containing the list of tables. This direct naming and signature match makes the connection explicit.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that this is a GET endpoint for listing tables that takes catalog_name, schema_name, max_results, and page_token parameters and returns JSON response. While it doesn't mention the additional omit parameters, this is a minor detail omission that doesn't change the fundamental relationship being described.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.listTables",
    "predicted_relationship": "Although not mentioned directly in the documentation snippet, the 'TableService.listTables' endpoint delegates the actual retrieval of table data to the 'TableRepository.listTables' method. This repository method executes the database query and builds the ListTablesResponse, thereby constituting an implicit dependency in the overall listTables functionality.",
    "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies that listTables involves database interaction, but incorrectly focuses on a TableRepository delegation that isn't shown in the code and misses key aspects like pagination and response building shown in the ground truth.",
      "error_type": "inaccurate_architecture"
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.createCatalog",
    "predicted_relationship": "The documentation specifies a POST /catalogs endpoint to create a catalog. This operation is explicitly referenced as 'createCatalog' in the documentation, and the method CatalogService.createCatalog directly implements this functionality by accepting catalog creation requests.",
    "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that the code implements the documented POST /catalogs endpoint for catalog creation via a POST method handler, matching the ground truth's description.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.deleteCatalog",
    "predicted_relationship": "The documentation details a DELETE /catalogs/{name} endpoint to delete a catalog. The method CatalogService.deleteCatalog is explicitly responsible for processing such delete requests, matching the documented functionality.",
    "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions identify this as a DELETE endpoint for catalogs, capturing the core functionality of handling catalog deletion requests. While the predicted focuses on the API routing and the ground truth provides more implementation details, they describe the same fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.getCatalog",
    "predicted_relationship": "The GET /catalogs/{name} endpoint in the documentation is designed to retrieve a specific catalog. CatalogService.getCatalog explicitly implements this endpoint, handling the retrieval of catalog data.",
    "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that the code implements a GET endpoint for retrieving a specific catalog by name, which aligns with the ground truth's description of the implementation.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.listCatalogs",
    "predicted_relationship": "The documentation defines a GET /catalogs endpoint intended to list available catalogs. The method CatalogService.listCatalogs explicitly implements this functionality by returning a list of catalogs.",
    "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship - that the code implements a GET /catalogs endpoint for listing catalogs. While it omits details about pagination parameters, this is a minor omission that doesn't change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.updateCatalog",
    "predicted_relationship": "According to the documentation, the PATCH /catalogs/{name} endpoint is used to update a catalog. CatalogService.updateCatalog explicitly implements this API call by processing update requests for catalogs.",
    "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the main relationship - that this implements the PATCH /catalogs/{name} endpoint for updating catalogs. While it omits implementation details about parameters and return type, these are minor details that don't affect the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
    "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
    "predicted_relationship": "The documentation snippet explicitly references the 'generateTemporaryVolumeCredentials' endpoint, which is directly implemented by the 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials' method. The method handles POST requests to the '/temporary-volume-credentials' endpoint to generate temporary volume credentials.",
    "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a POST endpoint for generating temporary volume credentials, matching the core relationship shown in the ground truth. The prediction captures the essential API endpoint implementation purpose.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.getFunction",
    "predicted_relationship": "The documentation snippet provides the signature 'FunctionInfo getFunction(name)' and HTTP metadata which directly corresponds to the GET endpoint implemented in FunctionService.getFunction. This method is invoked as the REST API to retrieve a function\u2019s information based on its fully-qualified name.",
    "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - a GET endpoint that retrieves function information based on a name parameter and returns it as JSON, matching the documented API specification.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.getFunction",
    "predicted_relationship": "Although not directly mentioned in the documentation snippet, FunctionRepository.getFunction is invoked by FunctionService.getFunction to retrieve the underlying function details from the persistence layer. This hidden dependency supports the API functionality that the documentation describes.",
    "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description mentions a dependency between FunctionRepository and FunctionService that is not evident in the code or docs. However, it correctly implies the function retrieves details from a persistence layer.",
      "error_type": "misattributed_dependency"
    }
  },
  {
    "document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.getVolume",
    "predicted_relationship": "The documentation specifies a method 'getVolume(name)' that returns a VolumeInfo. This exactly matches the functionality provided by the VolumeRepository.getVolume method, which takes a fully qualified name, splits it, and returns a VolumeInfo. This is a direct implementation of the documented behavior.",
    "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of the getVolume method - taking a fully qualified name and returning VolumeInfo. While it doesn't mention all implementation details like DAO pattern and database access, these are minor omissions that don't affect the high-level relationship description.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.getVolume",
    "predicted_relationship": "Although the documentation snippet does not explicitly mention the service layer, the HTTP GET operation described is exposed via the VolumeService.getVolume method. This method wraps the repository call and formats the HTTP response, thereby indirectly supporting the documented getVolume operation.",
    "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description focuses on service layer implementation which isn't mentioned in the ground truth, while missing the key aspects about parameter handling and JSON response format that are central to the actual implementation",
      "error_type": "focus_mismatch"
    }
  },
  {
    "document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogService.createCatalog",
    "predicted_relationship": "The documentation snippet details a createCatalog operation that accepts a CreateCatalog object and returns a CatalogInfo. This matches exactly the signature of CatalogService.createCatalog, a REST endpoint that directly implements this functionality by deserializing the request and returning the JSON response.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the basic API operation but misses the key detail about persistence through CATALOG_REPOSITORY, instead suggesting direct deserialization. It correctly identifies the input/output types and REST nature.",
      "error_type": "missing_key_functionality"
    }
  },
  {
    "document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.addCatalog",
    "predicted_relationship": "Although the documentation does not directly mention repository methods, CatalogService.createCatalog internally calls CatalogRepository.addCatalog to perform the actual creation and persistence of the catalog entity. This makes it an important underlying piece in the implementation chain.",
    "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description incorrectly states that CatalogService.createCatalog calls CatalogRepository.addCatalog, which is not shown in the code. However, it correctly understands that the code handles catalog creation and persistence.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.deleteTable",
    "predicted_relationship": "The documentation snippet describes a 'deleteTable' operation that requires a 'full_name' parameter and details the HTTP headers expected for a REST DELETE request. The 'TableService.deleteTable' method explicitly implements this functionality as it is annotated with @Delete(\"/{full_name}\") and calls the repository method to delete the table, returning an HTTP OK response. This directly matches the documented behavior.",
    "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - a DELETE endpoint that takes a full_name parameter to delete a table and returns an OK response.",
      "error_type": null
    }
  },
  {
    "document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeService.updateVolume",
    "predicted_relationship": "The documentation snippet explicitly describes an updateVolume operation with a signature 'VolumeInfo updateVolume(name, UpdateVolumeRequestContent)'. This exactly matches the API endpoint implemented as VolumeService.updateVolume, which is annotated with @Patch and accepts a 'full_name' parameter and an UpdateVolumeRequestContent object to update the volume.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - an update volume endpoint that takes a name and UpdateVolumeRequestContent parameters, matching the documentation's specification. Minor implementation details like HTTP response wrapping don't affect the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.updateVolume",
    "predicted_relationship": "Although not directly exposed in the documentation, VolumeService.updateVolume delegates the core update operation to VolumeRepository.updateVolume. This repository method implements the business logic to update the volume details such as name or comment, which fulfills the documented operation.",
    "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description mentions delegation to VolumeRepository which is incorrect, but correctly identifies the core update functionality for volume details like name and comment",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaService.createSchema",
    "predicted_relationship": "The documentation clearly specifies the createSchema functionality with a signature 'SchemaInfo createSchema(CreateSchema)'. The SchemaService.createSchema method, annotated with @Post, directly implements this HTTP API endpoint. It accepts a CreateSchema object and returns an HttpResponse with a JSON representation of SchemaInfo, thus explicitly matching the documentation.",
    "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the main functionality: a POST endpoint that accepts CreateSchema and returns JSON schema info via HTTP response, matching the ground truth's core relationship.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.createSchema",
    "predicted_relationship": "Although not directly mentioned in the documentation snippet, SchemaRepository.createSchema provides the underlying business logic for creating a new schema. It accepts the same CreateSchema object and returns a SchemaInfo, and is invoked by SchemaService.createSchema. This makes it an integral, though implicit, part of the overall createSchema mechanism described in the documentation.",
    "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description claims this is a SchemaRepository method called by SchemaService, which is not supported by the code. However, it correctly identifies the basic purpose of creating a schema and returning SchemaInfo.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.listVolumes",
    "predicted_relationship": "The documentation snippet specifies the 'listVolumes' operation with a signature 'ListVolumesResponseContent listVolumes(catalog_name, schema_name, max_results, page_token)'. The method VolumeRepository.listVolumes directly implements this functionality by querying for volumes from the database and returning a ListVolumesResponseContent, thereby matching the documented signature and behavior.",
    "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that the code implements the documented listVolumes API by querying volumes and returning a ListVolumesResponseContent object with the specified parameters.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.listVolumes",
    "predicted_relationship": "Although the documentation explicitly specifies a method signature matching VolumeRepository.listVolumes, the actual API endpoint exposed to clients is handled by VolumeService.listVolumes. This method serves as the REST interface, wrapping the core repository call to list volumes. It thus plays an implicit role in fulfilling the documented API behavior.",
    "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description incorrectly states the API endpoint is handled by VolumeService.listVolumes when the code shows it directly uses VOLUME_REPOSITORY. However, it correctly captures the basic API functionality of listing volumes via HTTP GET.",
      "error_type": "incorrect_component_reference"
    }
  },
  {
    "document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaService.updateSchema",
    "predicted_relationship": "The documentation snippet explicitly defines the updateSchema operation with parameters full_name and UpdateSchema and expects a SchemaInfo in return. The SchemaService.updateSchema method is annotated with @Patch, accepts these parameters, and returns a JSON response derived from SchemaInfo, which exactly matches the documented operation.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions capture the core functionality of a PATCH endpoint that accepts fullName and UpdateSchema parameters and returns a JSON response. The predicted description matches the ground truth in describing the essential API operation and parameter structure.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.updateSchema",
    "predicted_relationship": "While not directly mentioned in the API documentation, SchemaRepository.updateSchema is invoked by SchemaService.updateSchema to perform the actual update of the schema. It accepts identical parameters (full_name and UpdateSchema) and returns a SchemaInfo object, thereby fulfilling the underlying business logic for the operation described in the documentation.",
    "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description assumes a SchemaRepository/SchemaService architecture that is not present in the code. However, it correctly identifies the basic purpose of updating a schema with the same parameters and return type.",
      "error_type": "architectural_assumption"
    }
  },
  {
    "document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "FunctionService.createFunction",
    "predicted_relationship": "The documentation snippet in 'FunctionsApi.md' describes a 'createFunction' API that accepts a CreateFunctionRequest and returns a FunctionInfo. The method 'FunctionService.createFunction' is annotated with @Post(\"\"), directly exposing the HTTP endpoint that receives the CreateFunctionRequest and returns the function information as JSON. This exactly implements the documented API behavior.",
    "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the main relationship - a POST endpoint that accepts CreateFunctionRequest, processes it, and returns function info as JSON. Minor implementation details differ but the core API behavior is correctly described.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.createFunction",
    "predicted_relationship": "While not directly exposed in the API documentation, 'FunctionRepository.createFunction' is called by the service layer to carry out the actual creation of a function. Its signature (taking a CreateFunctionRequest and returning a FunctionInfo) closely matches the documented behavior, making it an implicit part of the overall functionality chain that supports the API endpoint.",
    "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description identifies the basic function of creating a function and returning FunctionInfo, but incorrectly states it's a FunctionRepository class call rather than recognizing it as the API endpoint implementation itself. It misses the core workflow of validation, construction, and persistence.",
      "error_type": "conceptual_misunderstanding"
    }
  },
  {
    "document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.getCatalog",
    "predicted_relationship": "The documentation snippet explicitly describes a getCatalog operation that accepts a catalog name and returns a CatalogInfo object. The method in CatalogService.getCatalog is a direct implementation of this functionality, mapping an HTTP GET request with a 'name' parameter to retrieve the catalog.",
    "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - a GET endpoint that retrieves catalog information based on a name parameter and returns it as JSON, which aligns with the ground truth's description.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.deleteVolume",
    "predicted_relationship": "The documentation specifies a deleteVolume(name) operation that deletes a volume and returns an HTTP response. This is directly implemented in the VolumeService.deleteVolume method, which is annotated with @Delete and accepts a fully-qualified volume name parameter. Its signature and behavior correspond to the documented API.",
    "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship - that the code implements a DELETE endpoint taking a volume name parameter and returning an HTTP response, which aligns with the documented API functionality.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.deleteVolume",
    "predicted_relationship": "VolumeService.deleteVolume internally calls VolumeRepository.deleteVolume to perform the actual deletion of the volume from the persistence layer. Although not directly exposed in the API documentation, it is a critical part of the deletion operation chain.",
    "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the deletion functionality but focuses on an incorrect component relationship (VolumeService/VolumeRepository) that isn't present in the code. It misses the key aspects of transaction management and storage cleanup.",
      "error_type": "incorrect_component_relationship"
    }
  },
  {
    "document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.getTable",
    "predicted_relationship": "This method directly implements the 'getTable(full_name)' API as described in the documentation. It accepts a 'full_name' parameter and returns a JSON representation of a TableInfo, matching the documented signature and behavior.",
    "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core functionality of the API endpoint - taking a full_name parameter and returning TableInfo as JSON, which aligns with the ground truth. Minor omissions like @Get annotation and null check don't change the fundamental relationship.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.getTable",
    "predicted_relationship": "This method is invoked by TableService.getTable to perform the underlying business logic of fetching a table from the datastore. It processes the 'full_name' by splitting it into catalog, schema, and table parts, and retrieves the corresponding TableInfo, which aligns with the behavior specified in the documentation.",
    "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of parsing the full table name into components, retrieving table information, and returning a TableInfo object, which aligns with the ground truth's description of the implementation",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.listCatalogs",
    "predicted_relationship": "The documentation snippet, found in 'CatalogsApi.md', describes an HTTP GET endpoint to list catalogs with optional 'max_results' and 'page_token' parameters and a return type of ListCatalogsResponse. The method 'CatalogService.listCatalogs' explicitly implements this functionality by exposing a GET endpoint, accepting those parameters, and returning the JSON output of the underlying repository call.",
    "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the main relationship between code and documentation - that it implements a GET endpoint for listing catalogs with optional maxResults and pageToken parameters, returning a JSON response. Both descriptions convey the same core functionality.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.listCatalogs",
    "predicted_relationship": "The 'CatalogService.listCatalogs' method internally delegates the retrieval of catalog data to 'CatalogRepository.listCatalogs'. This repository method, while not directly exposed in the API documentation, forms an essential internal dependency that supports the functionality described in the documentation.",
    "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures that listCatalogs involves repository interaction, but misses key aspects like pagination, transaction handling, and data transformation that are central to the implementation.",
      "error_type": "incomplete_understanding"
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.createVolume",
    "predicted_relationship": "The documentation clearly lists a 'createVolume' endpoint (POST /volumes). This is directly implemented by the VolumeService.createVolume method, which is configured to handle POST requests for volume creation.",
    "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the code and documentation - both describe a POST endpoint for volume creation that handles volume creation requests. While the predicted version omits some implementation details about the VOLUME_REPOSITORY and response format, it correctly identifies the main functionality and mapping.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.deleteVolume",
    "predicted_relationship": "The documentation shows a 'deleteVolume' endpoint (DELETE /volumes/{name}). The VolumeService.deleteVolume method explicitly delivers this functionality by processing DELETE requests for volume deletion.",
    "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented DELETE /volumes/{name} endpoint for volume deletion functionality, matching the core relationship in the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.getVolume",
    "predicted_relationship": "The GET /volumes/{name} endpoint described in the documentation is explicitly implemented by the VolumeService.getVolume method, which retrieves the details of a volume.",
    "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the GET /volumes/{name} endpoint and its core functionality of retrieving volume information, which aligns with the ground truth. Minor omissions about JSON response format and parameters don't affect the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.listVolumes",
    "predicted_relationship": "According to the documentation, there is a 'listVolumes' endpoint (GET /volumes) intended to list all volumes. This functionality is provided by the VolumeService.listVolumes method.",
    "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship - that this is a GET endpoint for listing volumes, which matches the ground truth's description. While it omits some parameter details, this doesn't affect the fundamental relationship being described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.updateVolume",
    "predicted_relationship": "The PATCH /volumes/{name} endpoint for updating a volume is documented in the VolumesApi. This endpoint is directly mapped to the VolumeService.updateVolume method which handles updates to volume information.",
    "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented PATCH /volumes/{name} endpoint for updating volumes. While it mentions VolumeService instead of VOLUME_REPOSITORY, this is a minor implementation detail that doesn't affect the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
    "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
    "predicted_relationship": "The documentation excerpt explicitly references the 'generateTemporaryTableCredentials' operation via the link label, which directly corresponds to the HTTP POST endpoint described. This directly maps to the service method 'TemporaryTableCredentialsService.generateTemporaryTableCredentials' that implements the logic to generate temporary table credentials based on the table's storage location.",
    "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the POST endpoint and temporary credentials functionality, but incorrectly mentions a TemporaryTableCredentialsService class that doesn't appear in the code and misses the key detail about the S3 vs local storage distinction",
      "error_type": "missing_key_functionality"
    }
  },
  {
    "document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.deleteSchema",
    "predicted_relationship": "The documentation snippet explicitly describes the 'deleteSchema' endpoint with parameters 'full_name' and 'force' that deletes a schema. The SchemaService.deleteSchema method (artifact_id: 41) directly maps to this description by exposing an HTTP DELETE endpoint with the same parameters, thus implementing the documented functionality.",
    "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the main relationship - that this is a DELETE endpoint for schemas with fullName and force parameters. While it references 'SchemaService' instead of 'SCHEMA_REPOSITORY', this is a minor implementation detail that doesn't change the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.deleteCatalog",
    "predicted_relationship": "The documentation describes an operation deleteCatalog(name, force) that deletes a catalog. This exactly matches the HTTP endpoint provided by CatalogService.deleteCatalog, which accepts the 'name' parameter along with an optional 'force' parameter and then calls the repository method to perform the deletion. This is evident from its annotation (@Delete(\"/{name}\")) and parameter usage.",
    "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - a DELETE endpoint that handles catalog deletion with name and force parameters, matching the documented API behavior.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.deleteCatalog",
    "predicted_relationship": "Although the documentation does not directly refer to lower level data access logic, CatalogService.deleteCatalog internally delegates the deletion operation to CatalogRepository.deleteCatalog. This repository method encapsulates the database operations required to remove the catalog, thereby forming part of the complete deletion pathway.",
    "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description mentions delegation to CatalogRepository.deleteCatalog which is not shown in the code, while missing key aspects like force deletion handling and exception conditions that are central to the functionality.",
      "error_type": "missing_core_functionality_and_incorrect_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogService.updateCatalog",
    "predicted_relationship": "The documentation defines the operation updateCatalog(name, UpdateCatalog) that returns a CatalogInfo via an HTTP API and requires specific HTTP headers. CatalogService.updateCatalog directly implements this endpoint using the @Patch annotation, accepting the 'name' parameter and an UpdateCatalog object, thereby matching the documented functionality.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the key relationship - that the code implements a PATCH endpoint matching the documentation specifications by handling a catalog name and UpdateCatalog object, returning JSON response. Minor differences in wording don't change the core understanding.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.updateCatalog",
    "predicted_relationship": "CatalogRepository.updateCatalog encapsulates the business logic for updating a catalog. It takes the same parameters (name and UpdateCatalog) and returns a CatalogInfo, exactly as defined in the documentation. This method is invoked by CatalogService.updateCatalog, thereby directly supporting the documented updateCatalog functionality.",
    "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that this is a method for updating a catalog according to the API documentation, with matching parameters and return types. While it excludes implementation details like validation and transaction management, the high-level relationship is accurately portrayed.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableCli.listTables",
    "predicted_relationship": "The documentation snippet for 'listTables' describes a function that takes catalog_name, schema_name, max_results and page_token as parameters and returns a ListTablesResponse. The method TableCli.listTables explicitly extracts these parameters from a JSON object and calls tablesApi.listTables with similar arguments, directly matching the documented functionality.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented listTables endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented listTables functionality by passing parameters from a JSON object to the API call, which aligns with the ground truth stating it's a CLI wrapper for the documented endpoint.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.listTables",
    "predicted_relationship": "TableRepository.listTables provides the core implementation for retrieving tables from the underlying datastore. It creates a ListTablesResponse by querying entities based on catalog and schema along with pagination parameters, which is in line with the API contract described in the documentation snippet.",
    "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of the listTables implementation - retrieving tables based on catalog and schema with pagination support, which aligns with the ground truth description.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.listTables",
    "predicted_relationship": "TableService.listTables acts as the REST endpoint for the listTables operation. It maps incoming HTTP GET requests (which include headers and parameters as described in the documentation) to the underlying TableRepository.listTables call, packaging the result as JSON. This endpoint effectively exposes the functionality documented in the snippet.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship that this is a REST endpoint implementing the documented listTables API operation, handling HTTP GET requests and delegating to TABLE_REPOSITORY. While it doesn't mention the additional parameters, this is a minor detail that doesn't change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.createCatalog",
    "predicted_relationship": "The documentation table explicitly lists the 'createCatalog' endpoint (POST /catalogs) to create a catalog. This directly maps to the 'CatalogService.createCatalog' method which implements this REST API endpoint by handling POST requests to create a catalog.",
    "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - both describe a POST endpoint for creating catalogs. The slight differences in implementation details don't affect the fundamental relationship.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.deleteCatalog",
    "predicted_relationship": "The documentation explicitly details the 'deleteCatalog' endpoint (DELETE /catalogs/{name}) for deleting a catalog. The 'CatalogService.deleteCatalog' method is the direct implementation of this API operation.",
    "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies this as a DELETE endpoint for catalogs, but misses the key implementation detail that it works through a repository layer and takes an optional force parameter",
      "error_type": "incomplete_implementation_details"
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.getCatalog",
    "predicted_relationship": "The documentation clearly describes the 'getCatalog' endpoint (GET /catalogs/{name}) to retrieve a catalog. The 'CatalogService.getCatalog' method implements this behavior by serving GET requests to fetch catalog details.",
    "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that the code implements the documented GET /catalogs/{name} endpoint to retrieve catalog information. While it omits implementation details about JSON response and repository usage, these are minor details that don't affect the main relationship.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.listCatalogs",
    "predicted_relationship": "According to the documentation, the 'listCatalogs' endpoint (GET /catalogs) lists all catalogs. The 'CatalogService.listCatalogs' method provides this functionality by implementing the corresponding GET endpoint.",
    "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted text correctly identifies that the code implements the documented GET /catalogs endpoint for listing catalogs. While it omits details about pagination parameters, this is not a major issue since it captures the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.updateCatalog",
    "predicted_relationship": "The documentation details the 'updateCatalog' endpoint (PATCH /catalogs/{name}) used to update an existing catalog. This is explicitly implemented by the 'CatalogService.updateCatalog' method, which processes PATCH requests for updating catalog details.",
    "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this implements the PATCH /catalogs/{name} endpoint for updating catalogs, which aligns with the ground truth's explanation of the code-documentation relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
    "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
    "predicted_relationship": "The documentation snippet explicitly describes the functionality 'generateTemporaryVolumeCredentials', including the parameter 'GenerateTemporaryVolumeCredential' and return type 'GenerateTemporaryVolumeCredentialResponse'. This directly maps to the method TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials, which implements the API endpoint with the same signature and behavior as described.",
    "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description identifies the API endpoint and signature correctly but omits the crucial logic around S3 vs local storage handling and credential generation, which is a core part of the implementation's behavior.",
      "error_type": "key_behavior_omission"
    }
  },
  {
    "document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.deleteFunction",
    "predicted_relationship": "The documentation snippet for deleteFunction, which details the deletion of a function by its fully-qualified name, directly corresponds to the REST API endpoint implemented in FunctionService.deleteFunction. This method is annotated with @Delete and accepts a 'name' parameter, matching the described interface in the documentation.",
    "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the code and documentation - it correctly identifies that this is a DELETE endpoint for removing functions by name which aligns with the implementation. The omission of the force parameter and HTTP response details are minor details.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.deleteFunction",
    "predicted_relationship": "While not explicitly mentioned in the documentation snippet, FunctionService.deleteFunction delegates the actual deletion logic to FunctionRepository.deleteFunction. This repository method handles the persistence and removal of the function based on its fully-qualified name, forming an essential part of the deletion operation chain.",
    "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly mentions function deletion but incorrectly states it delegates to FunctionRepository.deleteFunction when the code shows direct database session operations and transaction management",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.createTable",
    "predicted_relationship": "The documentation snippet explicitly refers to the 'createTable' endpoint (POST /tables) for creating a table. The method 'TableService.createTable' is annotated with @Post and implements this endpoint, making it a direct implementation of the operation described in the TablesApi documentation.",
    "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions correctly identify that the code method implements the documented POST /tables API endpoint for table creation, with the same core functionality of handling table creation requests and returning responses",
      "error_type": "none"
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.deleteTable",
    "predicted_relationship": "The documentation specifies a DELETE HTTP request on /tables/{full_name} for deleting a table. The 'TableService.deleteTable' method is annotated with @Delete and provides the public endpoint for table deletion, matching the documented functionality exactly.",
    "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the code and documentation - both describe a DELETE endpoint at /tables/{full_name} for deleting tables. While the predicted omits specific details about the HTTP response, this is a minor detail that doesn't affect the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.getTable",
    "predicted_relationship": "The TablesApi documentation contains a GET request for /tables/{full_name} to retrieve a table. The 'TableService.getTable' method, annotated with @Get, implements this functionality by retrieving and returning table information, hence directly matching the documented operation.",
    "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented GET /tables/{full_name} endpoint to retrieve table information, matching the core functionality described in the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.listTables",
    "predicted_relationship": "The documentation lists a GET endpoint for /tables that is used to list tables. The 'TableService.listTables' method (annotated with @Get) directly implements the table listing functionality, making it an explicit match to the documented endpoint.",
    "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the GET endpoint for listing tables, but focuses only on one specific method while the ground truth indicates this is a broader API summary showing multiple related methods/endpoints.",
      "error_type": "scope_too_narrow"
    }
  },
  {
    "document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.createVolume",
    "predicted_relationship": "The documentation snippet explicitly defines a method signature 'VolumeInfo createVolume(CreateVolumeRequestContent)' which directly matches the signature of the method 'VolumeRepository.createVolume'. This method accepts a CreateVolumeRequestContent parameter and returns a VolumeInfo as described in the document, thereby implementing the documented 'Create a Volume' functionality.",
    "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the method signature and basic purpose, but misses critical aspects of the implementation including validation logic, database transaction handling, and key constraints around volume types and storage location that are central to the functionality.",
      "error_type": "major_omission"
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.getSchema",
    "predicted_relationship": "The documentation snippet defines the 'getSchema' operation with a parameter 'full_name' and a return type SchemaInfo. The 'SchemaService.getSchema' method directly implements this HTTP GET endpoint by receiving the full name as a parameter and returning the JSON representation of the schema.",
    "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the core GET endpoint functionality but incorrectly refers to 'SchemaService.getSchema' instead of 'SCHEMA_REPOSITORY.getSchema' for retrieving schema data",
      "error_type": "component_mismatch"
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.getSchema",
    "predicted_relationship": "The 'SchemaService.getSchema' method delegates the retrieval of the schema to 'SchemaRepository.getSchema'. This repository method encapsulates the business logic of querying the persistence layer, converting the database object to a SchemaInfo model, and attaching any required properties.",
    "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies that this is about retrieving schema data, but incorrectly states it delegates to SchemaRepository.getSchema when the code shows direct database interaction in the method itself",
      "error_type": "implementation_detail_mismatch"
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaInfoDAO",
    "predicted_relationship": "Within the schema retrieval process, 'SchemaRepository.getSchema' uses 'SchemaInfoDAO' to convert the database entity into a SchemaInfo object. This conversion is essential for returning the correct API model as defined in the documentation.",
    "ground_truth_relationship": "The SchemaInfoDAO class provides the data persistence and transformation layer for the SchemaInfo object that is returned by the documented getSchema endpoint, handling the mapping between database records and the API response model.",
    "traceability_granularity": "Class",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that SchemaInfoDAO handles the conversion between database entities and SchemaInfo objects for the API. Both descriptions emphasize the data transformation and persistence role.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.listFunctions",
    "predicted_relationship": "The documentation snippet describes a 'listFunctions' endpoint that accepts parameters (catalog_name, schema_name, max_results, page_token) and returns a ListFunctionsResponse. The FunctionService.listFunctions method is annotated with @Get and its parameters exactly match those described, directly implementing the REST API as documented.",
    "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions capture the core relationship: a GET endpoint that takes catalog_name, schema_name, max_results, and page_token parameters, returning function listing results as JSON. While the predicted version mentions FunctionService and the ground truth mentions repository layer, this is a minor implementation detail that doesn't affect the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.listFunctions",
    "predicted_relationship": "Although not directly described in the documentation snippet, FunctionRepository.listFunctions is invoked by FunctionService.listFunctions to retrieve the list of functions from the database. This repository method returns the ListFunctionsResponse expected by the API, forming a backend dependency in the functional chain.",
    "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies that listFunctions retrieves data from a database, but incorrectly introduces a dependency on FunctionService that isn't shown in the code and misses key aspects like transaction handling and pagination support.",
      "error_type": "missing_core_functionality_and_incorrect_dependency"
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.createFunction",
    "predicted_relationship": "The documentation snippet's 'createFunction' endpoint (HTTP POST /functions) is directly referenced. This is explicitly implemented by the FunctionService.createFunction method, which is annotated with @Post(\"\") and calls FUNCTION_REPOSITORY.createFunction.",
    "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures that the code implements the documented POST /functions endpoint through a createFunction method that returns an HTTP response with repository data",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.deleteFunction",
    "predicted_relationship": "The documentation snippet describes the 'deleteFunction' API (HTTP DELETE /functions/{name}). This is explicitly implemented in the FunctionService.deleteFunction method, as indicated by its @Delete annotation and its usage inline with deletion logic.",
    "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship correctly - it identifies the DELETE /functions/{name} endpoint implementation and its function deletion purpose. While it omits details about parameters and response, these are minor omissions that don't change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.getFunction",
    "predicted_relationship": "The documentation snippet indicates the 'getFunction' API (HTTP GET /functions/{name}). FunctionService.getFunction, marked with @Get, directly implements this endpoint, mapping the documented behavior to the code.",
    "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the key relationship between the code and documentation - that it implements the GET /functions/{name} endpoint to retrieve function details, even if it doesn't mention every implementation detail.",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.listFunctions",
    "predicted_relationship": "The documentation snippet specifies a 'listFunctions' endpoint (HTTP GET /functions) for listing functions. This is explicitly provided by the FunctionService.listFunctions method that is annotated with @Get and returns a list of functions.",
    "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the code and documentation - both describe a GET endpoint for listing functions. While the prediction omits pagination parameters and specific return details, it correctly identifies the main functionality and HTTP method.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "TableRepository.createTable",
    "predicted_relationship": "The documentation defines the method signature 'TableInfo createTable(CreateTable)' which directly matches the implementation in TableRepository.createTable. This method receives a CreateTable object as a parameter, validates and processes it, and returns a TableInfo instance \u2013 exactly as described in the documentation.",
    "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the basic API signature and return type correctly, but misses crucial functionality around validation, table type restrictions, storage requirements, and error handling described in the ground truth",
      "error_type": "major_omission"
    }
  },
  {
    "document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "TableService.createTable",
    "predicted_relationship": "Although the documentation focuses on the core functionality of creating a table, TableService.createTable is the REST API endpoint that receives the HTTP request, wraps the call to the repository layer, and returns the result. It indirectly supports the documented createTable operation by passing the CreateTable object to TableRepository.createTable.",
    "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this is a REST endpoint implementing the documented createTable operation by accepting a CreateTable object, delegating to the repository layer, and returning a response. While the predicted version provides less detail, it does not contradict the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.createSchema",
    "predicted_relationship": "The documentation specifies the createSchema endpoint (HTTP POST /schemas) and this is directly implemented by the SchemaService.createSchema method, which calls SCHEMA_REPOSITORY.createSchema to create the schema.",
    "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the main relationship between the code and documentation - implementing a POST /schemas endpoint that creates a schema via the repository and returns a JSON response",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.deleteSchema",
    "predicted_relationship": "The 'deleteSchema' endpoint (HTTP DELETE /schemas/{full_name}) in the documentation is explicitly implemented by the SchemaService.deleteSchema method which is responsible for deleting a schema.",
    "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the code and documentation - that it implements the DELETE /schemas/{full_name} endpoint for deleting schemas. While it omits details about the force parameter and return status, these are minor implementation details that don't affect the main relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.getSchema",
    "predicted_relationship": "The documentation describes the getSchema endpoint (HTTP GET /schemas/{full_name}). This functionality is implemented by the SchemaService.getSchema method, which retrieves schema details.",
    "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the getSchema endpoint and GET method, but incorrectly states it's implemented by SchemaService.getSchema when the code shows it using SCHEMA_REPOSITORY.getSchema",
      "error_type": "incorrect_implementation_detail"
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.listSchemas",
    "predicted_relationship": "According to the documentation, listing schemas (HTTP GET /schemas) is a provided functionality. This is explicitly implemented by the SchemaService.listSchemas method that lists available schemas.",
    "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this implements the GET /schemas listing functionality documented in the API, which is the core relationship. While it omits parameter details, this doesn't affect the main relationship being described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.updateSchema",
    "predicted_relationship": "The updateSchema endpoint (HTTP PATCH /schemas/{full_name}) described in the documentation is implemented by the SchemaService.updateSchema method, handling updates to existing schemas.",
    "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies this as the updateSchema PATCH endpoint, but incorrectly states it's implemented by SchemaService.updateSchema when the code shows it uses SCHEMA_REPOSITORY.updateSchema",
      "error_type": "implementation_detail_error"
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.listSchemas",
    "predicted_relationship": "The documentation snippet details the listSchemas endpoint with parameters (catalog_name, max_results, page_token) and the return type ListSchemasResponse. The SchemaService.listSchemas method is annotated with @Get and directly maps these parameters from the HTTP request to a call to the repository layer, thereby exposing the documented functionality.",
    "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of a GET endpoint that retrieves schemas using catalog_name and optional pagination parameters, matching the ground truth's explanation of the relationship between the code and documentation.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.listSchemas",
    "predicted_relationship": "This method accepts the catalogName, maxResults, and pageToken parameters and returns a ListSchemasResponse, matching the function signature and behavior documented. It encapsulates the business logic for retrieving the list of schemas from the data store.",
    "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the basic function signature and purpose of returning schemas, but omits crucial implementation details about pagination handling, DAO-to-SchemaInfo conversion, and database session management that are central to the relationship described in the ground truth.",
      "error_type": "significant_omission"
    }
  },
  {
    "document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogService.updateCatalog",
    "predicted_relationship": "The documentation snippet describes an API operation 'updateCatalog' with parameters (name, UpdateCatalog) and a return type CatalogInfo. The 'CatalogService.updateCatalog' method is annotated with @Patch and explicitly declares the same signature\u2014taking a catalog name and an UpdateCatalog object\u2014and it returns the updated CatalogInfo (wrapped inside an HttpResponse). This direct correspondence makes it an explicit implementation of the documented functionality.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this is a PATCH endpoint implementing the documented API by taking a name and UpdateCatalog parameters and returning updated catalog info as JSON. While it uses slightly different wording, it conveys the same essential functionality.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.updateCatalog",
    "predicted_relationship": "The 'CatalogService.updateCatalog' method delegates the core update logic to 'CatalogRepository.updateCatalog'. This repository method encapsulates the business logic required to update the catalog entity, processing the UpdateCatalog object and returning a CatalogInfo. Its functionality forms the backbone of the updateCatalog operation described in the documentation.",
    "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies that this is about updating a catalog, but incorrectly states it delegates to a CatalogRepository.updateCatalog method when the code shows direct implementation within the method itself",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.listCatalogs",
    "predicted_relationship": "The documentation snippet describes the 'listCatalogs' operation with parameters 'page_token' and 'max_results' and a JSON response, which is directly implemented by the CatalogService.listCatalogs method. This method is annotated with the HTTP GET endpoint and directly maps the documented API parameters to its input, making it an explicit implementation of the documented functionality.",
    "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that the code implements the documented REST API endpoint by handling the page_token and max_results parameters and returning JSON catalog data via the repository call. Any minor differences in wording or level of detail don't change this fundamental alignment.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.listCatalogs",
    "predicted_relationship": "CatalogService.listCatalogs delegates the catalog retrieval to CatalogRepository.listCatalogs. Although this repository method is not directly mentioned in the documentation snippet, it forms a necessary part of the execution chain that fulfills the listCatalogs functionality, thereby making its role implicit in the overall design.",
    "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description focuses on delegation to CatalogRepository which isn't evident in the code, while missing key aspects like pagination, transactions, and data transformation that are central to the actual implementation",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.updateVolume",
    "predicted_relationship": "The documentation specifies an operation 'VolumeInfo updateVolume(name, UpdateVolumeRequestContent)' for updating a volume's name or comment. The method 'VolumeRepository.updateVolume' directly implements this functionality with the exact signature and return type, thus explicitly fulfilling the documented API behavior.",
    "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the basic purpose of updating volume name/comment, but misses crucial implementation details about validation, transaction handling, and error cases that are fundamental to the functionality",
      "error_type": "incomplete_core_functionality"
    }
  },
  {
    "document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.createVolume",
    "predicted_relationship": "The documentation snippet specifies a method with the signature 'VolumeInfo createVolume(CreateVolumeRequestContent)' which is exactly implemented by VolumeRepository.createVolume. This method takes a CreateVolumeRequestContent as input, creates a new volume, and returns a VolumeInfo, directly matching the documented functionality.",
    "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the basic signature and purpose but omits crucial aspects like validation, volume type restrictions, storage location requirements, and database transaction handling described in the ground truth",
      "error_type": "major_omission"
    }
  },
  {
    "document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeService.createVolume",
    "predicted_relationship": "Although the documented signature focuses on returning a VolumeInfo, the HTTP endpoint exposed by VolumeService.createVolume encapsulates this functionality by receiving a CreateVolumeRequestContent and then delegating to the repository layer. Its use of HTTP annotations and headers aligns with the documented details about request headers and REST API behavior.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that the code implements a documented API endpoint accepting CreateVolumeRequestContent and returning volume information via JSON HTTP response. While the wording differs, the essential functionality alignment is preserved.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.getFunction",
    "predicted_relationship": "The documentation snippet describes the getFunction API endpoint that takes a fully-qualified function name and returns the function information. 'FunctionService.getFunction' explicitly implements this endpoint by handling a GET request with the required parameter and returning the function details as a JSON response.",
    "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture that this is a GET endpoint that takes a function name parameter and returns function information as JSON. The predicted description conveys the same core relationship as the ground truth.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.getFunction",
    "predicted_relationship": "Within 'FunctionService.getFunction', the actual retrieval of the FunctionInfo is delegated to 'FunctionRepository.getFunction'. Although not directly cited in the documentation snippet, it is an essential dependency in executing the documented behavior.",
    "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description mentions delegation to FunctionRepository.getFunction which is not evident in the code. However, it does capture the basic concept of function retrieval, just with incorrect implementation details.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.getSchema",
    "predicted_relationship": "The documentation snippet directly describes the 'getSchema' API operation. SchemaService.getSchema implements the HTTP GET endpoint for retrieving a SchemaInfo based on its full name, matching the signature 'SchemaInfo getSchema(full_name)'.",
    "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of getting schema information via a GET endpoint using a full name parameter, which aligns with the ground truth's description of the implementation.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.getSchema",
    "predicted_relationship": "SchemaService.getSchema delegates the task of retrieving the schema data to SchemaRepository.getSchema, which handles the database interactions and converts the stored schema into a SchemaInfo object. This repository method is not directly mentioned in the documentation snippet, but is a necessary intermediate component in the overall functionality.",
    "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description focuses on delegation to SchemaRepository which isn't evident in the code, though it correctly captures the overall schema retrieval functionality. The ground truth more accurately describes the actual implementation details shown in the code.",
      "error_type": "incorrect_implementation_detail"
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaCli.getSchema",
    "predicted_relationship": "SchemaCli.getSchema is a client-side method that invokes the getSchema API endpoint. By extracting the full name from a JSON object and calling schemasApi.getSchema, this method demonstrates how the documented functionality is consumed by a CLI client.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented getSchema endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures that this is a client method implementing/wrapping the documented getSchema API endpoint. Both descriptions convey the same core relationship between the code and documentation.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "TableRepository.createTable",
    "predicted_relationship": "The documentation snippet specifies the API signature 'TableInfo createTable(CreateTable)' which exactly matches the method signature defined in TableRepository.createTable. This method takes a CreateTable object as input and returns a TableInfo, thus directly implementing the API functionality described in the documentation.",
    "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the method signature and basic input/output, but misses crucial functionality like validation, table type checks, storage requirements, and transaction handling that are essential parts of the implementation described in the ground truth.",
      "error_type": "significant_omission"
    }
  },
  {
    "document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.deleteSchema",
    "predicted_relationship": "The deleteSchema operation as documented is directly implemented by the SchemaService.deleteSchema method. This method is annotated with @Delete and takes a 'full_name' string and an Optional<Boolean> force parameter, exactly matching the parameters described in the documentation.",
    "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship that this is a DELETE endpoint implementing schema deletion with matching parameters (fullName and force) and functionality, even if it uses slightly different terminology (SchemaService vs SCHEMA_REPOSITORY)",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.deleteSchema",
    "predicted_relationship": "While not directly referenced in the documentation text, SchemaRepository.deleteSchema is implicitly involved because SchemaService.deleteSchema delegates the actual schema deletion logic to this repository method. It handles the persistence logic for removing a schema from the database.",
    "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted text misunderstands the implementation as being a delegation to SchemaRepository when the code shows direct implementation with child entity deletion logic. However, it correctly identifies that it handles schema deletion persistence.",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
    "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
    "predicted_relationship": "The documentation clearly references the generateTemporaryVolumeCredentials operation via its hyperlink in the table. This corresponds directly to the method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials' (artifact id 59) that handles the POST request to '/temporary-volume-credentials', thereby generating temporary volume credentials.",
    "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the documentation and code - it correctly identifies that the method implements the documented POST endpoint for generating temporary volume credentials. While it omits implementation details about S3 vs local filesystem handling, the high-level relationship is accurately described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.createCatalog",
    "predicted_relationship": "The documentation for the 'createCatalog' API operation explicitly references a POST /catalogs endpoint. The 'CatalogService.createCatalog' artifact is a direct implementation of this endpoint as evidenced by its @Post annotation and the call to 'CATALOG_REPOSITORY.addCatalog(createCatalog)'.",
    "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately explain that the code implements the documented POST /catalogs endpoint using a @Post-annotated method that handles catalog creation. The core relationship and functionality are consistently described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.deleteCatalog",
    "predicted_relationship": "The documentation specifies a DELETE /catalogs/{name} endpoint for deleting a catalog. 'CatalogService.deleteCatalog' directly implements this operation, as seen by its @Delete annotation and its handling of the deletion logic.",
    "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted describes the DELETE endpoint correctly but misses that this is a repository-delegated handler method. It also incorrectly states 'CatalogService.deleteCatalog' when the code shows CATALOG_REPOSITORY.",
      "error_type": "factual_inaccuracy"
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.getCatalog",
    "predicted_relationship": "The GET /catalogs/{name} endpoint described in the documentation is implemented by 'CatalogService.getCatalog'. This is clear from its @Get annotation and its function of retrieving a catalog via the repository.",
    "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship that the code implements the GET /catalogs/{name} endpoint by returning catalog data via repository, which aligns with the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.listCatalogs",
    "predicted_relationship": "The documentation details a GET /catalogs endpoint that lists all catalogs. 'CatalogService.listCatalogs' is the corresponding artifact that implements this operation, as suggested by its @Get annotation and its invocation of the repository's list logic.",
    "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the key relationship between the documented GET /catalogs endpoint and its implementation through the listCatalogs method, including the core functionality of listing catalogs. While it omits pagination details, this is a minor omission that doesn't affect the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.updateCatalog",
    "predicted_relationship": "The documentation defines a PATCH /catalogs/{name} endpoint for updating a catalog. 'CatalogService.updateCatalog' implements this functionality, as highlighted by its @Patch annotation and the call that triggers catalog update via the repository.",
    "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions correctly identify that the code implements the documented PATCH endpoint for updating a catalog, with the same core functionality of accepting a name parameter and returning updated catalog data as JSON",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.deleteCatalog",
    "predicted_relationship": "This method is explicitly responsible for handling the HTTP DELETE request to remove a catalog. Its method name, its parameters ('name' and 'force'), and its annotations (@Delete and @Param) directly correspond to the documentation snippet that describes a deleteCatalog operation.",
    "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - that this is a DELETE endpoint for catalogs with name and force parameters. While it's more concise than the ground truth, it covers the essential functionality without any contradictions.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.deleteCatalog",
    "predicted_relationship": "Although not directly mentioned in the documentation snippet, CatalogRepository.deleteCatalog is indirectly involved since it is invoked by CatalogService.deleteCatalog to perform the underlying deletion operation on the persistent storage. This makes it an integral part of the deleteCatalog chain.",
    "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description incorrectly states CatalogRepository.deleteCatalog is involved when the code shows direct deletion implementation. However, it correctly recognizes this is part of catalog deletion functionality.",
      "error_type": "incorrect_component_reference"
    }
  },
  {
    "document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.createFunction",
    "predicted_relationship": "This method exactly implements the documented functionality. Its signature 'public FunctionInfo createFunction(CreateFunctionRequest createFunctionRequest)' matches the documentation's 'FunctionInfo createFunction(CreateFunctionRequest)' declaration, converting a CreateFunctionRequest into a FunctionInfo.",
    "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the basic API signature and purpose but misses crucial aspects like validation, database persistence, and error handling that are central to the functionality as described in the ground truth.",
      "error_type": "major_omission"
    }
  },
  {
    "document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "FunctionService.createFunction",
    "predicted_relationship": "This method is annotated with @Post and exposes an HTTP endpoint for creating functions. It wraps the repository call and makes the createFunction functionality available as a web API, closely matching the documented operation.",
    "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - it's a POST endpoint that exposes function creation functionality through an API by delegating to a repository and returning HTTP responses",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "FunctionCli.createFunction",
    "predicted_relationship": "This CLI method provides a client-side utility to invoke the createFunction API. Although not part of the server\u2019s core implementation, it demonstrates how users might programmatically call the createFunction functionality.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented createFunction endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately identify this as a CLI wrapper/utility method for the createFunction API endpoint. The predicted description captures the same core relationship as the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.deleteVolume",
    "predicted_relationship": "The documentation snippet explicitly specifies a deleteVolume operation (deleteVolume(name)) that deletes a volume given its fully qualified three-level name. The VolumeService.deleteVolume method directly maps to this API operation by exposing a HTTP DELETE endpoint (annotated with @Delete) that takes the 'full_name' parameter, which corresponds to the documented 'name' parameter.",
    "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - a DELETE endpoint that takes a volume name parameter and handles volume deletion, matching the documented API operation.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.deleteVolume",
    "predicted_relationship": "Although not directly mentioned in the documentation snippet, the VolumeRepository.deleteVolume method provides the core business logic for deleting the volume. It processes the fully qualified volume name by splitting it into catalog, schema, and volume parts and then executes the deletion. This method is invoked by VolumeService.deleteVolume, making it an essential implicit part of the deletion operation.",
    "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core functionality of volume deletion through a validated three-part name, even though it frames it slightly differently by mentioning the repository pattern. The essential relationship between the code and documentation is preserved.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
    "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
    "predicted_relationship": "The documentation snippet explicitly specifies a function signature 'GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)' and describes the operation to generate temporary volume credentials. This exactly matches the method implemented in the TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials artifact, which accepts a GenerateTemporaryVolumeCredential parameter and returns an appropriate response. Hence, the relationship is explicit and it implements the documented functionality.",
    "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that the code implements the documented API endpoint with matching request/response types. While it doesn't detail the S3 vs local storage handling, it correctly identifies the main function signature match and purpose.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.listVolumes",
    "predicted_relationship": "The documentation snippet clearly defines a 'listVolumes' operation with parameters catalog_name, schema_name, max_results, and page_token along with a return type of ListVolumesResponseContent. The method VolumeService.listVolumes directly maps to this API endpoint by declaring these parameters (with an additional optional include_browse) and returning a JSON response built from the underlying repository output. This direct mapping makes the relationship explicit.",
    "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that the code implements a GET endpoint for listVolumes with the documented parameters and JSON response. Both descriptions note the same essential mapping between the API documentation and implementation.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.listVolumes",
    "predicted_relationship": "Although the documentation snippet does not mention the repository layer directly, VolumeService.listVolumes relies on VolumeRepository.listVolumes to actually retrieve the volumes data from the persistence store. This lower-level method, which returns ListVolumesResponseContent, is implicitly part of the overall chain that supports the documented functionality.",
    "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description mentions a VolumeRepository layer that doesn't exist in the code, though it correctly implies the service retrieves volume data. The ground truth more accurately describes the direct database querying using Hibernate.",
      "error_type": "incorrect_architecture_assumption"
    }
  },
  {
    "document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaService.createSchema",
    "predicted_relationship": "The documentation snippet describes the HTTP API for createSchema, including HTTP headers and the expected JSON payload. This method is annotated with @Post(\"\") and takes a CreateSchema object, returning the JSON representation of the SchemaInfo, which directly matches the documented interface. Thus, it is explicitly linked to the documentation.",
    "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this is a POST endpoint that accepts CreateSchema input and returns SchemaInfo as JSON, matching the documented interface.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.createSchema",
    "predicted_relationship": "The documented signature 'SchemaInfo createSchema(CreateSchema)' is implemented by this method. It performs input validation, persistence (via Session and Transaction), and ultimately returns a SchemaInfo object. This exact functionality directly corresponds to what is defined in the documentation.",
    "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of implementing the documented API signature, including validation, persistence, and return type alignment. Any minor omissions do not affect the overall accuracy.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.listFunctions",
    "predicted_relationship": "The documentation snippet explicitly defines the 'listFunctions' API endpoint with parameters (catalog_name, schema_name, max_results, page_token) and specifies a return type of ListFunctionsResponse. The FunctionService.listFunctions method is annotated with @Get and its method signature matches the documented endpoint. This is a direct implementation of the documented functionality.",
    "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the same core functionality as the ground truth - a GET endpoint that takes the specified parameters and returns function listing results as JSON. While it mentions FunctionService instead of repository layer, this is a minor implementation detail that doesn't change the fundamental relationship.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.listFunctions",
    "predicted_relationship": "While not directly exposed to the HTTP client, FunctionRepository.listFunctions is called by FunctionService.listFunctions to perform the underlying business logic and retrieve the ListFunctionsResponse. This makes it an implicit but essential part of the implementation chain for the listFunctions functionality described in the documentation.",
    "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies that the code handles listFunctions functionality, but incorrectly describes it as being called by a FunctionService class rather than being the direct implementation of the documented API endpoint. However, it does understand the core purpose of retrieving function data.",
      "error_type": "incorrect_implementation_chain"
    }
  },
  {
    "document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.deleteTable",
    "predicted_relationship": "This method is annotated with @Delete(\"/{full_name}\") and accepts the 'full_name' parameter as described in the documentation. It directly implements the deleteTable operation on the server side by calling TABLE_REPOSITORY.deleteTable(fullName).",
    "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of a DELETE endpoint that takes a full_name parameter and deletes a table through the repository, which aligns with the ground truth. The minor omission of HTTP status code details does not affect the overall relationship understanding.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableCli.deleteTable",
    "predicted_relationship": "This client-side method reads the 'full_name' from the JSON parameters and invokes tablesApi.deleteTable. Its naming and parameter handling directly correlate with the documented deleteTable operation.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteTable endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a method that handles DeleteTable functionality by passing the full_name parameter to the API, which aligns with the ground truth's description of it being a CLI wrapper for the DeleteTable endpoint.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.deleteTable",
    "predicted_relationship": "This lower-level repository method is called by TableService.deleteTable to perform the actual deletion of the table from the persistence layer. Although not directly exposed in the API contract, it is an indispensable part of the operation.",
    "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies this as a repository-level table deletion method, but mischaracterizes it as a lower-level helper called by TableService when the documentation shows it's the main implementation of the API endpoint",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.getTable",
    "predicted_relationship": "The documentation snippet describes a REST API operation 'getTable' with the signature 'TableInfo getTable(full_name)' and specifies HTTP headers such as 'Accept: application/json'. Artifact 'TableService.getTable' directly implements this endpoint by receiving the full table name as a parameter, invoking the underlying data access method, and returning a JSON representation of the TableInfo. This direct match in name and functionality makes the relationship explicit.",
    "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - that it implements a REST endpoint for getting table information via the full_name parameter and returns TableInfo as JSON. While it uses slightly different terminology (e.g., 'TableService' vs 'TABLE_REPOSITORY'), the fundamental relationship understanding is the same.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.getTable",
    "predicted_relationship": "Although not directly exposed as an HTTP endpoint, the 'TableRepository.getTable' method is invoked by the 'TableService.getTable' endpoint to query and retrieve the actual table information from the database. Its functionality supports the behavior documented for getting a table, making its inclusion implicit in the trace chain.",
    "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description accurately notes that getTable retrieves table information, but incorrectly frames it as being called by TableService rather than being the direct implementation of the documented operation",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.deleteFunction",
    "predicted_relationship": "The documentation specifies the deleteFunction operation with a 'name' parameter. The FunctionService.deleteFunction method is the HTTP endpoint (annotated with @Delete) that directly implements this operation, accepting the function's fully-qualified name as described.",
    "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the code and documentation - that it implements a delete function endpoint taking a name parameter to delete a function, which aligns with the ground truth. The omission of the force parameter and HTTP response details are minor implementation details.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.deleteFunction",
    "predicted_relationship": "While not directly exposed by the documentation, FunctionRepository.deleteFunction is invoked by the FunctionService.deleteFunction method to execute the actual deletion logic. This underlying implementation supports the deleteFunction operation documented in the API.",
    "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description identifies the role of deleteFunction but incorrectly references FunctionRepository and FunctionService classes that don't appear in the code, while missing the key transaction and validation aspects.",
      "error_type": "incorrect_component_references"
    }
  },
  {
    "document_text": "# TemporaryTableCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryTableCredentials**](TemporaryTableCredentialsApi.md#generateTemporaryTableCredentials) | **POST** /temporary-table-credentials | Generate temporary table credentials. |",
    "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
    "predicted_relationship": "The documentation explicitly lists the 'generateTemporaryTableCredentials' endpoint (HTTP POST /temporary-table-credentials) which directly maps to the service method in the TemporaryTableCredentialsService artifact. This method implements the functionality to generate temporary table credentials as described in the doc snippet.",
    "ground_truth_relationship": "The code implements the documented POST endpoint /temporary-table-credentials by validating the table location and returning AWS temporary credentials for S3 storage or empty credentials for local storage.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship - that this is a service method implementing the documented POST endpoint for generating temporary table credentials. While it doesn't detail the S3 vs local storage handling, this omission doesn't change the fundamental relationship being described.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaService.updateSchema",
    "predicted_relationship": "The documentation snippet details an updateSchema operation with a signature (full_name, UpdateSchema) that returns a SchemaInfo, matching the HTTP PATCH endpoint in SchemaService.updateSchema. This method directly exposes the API by accepting the 'full_name' and 'UpdateSchema' parameters and then returning a JSON-formatted SchemaInfo response.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions capture the core functionality - a PATCH endpoint that accepts a fullName and UpdateSchema parameter and returns a JSON response. The predicted description accurately reflects the relationship shown in the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.updateSchema",
    "predicted_relationship": "SchemaRepository.updateSchema implements the core update logic for a schema by accepting the same parameters (full_name, UpdateSchema) and returning a SchemaInfo object as described in the documentation. It is called by SchemaService.updateSchema to perform the actual data update operations.",
    "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship that this code implements the documented schema update functionality, with matching parameters and return types. While it omits some implementation details about validation and property handling that the ground truth mentions, the high-level relationship understanding is correct.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.getVolume",
    "predicted_relationship": "This method is annotated with '@Get' to expose an HTTP GET endpoint and directly corresponds to the documented 'getVolume' API. It takes the fully qualified volume name from the path parameter and returns a JSON payload of VolumeInfo, matching the documented signature 'VolumeInfo getVolume(name)'.",
    "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the code and documentation - it's a GET endpoint that accepts a volume name parameter and returns volume info as JSON. The omission of the optional include_browse parameter is a minor detail that doesn't affect the main functionality description.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.getVolume",
    "predicted_relationship": "This repository method encapsulates the business logic to retrieve a VolumeInfo by its fully qualified name. It is invoked by VolumeService.getVolume and returns the VolumeInfo object that is ultimately delivered to the client. Its signature mirrors the documented 'VolumeInfo getVolume(name)'.",
    "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core functionality - retrieving a VolumeInfo based on a fully qualified name parameter. While it omits implementation details like name splitting and validation, it accurately describes the high-level relationship between the code and documentation.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogService.createCatalog",
    "predicted_relationship": "The documentation snippet specifies the operation 'createCatalog' with signature 'CatalogInfo createCatalog(CreateCatalog)' along with HTTP details. The 'CatalogService.createCatalog' method explicitly implements this API endpoint by receiving a CreateCatalog object and returning a CatalogInfo in JSON format, which matches the documented signature.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between code and documentation - it recognizes the API endpoint implementation that accepts CreateCatalog and returns CatalogInfo in JSON format, matching the documented signature and behavior",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.addCatalog",
    "predicted_relationship": "Although not mentioned directly in the documentation snippet, 'CatalogRepository.addCatalog' is the method invoked by the service layer to handle the business logic of catalog creation. It accepts a CreateCatalog object and returns a CatalogInfo, thereby encapsulating the core functionality detailed in the documentation.",
    "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures that it's about catalog creation and the basic input/output types, but misrepresents it as a repository method being called by a service layer, when it's actually the direct implementation with validation and persistence logic",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.createFunction",
    "predicted_relationship": "The documentation entry for createFunction specifies a POST endpoint to create a function. The FunctionService.createFunction method is explicitly annotated with @Post and directly provides this functionality.",
    "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the code and documentation - that it implements a POST endpoint for creating functions. While it's more concise than the ground truth, it doesn't contradict or misunderstand the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.deleteFunction",
    "predicted_relationship": "The documentation entry for deleteFunction specifies a DELETE endpoint to remove a function. The FunctionService.deleteFunction method directly implements this endpoint by handling DELETE requests.",
    "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship between the code and documentation - that it implements a DELETE endpoint for removing functions. While it omits details about parameters and response codes, the fundamental relationship is accurately described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.getFunction",
    "predicted_relationship": "The documentation entry for getFunction indicates a GET endpoint to retrieve a function. The FunctionService.getFunction method is explicitly implemented to handle GET requests for a specific function.",
    "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a GET endpoint for retrieving a function and matches the documented functionality. It captures the core relationship between the code and documentation.",
      "error_type": null
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.listFunctions",
    "predicted_relationship": "The documentation entry for listFunctions specifies a GET endpoint to list functions. The FunctionService.listFunctions method directly implements this endpoint by providing the logic to list available functions.",
    "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship - that this is a GET endpoint implementation for listing functions. While it omits specific parameters, this doesn't affect the fundamental relationship being described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.createSchema",
    "predicted_relationship": "The documentation lists the 'createSchema' endpoint (HTTP POST /schemas). 'SchemaService.createSchema' is annotated with @Post and directly implements that endpoint, thus providing an explicit trace from the documentation to this method.",
    "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is an implementation of the documented POST /schemas endpoint through the @Post-annotated createSchema method",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.deleteSchema",
    "predicted_relationship": "The documentation specifies the 'deleteSchema' endpoint (HTTP DELETE /schemas/{full_name}). 'SchemaService.deleteSchema' is marked with @Delete and directly corresponds to this functionality, making the trace explicit.",
    "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship - that this is the DELETE /schemas/{full_name} endpoint implementation. While it omits details about the force parameter and return status, these are minor details that don't change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.getSchema",
    "predicted_relationship": "The documentation indicates a GET operation on /schemas/{full_name} for retrieving a schema. 'SchemaService.getSchema' is annotated with @Get and implements this endpoint explicitly.",
    "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that the code implements a GET endpoint for /schemas/{full_name} that retrieves a schema, which matches the documented API functionality.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.listSchemas",
    "predicted_relationship": "The documentation describes a 'listSchemas' endpoint (HTTP GET /schemas) for listing schemas. 'SchemaService.listSchemas' implements this endpoint directly, serving as an explicit implementation of the documented operation.",
    "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions correctly identify that the listSchemas method implements the documented GET /schemas endpoint for listing schemas and returns JSON responses. The predicted description captures the core relationship accurately, even though it doesn't list all parameters.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.updateSchema",
    "predicted_relationship": "The documentation specifies an 'updateSchema' endpoint (HTTP PATCH /schemas/{full_name}). 'SchemaService.updateSchema' is marked with @Patch and directly handles the schema update functionality, making it an explicit mapping.",
    "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is an implementation of the documented PATCH /schemas/{full_name} endpoint for updating schemas, capturing the same core relationship as the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.createVolume",
    "predicted_relationship": "The documentation for the 'createVolume' operation (POST /volumes) is explicitly referenced in the VolumesApi documentation. The VolumeService.createVolume method (artifact_id 71) directly implements this endpoint by processing the CreateVolumeRequestContent and delegating volume creation to the repository.",
    "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions capture the core relationship that this code implements the POST /volumes endpoint by handling CreateVolumeRequestContent and using the VOLUME_REPOSITORY to create volumes with JSON responses",
      "error_type": "none"
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.deleteVolume",
    "predicted_relationship": "The 'deleteVolume' operation (DELETE /volumes/{name}) noted in the documentation is explicitly implemented by the VolumeService.deleteVolume method (artifact_id 72). This method handles the deletion logic by calling VOLUME_REPOSITORY.deleteVolume and returning an appropriate HTTP response.",
    "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture that the code implements the documented DELETE endpoint for volumes, accepting a name parameter, using the repository for deletion, and returning an OK response",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.getVolume",
    "predicted_relationship": "The GET /volumes/{name} endpoint described in the documentation corresponds to the VolumeService.getVolume method (artifact_id 73). This method is responsible for retrieving the details of a specified volume.",
    "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the GET /volumes/{name} endpoint is implemented by a method that retrieves volume information, which aligns with the ground truth's description of the endpoint implementation that gets volume data by name and returns it as JSON.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.listVolumes",
    "predicted_relationship": "According to the documentation, the GET /volumes endpoint is used to list volumes. The VolumeService.listVolumes method (artifact_id 74) directly implements this operation by retrieving and returning a list of volumes.",
    "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a GET endpoint for listing volumes and handles volume retrieval functionality, matching the core relationship shown in the ground truth. While it omits the specific parameter details, this doesn't affect the fundamental relationship being described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.updateVolume",
    "predicted_relationship": "The PATCH /volumes/{name} operation specified in the documentation for updating a volume is explicitly handled by VolumeService.updateVolume (artifact_id 75). This method processes update requests and applies modifications via the VolumeRepository.",
    "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies this as the PATCH endpoint for updating volumes, but incorrectly references 'VolumeService.updateVolume' when the code shows VOLUME_REPOSITORY.updateVolume being used",
      "error_type": "implementation_detail_mismatch"
    }
  },
  {
    "document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.listTables",
    "predicted_relationship": "The documentation snippet describes the listTables operation with parameters catalog_name, schema_name, max_results, and page_token that returns a ListTablesResponse. This method in TableService is directly annotated as an HTTP GET endpoint matching that signature and therefore explicitly implements the documented API.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the core functionality of the listTables API endpoint but misses the significant detail about the two additional optional parameters (omit_properties and omit_columns) that are present in the code but not in the documentation",
      "error_type": "missing_significant_parameters"
    }
  },
  {
    "document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.listTables",
    "predicted_relationship": "Although not directly mentioned in the documentation snippet, this repository method is used by TableService.listTables to fetch and construct the ListTablesResponse. It underpins the main functionality and is an implicit part of the execution chain for the listTables API.",
    "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies this as the repository implementation of the listTables API functionality, even though it's less detailed than the ground truth. The core relationship is captured without contradictions.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.createTable",
    "predicted_relationship": "The documentation snippet lists the 'createTable' API endpoint for creating a table (HTTP POST /tables). This is directly implemented by the TableService.createTable method, which is annotated with @Post and handles the creation logic.",
    "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented POST /tables API endpoint for table creation, with the same core functionality of handling table creation requests and responses",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.deleteTable",
    "predicted_relationship": "The documentation snippet specifies the 'deleteTable' endpoint (HTTP DELETE /tables/{full_name}). TableService.deleteTable is annotated with @Delete and clearly implements the functionality to delete a table, matching the documented description.",
    "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship - that the code implements the documented DELETE /tables/{full_name} endpoint with matching functionality for deleting tables.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.getTable",
    "predicted_relationship": "The snippet documents the 'getTable' endpoint (HTTP GET /tables/{full_name}). TableService.getTable is annotated with @Get and implements the endpoint to retrieve a table, directly corresponding to the API documentation.",
    "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the main relationship - that this is a GET endpoint for retrieving table information based on a full_name parameter, which matches the ground truth's explanation of the implementation.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.listTables",
    "predicted_relationship": "The documentation lists the 'listTables' operation (HTTP GET /tables) for listing tables. TableService.listTables is annotated with @Get and returns the list of tables, directly fulfilling the documented API specification.",
    "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the listTables GET endpoint and its basic functionality, but overlooks that this is part of a broader API documentation showing multiple related endpoints and their descriptions",
      "error_type": "incomplete_scope"
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.listSchemas",
    "predicted_relationship": "The documentation snippet describes the 'listSchemas' API, including its parameters and return type. This exactly matches the method 'SchemaService.listSchemas', which is annotated as an HTTP GET endpoint and returns a JSON response containing a ListSchemasResponse. It directly implements the documented functionality.",
    "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of the API endpoint, matching the ground truth's explanation of a GET endpoint that retrieves schemas using catalog name and pagination parameters.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.listSchemas",
    "predicted_relationship": "While not directly exposed in the HTTP API, 'SchemaRepository.listSchemas' is used by SchemaService.listSchemas to retrieve the actual list of schemas from the persistence layer. This method supports the documented functionality by providing the underlying data needed to construct the ListSchemasResponse.",
    "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description identifies the basic functionality of retrieving schemas, but mischaracterizes it as an internal implementation detail rather than recognizing it as the main API endpoint implementation. It also omits key aspects like pagination handling and schema info conversion.",
      "error_type": "incomplete_understanding"
    }
  },
  {
    "document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.getCatalog",
    "predicted_relationship": "The documentation describes a getCatalog endpoint that returns a CatalogInfo. The method 'CatalogService.getCatalog' directly implements this endpoint by accepting a catalog name and returning its information. Its signature and behavior directly match the documented function.",
    "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the main relationship - that the code implements a REST GET endpoint for retrieving catalog information based on a name parameter and returns JSON response, matching the API documentation.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.getCatalog",
    "predicted_relationship": "Within the implementation of CatalogService.getCatalog, the service method delegates the work of retrieving catalog data to the repository. 'CatalogRepository.getCatalog' carries out the logic for fetching the catalog from the persistence layer using the provided name.",
    "ground_truth_relationship": "The code directly implements the documented getCatalog operation by querying the database for a CatalogInfoDAO entity matching the specified name parameter using Hibernate's query language and returning a single result.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "While both describe catalog retrieval functionality, the predicted description suggests a service-repository delegation pattern that isn't present in the actual code, which shows direct database querying using Hibernate",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogInfoDAO",
    "predicted_relationship": "The CatalogRepository.getCatalog method uses CatalogInfoDAO to convert the retrieved database entity into the public CatalogInfo model that is returned to the caller. This conversion is a necessary step in preparing data for the API response.",
    "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
    "traceability_granularity": "Class",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions capture the core relationship of CatalogInfoDAO serving as a data persistence/mapping layer that converts between database entities and CatalogInfo objects for the API",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaService.createSchema",
    "predicted_relationship": "The documentation snippet specifies the createSchema functionality with the signature 'SchemaInfo createSchema(CreateSchema)'. The SchemaService.createSchema method is the HTTP endpoint implementation that directly exposes this functionality. It receives a CreateSchema object and returns a SchemaInfo wrapped in an HTTP response, in accordance with the documentation's API contract.",
    "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the code and documentation - handling POST requests that accept CreateSchema objects and returning schema information via HTTP response in JSON format.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.createSchema",
    "predicted_relationship": "Although not directly exposed in the API documentation, SchemaRepository.createSchema implements the core business logic to create a new schema. It accepts a CreateSchema object and returns a SchemaInfo, precisely matching the documented signature. This method is internally invoked by the service endpoint, thereby indirectly satisfying the documented functionality.",
    "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented API functionality of creating a schema and returning SchemaInfo, even though it describes the flow slightly differently. The core relationship is preserved.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.listVolumes",
    "predicted_relationship": "This method directly implements the 'listVolumes' functionality as described in the documentation. It accepts the parameters (catalogName, schemaName, maxResults, pageToken) and returns a ListVolumesResponseContent object, which exactly matches the documented API signature.",
    "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship between the code and documentation - that the method implements the documented listVolumes API with the specified parameters and return type. While it doesn't mention the database/Hibernate implementation details, this omission doesn't change the fundamental relationship being described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.listVolumes",
    "predicted_relationship": "This service method exposes the listVolumes API as an HTTP GET endpoint. While the documentation does not explicitly mention the service layer, VolumeService.listVolumes internally delegates to VolumeRepository.listVolumes, forming part of the complete API chain.",
    "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that this is a GET endpoint implementing the listVolumes API functionality that works with a volume repository. While it speculates about internal service layers not shown in the code, this doesn't contradict the main functionality described in the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.getSchema",
    "predicted_relationship": "This method is directly responsible for handling HTTP GET requests to retrieve a schema. Its signature and behavior (returning a JSON response that encapsulates a SchemaInfo) exactly match the documentation's description of getSchema(full_name). It serves as the public API endpoint as documented in SchemasApi.md.",
    "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of handling GET requests to retrieve schema information and return it as JSON, matching the ground truth's description of the endpoint implementation.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.getSchema",
    "predicted_relationship": "Although not directly exposed as the API endpoint, this repository method is internally called by SchemaService.getSchema to retrieve the SchemaInfo from the persistence layer. It returns the SchemaInfo object as required by the documented signature, thereby forming an implicit part of the overall getSchema functionality.",
    "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description suggests this is an internal repository method called by SchemaService.getSchema, which is not evident in the code or documentation. However, it correctly identifies that it retrieves SchemaInfo, which is the core functionality.",
      "error_type": "added_unsupported_details"
    }
  },
  {
    "document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogService.createCatalog",
    "predicted_relationship": "The documentation snippet clearly specifies a 'createCatalog' operation with the signature 'CatalogInfo createCatalog(CreateCatalog)'. The 'CatalogService.createCatalog' method has a matching name and signature, as it is annotated with an HTTP POST and takes a CreateCatalog object as input, returning a JSON response containing a CatalogInfo. This directly implements the documented API functionality.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions capture the core relationship between the code and documentation - that it implements a createCatalog POST endpoint accepting CreateCatalog input and returning CatalogInfo as JSON. The predicted description covers all key aspects of the relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.addCatalog",
    "predicted_relationship": "While not explicitly mentioned in the documentation text, the 'CatalogRepository.addCatalog' method performs the internal business logic for creating a catalog by receiving a CreateCatalog object and returning a CatalogInfo. This method is invoked by 'CatalogService.createCatalog', thereby indirectly realizing the functionality described in the documentation.",
    "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures that addCatalog implements the createCatalog functionality by handling catalog creation, even though it describes it through a service layer relationship. The core functionality of creating and persisting a new catalog is consistent with the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.createVolume",
    "predicted_relationship": "The documentation states the signature 'VolumeInfo createVolume(CreateVolumeRequestContent)' and describes creating a new volume. This directly matches the method 'VolumeRepository.createVolume' which takes a CreateVolumeRequestContent as its parameter and returns a VolumeInfo after performing necessary validations and creation logic.",
    "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship that this is a createVolume method taking CreateVolumeRequestContent and returning VolumeInfo. While it omits implementation details like validation and persistence logic, the high-level relationship described matches the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeService.createVolume",
    "predicted_relationship": "While the documented signature exactly matches the repository method, the service endpoint 'VolumeService.createVolume' also plays a key role by exposing this functionality via a REST API. It receives a CreateVolumeRequestContent and delegates the creation to the repository. Thus, even though its return type is wrapped in an HttpResponse, it indirectly embodies the documented createVolume functionality.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented API endpoint functionality, receiving CreateVolumeRequestContent and returning volume information via HTTP response. While it adds extra detail about the service layer, it captures the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeCli.deleteVolume",
    "predicted_relationship": "The documentation snippet explicitly describes a deleteVolume operation taking a fully-qualified volume name. The 'VolumeCli.deleteVolume' method is clearly named and directly invokes volumesApi.deleteVolume with the volume full name parameter. This shows an explicit mapping between the documented deleteVolume operation and the CLI client method.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented deleteVolume endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship - that the code is implementing the documented deleteVolume operation through a CLI wrapper method, taking a volume name parameter",
      "error_type": null
    }
  },
  {
    "document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.deleteVolume",
    "predicted_relationship": "The deleteVolume operation is an HTTP DELETE endpoint as defined in the API documentation. The 'VolumeService.deleteVolume' method is annotated with @Delete, accepts the full volume name parameter, and calls the repository method to perform the deletion. This directly maps to the documented functionality.",
    "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - that it implements a DELETE endpoint for volumes with the specified name parameter and performs the deletion via the repository. While it omits mentioning the specific HTTP 200 response, this is a minor detail that doesn't affect the main relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.deleteVolume",
    "predicted_relationship": "The core business logic for deleting a volume is implemented in the 'VolumeRepository.deleteVolume' method. This method accepts a three-level fully qualified volume name (as described in the documentation), splits it, verifies conditions, and performs the deletion. It is invoked indirectly via the service layer, making it an essential part of the deleteVolume operation.",
    "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of volume deletion including the three-level name validation and deletion process, matching the ground truth's description of the implementation. While it doesn't mention storage cleanup explicitly, it captures the main relationship correctly.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.createSchema",
    "predicted_relationship": "The documentation entry for 'createSchema' explicitly documents a POST /schemas endpoint used to create a schema. The 'SchemaService.createSchema' method directly implements this endpoint by accepting a CreateSchema object and returning a JSON response.",
    "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this is a POST endpoint for schema creation that accepts a CreateSchema object and returns a JSON response. Any minor differences in wording do not change the fundamental understanding.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.deleteSchema",
    "predicted_relationship": "The documentation entry for 'deleteSchema' describes the DELETE /schemas/{full_name} endpoint to delete a schema. The 'SchemaService.deleteSchema' method explicitly implements this functionality by handling the HTTP DELETE request.",
    "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship - that the code implements a DELETE endpoint for schemas as specified in the documentation. While it omits details about parameters and response, the high-level mapping is accurate.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.getSchema",
    "predicted_relationship": "The 'getSchema' documentation entry describes a GET /schemas/{full_name} endpoint to retrieve a schema. The 'SchemaService.getSchema' method explicitly implements this endpoint by fetching and returning schema details as JSON.",
    "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture that the code implements a GET endpoint at /schemas/{full_name} that retrieves and returns schema data as JSON. The predicted description aligns with the core functionality described in the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.listSchemas",
    "predicted_relationship": "The documentation provides the GET /schemas endpoint for listing schemas. 'SchemaService.listSchemas' directly implements this functionality by returning a list of schemas in JSON format.",
    "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted text captures the core relationship - that the code implements the GET /schemas endpoint for listing schemas with JSON response. While it omits the specific parameters, this is a minor detail that doesn't change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.updateSchema",
    "predicted_relationship": "The documentation entry for 'updateSchema' specifies a PATCH /schemas/{full_name} endpoint to update schema data. 'SchemaService.updateSchema' explicitly implements this endpoint by accepting update requests and returning the updated schema in JSON.",
    "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture that this is a PATCH endpoint at '/schemas/{full_name}' for updating schemas, with the same core functionality of handling schema updates through the API",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.updateCatalog",
    "predicted_relationship": "The documentation specifies a function 'CatalogInfo updateCatalog(name, UpdateCatalog)' that updates a catalog and returns a CatalogInfo. The method 'CatalogRepository.updateCatalog(String name, UpdateCatalog updateCatalog)' exactly matches this signature and encapsulates the business logic for updating a catalog. This direct correspondence makes it an explicit implementation of the documented functionality.",
    "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented API endpoint with matching signature and functionality. While it provides less detail about the validation and database operations, it captures the core relationship between the documentation and implementation.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogService.updateCatalog",
    "predicted_relationship": "The CatalogService.updateCatalog method is annotated as a REST endpoint (@Patch) and serves to expose the updateCatalog functionality over HTTP. It accepts the catalog name and an UpdateCatalog object and returns an HttpResponse containing the updated CatalogInfo. This endpoint delegates to the repository method, thereby fulfilling the external API contract described in the documentation.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the key relationship that this is a PATCH endpoint implementing the documented API contract, accepting catalog name and UpdateCatalog parameters, and returning JSON containing updated catalog info.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.deleteSchema",
    "predicted_relationship": "The documentation explicitly describes a deleteSchema endpoint that accepts 'full_name' and 'force' parameters. The 'SchemaService.deleteSchema' method, with its @Delete annotation and matching signature, directly implements this functionality.",
    "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the key relationship that the code implements a DELETE endpoint with fullName and force parameters matching the documentation, even though it doesn't mention specific details like the 200 OK response.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.deleteSchema",
    "predicted_relationship": "While not directly invoked by the HTTP endpoint, the 'SchemaService.deleteSchema' method delegates the deletion logic to 'SchemaRepository.deleteSchema'. This repository method is an implicit dependency that carries out the actual deletion process as described in the documentation.",
    "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description claims the deletion is delegated to SchemaRepository.deleteSchema, but the code shows direct implementation within the method itself. However, it correctly identifies the core deletion functionality.",
      "error_type": "incorrect_architecture"
    }
  },
  {
    "document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.getFunction",
    "predicted_relationship": "The documentation defines a GET endpoint 'getFunction(name)' that returns a FunctionInfo. The FunctionService.getFunction method is directly mapped to this operation via its @Get annotation, accepting a fully-qualified function name and returning JSON. This makes it an explicit trace of the documented functionality.",
    "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture that this is a GET endpoint that accepts a function name parameter and returns function details as JSON. The predicted description correctly identifies the key components and mapping between the code and documentation.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.getFunction",
    "predicted_relationship": "This repository method is called by FunctionService.getFunction to fetch the actual FunctionInfo from persistence. Although not directly mentioned in the documentation snippet, it underpins the implementation of the getFunction functionality described.",
    "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this is a repository method implementing function retrieval functionality. While it doesn't detail the specific implementation steps, it correctly identifies the method's key purpose and role.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.listTables",
    "predicted_relationship": "The documentation specifies a listTables endpoint that returns a ListTablesResponse based on provided parameters (catalog_name, schema_name, max_results, page_token). TableService.listTables is a REST endpoint method that directly handles HTTP GET requests for listing tables. Its parameters match the documentation when mapped from the HTTP request, and it returns the JSON result corresponding to the documented response.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the core API functionality but fails to mention the additional optional parameters (omit_properties and omit_columns) that are present in the code but not in the documentation. It also doesn't mention the TABLE_REPOSITORY delegation.",
      "error_type": "incomplete_coverage"
    }
  },
  {
    "document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.listTables",
    "predicted_relationship": "This repository method carries out the core logic for the listTables operation by querying and assembling table information into a ListTablesResponse. Its signature and return type align with the documented API, and while it includes additional flags (omit_properties and omit_columns), these are managed by higher layers and defaulted appropriately.",
    "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the main functionality of the listTables method - querying and assembling table information into a ListTablesResponse, while handling pagination. The additional flags mentioned don't contradict the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.getTable",
    "predicted_relationship": "The documentation snippet clearly describes a getTable operation that accepts a 'full_name' parameter and returns a TableInfo. The 'TableService.getTable' method directly implements this REST API endpoint by receiving 'full_name' via an HTTP GET request, calling the repository layer, and returning a JSON response. The method signature and behavior explicitly match the documented API.",
    "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - both describe a getTable endpoint that accepts a full_name parameter and returns TableInfo as JSON, matching the API specification.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.getTable",
    "predicted_relationship": "Although not explicitly referenced in the documentation snippet, 'TableRepository.getTable' is called by 'TableService.getTable' to perform the actual retrieval of the table information. It encapsulates the business logic required to parse the full table name and fetch the TableInfo object from persistence. This makes it an essential, implicit component in the overall getTable operation.",
    "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies that this is a table retrieval operation, but incorrectly states it is 'called by TableService.getTable' which is not evident in the code or documentation. The core functionality is understood but introduces an unsubstantiated relationship.",
      "error_type": "unverified_assumption"
    }
  },
  {
    "document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableCli.getTable",
    "predicted_relationship": "The 'TableCli.getTable' method is part of the client-side interface that allows users to invoke the getTable operation through a CLI. It constructs a request using the full table name and calls the 'getTable' function of the TablesApi, thereby demonstrating a usage example of the documented functionality, though it is not the primary REST endpoint.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented getTable endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions identify that the code is a CLI wrapper/interface for the documented getTable endpoint. The predicted description provides more detail but captures the same core relationship.",
      "error_type": null
    }
  },
  {
    "document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeService.updateVolume",
    "predicted_relationship": "The documentation specifies an updateVolume operation that accepts a fully qualified volume name and an UpdateVolumeRequestContent, and returns a VolumeInfo. The VolumeService.updateVolume method is the REST API endpoint annotated with @Patch that directly implements this behavior by exposing these parameters and calling the underlying repository method.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this is an update volume endpoint taking a name and UpdateVolumeRequestContent parameters and returning VolumeInfo. While it mentions 'VolumeService' instead of the specific annotation '@Patch', this is a minor detail that doesn't affect the fundamental relationship being described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.updateVolume",
    "predicted_relationship": "Although not directly mentioned in the documentation snippet, VolumeRepository.updateVolume is the underlying method invoked by VolumeService.updateVolume to perform the actual update of the volume in the persistence layer. It handles the business logic such as validating the new name or comment and updating the volume record.",
    "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures that this is about volume updates, but incorrectly states it's a VolumeRepository method called by VolumeService when the code shows it's a standalone method. However, it correctly identifies the core functionality of updating volume records.",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.deleteFunction",
    "predicted_relationship": "The documentation snippet explicitly describes a 'deleteFunction' operation that accepts a fully-qualified function name. The 'FunctionService.deleteFunction' method directly implements this functionality via its @Delete annotation and a 'name' parameter that corresponds to that description.",
    "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - a DELETE endpoint that takes a function name parameter and deletes the corresponding function. While it omits the force parameter and HTTP response details, these are minor implementation details that don't affect the main relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.deleteFunction",
    "predicted_relationship": "While not directly exposed via the API, 'FunctionRepository.deleteFunction' is invoked by 'FunctionService.deleteFunction' to perform the actual deletion of the function from persistence. This connection makes it a necessary internal part of the delete functionality chain described in the documentation.",
    "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description identifies a deletion flow but incorrectly describes it as FunctionRepository->FunctionService when the code shows a direct implementation of the API endpoint with Session/Transaction handling",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.createTable",
    "predicted_relationship": "The documentation explicitly lists a 'createTable' API endpoint with a POST request to /tables. The 'TableService.createTable' method is annotated with @Post and directly implements the creation of a table, thereby fulfilling the documented functionality.",
    "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented POST /tables API endpoint for table creation, including the core aspects of the endpoint's purpose and HTTP method.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.deleteTable",
    "predicted_relationship": "The documentation explicitly mentions a 'deleteTable' API endpoint with a DELETE request to /tables/{full_name}. The 'TableService.deleteTable' method, annotated with @Delete, implements this endpoint by handling the deletion of a table.",
    "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship between the code and documentation - both describe a DELETE endpoint for tables that takes a full_name parameter. While the predicted omits the HTTP 200 response detail, this is a minor omission that doesn't affect the main relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.getTable",
    "predicted_relationship": "The documentation explicitly defines a 'getTable' API endpoint with a GET request to /tables/{full_name}. The 'TableService.getTable' method, annotated with @Get, implements this endpoint by retrieving table information.",
    "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a GET endpoint for /tables/{full_name} that retrieves table information, which aligns with the ground truth's description of implementing the documented endpoint to get TableInfo and return JSON.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.listTables",
    "predicted_relationship": "The documentation explicitly lists a 'listTables' API endpoint with a GET request to /tables. The 'TableService.listTables' method implements this endpoint by returning a list of tables.",
    "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the listTables GET endpoint, but it narrows the scope to just this one method while the ground truth indicates this is part of a broader API documentation showing multiple related table operations",
      "error_type": "incomplete_scope"
    }
  },
  {
    "document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.getVolume",
    "predicted_relationship": "This method is annotated with @Get and acts as the REST endpoint for retrieving a volume. It directly corresponds to the 'getVolume' operation described in the documentation by returning a VolumeInfo object in JSON format.",
    "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship - that this is a GET endpoint that retrieves volume information and returns it as JSON. While it doesn't mention the optional parameter, this is a minor detail omission that doesn't change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.getVolume",
    "predicted_relationship": "This method performs the core business logic of fetching a volume from the persistence layer using the fully qualified volume name. It is invoked by VolumeService.getVolume to obtain the VolumeInfo object, thus directly implementing the documented functionality.",
    "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the core functionality of fetching volume information but misses the important input validation aspect and three-level name splitting that is central to the implementation",
      "error_type": "incomplete_coverage"
    }
  },
  {
    "document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeInfoDAO",
    "predicted_relationship": "Although not directly mentioned in the documentation, VolumeInfoDAO is used within VolumeRepository.getVolume to convert data from the database into a VolumeInfo object. This conversion aligns with the documented return type [VolumeInfo].",
    "ground_truth_relationship": "The VolumeInfoDAO class provides the data persistence layer and model conversion methods (toVolumeInfo/from) needed to support the documented getVolume API endpoint by mapping between the database representation and the VolumeInfo response type.",
    "traceability_granularity": "Class",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that VolumeInfoDAO handles the conversion between database and VolumeInfo objects, which aligns with the ground truth's description of it providing the data persistence layer and model conversion functionality for the getVolume endpoint.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.createVolume",
    "predicted_relationship": "The documentation snippet lists a POST endpoint for createVolume. The VolumeService.createVolume method is annotated with @Post and directly handles the creation of a Volume, matching this endpoint.",
    "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship that the code implements a POST endpoint for volume creation, which aligns with the documented API endpoint. The minor differences in details (like mentioning VOLUME_REPOSITORY vs VolumeService) don't change the fundamental relationship.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.deleteVolume",
    "predicted_relationship": "The DELETE endpoint for deleteVolume in the documentation corresponds to the VolumeService.deleteVolume method, which is annotated with @Delete and implements the delete functionality.",
    "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a DELETE endpoint implementation that corresponds to the documented API, even though it omits specific details about parameters and response codes that are mentioned in the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.getVolume",
    "predicted_relationship": "The GET endpoint for getVolume detailed in the documentation is directly implemented by VolumeService.getVolume, which retrieves a Volume based on its name.",
    "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that the code implements a GET endpoint for retrieving volume information by name. While it uses 'VolumeService.getVolume' instead of 'VOLUME_REPOSITORY.getVolume', this is a minor implementation detail that doesn't change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.listVolumes",
    "predicted_relationship": "The documentation\u2019s GET request for listing volumes is fulfilled by the VolumeService.listVolumes method. This method handles queries to list all Volumes as described.",
    "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a GET endpoint for listing volumes, which matches the core functionality described in the ground truth. While it omits specific details about parameters, the fundamental relationship is accurately captured.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.updateVolume",
    "predicted_relationship": "The PATCH endpoint for updateVolume in the documentation is implemented by the VolumeService.updateVolume method, which processes updates to an existing Volume.",
    "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship - that this implements the PATCH endpoint for updating volumes. While it doesn't mention specific details like the JSON response, it captures the main functionality.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaService.updateSchema",
    "predicted_relationship": "The documentation snippet specifies the updateSchema operation with signature 'SchemaInfo updateSchema(full_name, UpdateSchema)'. This corresponds directly to the REST endpoint defined in SchemaService.updateSchema, which accepts a 'full_name' parameter (annotated with @Param) and an UpdateSchema object, and returns an HttpResponse containing SchemaInfo. Its interface thus explicitly implements the documented API.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship: an updateSchema endpoint that accepts fullName and UpdateSchema parameters and returns a response. Both descriptions accurately reflect the API contract and implementation.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.updateSchema",
    "predicted_relationship": "SchemaService.updateSchema, after receiving the API request, delegates the actual update logic to SchemaRepository.updateSchema. While the repository method is not directly mentioned in the documentation snippet, it is an essential implementation step in processing the updateSchema operation.",
    "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description incorrectly states that the method delegates to SchemaRepository.updateSchema, when the code shows direct implementation without such delegation. However, it correctly recognizes this is an update schema operation.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.createFunction",
    "predicted_relationship": "The documentation explicitly calls out the 'createFunction' endpoint (POST /functions). This is implemented by the FunctionService.createFunction method which directly handles the creation of functions as described.",
    "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the key relationship between the POST /functions endpoint documentation and the code implementation, capturing the core functionality of creating functions via HTTP POST.",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.deleteFunction",
    "predicted_relationship": "The documentation explicitly mentions the 'deleteFunction' endpoint (DELETE /functions/{name}). This behavior is implemented by the FunctionService.deleteFunction method.",
    "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented DELETE /functions/{name} endpoint through the function deletion functionality, even though it omits implementation details about parameters and response codes",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.getFunction",
    "predicted_relationship": "The documentation explicitly indicates a 'getFunction' endpoint (GET /functions/{name}). This functionality is provided by the FunctionService.getFunction implementation.",
    "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented GET /functions/{name} endpoint, even though it doesn't mention specific implementation details like parameter handling and JSON response that are in the ground truth.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.listFunctions",
    "predicted_relationship": "The documentation explicitly defines a 'listFunctions' endpoint (GET /functions). This is implemented by FunctionService.listFunctions which returns a list of functions as described.",
    "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a GET /functions endpoint implementation that returns a list of functions, which aligns with the ground truth's core meaning. The omission of specific parameters does not change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.listCatalogs",
    "predicted_relationship": "This method directly implements the 'listCatalogs' operation described in the documentation snippet. It accepts the 'max_results' and 'page_token' parameters as Optional values and returns a JSON response that wraps the ListCatalogsResponse, matching the documented API signature exactly.",
    "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship between the code and documentation - handling optional parameters for pagination/results and returning JSON catalog data via repository call",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.listCatalogs",
    "predicted_relationship": "Although not directly mentioned in the documentation snippet, this repository method is invoked by CatalogService.listCatalogs to perform the underlying data access logic. It is a key part of the execution chain that realizes the listCatalogs functionality, thereby forming an implicit link.",
    "ground_truth_relationship": "The code implements the documented listCatalogs endpoint by using database transactions and pagination logic to retrieve catalog records from storage, transform them into CatalogInfo objects with attached properties, and return them in a ListCatalogsResponse with the next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description identifies that this is part of the listCatalogs functionality but characterizes it as being invoked by a CatalogService (which isn't shown), while missing key aspects about how it actually implements the documented pagination and catalog retrieval",
      "error_type": "incomplete_with_speculation"
    }
  },
  {
    "document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.listFunctions",
    "predicted_relationship": "This method is the REST endpoint that directly implements the listFunctions API as specified in the documentation. It accepts the parameters catalog_name, schema_name, max_results, and page_token and returns a JSON response representing a ListFunctionsResponse. The HTTP request headers and the GET annotation in this method directly correlate with the documented API details.",
    "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this is a GET endpoint implementing the listFunctions API with the same parameters as documented, returning JSON response. Both descriptions cover the essential functionality and parameter mapping.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.listFunctions",
    "predicted_relationship": "This repository method is indirectly involved in the listFunctions functionality by supporting the service layer. It gathers and constructs the ListFunctionsResponse by fetching function data from the persistence layer, as invoked by FunctionService.listFunctions.",
    "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality - it identifies that this is a repository method implementing list functionality by fetching and transforming function data from the persistence layer. While it doesn't mention all implementation details like pagination and transaction handling, it covers the main relationship and purpose correctly.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.getCatalog",
    "predicted_relationship": "The documentation snippet clearly defines the GET operation 'getCatalog' (with signature 'CatalogInfo getCatalog(name)'). This exactly matches the REST endpoint implemented in 'CatalogService.getCatalog', which is annotated with @Get and returns the catalog data as JSON. Thus, this method directly implements the documented API.",
    "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the main relationship - that the code implements a GET endpoint that matches the documentation by accepting a name parameter and returning catalog data as JSON.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogInfoDAO",
    "predicted_relationship": "Although the documentation does not explicitly mention it, the return type 'CatalogInfo' (as referenced in the documentation) is constructed in the application by converting persistent data via the CatalogInfoDAO (using its toCatalogInfo() method). This DAO underpins the data model that 'CatalogService.getCatalog' ultimately returns.",
    "ground_truth_relationship": "The CatalogInfoDAO class provides the data persistence layer and mapping functionality for the CatalogInfo objects that are returned by the documented getCatalog endpoint through its toCatalogInfo() conversion method.",
    "traceability_granularity": "Class",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture that CatalogInfoDAO serves as the persistence/data layer and handles conversion to/from CatalogInfo objects via the toCatalogInfo() method, which supports the getCatalog endpoint.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.deleteTable",
    "predicted_relationship": "The documentation snippet describes a deleteTable function that uses a 'full_name' parameter, is reached via an HTTP DELETE method and does not require authorization. The TableService.deleteTable method is annotated with @Delete (using the '/{full_name}' path) and explicitly receives a fullName parameter to delete a table, matching the documented behavior.",
    "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the key aspects of the relationship: it's a DELETE endpoint that takes a full_name parameter to delete a table, matching the documented API specification.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.deleteTable",
    "predicted_relationship": "Although not directly exposed via the HTTP endpoint, TableRepository.deleteTable is called by TableService.deleteTable to perform the actual deletion of the table data and related properties. Its functionality is an integral part of the overall table deletion process documented in the API.",
    "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this code implements the documented table deletion functionality, even though it provides additional implementation details about the internal process. The core relationship between code and documentation is accurately captured.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.listSchemas",
    "predicted_relationship": "Although the documentation snippet does not explicitly name any code artifact, the documented 'listSchemas' endpoint (which returns a ListSchemasResponse) is implemented by the SchemaService.listSchemas method. This service method constructs the HTTP response for the list schemas operation as described in the documentation.",
    "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the listSchemas functionality but incorrectly attributes it to SchemaService.listSchemas instead of SCHEMA_REPOSITORY.listSchemas as shown in the code",
      "error_type": "incorrect_component_reference"
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.listSchemas",
    "predicted_relationship": "SchemaRepository.listSchemas is the repository method that is called by SchemaService.listSchemas to access persisted schema data and build the ListSchemasResponse. Its functionality fulfills the data retrieval requirements implicit in the documented operation.",
    "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the basic repository-service relationship and data retrieval purpose, but omits crucial functionality around pagination handling and schema conversion that significantly impacts understanding of the implementation",
      "error_type": "major_omission"
    }
  },
  {
    "document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
    "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
    "predicted_relationship": "The documentation snippet explicitly describes the 'generateTemporaryVolumeCredentials' API endpoint with its parameter of type GenerateTemporaryVolumeCredential and a return type of GenerateTemporaryVolumeCredentialResponse. The service method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials' directly implements this functionality as seen in its method signature and behavior.",
    "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description identifies the basic API structure and types correctly, but misses the core functional behavior regarding S3 credential generation vs local storage handling, which is a significant aspect of the implementation",
      "error_type": "major_omission"
    }
  },
  {
    "document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "TableService.createTable",
    "predicted_relationship": "The documentation snippet describes the 'createTable' API operation with an HTTP POST request, JSON content, and a signature of 'TableInfo createTable(CreateTable)'. 'TableService.createTable' is annotated with @Post and directly accepts a CreateTable object, returning an HttpResponse with the TableInfo, which exactly matches the documented functionality.",
    "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - a POST endpoint that accepts CreateTable input and returns TableInfo as JSON, matching the documented API contract",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "TableRepository.createTable",
    "predicted_relationship": "Although not directly exposed as an HTTP endpoint, 'TableRepository.createTable' is called by 'TableService.createTable' to perform the actual creation of a table instance. Its signature 'TableInfo createTable(CreateTable)' exactly mirrors the documented API contract, making it an essential underlying component of the 'createTable' operation.",
    "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "While the predicted description correctly identifies that this is the implementation of the createTable API, it incorrectly suggests this is an internal 'TableRepository' component called by 'TableService' which is not evident in the code or documentation. It misses describing the key validation and persistence behaviors.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.deleteCatalog",
    "predicted_relationship": "The provided documentation snippet describes a 'deleteCatalog' operation that takes a 'name' and an optional 'force' parameter and deletes a catalog. The CatalogService.deleteCatalog method (artifact id 12) is annotated with @Delete and accepts these two parameters, directly mapping to the documented API. It is the endpoint that processes the HTTP DELETE request as specified in the documentation.",
    "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - a DELETE endpoint that takes name and optional force parameters to delete a catalog. Both descriptions align on the key functionality and parameters.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.deleteCatalog",
    "predicted_relationship": "While the documentation does not mention repository details, the deleteCatalog service method delegates the actual deletion logic to CatalogRepository.deleteCatalog (artifact id 7). This method is responsible for performing the persistence layer operations required to delete a catalog, such as checking if the catalog contains schemas and enforcing the 'force' flag.",
    "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly mentions catalog deletion but incorrectly states it delegates to CatalogRepository.deleteCatalog when the code shows direct implementation with session operations, schema checks, and property deletion.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.createCatalog",
    "predicted_relationship": "The documentation specifies a POST endpoint for creating a catalog ('createCatalog'). The 'CatalogService.createCatalog' method is explicitly annotated with @Post and handles the creation of a catalog, directly implementing this functionality.",
    "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship between the code and documentation - a POST endpoint for catalog creation that is implemented via a @Post-annotated method",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.deleteCatalog",
    "predicted_relationship": "The documentation lists a DELETE endpoint for deleting a catalog ('deleteCatalog'). The 'CatalogService.deleteCatalog' method, annotated with @Delete, explicitly implements this endpoint by deleting a catalog by its name.",
    "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality - a DELETE endpoint for deleting a catalog by name. While it omits mentioning the force parameter and repository delegation, these are minor implementation details that don't change the fundamental relationship.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.getCatalog",
    "predicted_relationship": "The documentation describes a GET endpoint for retrieving a catalog ('getCatalog'). The 'CatalogService.getCatalog' method is designed to handle GET requests to retrieve catalog data, matching the documented functionality.",
    "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements a GET endpoint for retrieving catalog data, which aligns with the ground truth's description of implementing the GET /catalogs/{name} endpoint.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.listCatalogs",
    "predicted_relationship": "The documentation details a GET endpoint for listing catalogs ('listCatalogs'). The 'CatalogService.listCatalogs' method is explicitly responsible for listing all catalogs and aligns with this endpoint.",
    "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship - that this is a GET endpoint for listing catalogs. While it omits the pagination details mentioned in the ground truth, it accurately captures the main purpose and functionality.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.updateCatalog",
    "predicted_relationship": "According to the documentation, the PATCH endpoint 'updateCatalog' is used to update a catalog. The 'CatalogService.updateCatalog' method, with its @Patch annotation, directly implements this functionality.",
    "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented PATCH endpoint for updating catalogs. Though it omits implementation details about parameters and return type, it captures the core relationship accurately.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
    "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
    "predicted_relationship": "The documentation snippet explicitly lists the POST endpoint for 'generateTemporaryVolumeCredentials', which directly maps to the service method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials'. The hyperlink text and HTTP method in the table strongly indicate that this artifact is responsible for generating temporary volume credentials.",
    "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a POST endpoint for generating temporary volume credentials, matching the code's implementation. While it omits implementation details about S3 vs local filesystem handling, it captures the core relationship between the API documentation and code.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "FunctionService.createFunction",
    "predicted_relationship": "The documentation specifies a createFunction API complete with HTTP request headers and a JSON response. This closely matches the public endpoint implemented in FunctionService.createFunction which is annotated with @Post and accepts a CreateFunctionRequest parameter, directly exposing the API to clients.",
    "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that this is a POST endpoint implementing the documented createFunction API that accepts a CreateFunctionRequest and returns JSON. While it uses slightly different wording, it conveys the same essential functionality as the ground truth.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.createFunction",
    "predicted_relationship": "The documented signature 'FunctionInfo createFunction(CreateFunctionRequest)' is exactly implemented in FunctionRepository.createFunction. This method performs validation, persists data, and returns a FunctionInfo object, fulfilling the core functionality described in the documentation.",
    "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of validating input, creating and persisting a FunctionInfo object, which aligns with the ground truth's description of the implementation.",
      "error_type": null
    }
  },
  {
    "document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.listVolumes",
    "predicted_relationship": "The documentation snippet describes a listVolumes API endpoint with HTTP headers and parameters. The VolumeService.listVolumes method is a REST endpoint (annotated with @Get) that directly implements this functionality by mapping the HTTP request parameters to a call that returns a JSON response, matching the documented signature.",
    "ground_truth_relationship": "The code implements the documented listVolumes API endpoint as a GET HTTP method that accepts the specified catalog_name, schema_name, max_results, and page_token parameters, though it includes an additional undocumented include_browse parameter, and returns a JSON response from the volume repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this is a GET endpoint implementing the documented listVolumes API with the specified parameters and JSON response. While it doesn't mention the additional include_browse parameter, this is a minor detail that doesn't change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.listVolumes",
    "predicted_relationship": "VolumeService.listVolumes delegates the business logic of fetching volume data to VolumeRepository.listVolumes. This repository method builds and returns the ListVolumesResponseContent (the documented return type), making it an implicit part of the overall functionality described in the documentation.",
    "ground_truth_relationship": "The code implements the documented listVolumes API by querying volumes from a database using Hibernate, enforcing the documented parameters (catalog_name, schema_name, max_results, page_token) and returning a ListVolumesResponseContent object containing the filtered volume list.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description gets the basic idea of listVolumes functionality but incorrectly states it delegates to VolumeRepository.listVolumes when the code shows direct Hibernate database querying in the same class",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "# **listVolumes**\n> ListVolumesResponseContent listVolumes(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList Volumes\n\n    Gets an array of available volumes under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| The identifier of the catalog | [default to null] |\n| **schema\\_name** | **String**| The identifier of the schema | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of volumes to return (page length).  If not set, the page length is set to a server configured value. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  Note: this parameter controls only the maximum number of volumes to return. The actual number of volumes returned in a page may be smaller than this value, including 0, even if there are more pages.   | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token returned by a previous request. It must be included in the request to retrieve the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListVolumesResponseContent**](../Models/ListVolumesResponseContent.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeCli.listVolumes",
    "predicted_relationship": "Although not part of the server-side implementation, VolumeCli.listVolumes is a client\u2010side usage example that calls the volumesApi.listVolumes method. This illustrates how the documented listVolumes API is consumed and demonstrates its usage in a CLI context.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented listVolumes endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions convey the same core relationship - that this is a CLI wrapper/usage example for the listVolumes API endpoint. The predicted description provides additional context but maintains the same fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.createTable",
    "predicted_relationship": "The documentation for the 'createTable' endpoint (POST /tables) is directly implemented by the 'TableService.createTable' method. This method is annotated with @Post and its name explicitly indicates its use for creating tables, matching the documentation.",
    "ground_truth_relationship": "The createTable code method implements the POST /tables API endpoint documented in TablesApi by accepting a CreateTable request object, delegating to TABLE_REPOSITORY for table creation, and returning the response as JSON.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented POST /tables endpoint for table creation, aligning with the ground truth's explanation that it handles CreateTable requests and returns JSON responses",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.deleteTable",
    "predicted_relationship": "The 'deleteTable' endpoint as described in the documentation (DELETE /tables/{full_name}) is implemented by the 'TableService.deleteTable' method. The method\u2019s annotation @Delete along with the URL parameter '{full_name}' confirms the match.",
    "ground_truth_relationship": "The code implements the documented DELETE /tables/{full_name} endpoint by creating a method annotated with @Delete that takes a full_name parameter, deletes the corresponding table through the repository, and returns an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - it identifies the DELETE endpoint with the correct path and parameter mapping.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.getTable",
    "predicted_relationship": "For the GET /tables/{full_name} operation documented in the TablesApi, the 'TableService.getTable' method provides the implementation. Its use of the @Get annotation and method name clearly align with the documentation.",
    "ground_truth_relationship": "The code implements the documented GET /tables/{full_name} endpoint by creating a method that retrieves a TableInfo object based on the full_name path parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is an implementation of the GET /tables/{full_name} endpoint from the TablesApi documentation. While it's less detailed than the ground truth, it captures the core relationship accurately.",
      "error_type": ""
    }
  },
  {
    "document_text": "# TablesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createTable**](TablesApi.md#createTable) | **POST** /tables | Create a table. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteTable**](TablesApi.md#deleteTable) | **DELETE** /tables/{full_name} | Delete a table |\n| [**getTable**](TablesApi.md#getTable) | **GET** /tables/{full_name} | Get a table |\n| [**listTables**](TablesApi.md#listTables) | **GET** /tables | List tables |",
    "artifact_title": "TableService.listTables",
    "predicted_relationship": "The listTables endpoint in the documentation (GET /tables) is implemented by the 'TableService.listTables' method. Its annotation @Get and its functionality for listing tables confirm this match.",
    "ground_truth_relationship": "The document is an API endpoint summary table that lists the methods available and their description under the TablesApi. Each code is related to one of the methods.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies that the code implements a GET /tables endpoint for listing tables, but it incorrectly narrows the relationship to just the 'listTables' method when the ground truth indicates this is part of a broader API endpoint summary showing multiple available methods.",
      "error_type": "incomplete_scope"
    }
  },
  {
    "document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.updateSchema",
    "predicted_relationship": "The documentation defines the operation 'updateSchema' with signature 'SchemaInfo updateSchema(full_name, UpdateSchema)'. This matches exactly with the method in SchemaRepository.updateSchema, which accepts a String (fullName) and an UpdateSchema object and returns a SchemaInfo. This direct correspondence makes it an explicit trace.",
    "ground_truth_relationship": "The code implements the documented schema update endpoint by validating the new schema name, managing database transactions to update the schema's name, comment, and properties, and handling errors according to the API specification's parameters and return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the method signature match but misses key functionality aspects like schema validation, transaction management, and property updates described in the ground truth.",
      "error_type": "incomplete_core_functionality"
    }
  },
  {
    "document_text": "<a name=\"updateSchema\"></a>\n# **updateSchema**\n> SchemaInfo updateSchema(full\\_name, UpdateSchema)\n\nUpdate a schema\n\n    Updates the specified schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **UpdateSchema** | [**UpdateSchema**](../Models/UpdateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaService.updateSchema",
    "predicted_relationship": "Although the documentation snippet shows a signature matching the repository method, the SchemaService.updateSchema method acts as the REST endpoint and delegates the update operation to SchemaRepository.updateSchema. This makes it an implicit part of the update operation chain.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that directly matches the documented API endpoint, accepting a fullName path parameter and UpdateSchema body parameter, and returning a JSON response through HttpResponse.ofJson from the schema repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description inaccurately mentions SchemaService while the code shows direct repository interaction, but correctly captures the core update operation and parameter handling",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "TableService.createTable",
    "predicted_relationship": "The documentation snippet defines an API endpoint with the signature 'TableInfo createTable(CreateTable)', detailing HTTP headers and JSON content. The method 'TableService.createTable' (located in the server/service layer) is annotated with @Post and directly accepts a CreateTable object and returns a TableInfo object wrapped in an HTTP response. This directly corresponds to the documented API, making it an explicit implementation of the createTable functionality.",
    "ground_truth_relationship": "The code implements the documented POST endpoint by accepting a CreateTable request object, validating it's not null, delegating to the TABLE_REPOSITORY to create the table, and returning a TableInfo response wrapped in an HTTP JSON response, matching the documented input/output types and content types.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - it correctly identifies that this is a POST endpoint that takes CreateTable input and returns TableInfo output wrapped in HTTP response, matching the documented API contract.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createTable\"></a>\n# **createTable**\n> TableInfo createTable(CreateTable)\n\nCreate a table. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new table instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateTable** | [**CreateTable**](../Models/CreateTable.md)|  | [optional] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "TableRepository.createTable",
    "predicted_relationship": "The 'TableRepository.createTable' method is used internally by 'TableService.createTable' to execute the business logic of creating a new table instance. Although it is not directly exposed as a HTTP endpoint, its functionality underpins the API\u2019s behavior described in the documentation.",
    "ground_truth_relationship": "The code implements the documented createTable API by validating the table name, creating a new TableInfo object with the specified properties, checking for existing tables, rejecting MANAGED table types, requiring storage locations for external tables, and persisting the table data in a database transaction while handling errors as specified in the API documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies that this implements table creation functionality, but incorrectly states it is used internally by TableService and is not directly exposed as an HTTP endpoint, when the documentation clearly shows it is a public API endpoint",
      "error_type": "incorrect_api_exposure_assumption"
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.createSchema",
    "predicted_relationship": "The documentation snippet lists a 'createSchema' endpoint with HTTP POST at /schemas. This directly corresponds to the SchemaService.createSchema method, which is annotated with @Post and implements the creation of a schema.",
    "ground_truth_relationship": "The code implements the documented POST /schemas API endpoint by defining a createSchema method that accepts a CreateSchema object and returns a JSON HTTP response containing the newly created schema from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a POST /schemas endpoint implementation for creating schemas, which aligns with the ground truth's explanation of the code-documentation relationship",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.deleteSchema",
    "predicted_relationship": "The documentation snippet defines a DELETE endpoint at /schemas/{full_name} for deleting a schema. This maps explicitly to the SchemaService.deleteSchema method, which is annotated with @Delete and deletes a schema based on its full name.",
    "ground_truth_relationship": "The code implements the documented DELETE /schemas/{full_name} endpoint by providing a method that accepts a schema's full name and an optional force parameter, deletes the specified schema from the repository, and returns an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship between the code and documentation - both describe a DELETE endpoint for schemas at /schemas/{full_name}. While the ground truth includes additional details about parameters and response codes, the predicted description gets the main relationship right.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.getSchema",
    "predicted_relationship": "The documentation text specifies a GET endpoint at /schemas/{full_name} to retrieve a schema. The SchemaService.getSchema method, marked with @Get, directly implements this functionality, providing the schema based on its full name.",
    "ground_truth_relationship": "The code implements the GET /schemas/{full_name} endpoint documented in the API table by defining a method that retrieves a schema using the full_name path parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - both describe a GET endpoint at /schemas/{full_name} that retrieves a schema based on the full name parameter.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.listSchemas",
    "predicted_relationship": "The documentation outlines a GET endpoint at /schemas for listing schemas. The SchemaService.listSchemas method, decorated with @Get, implements the listing functionality by calling the appropriate repository method to fetch schemas.",
    "ground_truth_relationship": "The listSchemas method implements the '/schemas' GET endpoint documented in the API table by accepting catalog_name, max_results, and page_token parameters and returning schema listings as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that this is a GET endpoint for listing schemas that maps to the documented /schemas endpoint. While it omits some parameter details, it accurately describes the main functionality.",
      "error_type": ""
    }
  },
  {
    "document_text": "# SchemasApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createSchema**](SchemasApi.md#createSchema) | **POST** /schemas | Create a schema |\n| [**deleteSchema**](SchemasApi.md#deleteSchema) | **DELETE** /schemas/{full_name} | Delete a schema |\n| [**getSchema**](SchemasApi.md#getSchema) | **GET** /schemas/{full_name} | Get a schema |\n| [**listSchemas**](SchemasApi.md#listSchemas) | **GET** /schemas | List schemas |\n| [**updateSchema**](SchemasApi.md#updateSchema) | **PATCH** /schemas/{full_name} | Update a schema |",
    "artifact_title": "SchemaService.updateSchema",
    "predicted_relationship": "The documentation lists a PATCH endpoint at /schemas/{full_name} for updating a schema. This corresponds explicitly to the SchemaService.updateSchema method, which is annotated with @Patch and thereby updates the schema based on input parameters.",
    "ground_truth_relationship": "The code implements the updateSchema API endpoint documented in the table by creating a PATCH handler at '/schemas/{full_name}' that accepts a schema name and update payload, passing them to the schema repository for processing.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture that the code implements a PATCH endpoint at /schemas/{full_name} for updating schemas, matching the documented API. The predicted description correctly identifies the key relationship between the code and documentation.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.listTables",
    "predicted_relationship": "The documentation snippet describes an API function 'listTables' that takes parameters (catalog_name, schema_name, max_results, page_token) and returns a ListTablesResponse. The 'TableService.listTables' method is annotated as an HTTP GET endpoint that accepts these parameters and immediately returns a JSON response. This directly implements the functionality defined in the documentation.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting the same catalog_name, schema_name, max_results, and page_token parameters, while also including two additional optional parameters (omit_properties and omit_columns) that are not mentioned in the documentation, then delegates the actual table listing to TABLE_REPOSITORY and returns the result as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the core functionality of listing tables via GET endpoint, but misses the important detail that the implementation includes two additional parameters (omit_properties and omit_columns) and delegates to TABLE_REPOSITORY rather than directly implementing the functionality",
      "error_type": "significant_omission"
    }
  },
  {
    "document_text": "<a name=\"listTables\"></a>\n# **listTables**\n> ListTablesResponse listTables(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList tables\n\n    Gets the list of all available tables under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for tables of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of tables. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of tables to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque token to send for the next page of results (pagination). | [optional] [default to null] |\n\n### Return type\n\n[**ListTablesResponse**](../Models/ListTablesResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.listTables",
    "predicted_relationship": "Although not directly mentioned in the documentation snippet, 'TableRepository.listTables' provides the core business logic that retrieves the list of tables from the persistence layer. 'TableService.listTables' delegates the data retrieval task to this repository method, making it an integral, implicit part of the implementation of the documented API.",
    "ground_truth_relationship": "The code implements the documented listTables endpoint by querying a database session for table records matching the given catalog and schema names, handling pagination through maxResults and pageToken parameters, and returning a ListTablesResponse object containing the table list and next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description identifies that listTables handles data retrieval from persistence layer, but introduces confusion by talking about TableRepository and TableService which aren't present in the actual code. The core functionality of listing tables and data retrieval is correct, but the implementation details are misrepresented.",
      "error_type": "implementation_misrepresentation"
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.listSchemas",
    "predicted_relationship": "The documentation snippet describes a listSchemas endpoint with parameters catalog_name, max_results, and page_token that returns a ListSchemasResponse. The SchemaService.listSchemas method directly implements this HTTP endpoint, mapping these input parameters and returning the expected JSON response.",
    "ground_truth_relationship": "The code implements a GET endpoint that takes a catalog name and optional pagination parameters (max_results and page_token) to retrieve a list of schemas from SCHEMA_REPOSITORY, exactly matching the documented API endpoint's parameters and functionality.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - a GET endpoint that takes catalog_name and optional pagination parameters to list schemas, returning JSON response. It matches the ground truth's description of the functionality and parameter mapping.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.listSchemas",
    "predicted_relationship": "SchemaService.listSchemas delegates the task of fetching the schema data to SchemaRepository.listSchemas, which applies the business logic for retrieving schemas from the database. This makes it an integral (implicit) part of the listSchemas API operation.",
    "ground_truth_relationship": "The code implements the documented listSchemas API endpoint by querying a database session for schemas matching the given catalog ID, converting the results from DAOs to SchemaInfo objects, handling pagination through maxResults and pageToken parameters, and returning a ListSchemasResponse containing the schema list and next page token.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures that listSchemas involves data retrieval from a database, but mischaracterizes it as delegating to a SchemaRepository class (which isn't shown in the code). It misses key aspects like pagination handling and schema conversion that are central to the relationship.",
      "error_type": "incomplete_and_inaccurate_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"listSchemas\"></a>\n# **listSchemas**\n> ListSchemasResponse listSchemas(catalog\\_name, max\\_results, page\\_token)\n\nList schemas\n\n    Gets an array of schemas for a catalog. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Parent catalog for schemas of interest. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of schemas to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n\n### Return type\n\n[**ListSchemasResponse**](../Models/ListSchemasResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaCli.listSchemas",
    "predicted_relationship": "SchemaCli.listSchemas is a client\u2010side method that demonstrates the usage of the listSchemas functionality by calling the schemasApi.listSchemas method with similar parameters. It serves as a practical usage example that adheres to the documented API.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented listSchemas endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions correctly identify that this is a CLI wrapper/implementation for the listSchemas API endpoint. The predicted description adds extra detail but captures the same core relationship.",
      "error_type": null
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.createFunction",
    "predicted_relationship": "The documentation explicitly defines the 'createFunction' endpoint (POST /functions). The FunctionService.createFunction method is annotated with @Post and directly calls FUNCTION_REPOSITORY.createFunction, which implements the endpoint for creating a function.",
    "ground_truth_relationship": "The code implements the experimental POST /functions endpoint documented in the API table by defining a createFunction method that accepts a CreateFunctionRequest and returns an HTTP response containing the newly created function data from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - implementing a POST /functions endpoint for creating functions via the createFunction method that returns an HTTP response with the created function data",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.deleteFunction",
    "predicted_relationship": "The documentation explicitly defines the 'deleteFunction' endpoint (DELETE /functions/{name}). The FunctionService.deleteFunction method is annotated with @Delete and handles deletion by calling FUNCTION_REPOSITORY.deleteFunction, directly matching the documented behavior.",
    "ground_truth_relationship": "The code implements the documented DELETE /functions/{name} endpoint by providing a method that accepts a function name and optional force parameter, deleting the specified function through the repository and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented DELETE /functions/{name} endpoint for deleting functions, capturing the core relationship between the code and documentation",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.getFunction",
    "predicted_relationship": "The documentation explicitly details the 'getFunction' endpoint (GET /functions/{name}). The FunctionService.getFunction method is annotated with @Get and calls FUNCTION_REPOSITORY.getFunction to retrieve a function, thereby directly implementing the documented functionality.",
    "ground_truth_relationship": "The code implements the documented GET /functions/{name} endpoint by creating a controller method that accepts a name parameter and returns a JSON response containing the function details from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures that the code implements the GET /functions/{name} endpoint to retrieve function details, matching the ground truth's core message about retrieving function data via a name parameter and returning JSON",
      "error_type": ""
    }
  },
  {
    "document_text": "# FunctionsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createFunction**](FunctionsApi.md#createFunction) | **POST** /functions | Create a function. WARNING: This API is experimental and will change in future versions.  |\n| [**deleteFunction**](FunctionsApi.md#deleteFunction) | **DELETE** /functions/{name} | Delete a function |\n| [**getFunction**](FunctionsApi.md#getFunction) | **GET** /functions/{name} | Get a function |\n| [**listFunctions**](FunctionsApi.md#listFunctions) | **GET** /functions | List functions |",
    "artifact_title": "FunctionService.listFunctions",
    "predicted_relationship": "The documentation explicitly mentions the 'listFunctions' endpoint (GET /functions) for listing functions. The FunctionService.listFunctions method is annotated with @Get and implements this endpoint by calling FUNCTION_REPOSITORY.listFunctions, matching the documentation.",
    "ground_truth_relationship": "The code implements the documented GET /functions endpoint by defining a listFunctions method that accepts catalog name, schema name, pagination parameters, and returns an HTTP response containing the list of functions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship - that the code implements the documented GET /functions endpoint via a listFunctions method that returns function data. While the prediction is less detailed about parameters, it captures the essential functionality match.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.createVolume",
    "predicted_relationship": "The documentation explicitly references the 'createVolume' endpoint (POST /volumes) and the link [**createVolume**] clearly indicates the API for creating a volume. This directly maps to the VolumeService.createVolume method which implements the API functionality.",
    "ground_truth_relationship": "The code implements the POST /volumes endpoint documented in the API table by defining a method that accepts a CreateVolumeRequestContent object and delegates to VOLUME_REPOSITORY to create a new volume, returning the result as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented POST /volumes endpoint for creating volumes, with both descriptions highlighting the core relationship between the API documentation and implementation.",
      "error_type": null
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.deleteVolume",
    "predicted_relationship": "The documentation lists the 'deleteVolume' endpoint (DELETE /volumes/{name}) with an explicit reference. VolumeService.deleteVolume is the method that handles this endpoint in the code.",
    "ground_truth_relationship": "The code implements the documented DELETE /volumes/{name} endpoint by accepting a volume's full name as a path parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately identifies that the code implements the documented DELETE /volumes/{name} endpoint, even though it doesn't detail the HTTP response and repository delegation aspects mentioned in the ground truth",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.getVolume",
    "predicted_relationship": "The documentation clearly defines the 'getVolume' endpoint (GET /volumes/{name}). This endpoint is implemented in the server code by the VolumeService.getVolume method.",
    "ground_truth_relationship": "The code implements the documented GET /volumes/{name} endpoint by providing a method that retrieves volume information based on a full name parameter and returns it as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented GET /volumes/{name} endpoint through the getVolume functionality, which aligns with the ground truth's description of retrieving volume information via a GET endpoint.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.listVolumes",
    "predicted_relationship": "The 'listVolumes' endpoint (GET /volumes) is explicitly mentioned in the documentation. The VolumeService.listVolumes method is responsible for implementing this endpoint.",
    "ground_truth_relationship": "The code implements the 'listVolumes' API endpoint documented in the table by defining a GET handler that accepts query parameters for catalog_name, schema_name, pagination controls, and browse options, returning the results as JSON.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is the listVolumes GET endpoint implementation as documented. While it omits implementation details about parameters and JSON response, it captures the core relationship accurately.",
      "error_type": ""
    }
  },
  {
    "document_text": "# VolumesApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createVolume**](VolumesApi.md#createVolume) | **POST** /volumes | Create a Volume |\n| [**deleteVolume**](VolumesApi.md#deleteVolume) | **DELETE** /volumes/{name} | Delete a Volume |\n| [**getVolume**](VolumesApi.md#getVolume) | **GET** /volumes/{name} | Get a Volume |\n| [**listVolumes**](VolumesApi.md#listVolumes) | **GET** /volumes | List Volumes |\n| [**updateVolume**](VolumesApi.md#updateVolume) | **PATCH** /volumes/{name} | Update a Volume |",
    "artifact_title": "VolumeService.updateVolume",
    "predicted_relationship": "The updateVolume endpoint (PATCH /volumes/{name}) is explicitly detailed in the documentation. This functionality is implemented by the VolumeService.updateVolume method in the server code.",
    "ground_truth_relationship": "The code implements the documented PATCH /volumes/{name} API endpoint by defining an updateVolume method that accepts a volume name and update request content, returning the updated volume data as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented PATCH /volumes/{name} endpoint through the updateVolume method, which is the key relationship. While it omits details about parameters and return type, these are minor omissions that don't affect the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogService.createCatalog",
    "predicted_relationship": "The documentation defines a 'createCatalog' operation with signature 'CatalogInfo createCatalog(CreateCatalog)'. The CatalogService.createCatalog method (artifact 11) is the HTTP POST endpoint that directly implements this API by accepting a CreateCatalog request and returning a CatalogInfo (wrapped in an HttpResponse). Its name and behavior directly correspond to the documented functionality.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateCatalog object via POST, persisting it through CATALOG_REPOSITORY, and returning a JSON response matching the documented CatalogInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship accurately - it identifies that the code implements the documented API endpoint, accepting CreateCatalog and returning CatalogInfo via HTTP POST. While it doesn't explicitly mention CATALOG_REPOSITORY, this is a minor implementation detail.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createCatalog\"></a>\n# **createCatalog**\n> CatalogInfo createCatalog(CreateCatalog)\n\nCreate a catalog\n\n    Creates a new catalog instance. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateCatalog** | [**CreateCatalog**](../Models/CreateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.addCatalog",
    "predicted_relationship": "Within the implementation of CatalogService.createCatalog, the actual creation and persistence of the catalog is delegated to the CatalogRepository.addCatalog method (artifact 6). This method accepts a CreateCatalog object and returns a CatalogInfo, which exactly matches the documented signature, although it is not explicitly mentioned in the documentation snippet.",
    "ground_truth_relationship": "The addCatalog implementation validates SQL object names, creates a CatalogInfo instance with a UUID and properties, and persists it to the database in a transaction, fulfilling the documented createCatalog API endpoint's purpose of creating a new catalog instance.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures that this is about catalog creation and mentions the method signature, but incorrectly states that the work is delegated to CatalogRepository.addCatalog when the code shows direct implementation within the addCatalog method itself",
      "error_type": "incorrect_delegation_flow"
    }
  },
  {
    "document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.deleteTable",
    "predicted_relationship": "The documentation snippet describes the 'deleteTable(full_name)' operation with a DELETE HTTP method and a parameter 'full_name'. 'TableService.deleteTable' is annotated with @Delete(\"/{full_name}\") and accepts a 'fullName' parameter, which exactly matches the documented API specification.",
    "ground_truth_relationship": "The code implements a REST DELETE endpoint that matches the documented API specification by accepting a full_name parameter, invoking TABLE_REPOSITORY.deleteTable(), and returning a 200 OK response with no content body.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - it identifies the DELETE endpoint, the full_name parameter, and the mapping between them. While it doesn't mention the specific HTTP response details, this is a minor omission that doesn't affect the fundamental relationship understanding.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteTable\"></a>\n# **deleteTable**\n> oas_any_type_not_mapped deleteTable(full\\_name)\n\nDelete a table\n\n    Deletes a table from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.deleteTable",
    "predicted_relationship": "Although not directly exposed in the API documentation, 'TableRepository.deleteTable' is invoked by 'TableService.deleteTable' to perform the underlying deletion logic of a table. It is an essential intermediate step in the deletion operation.",
    "ground_truth_relationship": "The code implements the documented table deletion operation by removing the table's database entry, deleting its physical files (for managed tables), and cleaning up associated properties, while the documentation describes the API endpoint that exposes this functionality with a 'full_name' parameter.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies this as table deletion functionality but incorrectly frames it as being called by TableService.deleteTable rather than being the direct implementation of the documented API endpoint",
      "error_type": "incorrect_component_relationship"
    }
  },
  {
    "document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "FunctionService.createFunction",
    "predicted_relationship": "The documentation snippet defines the createFunction API with a signature 'FunctionInfo createFunction(CreateFunctionRequest)' and specifies HTTP headers. The FunctionService.createFunction method is annotated with @Post and handles HTTP requests by accepting a CreateFunctionRequest and returning an HTTP response containing the FunctionInfo. This directly implements the documented API endpoint.",
    "ground_truth_relationship": "The code implements the documented REST API endpoint by exposing a POST method that accepts a CreateFunctionRequest object, delegates to FUNCTION_REPOSITORY for function creation, and returns the result wrapped in an HTTP JSON response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture the core relationship - a POST endpoint that accepts a CreateFunctionRequest, creates a function through a repository, and returns the result as JSON. The predicted description covers all key aspects of the relationship between the code and documentation.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createFunction\"></a>\n# **createFunction**\n> FunctionInfo createFunction(CreateFunctionRequest)\n\nCreate a function. WARNING: This API is experimental and will change in future versions. \n\n    Creates a new function instance. WARNING: This API is experimental and will change in future versions. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateFunctionRequest** | [**CreateFunctionRequest**](../Models/CreateFunctionRequest.md)|  | [optional] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.createFunction",
    "predicted_relationship": "FunctionService.createFunction delegates the creation logic to FunctionRepository.createFunction. Although not mentioned explicitly in the documentation snippet, the repository method returns a FunctionInfo and executes the core functionality of creating a function instance, which matches the API's return type.",
    "ground_truth_relationship": "The code implements the documented createFunction API endpoint by validating the input function name, constructing a FunctionInfo object with all required properties, and persisting it in a database transaction while handling schema validation and duplicate function checks.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly notes that the method creates a function and returns FunctionInfo, but incorrectly states it delegates to FunctionRepository.createFunction when the code shows direct implementation with database persistence logic.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.createSchema",
    "predicted_relationship": "This method implements the core schema creation logic as defined by the documentation. Its signature 'SchemaInfo createSchema(CreateSchema)' exactly matches the documented API, and it takes a CreateSchema object, validates it, and returns a SchemaInfo object.",
    "ground_truth_relationship": "The code fully implements the documented API endpoint by validating the schema name, checking for existing schemas, persisting the new schema with its properties in a database transaction, and returning a SchemaInfo object as specified in the documentation's return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship correctly - it identifies that the method implements the documented API by taking a CreateSchema object and returning a SchemaInfo object. While it omits implementation details about validation and persistence that are mentioned in the ground truth, these are minor omissions that don't change the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaService.createSchema",
    "predicted_relationship": "This REST endpoint is designed to expose the createSchema functionality over HTTP. It accepts a CreateSchema object and returns an HttpResponse containing the SchemaInfo, thereby directly aligning with the documented API signature.",
    "ground_truth_relationship": "The code implements the documented REST endpoint by accepting a CreateSchema object via POST request and returning a JSON HTTP response containing the schema created through the SCHEMA_REPOSITORY.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the basic API structure but omits the crucial detail that this is specifically a POST endpoint and that it uses SCHEMA_REPOSITORY for creation. The return type description is also slightly imprecise.",
      "error_type": "significant_omission"
    }
  },
  {
    "document_text": "<a name=\"createSchema\"></a>\n# **createSchema**\n> SchemaInfo createSchema(CreateSchema)\n\nCreate a schema\n\n    Creates a new schema in the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateSchema** | [**CreateSchema**](../Models/CreateSchema.md)|  | [optional] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "SchemaCli.createSchema",
    "predicted_relationship": "This CLI method constructs a CreateSchema object and calls the createSchema function exposed by the schemasApi. Although it is a client\u2010side abstraction, it implicitly uses the same documented functionality to create a schema.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented createSchema endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is a client-side wrapper that calls the createSchema API endpoint, which aligns with the ground truth's description of it being a CLI wrapper for the createSchema endpoint",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"generateTemporaryVolumeCredentials\"></a>\n# **generateTemporaryVolumeCredentials**\n> GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)\n\nGenerate temporary volume credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryVolumeCredential** | [**GenerateTemporaryVolumeCredential**](../Models/GenerateTemporaryVolumeCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryVolumeCredentialResponse**](../Models/GenerateTemporaryVolumeCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
    "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
    "predicted_relationship": "The documentation snippet defines an API endpoint 'generateTemporaryVolumeCredentials' with the signature 'GenerateTemporaryVolumeCredentialResponse generateTemporaryVolumeCredentials(GenerateTemporaryVolumeCredential)'. This is explicitly implemented in the method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials', which is annotated with @Post and accepts a GenerateTemporaryVolumeCredential parameter while returning a GenerateTemporaryVolumeCredentialResponse.",
    "ground_truth_relationship": "The code implements the documented API endpoint by validating the volume ID, retrieving storage location information, and returning temporary AWS S3 credentials for S3 volumes or empty credentials for local storage, while matching the specified request/response types and HTTP POST behavior.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies the API endpoint signature and POST behavior, but misses the crucial logic of checking storage location and generating different credentials for S3 vs local storage, which is a key part of the implementation's functionality.",
      "error_type": "major_omission"
    }
  },
  {
    "document_text": "# TemporaryVolumeCredentialsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**generateTemporaryVolumeCredentials**](TemporaryVolumeCredentialsApi.md#generateTemporaryVolumeCredentials) | **POST** /temporary-volume-credentials | Generate temporary volume credentials. |",
    "artifact_title": "TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials",
    "predicted_relationship": "The documentation snippet explicitly references the 'generateTemporaryVolumeCredentials' operation (POST /temporary-volume-credentials) as part of the TemporaryVolumeCredentialsApi. This maps directly to the method 'TemporaryVolumeCredentialsService.generateTemporaryVolumeCredentials', which implements the generation of temporary volume credentials.",
    "ground_truth_relationship": "The code implements the documented POST endpoint '/temporary-volume-credentials' by handling volume credential generation requests, validating the volume ID, and returning temporary AWS credentials for S3 volumes or empty credentials for local filesystems.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - both describe a POST endpoint for generating temporary volume credentials. While the ground truth provides more implementation details, the predicted description gets the fundamental mapping correct.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableService.getTable",
    "predicted_relationship": "The documentation snippet describes a GET operation that accepts a 'full_name' parameter and returns a TableInfo object. The method 'TableService.getTable' is annotated with @Get and directly maps the 'full_name' parameter from the HTTP request, thereby explicitly implementing the documented API behavior.",
    "ground_truth_relationship": "The code implements a REST endpoint annotated with @Get that takes a full_name parameter, validates it's not null, retrieves table information via TABLE_REPOSITORY, and returns it as JSON - matching the documented API endpoint behavior, parameter requirements, and TableInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - a GET endpoint that takes a full_name parameter and returns TableInfo. While it omits the null check and TABLE_REPOSITORY details, these are minor implementation details that don't affect the high-level relationship.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"getTable\"></a>\n# **getTable**\n> TableInfo getTable(full\\_name)\n\nGet a table\n\n    Gets a table for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the table. | [default to null] |\n\n### Return type\n\n[**TableInfo**](../Models/TableInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "TableRepository.getTable",
    "predicted_relationship": "Although not directly referenced in the documentation snippet, 'TableRepository.getTable' is the method invoked by 'TableService.getTable' to fetch the actual table information from the persistence layer. This aligns with the documented behavior of returning a TableInfo object by processing the 'full_name' parameter.",
    "ground_truth_relationship": "The code implements the documented getTable operation by parsing a fully qualified table name into catalog, schema, and table components, retrieving the table information from a database session, and returning a TableInfo object with attached properties, exactly matching the documented input parameter and return type specifications.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description gets the core idea that the method retrieves table information and returns TableInfo, but incorrectly states it's called by TableService.getTable and discusses a repository layer relationship that isn't evident in the code or documentation",
      "error_type": "added_incorrect_context"
    }
  },
  {
    "document_text": "<a name=\"getCatalog\"></a>\n# **getCatalog**\n> CatalogInfo getCatalog(name)\n\nGet a catalog\n\n    Gets the specified catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.getCatalog",
    "predicted_relationship": "The documentation specifies a GET operation named 'getCatalog' with a String parameter 'name' that returns a CatalogInfo. The CatalogService.getCatalog method directly implements this REST endpoint by accepting the 'name' parameter and wrapping the result from the repository into an HTTP JSON response. Its signature and behavior precisely match the documented functionality.",
    "ground_truth_relationship": "The code implements the documented REST GET endpoint by accepting a name parameter and returning a JSON response containing catalog information, exactly matching the API specification's path parameter and response format requirements.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the same core relationship - that the code implements a GET endpoint that takes a name parameter and returns catalog info as JSON, matching the documentation's specification.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.listFunctions",
    "predicted_relationship": "The documentation snippet details the 'listFunctions' API, which directly matches the signature and parameters of the FunctionService.listFunctions method. It accepts catalog_name, schema_name, max_results, and page_token as parameters and returns a ListFunctionsResponse, making it an explicit implementation of the documented API.",
    "ground_truth_relationship": "The code implements a REST GET endpoint that takes the exact parameters specified in the documentation (catalog_name, schema_name, optional max_results, and optional page_token) and delegates the actual function listing to a repository layer, returning the results as a JSON HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions capture the core relationship - a GET endpoint that takes catalog_name, schema_name, max_results, and page_token parameters to list functions and return JSON results. The predicted description accurately captures the main API functionality and parameter matching.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listFunctions\"></a>\n# **listFunctions**\n> ListFunctionsResponse listFunctions(catalog\\_name, schema\\_name, max\\_results, page\\_token)\n\nList functions\n\n    List functions within the specified parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **catalog\\_name** | **String**| Name of parent catalog for functions of interest. | [default to null] |\n| **schema\\_name** | **String**| Parent schema of functions. | [default to null] |\n| **max\\_results** | **Integer**| Maximum number of functions to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query. | [optional] [default to null] |\n\n### Return type\n\n[**ListFunctionsResponse**](../Models/ListFunctionsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.listFunctions",
    "predicted_relationship": "While the documentation does not directly mention repository operations, the FunctionService.listFunctions method (which is explicitly documented) internally calls FunctionRepository.listFunctions to retrieve the data. This makes the repository method an implicit part of the implementation chain for the 'listFunctions' API.",
    "ground_truth_relationship": "The code implements the documented behavior by retrieving function records from a database within a read-only transaction, transforming FunctionInfoDAO objects to FunctionInfo objects with attached properties, and returning them in a ListFunctionsResponse with pagination support through maxResults and pageToken parameters.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies that listFunctions is implemented through repository operations, but incorrectly focuses on FunctionRepository.listFunctions when the code actually shows direct database session operations and transformation logic.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.deleteSchema",
    "predicted_relationship": "This method is a REST endpoint that directly implements the 'deleteSchema' functionality as documented. It is annotated with @Delete and takes 'full_name' and 'force' parameters that match the documentation's signature.",
    "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a required fullName path parameter and optional force parameter, delegating schema deletion to SCHEMA_REPOSITORY, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship between the code and documentation - it describes a DELETE endpoint that handles schema deletion with the correct parameters and functionality.",
      "error_type": "none"
    }
  },
  {
    "document_text": "<a name=\"deleteSchema\"></a>\n# **deleteSchema**\n> oas_any_type_not_mapped deleteSchema(full\\_name, force)\n\nDelete a schema\n\n    Deletes the specified schema from the parent catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.deleteSchema",
    "predicted_relationship": "While not directly referenced in the documentation, SchemaService.deleteSchema internally delegates to SchemaRepository.deleteSchema to execute the actual removal of the schema from the database. This repository method handles the lower\u2010level deletion logic.",
    "ground_truth_relationship": "The code implements the documented schema deletion endpoint by recursively removing child tables, volumes, and functions before deleting the schema itself, while respecting the 'force' parameter and throwing a NOT_FOUND exception when the schema doesn't exist.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description mentions schema deletion but incorrectly states it's delegated to a SchemaRepository class, while the code shows direct implementation with child element deletion logic",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.getFunction",
    "predicted_relationship": "The documentation snippet clearly defines the 'getFunction' operation (with the signature 'FunctionInfo getFunction(name)') which directly corresponds to the API endpoint in FunctionService.getFunction. This method is annotated with @Get and returns the function information as JSON, matching the documented behavior.",
    "ground_truth_relationship": "The code implements a REST GET endpoint that accepts a fully-qualified function name as a path parameter and returns a JSON response containing the function details, directly mapping to the documented API endpoint specification and its expected FunctionInfo return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - a GET endpoint that retrieves function information by name and returns it as JSON, matching the documented behavior and return type.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getFunction\"></a>\n# **getFunction**\n> FunctionInfo getFunction(name)\n\nGet a function\n\n    Gets a function from within a parent catalog and schema.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**FunctionInfo**](../Models/FunctionInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.getFunction",
    "predicted_relationship": "While not directly visible in the documentation snippet, the FunctionService.getFunction method internally delegates the retrieval operation to FunctionRepository.getFunction. This repository method performs the actual database lookup based on the fully-qualified function name and returns a FunctionInfo, thus forming an implicit part of the overall getFunction functionality.",
    "ground_truth_relationship": "The code implements the documented function retrieval by parsing a fully-qualified three-part function name (catalog.schema.function), querying a database session for the function details, and returning a FunctionInfo object as specified in the documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures the basic idea of retrieving function info but incorrectly states it delegates to FunctionRepository.getFunction when the code shows direct database session handling and DAO usage",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.deleteCatalog",
    "predicted_relationship": "The documentation snippet explicitly describes the deleteCatalog operation with parameters 'name' and 'force' and details the HTTP request (DELETE, headers, etc.). The 'CatalogService.deleteCatalog' artifact is the REST endpoint implementation with a @Delete annotation that directly matches the documented functionality.",
    "ground_truth_relationship": "The code implements a DELETE endpoint that directly mirrors the documented API behavior by accepting a required 'name' parameter and optional 'force' parameter, invoking the catalog repository's deletion logic, and returning an HTTP 200 OK response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions identify the same core relationship - a DELETE endpoint that accepts 'name' and optional 'force' parameters to delete a catalog. The predicted description captures the essential API behavior and matches the ground truth's understanding.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"deleteCatalog\"></a>\n# **deleteCatalog**\n> oas_any_type_not_mapped deleteCatalog(name, force)\n\nDelete a catalog\n\n    Deletes the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **force** | **Boolean**| Force deletion even if the catalog is not empty. | [optional] [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.deleteCatalog",
    "predicted_relationship": "Although not mentioned directly in the documentation snippet, 'CatalogRepository.deleteCatalog' is invoked by 'CatalogService.deleteCatalog' to perform the actual deletion of a catalog from persistent storage. This makes it an implicit, but necessary, component of the overall deleteCatalog operation.",
    "ground_truth_relationship": "The code implements the documented deleteCatalog operation by handling catalog deletion with optional force removal of schemas, throwing appropriate exceptions if the catalog is not found (ErrorCode.NOT_FOUND) or contains schemas without force flag (ErrorCode.FAILED_PRECONDITION), and managing the transaction across catalog, schema, and property deletions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description incorrectly states that CatalogRepository.deleteCatalog is invoked by CatalogService.deleteCatalog, which is not shown in the code. However, it does understand that the operation is about catalog deletion from persistent storage.",
      "error_type": "incorrect_component_relationship"
    }
  },
  {
    "document_text": "<a name=\"generateTemporaryTableCredentials\"></a>\n# **generateTemporaryTableCredentials**\n> GenerateTemporaryTableCredentialResponse generateTemporaryTableCredentials(GenerateTemporaryTableCredential)\n\nGenerate temporary table credentials.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **GenerateTemporaryTableCredential** | [**GenerateTemporaryTableCredential**](../Models/GenerateTemporaryTableCredential.md)|  | [optional] |\n\n### Return type\n\n[**GenerateTemporaryTableCredentialResponse**](../Models/GenerateTemporaryTableCredentialResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n",
    "artifact_title": "TemporaryTableCredentialsService.generateTemporaryTableCredentials",
    "predicted_relationship": "The documentation snippet explicitly describes an API endpoint for generating temporary table credentials with a signature that accepts a GenerateTemporaryTableCredential and returns a GenerateTemporaryTableCredentialResponse. The code artifact 'TemporaryTableCredentialsService.generateTemporaryTableCredentials' directly implements this functionality by handling the HTTP POST request and constructing the appropriate JSON response, thereby matching the documented behavior.",
    "ground_truth_relationship": "The code implements the documented API endpoint by checking if a table exists at a storage location, then either generating AWS S3 temporary credentials or returning empty credentials for local filesystems, matching the documented GenerateTemporaryTableCredentialResponse return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core functionality of generating temporary table credentials and correctly identifies the API endpoint signature and return type. While it doesn't detail the S3 vs local filesystem logic, this omission doesn't change the fundamental relationship being described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.getVolume",
    "predicted_relationship": "The documentation snippet specifies 'VolumeInfo getVolume(name)', and the method VolumeRepository.getVolume takes a three-level fully qualified name, splits it into catalog, schema, and volume, and returns a VolumeInfo object. This direct match in signature and functionality makes this an explicit trace.",
    "ground_truth_relationship": "The code implements the documented getVolume operation by splitting a three-level name parameter into catalog, schema, and volume components, validating the format, and returning a VolumeInfo object retrieved from the database through a DAO pattern.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core functionality of splitting a three-level name and returning VolumeInfo, matching the ground truth's description of the relationship between documentation and code",
      "error_type": "none"
    }
  },
  {
    "document_text": "# **getVolume**\n> VolumeInfo getVolume(name)\n\nGet a Volume\n\n    Gets a volume for a specific catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.getVolume",
    "predicted_relationship": "VolumeService.getVolume is the HTTP endpoint that calls VOLUME_REPOSITORY.getVolume internally. Although the documentation focuses on the business logic of retrieving a volume, this service method wraps the repository call and exposes it as an API endpoint, making it an implicit link in the traceability chain.",
    "ground_truth_relationship": "The code implements the documented GET endpoint by accepting a required 'full_name' path parameter and an optional 'include_browse' query parameter, returning a JSON response containing volume information from the repository, though the documentation doesn't mention the optional parameter.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship that this is an HTTP endpoint calling VOLUME_REPOSITORY.getVolume and exposing it as an API. While it omits details about parameters, this doesn't change the fundamental relationship being described.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeService.deleteVolume",
    "predicted_relationship": "The documentation fragment describes the 'deleteVolume' operation with a string parameter 'name' for deleting a volume. The 'VolumeService.deleteVolume' method is annotated with @Delete and accepts a parameter (named 'full_name') that corresponds in purpose to the documented 'name', thereby directly implementing the documented REST API endpoint.",
    "ground_truth_relationship": "The code directly implements the documented DELETE endpoint by accepting a fully qualified volume name parameter, delegating the deletion to VOLUME_REPOSITORY, and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description captures the core relationship that the code implements a DELETE endpoint for volumes using a name/full_name parameter, matching the documented functionality.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **deleteVolume**\n> oas_any_type_not_mapped deleteVolume(name)\n\nDelete a Volume\n\n    Deletes a volume from the specified parent catalog and schema. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.deleteVolume",
    "predicted_relationship": "The 'VolumeService.deleteVolume' method calls the VOLUME_REPOSITORY.deleteVolume function to actually remove the volume from the underlying persistent store. This repository layer method, while not directly exposed in the API documentation, is an essential internal step in the deletion process, making its relationship implicit.",
    "ground_truth_relationship": "The code implements a documented Volume deletion operation by validating a three-part volume name, managing database transactions to remove the volume record, and cleaning up storage directories for managed volumes.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description mentions volume deletion via a repository layer that isn't actually present in the code. While it correctly identifies that the method deletes volumes, it misrepresents the implementation which directly uses Session operations and file system cleanup.",
      "error_type": "incorrect_implementation_details"
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaService.getSchema",
    "predicted_relationship": "The documentation snippet describes a GET operation named 'getSchema' that returns a SchemaInfo object given a full_name parameter. The SchemaService.getSchema method (artifact_id 42) directly implements this API endpoint; it is annotated with @Get, takes the 'full_name' parameter, and returns a JSON representation of the SchemaInfo, thereby directly matching the documented behavior.",
    "ground_truth_relationship": "The code implements the documented GET endpoint with path parameter 'full_name' by returning a JSON HTTP response containing schema information retrieved from SCHEMA_REPOSITORY.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - a GET endpoint that takes a full_name parameter and returns schema information as JSON. The specifics about using SCHEMA_REPOSITORY are minor implementation details that don't affect the high-level relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"getSchema\"></a>\n# **getSchema**\n> SchemaInfo getSchema(full\\_name)\n\nGet a schema\n\n    Gets the specified schema for a catalog. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **full\\_name** | **String**| Full name of the schema. | [default to null] |\n\n### Return type\n\n[**SchemaInfo**](../Models/SchemaInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "SchemaRepository.getSchema",
    "predicted_relationship": "Although the documentation does not mention the underlying data-access details, SchemaService.getSchema (the explicit implementation) delegates the retrieval of SchemaInfo to SchemaRepository.getSchema (artifact_id 37). This repository method contains the business logic to fetch and convert the schema from persistence, thereby indirectly supporting the documented getSchema functionality.",
    "ground_truth_relationship": "The code implements the documented getSchema operation by retrieving a schema from a database session, converting it from DAO format to SchemaInfo, and attaching properties, while handling the specified error case for when the schema is not found.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description captures that getSchema retrieves schema information, but incorrectly states it delegates to SchemaRepository.getSchema when the code shows direct database access and conversion logic",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogService.updateCatalog",
    "predicted_relationship": "The documentation defines the 'updateCatalog' API operation with parameters (name, UpdateCatalog) and a return type of CatalogInfo. CatalogService.updateCatalog is the REST endpoint implementation that directly accepts these parameters and returns the updated catalog information in an HttpResponse. This method is the explicit implementation of the documented API.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that matches the documented API specifications by accepting a catalog name and UpdateCatalog object as parameters, invoking the repository layer, and returning a JSON HTTP response containing the updated CatalogInfo.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core relationship - that this is an implementation of the documented API endpoint for updating catalogs, with matching parameters and return types.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"updateCatalog\"></a>\n# **updateCatalog**\n> CatalogInfo updateCatalog(name, UpdateCatalog)\n\nUpdate a catalog\n\n    Updates the catalog that matches the supplied name. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The name of the catalog. | [default to null] |\n| **UpdateCatalog** | [**UpdateCatalog**](../Models/UpdateCatalog.md)|  | [optional] |\n\n### Return type\n\n[**CatalogInfo**](../Models/CatalogInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "CatalogRepository.updateCatalog",
    "predicted_relationship": "Although not mentioned explicitly in the documentation snippet, CatalogRepository.updateCatalog is used by the service layer to perform the actual database update for the catalog. It takes the 'name' and 'UpdateCatalog' object, applies the update logic, and returns the updated CatalogInfo. This internal dependency is an implicit part of the updateCatalog API chain.",
    "ground_truth_relationship": "The code implements the documented API endpoint by validating the new catalog name, managing a database transaction to update the catalog's properties, name, and comment in a CatalogInfoDAO object, and handling error cases like NOT_FOUND and ALREADY_EXISTS as specified in the documentation's parameters and return type.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description correctly identifies that this is about catalog updates, but incorrectly states it uses CatalogRepository when the code directly implements the update logic using Session/Transaction operations. This represents a significant misunderstanding of the implementation approach.",
      "error_type": "implementation_misunderstanding"
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.createCatalog",
    "predicted_relationship": "The documentation explicitly lists the 'createCatalog' endpoint (HTTP POST /catalogs) for creating a catalog. This artifact directly implements that functionality in the service layer.",
    "ground_truth_relationship": "The code implements the documented POST /catalogs endpoint through a @Post-annotated method that accepts a CreateCatalog object and returns a JSON response from the catalog repository's add operation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship - that this code implements the documented POST /catalogs endpoint for creating catalogs. While it omits implementation details like the JSON response and CreateCatalog parameter, it correctly identifies the main functionality and purpose.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.deleteCatalog",
    "predicted_relationship": "The documentation explicitly details the 'deleteCatalog' endpoint (HTTP DELETE /catalogs/{name}). This artifact implements the deletion of a catalog per the API specification.",
    "ground_truth_relationship": "Rep handler method that accepts a catalog name parameter and an optional force parameter, and returns a 200 OK response after delegating the deletion to a repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures that this is the DELETE catalog endpoint implementation from the API specification, which aligns with the ground truth describing a handler method for catalog deletion. While it omits some implementation details like the force parameter and response code, it gets the core relationship correct.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.getCatalog",
    "predicted_relationship": "The documentation explicitly mentions the 'getCatalog' endpoint (HTTP GET /catalogs/{name}). This artifact implements the functionality to retrieve a catalog.",
    "ground_truth_relationship": "The code implements the documented GET /catalogs/{name} endpoint by creating a method annotated with @Get that takes a name parameter and returns a catalog object as JSON via the repository layer.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies the core relationship - that this code implements the GET /catalogs/{name} endpoint for retrieving a catalog. While it omits implementation details about parameters and JSON response handling, these are minor details that don't affect the main relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.listCatalogs",
    "predicted_relationship": "The documentation explicitly defines the 'listCatalogs' endpoint (HTTP GET /catalogs) to list available catalogs. This artifact implements that functionality in the service layer.",
    "ground_truth_relationship": "The listCatalogs code implements the documented GET /catalogs endpoint by accepting optional pagination parameters (max_results and page_token) and returning a JSON response of catalogs from the repository.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that this is an implementation of the listCatalogs GET endpoint for retrieving catalogs, which aligns with the ground truth relationship. While it doesn't mention the pagination parameters, this is a minor detail omission that doesn't affect the core relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# CatalogsApi\n\nAll URIs are relative to *http://localhost:8080/api/2.1/unity-catalog*\n\n| Method | HTTP request | Description |\n|------------- | ------------- | -------------|\n| [**createCatalog**](CatalogsApi.md#createCatalog) | **POST** /catalogs | Create a catalog |\n| [**deleteCatalog**](CatalogsApi.md#deleteCatalog) | **DELETE** /catalogs/{name} | Delete a catalog |\n| [**getCatalog**](CatalogsApi.md#getCatalog) | **GET** /catalogs/{name} | Get a catalog |\n| [**listCatalogs**](CatalogsApi.md#listCatalogs) | **GET** /catalogs | List catalogs |\n| [**updateCatalog**](CatalogsApi.md#updateCatalog) | **PATCH** /catalogs/{name} | Update a catalog |",
    "artifact_title": "CatalogService.updateCatalog",
    "predicted_relationship": "The documentation explicitly states the 'updateCatalog' endpoint (HTTP PATCH /catalogs/{name}) for modifying an existing catalog. This artifact implements the logic for updating catalog details.",
    "ground_truth_relationship": "The code implements the documented PATCH /catalogs/{name} endpoint by providing a method that accepts a catalog name parameter and update payload, returning the updated catalog as JSON via HttpResponse.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the core relationship that this implements the PATCH endpoint for updating catalogs, which matches the ground truth description. While it omits some implementation details about parameters and return type, these are minor omissions that don't affect the fundamental relationship.",
      "error_type": "none"
    }
  },
  {
    "document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeService.updateVolume",
    "predicted_relationship": "This method is the REST endpoint that directly implements the updateVolume operation described in the documentation. It accepts a three\u2010level volume identifier and an UpdateVolumeRequestContent as parameters and returns a JSON representation of a VolumeInfo, precisely matching the documented API signature.",
    "ground_truth_relationship": "The code implements a PATCH endpoint that takes a fully qualified volume name and UpdateVolumeRequestContent object as specified in the documentation, delegating the actual update operation to VOLUME_REPOSITORY and wrapping the returned VolumeInfo in an HTTP response.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately capture the core relationship - it's a REST endpoint that implements volume updates by taking a full name and UpdateVolumeRequestContent as input, returning VolumeInfo as JSON response. Minor differences in details (like mentioning VOLUME_REPOSITORY delegation) don't affect the fundamental relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "# **updateVolume**\n> VolumeInfo updateVolume(name, UpdateVolumeRequestContent)\n\nUpdate a Volume\n\n    Updates the specified volume under the specified parent catalog and schema.  Currently only the name or the comment of the volume could be updated. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The three-level (fully qualified) name of the volume | [default to null] |\n| **UpdateVolumeRequestContent** | [**UpdateVolumeRequestContent**](../Models/UpdateVolumeRequestContent.md)|  | [optional] |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.updateVolume",
    "predicted_relationship": "This repository method contains the core business logic to execute the volume update\u2014validating inputs, updating the volume's name or comment, and returning the updated VolumeInfo. It is invoked by VolumeService.updateVolume, thereby fulfilling the behavior expected by the API documentation.",
    "ground_truth_relationship": "The code implements the documented volume update functionality by validating the new name if provided, handling the three-level namespace split, and using database transactions to modify either the volume's name or comment while preventing duplicate names and handling non-existent volumes as specified in the documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description accurately captures the high-level relationship between the code and documentation - the method implements volume updates by validating inputs and updating name/comment fields. While it omits some implementation details like transaction handling and namespace splitting, these are minor omissions that don't change the core relationship.",
      "error_type": null
    }
  },
  {
    "document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionService.deleteFunction",
    "predicted_relationship": "The documentation snippet describes a 'deleteFunction(name)' endpoint that deletes a function based on its fully-qualified name. 'FunctionService.deleteFunction' is annotated with @Delete and accepts a 'name' parameter (along with an optional 'force' parameter), directly matching the documented behavior.",
    "ground_truth_relationship": "The code implements the documented DELETE endpoint by accepting a name parameter and an optional force parameter (not mentioned in docs), calling FUNCTION_REPOSITORY.deleteFunction(), and returning an HTTP 200 OK response as specified in the OpenAPI documentation.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core functionality of deleting a function via a DELETE endpoint based on name parameter, matching the ground truth. Minor omission of HTTP status code and force parameter details does not affect the main relationship.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"deleteFunction\"></a>\n# **deleteFunction**\n> oas_any_type_not_mapped deleteFunction(name)\n\nDelete a function\n\n    Deletes the function that matches the supplied name.\n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **name** | **String**| The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__). | [default to null] |\n\n### Return type\n\n[**oas_any_type_not_mapped**](../Models/AnyType.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "FunctionRepository.deleteFunction",
    "predicted_relationship": "Although not explicitly mentioned in the documentation snippet, 'FunctionService.deleteFunction' internally calls 'FunctionRepository.deleteFunction' to perform the actual deletion from persistent storage. This makes the repository deletion method an integral, though implicit, part of the deleteFunction chain.",
    "ground_truth_relationship": "The code implements the documented deleteFunction API endpoint by validating and parsing a fully-qualified function name (catalog.schema.function), managing a database transaction to delete the corresponding FunctionInfoDAO record, and throwing appropriate exceptions for invalid names or missing functions.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "The predicted description claims the function relies on a FunctionRepository.deleteFunction call, which is not evident in the actual code. However, it correctly understands that this is about function deletion functionality.",
      "error_type": "architectural_misunderstanding"
    }
  },
  {
    "document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeRepository.createVolume",
    "predicted_relationship": "The documentation snippet specifies a function signature 'VolumeInfo createVolume(CreateVolumeRequestContent)' that creates a volume. This exactly matches the VolumeRepository.createVolume method, which accepts a CreateVolumeRequestContent and returns a VolumeInfo, directly implementing the documented functionality.",
    "ground_truth_relationship": "The code implements the documented createVolume operation by validating inputs, creating a VolumeInfo object with a UUID, validating volume type and storage location, and persisting it to the database within a transaction while enforcing schema existence and volume uniqueness constraints.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "partially_correct",
      "justification": "While the predicted description correctly identifies the method signature and basic purpose of creating a volume, it misses crucial implementation aspects described in the ground truth like input validation, database persistence, transaction handling, and constraint checks which are essential to the function's operation.",
      "error_type": "major_omission"
    }
  },
  {
    "document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeService.createVolume",
    "predicted_relationship": "This method acts as the REST endpoint exposing the createVolume operation. It wraps the call to VolumeRepository.createVolume by converting its result into an HTTP response, thereby exposing the functionality described in the documentation.",
    "ground_truth_relationship": "The code implements the documented API endpoint by accepting a CreateVolumeRequestContent parameter and returning a JSON HTTP response containing the created volume information, matching the documented input/output specifications and HTTP headers.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly captures the core functionality of the code as a REST endpoint that wraps the volume creation operation and returns an HTTP response, aligning with the documented API behavior.",
      "error_type": null
    }
  },
  {
    "document_text": "# **createVolume**\n> VolumeInfo createVolume(CreateVolumeRequestContent)\n\nCreate a Volume\n\n    Creates a new volume. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **CreateVolumeRequestContent** | [**CreateVolumeRequestContent**](../Models/CreateVolumeRequestContent.md)|  | |\n\n### Return type\n\n[**VolumeInfo**](../Models/VolumeInfo.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json",
    "artifact_title": "VolumeCli.createVolume",
    "predicted_relationship": "This method is part of the CLI client that invokes the createVolume operation by calling the underlying VolumesApi. Although it does not implement the operation itself, it demonstrates how the documented API functionality is consumed by client applications.",
    "ground_truth_relationship": "The code implements a CLI wrapper for the documented createVolume endpoint.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "Both descriptions accurately characterize the code as a CLI wrapper/client that interfaces with the documented createVolume API endpoint. The predicted description correctly identifies it as client-side code that invokes the underlying API operation.",
      "error_type": ""
    }
  },
  {
    "document_text": "<a name=\"listCatalogs\"></a>\n# **listCatalogs**\n> ListCatalogsResponse listCatalogs(page\\_token, max\\_results)\n\nList catalogs\n\n    Lists the available catalogs. There is no guarantee of a specific ordering of the elements in the list. \n\n### Parameters\n\n|Name | Type | Description  | Notes |\n|------------- | ------------- | ------------- | -------------|\n| **page\\_token** | **String**| Opaque pagination token to go to next page based on previous query.  | [optional] [default to null] |\n| **max\\_results** | **Integer**| Maximum number of catalogs to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  | [optional] [default to null] |\n\n### Return type\n\n[**ListCatalogsResponse**](../Models/ListCatalogsResponse.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: Not defined\n- **Accept**: application/json",
    "artifact_title": "CatalogService.listCatalogs",
    "predicted_relationship": "The documentation explicitly describes the 'listCatalogs' endpoint, including its parameters (page_token and max_results) and its return type of ListCatalogsResponse. The 'CatalogService.listCatalogs' method is the server-side REST endpoint that implements this functionality by processing these parameters and returning the appropriate response.",
    "ground_truth_relationship": "The code implements the documented REST endpoint by accepting optional maxResults and pageToken parameters, making a repository call, and returning a JSON response containing the list of catalogs in the format specified by ListCatalogsResponse.",
    "traceability_granularity": "Method",
    "evaluation": {
      "alignment_label": "correct",
      "justification": "The predicted description correctly identifies that the code implements the documented REST endpoint with the specified parameters and return type, capturing the core relationship between the documentation and implementation.",
      "error_type": null
    }
  }
]